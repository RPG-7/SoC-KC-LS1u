
/*************************************I/O地址和名称***************************************/


@0xC00000 unsigned char D0_8080;@
@0xC00001 unsigned char D1_8080;@
@0xC00002 unsigned char CS_8080;@
@0xC00002 unsigned char INT_8080;@

@0xC00004 unsigned char SPI_D;@
@0xC00005 unsigned char SPI_CS;@
@0xC00005 unsigned char SPI_INT;@
@0xC00006 unsigned char SPI_S;@

@0xC00007 unsigned char XT_C;@

@0xC00008 unsigned char CT0;@
@0xC00009 unsigned char CT1;@
@0xC0000A unsigned char CT2;@
@0xC0000B unsigned char CT3;@
@0xC0000C unsigned char CTVGA_C = 0x06;@

@0x400000 unsigned char SROM_L[2097152];@
@0x600000 unsigned char SROM_H[2097152];@
@0x800000 unsigned char VRAM[65536];@





/*

**********************************ENC28J60、内存卡与SPI总线设备控制器的连接定义*********************************************


就是接到 "KC_LS1u_SPI_C" 和 "KC_LS1u_SPI_D" 这两片PCB上..


内存卡是接到J7接口;

内存卡的 "VCC" 接 "3V";
内存卡的 "GND" 接 "GND";
内存卡的 "MISO" 接 "SI";
内存卡的 "MOSI" 接 "SO";
内存卡的 "SCK" 接 "SCK";
内存卡的 "CS" 接 "S_CS0";


ENC28J60是接到J8接口;

ENC28J60的 "VCC" 接 "3V";
ENC28J60的 "GND" 接 "GND";
ENC28J60的 "SO" 接 "SI";
ENC28J60的 "SI" 接 "SO";
ENC28J60的 "SCK" 接 "SCK";
ENC28J60的 "CS" 接 "S_CS4";
ENC28J60的 "RESET" 接 "RST";
ENC28J60的 "INT" 接 "S_INT0";



*/
















/*
********************************************************I/O接口说明************************************************************


"KC_LS1u_CLK_RST_IO_PS" PCB的外设接口说明.
_________________________________________________________________________________________________________________________

1.8080并口总线;

  这里的8080并口可以接常见并口的TFT液晶、CH375模块等设备, 本机的8080并口接口位置在最底

层PCB "KC_LS1u_CLK_RST_IO_PS", 这片PCB的J5、J6、J7、J8接口就是8080并口总线;



(1).接口定义.

GND : 电源地,接设备的 "GND";

VCC : 电源正,接设备的 "VCC";

RST : 复位信号,接设备的 "RST",在按下 "BOOT" 开机的瞬间会发出一个低电平复位信号,使设备完成复位;

A0  : 命令寄存器/数据寄存器选择线,  8080并口定义,有一根线控制命令寄存器/数据寄存器的选择, 接设备的 "A0"或"RS";

RD  : 设备读信号,低电平有效, 接设备的 "RD";

WR  : 设备写信号,低电平有效, 接设备的 "WR";

D0~D7 : 8位数据总线, 接设备的 "D0" ~ "D7";

CS0~CS7 : 8根设备片选信号线,低电平有效,可以片选8个设备, 接设备的 "CS";

IT0~IT7 : 8根设备中断信号输入线, 接设备的中断信号线 "INT";



(2).地址定义和操作方式.

  8080并口总线寄存器的内存地址为 C00000H ~ C00002H, 定义名称为 "D0_8080"、"D1_8080"、"CS_8080" 和 "INT_8080";



  "CS_8080" 和 "INT_8080"这里定义为同一个地址C00002H, 写入是控制设备的片选,读取是设备的中断信号,写入的时候操

作"CS_8080", 读取的时候操作"INT_8080";


通过表达式给 "CS_8080" 写入不同值时 "CS0" ~ "CS7" 8根设备片选信号线的状态:

CS_8080 = 0x00; //"CS0" ~ "CS7" 8根设备片选信号线都为高电平, 上电复位后的状态
CS_8080 = 0x08; //"CS0" 片选信号线为低电平, 选中接 "CS0" 的设备
CS_8080 = 0x09; //"CS1" 片选信号线为低电平, 选中接 "CS0" 的设备
CS_8080 = 0x0a; //"CS2" 片选信号线为低电平, 选中接 "CS0" 的设备
CS_8080 = 0x0b; //"CS3" 片选信号线为低电平, 选中接 "CS0" 的设备
CS_8080 = 0x0c; //"CS4" 片选信号线为低电平, 选中接 "CS0" 的设备
CS_8080 = 0x0d; //"CS5" 片选信号线为低电平, 选中接 "CS0" 的设备
CS_8080 = 0x0e; //"CS6" 片选信号线为低电平, 选中接 "CS0" 的设备
CS_8080 = 0x0f; //"CS7" 片选信号线为低电平, 选中接 "CS0" 的设备


  "INT_8080" 读出的值从低位到高位分别对应 "IT0" ~ "IT7" 的输入状态,假设现在"IT0"和"IT5"信号线输入低电平,其

余输入高电平,那么从 "INT_8080" 读出的值就是0xde, if(INT_8080 == 0xde) 为真, 如果只判断其中一位 "IT5" 可以这

样操作, if(INT_8080 & 0x20 == 0) 为真;



  "D0_8080" 和 "D1_8080" 分别对应设备的数据寄存器或命令寄存器, 读写 "D0_8080", "A0" 命令寄存器/数据寄存器

选择线是低电平, 读写 "D1_8080", "A0" 命令寄存器/数据寄存器选择线是高电平; 假如现在设备是ILI9325液晶,读写"D0_8080"

是读写液晶的命令寄存器, 读写"D1_8080"是读写液晶的数据寄存器; 如果设备是CH375,读写"D0_8080"是读写CH375的数据寄存器,

读写"D1_8080"是读写CH375的命令寄存器;






2.系统控制和DS1302实时时钟.

  系统控制和DS1302实时时钟的控制寄存器的名称为 "XT_C",地址为C00007H,位7是控制整机电源,置1会关闭整机电源, 位6是

复位,置1会使整机复位, 位5是扬声器,扬声器的接口在PCB上的名称是"Speaker",可以接一个电脑主板扬声器,通过程序置1置0

来产生扬声器的方波信号, 程序位操作的时候要注意,为了不影响其他位,需要进行位与位或来操作, 假设需要把位5置1,表达式

要这样操作,XT_C |= 0x20, 位5置0的操作,XT_C &= 0xdf;


  "XT_C" 的 位3、位2、位1 分别对应 DS1302的"RST"、"I/O"、"SCLK" 三根IIC总线, 通过程序模拟IIC时序来读写DS1302;

  "XT_C" 的 位4、位0可以用来存放位数据...

  "XT_C" 为读写, 上电复位为全0;

_________________________________________________________________________________________________________________________








"KC_LS1u_SPI_C" 和 "KC_LS1u_SPI_D" PCB的外设接口说明.
_________________________________________________________________________________________________________________________


  SPI总线设备控制器由两片PCB "KC_LS1u_SPI_C" 和 "KC_LS1u_SPI_D" 组成, "KC_LS1u_SPI_C" 和 "KC_LS1u_SPI_D" 的SPI总线

接口都是J7和J8;



(1).接口定义:

S_CS0~S_CS7 : 8根设备片选信号线,低电平有效,可以片选8个设备, 接设备的 "CS";

S_INT0~S_INT6 : 7根设备中断信号输入线, 接设备的中断信号线 "INT";

GND : 电源地,接设备的 "GND";

3V : 3.3伏电源正,接设备的 "VCC";

5V : 5伏电源正,接设备的 "VCC";

SI : SPI总线数据输入,接设备的 "SO" 或 "DO" 或 "MISO";

SO : SPI总线数据输出,接设备的 "SI" 或 "DI" 或 "MOSI";

SCK : SPI总线时钟输出,接设备的 "SCK" 或 "CLK"

RST : 复位信号, 接设备的 "RST";


注意 : "KC_LS1u_SPI_D" J7接口是3.3V电平,J8接口是5V电平;



(2).地址定义和操作方式:

  SPI总线设备控制器寄存器的内存地址为 C00004H ~ C00006H, 定义名称为 "SPI_D"、"SPI_CS" 和 "SPI_INT"、 "SPI_S";


  "SPI_CS" 和 "SPI_INT" 这里定义为同一个地址C00005H, 写入是控制SPI速率和设备的片选,读取是设备的中断信号,写入的时候操作

"SPI_CS", 读取的时候操作"SPI_INT";


  "SPI_CS" 高4位是控制SPI总线速率,下面是高4位的数据和SPI总线速率的对应关系(SPI总线设备控制器使用27MHZ晶振的情况下):

SPI_CS = 0x00; //SPI总线速率为13.5Mbps(27MHZ的2分频),上电复位后的状态
SPI_CS = 0x10; //SPI总线速率为6.75Mbps(27MHZ的4分频)
SPI_CS = 0x20; //SPI总线速率为3.375Mbps(27MHZ的8分频)
SPI_CS = 0x30; //SPI总线速率为1.6875Mbps(27MHZ的16分频)
SPI_CS = 0x40; //SPI总线速率为843.75Kbps(27MHZ的32分频)
SPI_CS = 0x50; //SPI总线速率为421.875Kbps(27MHZ的64分频)
SPI_CS = 0x60; //SPI总线速率为210.9375Kbps(27MHZ的128分频)
SPI_CS = 0x70; //SPI总线速率为105.46875Kbps(27MHZ的256分频)
SPI_CS = 0x80; //关闭SPI时钟

  "SPI_CS" 低4位是控制SPI设备片选,下面是低4位的数据和 "S_CS0" ~ "S_CS7" 8根设备片选信号线的对应关系:

SPI_CS = 0x00; //"S_CS0" ~ "S_CS7" 8根设备片选信号线都为高电平, 上电复位后的状态
SPI_CS = 0x08; //"S_CS0" 片选信号线为低电平, 选中接 "S_CS0" 的设备
SPI_CS = 0x09; //"S_CS1" 片选信号线为低电平, 选中接 "S_CS1" 的设备
SPI_CS = 0x0a; //"S_CS2" 片选信号线为低电平, 选中接 "S_CS2" 的设备
SPI_CS = 0x0b; //"S_CS3" 片选信号线为低电平, 选中接 "S_CS3" 的设备
SPI_CS = 0x0c; //"S_CS4" 片选信号线为低电平, 选中接 "S_CS4" 的设备
SPI_CS = 0x0d; //"S_CS5" 片选信号线为低电平, 选中接 "S_CS5" 的设备
SPI_CS = 0x0e; //"S_CS6" 片选信号线为低电平, 选中接 "S_CS6" 的设备
SPI_CS = 0x0f; //"S_CS7" 片选信号线为低电平, 选中接 "S_CS7" 的设备



  "SPI_INT" 低7位对应 "S_INT6" ~ "S_INT0" 7根设备中断信号输入线,用于查询设备的中断信号,最高位位7是SPI总线设备控制器

的收发状态,控制器正在和SPI设备进行数据传输时,位7的状态是0,表示忙,数据传输完成或空闲时,位7的状态是1,可以通过查询位7确

定数据是否传输完成,位7为1说明可以再次发送或接收数据;



  "SPI_D" 是SPI总线设备控制器的8位数据缓冲区,用于和SPI设备传输数据,;

  "SPI_S" 位2置1,就锁定了SPI总线设备控制器,同时PCB上的 "SPI_LOCK_LED" 不亮,这时读写 "SPI_D" 并不会触发控制器启动传输,

  "SPI_S" 位2置0,解锁SPI总线设备控制器,同时PCB上的 "SPI_LOCK_LED" 亮起, 这时可以和SPI设备传输数据,每次读写"SPI_D",都

会触发控制器启动传输, 结果导致 "SPI_D" 和SPI设备交换一个字节;

  "SPI_S" 位1置0并且位0置0 SPI总线的 "SO" 输出0;

  "SPI_S" 位1置1,位0不管什么状态,SPI总线的 "SO" 都输出1;

  "SPI_S" 位1置0并且位0置1 SPI总线的 "SO" 正常输出;

  "SPI_S" 的读写允许为只写不读;


_________________________________________________________________________________________________________________________









"KC_LS1u_EPROM" 、 "KC_LS1u_ROM CT"、 "KC_LS1u_SROM"、 "KC_LS1u_RAM" PCB的外设接口说明.
_________________________________________________________________________________________________________________________


"KC_LS1u_EPROM" 、 "KC_LS1u_ROM CT"、 "KC_LS1u_SROM"、 "KC_LS1u_RAM"  这4片PCB组成了KC_LS1u机的指令和数据内存单元;

KC_LS1u机的ROM指令存储器设计有两组ROM,简称EPROM和SROM, 两组ROM的内存芯片分别装在 "KC_LS1u_EPROM" 和 "KC_LS1u_SROM" 上,

可以通过增加芯片来增加容量, RAM数据存储器有一组, 为 "KC_LS1u_RAM" 也可以通过增加芯片来增加容量;





(1).KC_LS1u_EPROM.

"KC_LS1u_EPROM" 相当于BIOS, 开机启动运行,也就是一按下 "BOOT" 开机,CPU就首先从这层PCB的ROM芯片读取指令运行;

"KC-LS1u_EPROM" 这层PCB上的8片27C020和CPU程序计数器物理地址的对应关系:

"U4" 和 "U8" 地址范围000000H~03FFFFH, "U4" 是高8位指令存储器, "U8" 是低8位指令存储器;
"U3" 和 "U7" 地址范围040000H~07FFFFH, "U3" 是高8位指令存储器, "U7" 是低8位指令存储器;
"U2" 和 "U6" 地址范围080000H~0BFFFFH, "U2" 是高8位指令存储器, "U6" 是低8位指令存储器;
"U1" 和 "U5" 地址范围0C0000H~0FFFFFH, "U1" 是高8位指令存储器, "U5" 是低8位指令存储器;

CPU的指令是16位,上电的时候CPU是从0地址开始取指令运行;





(2).KC_LS1u_ROM CT.

"KC_LS1u_ROM CT" 是ROM控制器,作用是控制 "KC_LS1u_EPROM" 和 "KC_LS1u_SROM" 的切换;

不管现在CPU运行的程序是在EPROM还是在SROM,只要执行到 "rom_run;" 语句, 程序就会跳转到地址000004H处执行,然后顺序执行到000008H,

当CPU取出000008H地址的指令后,就会触发ROM控制器切换两组ROM,CPU再取下条指令的时候,就是从另一组ROM的000009H地址开始;



000000H~000003H装有跳转指令, 000004H~000008H装有5条指令用于操作ROM控制器, 这9条指令是编译器自动生成,如下所示:

000000H : A2 = 0x00;
000001H : A1 = 0x00;
000002H : A0 = 0x09;
000003H : JMP_A2A1A0;

000004H : A2 = 0xc0;
000005H : A0 = 0x80;
000006H : NOP;
000007H : RAM = 0xff;
000008H : NOP;








(3).KC_LS1u_SROM.

"KC_LS1u_SROM" 在这里很特殊,用于装载指令运行;


SROM映射到RAM内存地址时,在RAM内存地址范围如下:

"U8" 地址范围400000H~47FFFFH;
"U7" 地址范围480000H~4FFFFFH;
"U6" 地址范围500000H~57FFFFH;
"U5" 地址范围580000H~5FFFFFH;
"U4" 地址范围600000H~67FFFFH;
"U3" 地址范围680000H~6FFFFFH;
"U2" 地址范围700000H~77FFFFH;
"U1" 地址范围780000H~7FFFFFH;


当SROM被切换运行时,在ROM的地址范围如下:

"U4" 和 "U8" 地址范围000000H~07FFFFH, "U4" 是高8位指令存储器, "U8" 是低8位指令存储器;
"U3" 和 "U7" 地址范围080000H~0FFFFFH, "U3" 是高8位指令存储器, "U7" 是低8位指令存储器;
"U2" 和 "U6" 地址范围100000H~17FFFFH, "U2" 是高8位指令存储器, "U6" 是低8位指令存储器;
"U1" 和 "U5" 地址范围180000H~1FFFFFH, "U1" 是高8位指令存储器, "U5" 是低8位指令存储器;



如果要把CPU指令装入SROM并运行,可以这样操作, 31e9H是一条CPU指令,指令低8位e9H写入400009H内存单元,

指令高8位31H写入600009H内存单元, 然后执行ROM切换语句 "rom_run;";


要注意,程序在EPROM运行的时候SROM是映射到RAM内存单元, 当从EPROM切换到SROM运行之后,再操作RAM内存400000H~7FFFFFH是无效的;






(4).KC_LS1u_RAM.

RAM数据存储器,放变量啊神魔的...


RAM内存地址范围如下:

"U8" 地址范围000000H~07FFFFH;
"U7" 地址范围080000H~0FFFFFH;
"U6" 地址范围100000H~17FFFFH;
"U5" 地址范围180000H~1FFFFFH;
"U4" 地址范围200000H~27FFFFH;
"U3" 地址范围280000H~2FFFFFH;
"U2" 地址范围300000H~37FFFFH;
"U1" 地址范围380000H~3FFFFFH;

即000000H~3FFFFFH;

_________________________________________________________________________________________________________________________










"KC_LS1u_CT&VGA_CS" 、 "KC_LS1u_VGA_C"、 "KC_LS1u_VGA_A"、 "KC_LS1u_VGA_D" PCB的外设接口说明.
_________________________________________________________________________________________________________________________


  "KC_LS1u_VGA_C"、 "KC_LS1u_VGA_A"、 "KC_LS1u_VGA_D" 这3片PCB组成VGA显卡;

  "KC_LS1u_CT&VGA_CS" 是VGA显卡地址译码片选和一个32位计数器;




(1).接口定义.

D-SUB : 用于连接VGA显示器;





(2).地址定义和操作方式.


   32位计数器的内存地址为 C00008H ~ C0000BH, 分别定义为 "CTO" ~ "CT3", "CT3" 是最高8位,"CT2" 是较高8位, "CT1"是较低8位,

"CT0"是最低8位,这个计数器在启动的情况下一个CPU时钟加1一次, 读写允许为只读;

   计数器控制/VGA控制寄存器的内存地址为 C0000CH, 定义名称为 "CTVGA_C", "CTVGA_C" 的位2是控制32位计数器的复位端,置1,计数器

解除复位,置0,计数器会被清0,如果要让计数器工作的话必须要置1; "CTVGA_C" 的位1是控制32位计数器的启动和暂停,置1,计数器开始计数,

置0,计数器暂停计数; 


   "CTVGA_C" 的位0,是控制VGA显存的切换, VGA有两组显存, "VRAM0" 和 "VRAM1", 如果需要操作显存时, 先将 "CTVGA_C" 的位0置0, 

然后查询 "CTVGA_C" 的位7,如果位7为0,这时可以读写 "VRAM0", VGA显示器显示的是 "VRAM1" 的数据, 显存操作完成后, 如果需要显示

写入的数据, 要把 "CTVGA_C" 的位0置1, 这时显示器显示的是 "VRAM0" 的数据, 并且VGA显卡以每秒60HZ的速度把 "VRAM0" 的数据更新

到 "VRAM1",也就是大约需要17毫秒 "VRAM0" 的数据就会全部更新到 "VRAM1",  如果 "VRAM0" 的数据没有完全更新到 "VRAM1" 就再次

把 "CTVGA_C" 的位0置0请求访问 "VRAM0" 的话, 可能会导致之前写入 "VRAM0" 的数据显示不完整;

   总之 "CTVGA_C" 的位7读出0表示可以读写显存,否则不能读写显存, 如果硬要读写..等于白操作, 写入的数据和读出的数据都是无效;


   "CTVGA_C" 的位2~位0允许读写;


   VGA显存的内存地址为 800000H ~ 80FFFFH, 地址低8位是X坐标, 地址中8位是Y坐标, 屏幕左上角的地址是800000H, 右上角的地址是

8000FFH, 左下角的地址是80EF00H, 右下角的地址是80EFFFH, 80F000H ~ 80FFFFH也可以读写,但是不会在屏幕显示;



_________________________________________________________________________________________________________________________



*/