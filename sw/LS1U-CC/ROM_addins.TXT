.版本 2

.程序集 ROM缓存添加CPU指令

.子程序 A等于立即数
.参数 x, 整数型


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#立即数送A)) ＋ 到字节集 (到字节 (x))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 2


.子程序 R1等于立即数
.参数 x, 整数型


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#立即数送R1)) ＋ 到字节集 (到字节 (x))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 2


.子程序 R2等于立即数
.参数 x, 整数型


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#立即数送R2)) ＋ 到字节集 (到字节 (x))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 2


.子程序 R3等于立即数
.参数 x, 整数型


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#立即数送R3)) ＋ 到字节集 (到字节 (x))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 2


.子程序 A等于A


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#A送A))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 1


.子程序 R1等于A


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#A送R1))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 1


.子程序 R2等于A


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#A送R2))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 1


.子程序 R3等于A


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#A送R3))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 1


.子程序 RAM等于A


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#A送RAM))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 1

.子程序 _RAM等于A
.参数 x, 整数型


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#立即数送R2)) ＋ 到字节集 (到字节 (右移 (x, 8))) ＋ 到字节集 (到字节 (#立即数送R3)) ＋ 到字节集 (到字节 (x)) ＋ 到字节集 (到字节 (#A送RAM))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 5


.子程序 A等于RAM


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#RAM送A))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 1


.子程序 R1等于RAM


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#RAM送R1))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 1


.子程序 R2等于RAM


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#RAM送R2))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 1


.子程序 R3等于RAM


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#RAM送R3))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 1


.子程序 A等于_RAM
.参数 x, 整数型


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#立即数送R2)) ＋ 到字节集 (到字节 (右移 (x, 8))) ＋ 到字节集 (到字节 (#立即数送R3)) ＋ 到字节集 (到字节 (x)) ＋ 到字节集 (到字节 (#RAM送A))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 5


.子程序 R1等于_RAM
.参数 x, 整数型


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#立即数送R2)) ＋ 到字节集 (到字节 (右移 (x, 8))) ＋ 到字节集 (到字节 (#立即数送R3)) ＋ 到字节集 (到字节 (x)) ＋ 到字节集 (到字节 (#RAM送R1))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 5


.子程序 R2等于_RAM
.参数 x, 整数型


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#立即数送R2)) ＋ 到字节集 (到字节 (右移 (x, 8))) ＋ 到字节集 (到字节 (#立即数送R3)) ＋ 到字节集 (到字节 (x)) ＋ 到字节集 (到字节 (#RAM送R2))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 5


.子程序 R3等于_RAM
.参数 x, 整数型


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#立即数送R2)) ＋ 到字节集 (到字节 (右移 (x, 8))) ＋ 到字节集 (到字节 (#立即数送R3)) ＋ 到字节集 (到字节 (x)) ＋ 到字节集 (到字节 (#RAM送R3))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 5


.子程序 A等于A加R1


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#A加R1))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 1


.子程序 A等于A加1


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#A加1))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 1


.子程序 A等于A减R1


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#A减R1))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 1


.子程序 A等于A减1


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#A减1))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 1


.子程序 A等于A与R1


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#A与R1))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 1


.子程序 A等于A或R1


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#A或R1))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 1


.子程序 A等于A异或R1


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#A异或R1))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 1


.子程序 A取反


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#A取反))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 1


.子程序 C等于1


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#C置1))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 1


.子程序 C等于0


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#C置0))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 1


.子程序 Z等于1


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#Z置1))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 1


.子程序 Z等于0


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#Z置0))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 1


.子程序 BIT0等于1


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#BIT0置1))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 1


.子程序 BIT0等于0


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#BIT0置0))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 1


.子程序 BIT1等于1


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#BIT1置1))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 1


.子程序 BIT1等于0


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#BIT1置0))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 1


.子程序 BIT2等于1


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#BIT2置1))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 1


.子程序 BIT2等于0


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#BIT2置0))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 1


.子程序 BIT3等于1


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#BIT3置1))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 1


.子程序 BIT3等于0


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#BIT3置0))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 1


.子程序 BIT4等于1


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#BIT4置1))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 1


.子程序 BIT4等于0


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#BIT4置0))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 1


.子程序 BIT5等于1


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#BIT5置1))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 1


.子程序 BIT5等于0


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#BIT5置0))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 1


.子程序 JMP_R2R3

ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#无条件转移))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 1


.子程序 JMP
.参数 addr, 整数型


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#立即数送R2)) ＋ 到字节集 (到字节 (右移 (addr, 8))) ＋ 到字节集 (到字节 (#立即数送R3)) ＋ 到字节集 (到字节 (addr)) ＋ 到字节集 (到字节 (#无条件转移))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 5


.子程序 JNC
.参数 addr, 整数型


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#立即数送R2)) ＋ 到字节集 (到字节 (右移 (addr, 8))) ＋ 到字节集 (到字节 (#立即数送R3)) ＋ 到字节集 (到字节 (addr)) ＋ 到字节集 (到字节 (#C为0转移))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 5


.子程序 JNZ
.参数 addr, 整数型


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#立即数送R2)) ＋ 到字节集 (到字节 (右移 (addr, 8))) ＋ 到字节集 (到字节 (#立即数送R3)) ＋ 到字节集 (到字节 (addr)) ＋ 到字节集 (到字节 (#Z为0转移))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 5


.子程序 JNA
.参数 addr, 整数型


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#立即数送R2)) ＋ 到字节集 (到字节 (右移 (addr, 8))) ＋ 到字节集 (到字节 (#立即数送R3)) ＋ 到字节集 (到字节 (addr)) ＋ 到字节集 (到字节 (#C或Z为1转移))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 5


.子程序 NOP


ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (到字节 (#空操作))
ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 1


.子程序 修改R2R3
.参数 addr, 整数型
.参数 x, 整数型


ROM_缓存 [addr ＋ 1 ＋ 1] ＝ 右移 (x, 8)
ROM_缓存 [addr ＋ 3 ＋ 1] ＝ x




.子程序 页间跳转, , , 高16位的低8位是页地址 低16位是页内地址
.参数 addr, 整数型


A等于立即数 (右移 (addr, 16))
_RAM等于A (#页间跳转地址_CS)
A等于立即数 (右移 (addr, 8))
_RAM等于A (#页间跳转地址_H)
A等于立即数 (addr)
_RAM等于A (#页间跳转地址_L)
JMP (65488)



.子程序 函数页内返回
.参数 返回地址, 整数型

A等于_RAM (返回地址)
R2等于_RAM (返回地址 ＋ 1)
R3等于A ()
JMP_R2R3 ()


.子程序 函数页间返回
.参数 返回地址, 整数型

A等于_RAM (返回地址)
_RAM等于A (#页间跳转地址_L)
A等于_RAM (返回地址 ＋ 1)
_RAM等于A (#页间跳转地址_H)
A等于_RAM (返回地址 ＋ 2)
_RAM等于A (#页间跳转地址_CS)
JMP (65488)


