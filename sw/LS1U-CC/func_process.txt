.版本 2

.程序集 语句表达式处理程序

.子程序 语句表达式处理, 文本型
.局部变量 状态, 文本型
.局部变量 字节集缓存, 字节集
.局部变量 计数1, 整数型
.局部变量 计数2, 整数型
.局部变量 函数goto总数, 整数型
.局部变量 函数goto名称, 字节集, , "65536"
.局部变量 函数goto源地址, 整数型, , "65536"



函数goto总数 ＝ 0
控制语句计数 ＝ 0
状态 ＝ “继续”

.循环判断首 ()

    跳过空格换行注释 ()

    .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “ ”)

        状态 ＝ “语句表达式处理_文本结束错误....!- =~”

    .判断 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

        计数1 ＝ C代码指针

        字节集缓存 ＝ 到字节集 (“”)
        .循环判断首 ()
            字节集缓存 ＝ 字节集缓存 ＋ 到字节集 (C代码 [C代码指针 ＋ 1])
            C代码指针 ＝ C代码指针 ＋ 1
        .循环判断尾 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

        .判断开始 (到文本 (字节集缓存) ＝ “if”)

            控制语句名称 [控制语句计数 ＋ 1] ＝ 字节集缓存
            跳过空格换行注释 ()

            .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “(”)

                C代码指针 ＝ C代码指针 ＋ 1
                计数1 ＝ C代码指针
                跳过空格换行注释 ()

                .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ≠ “)”)

                    C代码指针 ＝ 计数1
                    状态 ＝ C代码表达式提取处理 (1, 1, 到字节集 (“”))

                    .如果真 (状态 ＝ “完成”)

                        控制语句假跳转地址 [控制语句计数 ＋ 1] ＝ 待修改条件假跳转地址

                        跳过空格换行注释 ()

                        .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “{”)
                            控制语句括号标志 [控制语句计数 ＋ 1] ＝ 1
                            C代码指针 ＝ C代码指针 ＋ 1
                        .默认
                            控制语句括号标志 [控制语句计数 ＋ 1] ＝ 0
                        .判断结束

                        控制语句计数 ＝ 控制语句计数 ＋ 1
                        状态 ＝ “继续”

                    .如果真结束


                .默认
                    状态 ＝ “语句表达式处理_if语句内容不能为空....!- =~”
                .判断结束


            .默认
                状态 ＝ “语句表达式处理_if语句格式错误....!- =~”
            .判断结束



        .判断 (到文本 (字节集缓存) ＝ “do”)

            控制语句名称 [控制语句计数 ＋ 1] ＝ 字节集缓存
            控制语句入口地址 [控制语句计数 ＋ 1] ＝ ROM_缓存使用字节
            控制语句假跳转地址 [控制语句计数 ＋ 1] ＝ 到字节集 (“”)
            跳过空格换行注释 ()

            .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “{”)
                控制语句括号标志 [控制语句计数 ＋ 1] ＝ 1
                C代码指针 ＝ C代码指针 ＋ 1
            .默认
                控制语句括号标志 [控制语句计数 ＋ 1] ＝ 0
            .判断结束

            控制语句计数 ＝ 控制语句计数 ＋ 1



        .判断 (到文本 (字节集缓存) ＝ “while”)

            控制语句名称 [控制语句计数 ＋ 1] ＝ 字节集缓存
            控制语句入口地址 [控制语句计数 ＋ 1] ＝ ROM_缓存使用字节
            跳过空格换行注释 ()

            .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “(”)

                C代码指针 ＝ C代码指针 ＋ 1
                计数1 ＝ C代码指针
                跳过空格换行注释 ()

                .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ≠ “)”)

                    C代码指针 ＝ 计数1
                    状态 ＝ C代码表达式提取处理 (1, 1, 到字节集 (“”))

                    .如果真 (状态 ＝ “完成”)

                        控制语句假跳转地址 [控制语句计数 ＋ 1] ＝ 待修改条件假跳转地址

                        跳过空格换行注释 ()

                        .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “{”)
                            控制语句括号标志 [控制语句计数 ＋ 1] ＝ 1
                            C代码指针 ＝ C代码指针 ＋ 1
                        .默认
                            控制语句括号标志 [控制语句计数 ＋ 1] ＝ 0
                        .判断结束

                        控制语句计数 ＝ 控制语句计数 ＋ 1

                        状态 ＝ “继续”

                    .如果真结束


                .默认
                    状态 ＝ “语句表达式处理_while语句内容不能为空....!- =~”
                .判断结束


            .默认
                状态 ＝ “语句表达式处理_while语句格式错误....!- =~”
            .判断结束



        .判断 (到文本 (字节集缓存) ＝ “for”)

            控制语句名称 [控制语句计数 ＋ 1] ＝ 字节集缓存
            跳过空格换行注释 ()

            .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “(”)

                C代码指针 ＝ C代码指针 ＋ 1
                计数1 ＝ C代码指针
                跳过空格换行注释 ()

                .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ≠ “)”)

                    C代码指针 ＝ 计数1
                    状态 ＝ C代码表达式提取处理 (0, 0, 到字节集 (“”))

                    .如果真 (状态 ＝ “完成”)

                        控制语句入口地址 [控制语句计数 ＋ 1] ＝ ROM_缓存使用字节
                        状态 ＝ C代码表达式提取处理 (0, 1, 到字节集 (“”))

                        .如果真 (状态 ＝ “完成”)

                            控制语句假跳转地址 [控制语句计数 ＋ 1] ＝ 待修改条件假跳转地址
                            跳过空格换行注释 ()
                            for语句尾部代码起始地址 [控制语句计数 ＋ 1] ＝ C代码指针

                            计数1 ＝ 1
                            状态 ＝ “继续”
                            .循环判断首 ()

                                跳过空格换行注释 ()

                                .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “(”)
                                    计数1 ＝ 计数1 ＋ 1
                                .判断 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “)”)
                                    计数1 ＝ 计数1 － 1
                                .判断 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “ ”)
                                    状态 ＝ “语句表达式处理_for语句格式错误....!- =~”
                                .默认

                                .判断结束

                                C代码指针 ＝ C代码指针 ＋ 1

                                .如果真 (计数1 ＝ 0)
                                    状态 ＝ “完成”
                                .如果真结束

                            .循环判断尾 (状态 ＝ “继续”)

                            .如果真 (状态 ＝ “完成”)

                                跳过空格换行注释 ()

                                .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “{”)
                                    控制语句括号标志 [控制语句计数 ＋ 1] ＝ 1
                                    C代码指针 ＝ C代码指针 ＋ 1
                                .默认
                                    控制语句括号标志 [控制语句计数 ＋ 1] ＝ 0
                                .判断结束

                                控制语句计数 ＝ 控制语句计数 ＋ 1

                                状态 ＝ “继续”

                            .如果真结束



                        .如果真结束



                    .如果真结束


                .默认
                    状态 ＝ “语句表达式处理_for语句内容空错误....!- =~”
                .判断结束


            .默认
                状态 ＝ “语句表达式处理_for语句格式错误....!- =~”
            .判断结束



        .判断 (到文本 (字节集缓存) ＝ “return”)

            跳过空格换行注释 ()

            .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ≠ “;”)

                .判断开始 (函数类型 [函数总数 ＋ 1] ＝ “unsigned char”)
                    状态 ＝ C代码表达式提取处理 (0, 0, 到字节集 (到字节 (#无符号char)) ＋ 到字节集 (到字节 (右移 (#函数返回值内存地址, 8))) ＋ 到字节集 (到字节 (#函数返回值内存地址)) ＋ 到字节集 (“=  ”))
                .判断 (函数类型 [函数总数 ＋ 1] ＝ “unsigned int”)
                    状态 ＝ C代码表达式提取处理 (0, 0, 到字节集 (到字节 (#无符号int)) ＋ 到字节集 (到字节 (右移 (#函数返回值内存地址, 8))) ＋ 到字节集 (到字节 (#函数返回值内存地址)) ＋ 到字节集 (“=  ”))
                .判断 (函数类型 [函数总数 ＋ 1] ＝ “unsigned long int”)
                    状态 ＝ C代码表达式提取处理 (0, 0, 到字节集 (到字节 (#无符号长int)) ＋ 到字节集 (到字节 (右移 (#函数返回值内存地址, 8))) ＋ 到字节集 (到字节 (#函数返回值内存地址)) ＋ 到字节集 (“=  ”))
                .判断 (函数类型 [函数总数 ＋ 1] ＝ “char”)
                    状态 ＝ C代码表达式提取处理 (0, 0, 到字节集 (到字节 (#有符号char)) ＋ 到字节集 (到字节 (右移 (#函数返回值内存地址, 8))) ＋ 到字节集 (到字节 (#函数返回值内存地址)) ＋ 到字节集 (“=  ”))
                .判断 (函数类型 [函数总数 ＋ 1] ＝ “int”)
                    状态 ＝ C代码表达式提取处理 (0, 0, 到字节集 (到字节 (#有符号int)) ＋ 到字节集 (到字节 (右移 (#函数返回值内存地址, 8))) ＋ 到字节集 (到字节 (#函数返回值内存地址)) ＋ 到字节集 (“=  ”))
                .判断 (函数类型 [函数总数 ＋ 1] ＝ “long int”)
                    状态 ＝ C代码表达式提取处理 (0, 0, 到字节集 (到字节 (#有符号长int)) ＋ 到字节集 (到字节 (右移 (#函数返回值内存地址, 8))) ＋ 到字节集 (到字节 (#函数返回值内存地址)) ＋ 到字节集 (“=  ”))
                .判断 (函数类型 [函数总数 ＋ 1] ＝ “unsigned char*”)
                    状态 ＝ C代码表达式提取处理 (0, 0, 到字节集 (到字节 (#无符号char指针)) ＋ 到字节集 (到字节 (右移 (#函数返回值内存地址, 8))) ＋ 到字节集 (到字节 (#函数返回值内存地址)) ＋ 到字节集 (“=  ”))
                .判断 (函数类型 [函数总数 ＋ 1] ＝ “unsigned int*”)
                    状态 ＝ C代码表达式提取处理 (0, 0, 到字节集 (到字节 (#无符号int指针)) ＋ 到字节集 (到字节 (右移 (#函数返回值内存地址, 8))) ＋ 到字节集 (到字节 (#函数返回值内存地址)) ＋ 到字节集 (“=  ”))
                .判断 (函数类型 [函数总数 ＋ 1] ＝ “unsigned long int*”)
                    状态 ＝ C代码表达式提取处理 (0, 0, 到字节集 (到字节 (#无符号长int指针)) ＋ 到字节集 (到字节 (右移 (#函数返回值内存地址, 8))) ＋ 到字节集 (到字节 (#函数返回值内存地址)) ＋ 到字节集 (“=  ”))
                .判断 (函数类型 [函数总数 ＋ 1] ＝ “char*”)
                    状态 ＝ C代码表达式提取处理 (0, 0, 到字节集 (到字节 (#有符号char指针)) ＋ 到字节集 (到字节 (右移 (#函数返回值内存地址, 8))) ＋ 到字节集 (到字节 (#函数返回值内存地址)) ＋ 到字节集 (“=  ”))
                .判断 (函数类型 [函数总数 ＋ 1] ＝ “int*”)
                    状态 ＝ C代码表达式提取处理 (0, 0, 到字节集 (到字节 (#有符号int指针)) ＋ 到字节集 (到字节 (右移 (#函数返回值内存地址, 8))) ＋ 到字节集 (到字节 (#函数返回值内存地址)) ＋ 到字节集 (“=  ”))
                .判断 (函数类型 [函数总数 ＋ 1] ＝ “long int*”)
                    状态 ＝ C代码表达式提取处理 (0, 0, 到字节集 (到字节 (#有符号长int指针)) ＋ 到字节集 (到字节 (右移 (#函数返回值内存地址, 8))) ＋ 到字节集 (到字节 (#函数返回值内存地址)) ＋ 到字节集 (“=  ”))
                .默认
                    状态 ＝ “语句表达式处理_return_函数类型错误....!- =~”
                .判断结束


            .默认
                C代码指针 ＝ C代码指针 ＋ 1
                状态 ＝ “完成”
            .判断结束

            .如果真 (状态 ＝ “完成”)

                .判断开始 (函数共享状态 [函数总数 ＋ 1] ＝ “页内共享”)
                    函数页内返回 (函数返回地址 [函数总数 ＋ 1])
                .默认
                    函数页间返回 (函数返回地址 [函数总数 ＋ 1])
                .判断结束

                状态 ＝ 语句表达式处理部件_控制语句结尾处理 ()
                .如果真 (状态 ＝ “完成”)
                    状态 ＝ “继续”
                .如果真结束


            .如果真结束



        .判断 (到文本 (字节集缓存) ＝ “goto”)

            跳过空格换行注释 ()

            .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

                字节集缓存 ＝ 到字节集 (“”)
                .循环判断首 ()
                    字节集缓存 ＝ 字节集缓存 ＋ 到字节集 (C代码 [C代码指针 ＋ 1])
                    C代码指针 ＝ C代码指针 ＋ 1
                .循环判断尾 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

                跳过空格换行注释 ()

                .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “;”)

                    计数1 ＝ 1
                    .判断循环首 (计数1 ≤ 函数goto总数 且 字节集缓存 ≠ 函数goto名称 [计数1])
                        计数1 ＝ 计数1 ＋ 1
                    .判断循环尾 ()

                    .判断开始 (计数1 ＞ 函数goto总数)

                        函数goto名称 [函数goto总数 ＋ 1] ＝ 字节集缓存
                        函数goto源地址 [函数goto总数 ＋ 1] ＝ ROM_缓存使用字节
                        JMP (ROM_缓存使用字节 ＋ 5)
                        函数goto总数 ＝ 函数goto总数 ＋ 1
                        C代码指针 ＝ C代码指针 ＋ 1
                        状态 ＝ 语句表达式处理部件_控制语句结尾处理 ()
                        .如果真 (状态 ＝ “完成”)
                            状态 ＝ “继续”
                        .如果真结束


                    .默认
                        状态 ＝ “语句表达式处理_goto名称重复错误....!- =~”
                    .判断结束


                .默认
                    状态 ＝ “语句表达式处理_goto语句命名错误....!- =~”
                .判断结束


            .默认
                状态 ＝ “语句表达式处理_goto语句命名错误....!- =~”
            .判断结束



        .判断 (到文本 (字节集缓存) ＝ “break”)

            跳过空格换行注释 ()

            .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “;” 且 控制语句计数 ≠ 0)

                C代码指针 ＝ C代码指针 ＋ 1
                计数2 ＝ 控制语句计数

                .循环判断首 ()

                    .判断开始 (到文本 (控制语句名称 [计数2]) ＝ “while” 或 到文本 (控制语句名称 [计数2]) ＝ “for” 或 到文本 (控制语句名称 [计数2]) ＝ “do”)

                        控制语句假跳转地址 [计数2] ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                        JMP (0)
                        状态 ＝ 语句表达式处理部件_控制语句结尾处理 ()

                    .默认

                        .判断开始 (计数2 ＞ 1)
                            计数2 ＝ 计数2 － 1
                        .默认
                            状态 ＝ “语句表达式处理_break语句错误.......!- =~”
                        .判断结束

                    .判断结束

                .循环判断尾 (状态 ＝ “继续”)

                .如果真 (状态 ＝ “完成”)
                    状态 ＝ “继续”
                .如果真结束



            .默认
                状态 ＝ “语句表达式处理_break语句错误....!- =~”
            .判断结束



        .判断 (到文本 (字节集缓存) ＝ “continue”)

            跳过空格换行注释 ()

            .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “;” 且 控制语句计数 ≠ 0)

                C代码指针 ＝ C代码指针 ＋ 1
                计数2 ＝ 控制语句计数

                .循环判断首 ()

                    .判断开始 (到文本 (控制语句名称 [计数2]) ＝ “while” 或 到文本 (控制语句名称 [计数2]) ＝ “for” 或 到文本 (控制语句名称 [计数2]) ＝ “do”)

                        JMP (控制语句入口地址 [计数2])
                        状态 ＝ 语句表达式处理部件_控制语句结尾处理 ()

                    .默认

                        .判断开始 (计数2 ＞ 1)
                            计数2 ＝ 计数2 － 1
                        .默认
                            状态 ＝ “语句表达式处理_continue语句错误.......!- =~”
                        .判断结束

                    .判断结束

                .循环判断尾 (状态 ＝ “继续”)

                .如果真 (状态 ＝ “完成”)
                    状态 ＝ “继续”
                .如果真结束



            .默认
                状态 ＝ “语句表达式处理_continue语句错误....!- =~”
            .判断结束



        .判断 (到文本 (字节集缓存) ＝ “rom_run”)

            跳过空格换行注释 ()

            .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “;”)

                页间跳转 (65510)

                C代码指针 ＝ C代码指针 ＋ 1
                状态 ＝ 语句表达式处理部件_控制语句结尾处理 ()
                .如果真 (状态 ＝ “完成”)
                    状态 ＝ “继续”
                .如果真结束


            .默认
                状态 ＝ “语句表达式处理_rom_run语句错误....!- =~”
            .判断结束


        .默认
            计数2 ＝ 1
            .判断循环首 (计数2 ≤ 函数goto总数 且 字节集缓存 ≠ 函数goto名称 [计数2])
                计数2 ＝ 计数2 ＋ 1
            .判断循环尾 ()

            跳过空格换行注释 ()

            .判断开始 (计数2 ≤ 函数goto总数 且 到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “:”)

                修改R2R3 (函数goto源地址 [计数2], ROM_缓存使用字节)
                函数goto名称 [计数2] ＝ 到字节集 (“”)
                C代码指针 ＝ C代码指针 ＋ 1

            .默认
                C代码指针 ＝ 计数1
                状态 ＝ C代码表达式提取处理 (0, 0, 到字节集 (“”))
                .如果真 (状态 ＝ “完成”)
                    状态 ＝ 语句表达式处理部件_控制语句结尾处理 ()
                    .如果真 (状态 ＝ “完成”)
                        状态 ＝ “继续”

                    .如果真结束


                .如果真结束


            .判断结束


        .判断结束



    .判断 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “{”)

        C代码指针 ＝ C代码指针 ＋ 1
        控制语句名称 [控制语句计数 ＋ 1] ＝ 到字节集 (“”)
        控制语句括号标志 [控制语句计数 ＋ 1] ＝ 1
        控制语句计数 ＝ 控制语句计数 ＋ 1



    .判断 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “}”)

        C代码指针 ＝ C代码指针 ＋ 1

        .判断开始 (控制语句计数 ≠ 0)

            控制语句计数 ＝ 控制语句计数 － 1

            .如果真 (控制语句名称 [控制语句计数 ＋ 1] ≠ 到字节集 (“”))

                控制语句括号标志 [控制语句计数 ＋ 1] ＝ 0
                控制语句计数 ＝ 控制语句计数 ＋ 1
                状态 ＝ 语句表达式处理部件_控制语句结尾处理 ()

                .如果真 (状态 ＝ “完成”)

                    状态 ＝ “继续”

                .如果真结束


            .如果真结束


        .默认
            状态 ＝ “完成”
        .判断结束



    .默认
        状态 ＝ C代码表达式提取处理 (0, 0, 到字节集 (“”))
        .如果真 (状态 ＝ “完成”)
            状态 ＝ 语句表达式处理部件_控制语句结尾处理 ()
            .如果真 (状态 ＝ “完成”)
                状态 ＝ “继续”
            .如果真结束

        .如果真结束

    .判断结束



.循环判断尾 (状态 ＝ “继续”)




返回 (状态)






.子程序 语句表达式处理部件_控制语句结尾处理, 文本型
.局部变量 状态, 文本型
.局部变量 字节集缓存, 字节集
.局部变量 字节集缓存2, 字节集
.局部变量 计数1, 整数型




状态 ＝ “继续”

.循环判断首 ()

    .判断开始 (控制语句计数 ≠ 0)

        控制语句计数 ＝ 控制语句计数 － 1

        .判断开始 (控制语句括号标志 [控制语句计数 ＋ 1] ＝ 0)

            .判断开始 (到文本 (控制语句名称 [控制语句计数 ＋ 1]) ＝ “if”)

                跳过空格换行注释 ()

                .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

                    计数1 ＝ C代码指针

                    字节集缓存 ＝ 到字节集 (“”)
                    .循环判断首 ()
                        字节集缓存 ＝ 字节集缓存 ＋ 到字节集 (C代码 [C代码指针 ＋ 1])
                        C代码指针 ＝ C代码指针 ＋ 1
                    .循环判断尾 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

                    .判断开始 (到文本 (字节集缓存) ＝ “else”)

                        字节集缓存 ＝ 控制语句假跳转地址 [控制语句计数 ＋ 1]

                        控制语句假跳转地址 [控制语句计数 ＋ 1] ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                        JMP (0)

                        计数1 ＝ 1
                        .判断循环首 (计数1 ＜ 取字节集长度 (字节集缓存))
                            修改R2R3 (字节集缓存 [计数1] ＋ 字节集缓存 [计数1 ＋ 1] × 256, ROM_缓存使用字节)
                            计数1 ＝ 计数1 ＋ 2
                        .判断循环尾 ()

                        跳过空格换行注释 ()

                        .如果真 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “{”)
                            控制语句括号标志 [控制语句计数 ＋ 1] ＝ 1
                            C代码指针 ＝ C代码指针 ＋ 1
                        .如果真结束

                        控制语句名称 [控制语句计数 ＋ 1] ＝ 到字节集 (“else”)
                        控制语句计数 ＝ 控制语句计数 ＋ 1
                        状态 ＝ “完成”


                    .默认
                        C代码指针 ＝ 计数1

                        字节集缓存 ＝ 控制语句假跳转地址 [控制语句计数 ＋ 1]

                        计数1 ＝ 1
                        .判断循环首 (计数1 ＜ 取字节集长度 (字节集缓存))
                            修改R2R3 (字节集缓存 [计数1] ＋ 字节集缓存 [计数1 ＋ 1] × 256, ROM_缓存使用字节)
                            计数1 ＝ 计数1 ＋ 2
                        .判断循环尾 ()

                    .判断结束



                .默认
                    字节集缓存 ＝ 控制语句假跳转地址 [控制语句计数 ＋ 1]

                    计数1 ＝ 1
                    .判断循环首 (计数1 ＜ 取字节集长度 (字节集缓存))
                        修改R2R3 (字节集缓存 [计数1] ＋ 字节集缓存 [计数1 ＋ 1] × 256, ROM_缓存使用字节)
                        计数1 ＝ 计数1 ＋ 2
                    .判断循环尾 ()

                .判断结束




            .判断 (到文本 (控制语句名称 [控制语句计数 ＋ 1]) ＝ “else”)

                字节集缓存 ＝ 控制语句假跳转地址 [控制语句计数 ＋ 1]

                计数1 ＝ 1
                .判断循环首 (计数1 ＜ 取字节集长度 (字节集缓存))
                    修改R2R3 (字节集缓存 [计数1] ＋ 字节集缓存 [计数1 ＋ 1] × 256, ROM_缓存使用字节)
                    计数1 ＝ 计数1 ＋ 2
                .判断循环尾 ()


            .判断 (到文本 (控制语句名称 [控制语句计数 ＋ 1]) ＝ “do”)

                跳过空格换行注释 ()

                .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

                    字节集缓存 ＝ 到字节集 (“”)
                    .循环判断首 ()
                        字节集缓存 ＝ 字节集缓存 ＋ 到字节集 (C代码 [C代码指针 ＋ 1])
                        C代码指针 ＝ C代码指针 ＋ 1
                    .循环判断尾 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

                    .判断开始 (到文本 (字节集缓存) ＝ “while”)

                        跳过空格换行注释 ()

                        .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “(”)

                            C代码指针 ＝ C代码指针 ＋ 1
                            跳过空格换行注释 ()

                            .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ≠ “)”)

                                状态 ＝ C代码表达式提取处理 (1, 1, 到字节集 (“”))

                                .如果真 (状态 ＝ “完成”)

                                    跳过空格换行注释 ()

                                    .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “;”)

                                        JMP (控制语句入口地址 [控制语句计数 ＋ 1])

                                        计数1 ＝ 1
                                        .判断循环首 (计数1 ＜ 取字节集长度 (待修改条件假跳转地址))
                                            修改R2R3 (待修改条件假跳转地址 [计数1] ＋ 待修改条件假跳转地址 [计数1 ＋ 1] × 256, ROM_缓存使用字节)
                                            计数1 ＝ 计数1 ＋ 2
                                        .判断循环尾 ()

                                        字节集缓存 ＝ 控制语句假跳转地址 [控制语句计数 ＋ 1]
                                        计数1 ＝ 1
                                        .判断循环首 (计数1 ＜ 取字节集长度 (字节集缓存))
                                            修改R2R3 (字节集缓存 [计数1] ＋ 字节集缓存 [计数1 ＋ 1] × 256, ROM_缓存使用字节)
                                            计数1 ＝ 计数1 ＋ 2
                                        .判断循环尾 ()


                                        C代码指针 ＝ C代码指针 ＋ 1
                                        状态 ＝ “继续”


                                    .默认
                                        状态 ＝ “语句表达式处理部件_控制语句结尾处理_do-while语句尾部while缺少';'....!- =~”
                                    .判断结束


                                .如果真结束


                            .默认
                                状态 ＝ “语句表达式处理部件_控制语句结尾处理_do-while语句尾部while内容空错误....!- =~”
                            .判断结束


                        .默认
                            状态 ＝ “语句表达式处理部件_控制语句结尾处理_do-while语句尾部while格式错误....!- =~”
                        .判断结束


                    .默认
                        状态 ＝ “语句表达式处理部件_控制语句结尾处理_do语句尾部缺少while错误....!- =~”
                    .判断结束


                .默认
                    状态 ＝ “语句表达式处理部件_控制语句结尾处理_do语句尾部缺少while错误....!- =~”
                .判断结束



            .判断 (到文本 (控制语句名称 [控制语句计数 ＋ 1]) ＝ “while”)

                JMP (控制语句入口地址 [控制语句计数 ＋ 1])

                字节集缓存 ＝ 控制语句假跳转地址 [控制语句计数 ＋ 1]

                计数1 ＝ 1
                .判断循环首 (计数1 ＜ 取字节集长度 (字节集缓存))
                    修改R2R3 (字节集缓存 [计数1] ＋ 字节集缓存 [计数1 ＋ 1] × 256, ROM_缓存使用字节)
                    计数1 ＝ 计数1 ＋ 2
                .判断循环尾 ()


            .判断 (到文本 (控制语句名称 [控制语句计数 ＋ 1]) ＝ “for”)

                计数1 ＝ C代码指针
                C代码指针 ＝ for语句尾部代码起始地址 [控制语句计数 ＋ 1]
                状态 ＝ C代码表达式提取处理 (1, 0, 到字节集 (“”))
                C代码指针 ＝ 计数1

                .如果真 (状态 ＝ “完成”)

                    JMP (控制语句入口地址 [控制语句计数 ＋ 1])

                    字节集缓存 ＝ 控制语句假跳转地址 [控制语句计数 ＋ 1]

                    计数1 ＝ 1
                    .判断循环首 (计数1 ＜ 取字节集长度 (字节集缓存))
                        修改R2R3 (字节集缓存 [计数1] ＋ 字节集缓存 [计数1 ＋ 1] × 256, ROM_缓存使用字节)
                        计数1 ＝ 计数1 ＋ 2
                    .判断循环尾 ()

                    状态 ＝ “继续”

                .如果真结束


            .默认
                状态 ＝ “语句表达式处理部件_控制语句结尾处理_神魔情况?....!- =~”
            .判断结束


        .默认
            控制语句计数 ＝ 控制语句计数 ＋ 1
            状态 ＝ “完成”
        .判断结束


    .默认
        状态 ＝ “完成”
    .判断结束


.循环判断尾 (状态 ＝ “继续”)



返回 (状态)





.子程序 C代码表达式提取处理, 文本型
.参数 结束控制, 整数型, , 为0 括号成对 再读到;结束     为1 括号成对 再读到)结束
.参数 条件表达式标志, 整数型
.参数 表达式首部附加代码, 字节集
.局部变量 状态, 文本型
.局部变量 C代码表达式, 字节集
.局部变量 表达式括号计数, 整数型
.局部变量 表达式括号类型, 字节集, , "65536"
.局部变量 表达式三目运算符标志, 整数型, , "65536"
.局部变量 符号类型, 字节集
.局部变量 计数1, 整数型




立即数总数 ＝ 0

表达式括号计数 ＝ 0
表达式括号类型 [1] ＝ 到字节集 (“”)
表达式三目运算符标志 [1] ＝ 0

C代码表达式 ＝ 到字节集 (“”)
符号类型 ＝ 到字节集 (“”)

状态 ＝ “继续”

.循环判断首 ()

    跳过空格换行注释 ()

    .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “ ”)

        状态 ＝ “C代码表达式提取_文本结束错误....!- =~”

    .判断 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

        .判断开始 (到文本 (符号类型) ≠ “” 且 (符号类型 [1] ＞ 47 且 符号类型 [1] ＜ 58 或 到文本 (到字节集 (符号类型 [1])) ＝ “'” 或 符号类型 [1] ＞ 64 且 符号类型 [1] ＜ 91 或 符号类型 [1] ＞ 96 且 符号类型 [1] ＜ 123 或 符号类型 [1] ＝ 95))

            状态 ＝ “C代码表达式提取_操作数错误....!- =~”

        .默认
            符号类型 ＝ 到字节集 (“”)
            .循环判断首 ()
                符号类型 ＝ 符号类型 ＋ 到字节集 (C代码 [C代码指针 ＋ 1])
                C代码指针 ＝ C代码指针 ＋ 1
            .循环判断尾 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

            C代码表达式 ＝ C代码表达式 ＋ 符号类型 ＋ 到字节集 (“  ”)
        .判断结束


    .判断 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “'”)

        .判断开始 (到文本 (符号类型) ≠ “” 且 (符号类型 [1] ＞ 47 且 符号类型 [1] ＜ 58 或 到文本 (到字节集 (符号类型 [1])) ＝ “'” 或 符号类型 [1] ＞ 64 且 符号类型 [1] ＜ 91 或 符号类型 [1] ＞ 96 且 符号类型 [1] ＜ 123 或 符号类型 [1] ＝ 95))

            状态 ＝ “C代码表达式提取_操作数错误....!- =~”

        .默认
            符号类型 ＝ 到字节集 (C代码 [C代码指针 ＋ 1])
            立即数值 [立即数总数 ＋ 1] ＝ 提取数值 ()
            C代码表达式 ＝ C代码表达式 ＋ 到字节集 (到字节 (#立即数)) ＋ 到字节集 (到字节 (右移 (立即数总数, 8))) ＋ 到字节集 (到字节 (立即数总数)) ＋ 到字节集 (“  ”)
            立即数总数 ＝ 立即数总数 ＋ 1
        .判断结束


    .判断 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1]) ＋ 到字节集 (C代码 [C代码指针 ＋ 2]) ＋ 到字节集 (C代码 [C代码指针 ＋ 3])) ＝ “<<=” 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1]) ＋ 到字节集 (C代码 [C代码指针 ＋ 2]) ＋ 到字节集 (C代码 [C代码指针 ＋ 3])) ＝ “>>=”)

        .判断开始 (表达式三目运算符标志 [表达式括号数 ＋ 1] ＝ 1)

            状态 ＝ “C代码表达式提取_赋值符出现在三目运算符内部错误....!- =~”

        .默认
            符号类型 ＝ 到字节集 (C代码 [C代码指针 ＋ 1]) ＋ 到字节集 (C代码 [C代码指针 ＋ 2]) ＋ 到字节集 (C代码 [C代码指针 ＋ 3])
            C代码表达式 ＝ C代码表达式 ＋ 符号类型 ＋ 到字节集 (“  ”)

            C代码指针 ＝ C代码指针 ＋ 3
        .判断结束



    .判断 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1]) ＋ 到字节集 (C代码 [C代码指针 ＋ 2])) ＝ “>=” 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1]) ＋ 到字节集 (C代码 [C代码指针 ＋ 2])) ＝ “<=” 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1]) ＋ 到字节集 (C代码 [C代码指针 ＋ 2])) ＝ “==” 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1]) ＋ 到字节集 (C代码 [C代码指针 ＋ 2])) ＝ “!=”)

        符号类型 ＝ 到字节集 (C代码 [C代码指针 ＋ 1]) ＋ 到字节集 (C代码 [C代码指针 ＋ 2])
        C代码表达式 ＝ C代码表达式 ＋ 符号类型 ＋ 到字节集 (“  ”)

        C代码指针 ＝ C代码指针 ＋ 2


    .判断 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1]) ＋ 到字节集 (C代码 [C代码指针 ＋ 2])) ＝ “<<” 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1]) ＋ 到字节集 (C代码 [C代码指针 ＋ 2])) ＝ “>>” 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1]) ＋ 到字节集 (C代码 [C代码指针 ＋ 2])) ＝ “++” 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1]) ＋ 到字节集 (C代码 [C代码指针 ＋ 2])) ＝ “--”)

        符号类型 ＝ 到字节集 (C代码 [C代码指针 ＋ 1]) ＋ 到字节集 (C代码 [C代码指针 ＋ 2])
        C代码表达式 ＝ C代码表达式 ＋ 符号类型 ＋ 到字节集 (“  ”)

        C代码指针 ＝ C代码指针 ＋ 2


    .判断 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1]) ＋ 到字节集 (C代码 [C代码指针 ＋ 2])) ＝ “&&” 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1]) ＋ 到字节集 (C代码 [C代码指针 ＋ 2])) ＝ “||”)

        .判断开始 (到文本 (符号类型) ＝ “<<=” 或 到文本 (符号类型) ＝ “>>=” 或 到文本 (符号类型) ＝ “+=” 或 到文本 (符号类型) ＝ “-=” 或 到文本 (符号类型) ＝ “*=” 或 到文本 (符号类型) ＝ “/=” 或 到文本 (符号类型) ＝ “%=” 或 到文本 (符号类型) ＝ “&=” 或 到文本 (符号类型) ＝ “|=” 或 到文本 (符号类型) ＝ “^=” 或 到文本 (符号类型) ＝ “=” 或 到文本 (符号类型) ＝ “(” 或 到文本 (符号类型) ＝ “[” 或 到文本 (符号类型) ＝ “&&” 或 到文本 (符号类型) ＝ “||” 或 到文本 (符号类型) ＝ “?” 或 到文本 (符号类型) ＝ “:” 或 到文本 (符号类型) ＝ “(” 或 到文本 (符号类型) ＝ “[” 或 到文本 (符号类型) ＝ “,” 或 到文本 (符号类型) ＝ “”)

            状态 ＝ “C代码表达式提取_运算符错误....!- =~”

        .默认
            符号类型 ＝ 到字节集 (C代码 [C代码指针 ＋ 1]) ＋ 到字节集 (C代码 [C代码指针 ＋ 2])
            C代码表达式 ＝ C代码表达式 ＋ 符号类型 ＋ 到字节集 (“  ”)

            C代码指针 ＝ C代码指针 ＋ 2
        .判断结束


    .判断 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1]) ＋ 到字节集 (C代码 [C代码指针 ＋ 2])) ＝ “+=” 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1]) ＋ 到字节集 (C代码 [C代码指针 ＋ 2])) ＝ “-=” 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1]) ＋ 到字节集 (C代码 [C代码指针 ＋ 2])) ＝ “*=” 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1]) ＋ 到字节集 (C代码 [C代码指针 ＋ 2])) ＝ “/=” 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1]) ＋ 到字节集 (C代码 [C代码指针 ＋ 2])) ＝ “%=” 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1]) ＋ 到字节集 (C代码 [C代码指针 ＋ 2])) ＝ “&=” 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1]) ＋ 到字节集 (C代码 [C代码指针 ＋ 2])) ＝ “|=” 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1]) ＋ 到字节集 (C代码 [C代码指针 ＋ 2])) ＝ “^=”)

        .判断开始 (表达式三目运算符标志 [表达式括号数 ＋ 1] ＝ 1)

            状态 ＝ “C代码表达式提取_赋值符出现在三目运算符内部错误....!- =~”

        .默认
            符号类型 ＝ 到字节集 (C代码 [C代码指针 ＋ 1]) ＋ 到字节集 (C代码 [C代码指针 ＋ 2])
            C代码表达式 ＝ C代码表达式 ＋ 符号类型 ＋ 到字节集 (“  ”)

            C代码指针 ＝ C代码指针 ＋ 2
        .判断结束



    .判断 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “+” 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “-” 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “*” 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “/” 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “%” 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “&” 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “|” 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “~” 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “^” 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “!” 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “>” 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “<”)

        符号类型 ＝ 到字节集 (C代码 [C代码指针 ＋ 1])
        C代码表达式 ＝ C代码表达式 ＋ 符号类型 ＋ 到字节集 (“  ”)

        C代码指针 ＝ C代码指针 ＋ 1


    .判断 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “=”)

        .判断开始 (表达式三目运算符标志 [表达式括号数 ＋ 1] ＝ 1)

            状态 ＝ “C代码表达式提取_赋值符出现在三目运算符内部错误....!- =~”

        .默认
            符号类型 ＝ 到字节集 (C代码 [C代码指针 ＋ 1])
            C代码表达式 ＝ C代码表达式 ＋ 符号类型 ＋ 到字节集 (“  ”)

            C代码指针 ＝ C代码指针 ＋ 1
        .判断结束



    .判断 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “?” 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “:”)

        .判断开始 (到文本 (符号类型) ＝ “<<=” 或 到文本 (符号类型) ＝ “>>=” 或 到文本 (符号类型) ＝ “+=” 或 到文本 (符号类型) ＝ “-=” 或 到文本 (符号类型) ＝ “*=” 或 到文本 (符号类型) ＝ “/=” 或 到文本 (符号类型) ＝ “%=” 或 到文本 (符号类型) ＝ “&=” 或 到文本 (符号类型) ＝ “|=” 或 到文本 (符号类型) ＝ “^=” 或 到文本 (符号类型) ＝ “=” 或 到文本 (符号类型) ＝ “(” 或 到文本 (符号类型) ＝ “[” 或 到文本 (符号类型) ＝ “?” 或 到文本 (符号类型) ＝ “:” 或 到文本 (符号类型) ＝ “&&” 或 到文本 (符号类型) ＝ “||” 或 到文本 (符号类型) ＝ “” 或 到文本 (符号类型) ＝ “,”)

            状态 ＝ “C代码表达式提取_运算符错误....!- =~”

        .默认
            符号类型 ＝ 到字节集 (C代码 [C代码指针 ＋ 1])
            C代码表达式 ＝ C代码表达式 ＋ 符号类型 ＋ 到字节集 (“  ”)

            表达式三目运算符标志 [表达式括号数 ＋ 1] ＝ 1
            C代码指针 ＝ C代码指针 ＋ 1
        .判断结束



    .判断 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “(” 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “[”)

        .判断开始 (到文本 (符号类型) ≠ “” 且 (符号类型 [1] ＞ 47 且 符号类型 [1] ＜ 58 或 到文本 (到字节集 (符号类型 [1])) ＝ “'”))

            状态 ＝ “C代码表达式提取_操作数错误....!- =~”

        .默认
            表达式括号类型 [表达式括号计数 ＋ 1] ＝ 到字节集 (C代码 [C代码指针 ＋ 1])
            符号类型 ＝ 到字节集 (C代码 [C代码指针 ＋ 1])
            C代码表达式 ＝ C代码表达式 ＋ 符号类型 ＋ 到字节集 (“  ”)

            表达式括号计数 ＝ 表达式括号计数 ＋ 1
            表达式三目运算符标志 [表达式括号数 ＋ 1] ＝ 0
            C代码指针 ＝ C代码指针 ＋ 1
        .判断结束



    .判断 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “]”)

        .判断开始 (到文本 (符号类型) ＝ “&&” 或 到文本 (符号类型) ＝ “||” 或 到文本 (符号类型) ＝ “?” 或 到文本 (符号类型) ＝ “:” 或 到文本 (符号类型) ＝ “[” 或 到文本 (符号类型) ＝ “,”)

            状态 ＝ “C代码表达式提取_运算符错误....!- =~”

        .判断 (表达式括号计数 ＝ 0 或 到文本 (表达式括号类型 [表达式括号计数]) ≠ “[”)

            状态 ＝ “C代码表达式提取_中括号对数错误....!- =~”

        .默认
            符号类型 ＝ 到字节集 (C代码 [C代码指针 ＋ 1])
            C代码表达式 ＝ C代码表达式 ＋ 符号类型 ＋ 到字节集 (“  ”)

            表达式括号计数 ＝ 表达式括号计数 － 1
            C代码指针 ＝ C代码指针 ＋ 1
        .判断结束



    .判断 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “)”)

        .判断开始 (到文本 (符号类型) ＝ “&&” 或 到文本 (符号类型) ＝ “||” 或 到文本 (符号类型) ＝ “?” 或 到文本 (符号类型) ＝ “:” 或 到文本 (符号类型) ＝ “,”)

            状态 ＝ “C代码表达式提取_运算符错误....!- =~”

        .判断 (表达式括号计数 ＝ 0)

            .判断开始 (结束控制 ＝ 1)

                C代码表达式 ＝ C代码表达式 ＋ 到字节集 (“;”) ＋ 到字节集 (“  ”)
                C代码指针 ＝ C代码指针 ＋ 1
                状态 ＝ “完成”

            .默认
                状态 ＝ “C代码表达式提取_圆括号对数错误....!- =~”
            .判断结束


        .判断 (到文本 (表达式括号类型 [表达式括号计数]) ≠ “(”)

            状态 ＝ “C代码表达式提取_圆括号对数错误....!- =~”

        .默认
            符号类型 ＝ 到字节集 (C代码 [C代码指针 ＋ 1])
            C代码表达式 ＝ C代码表达式 ＋ 符号类型 ＋ 到字节集 (“  ”)

            表达式括号计数 ＝ 表达式括号计数 － 1
            C代码指针 ＝ C代码指针 ＋ 1
        .判断结束



    .判断 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “,”)

        .判断开始 (到文本 (符号类型) ＝ “&&” 或 到文本 (符号类型) ＝ “||” 或 到文本 (符号类型) ＝ “?” 或 到文本 (符号类型) ＝ “:” 或 到文本 (符号类型) ＝ “,” 或 到文本 (符号类型) ＝ “(” 或 到文本 (符号类型) ＝ “”)

            状态 ＝ “C代码表达式提取_运算符错误....!- =~”

        .默认
            符号类型 ＝ 到字节集 (C代码 [C代码指针 ＋ 1])
            C代码表达式 ＝ C代码表达式 ＋ 符号类型 ＋ 到字节集 (“  ”)

            C代码指针 ＝ C代码指针 ＋ 1
        .判断结束


    .判断 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “;”)

        .判断开始 (到文本 (符号类型) ＝ “&&” 或 到文本 (符号类型) ＝ “||” 或 到文本 (符号类型) ＝ “?” 或 到文本 (符号类型) ＝ “:” 或 到文本 (符号类型) ＝ “,”)

            状态 ＝ “C代码表达式提取_运算符错误....!- =~”

        .判断 (表达式括号计数 ＝ 0)

            .判断开始 (结束控制 ＝ 0)

                C代码表达式 ＝ C代码表达式 ＋ 到字节集 (“;”) ＋ 到字节集 (“  ”)
                C代码指针 ＝ C代码指针 ＋ 1
                状态 ＝ “完成”

            .默认
                状态 ＝ “C代码表达式提取_结束控制为1_;位置错误....!- =~”
            .判断结束

        .默认
            状态 ＝ “C代码表达式提取_;位置错误....!- =~”
        .判断结束





    .默认
        状态 ＝ “C代码表达式提取_发现未识别的符号....!- =~”
    .判断结束


.循环判断尾 (状态 ＝ “继续”)


.如果真 (状态 ＝ “完成”)
    状态 ＝ 主表达式处理 (表达式首部附加代码 ＋ C代码表达式, 条件表达式标志)
    .如果真 (状态 ＝ “;”)
        状态 ＝ “完成”
    .如果真结束

.如果真结束



返回 (状态)





.子程序 主表达式处理, 文本型
.参数 _主表达式, 字节集
.参数 条件表达式标志, 整数型, , 从条件里提取出来的置1 否则置0
.局部变量 表达式指针, 整数型
.局部变量 状态, 文本型
.局部变量 名称符号, 字节集
.局部变量 名称符号首地址, 整数型
.局部变量 运算符标志, 整数型, , , 子表达式存在运算符时置1
.局部变量 子表达式, 字节集
.局部变量 计数1, 整数型
.局部变量 计数2, 整数型
.局部变量 计数3, 整数型
.局部变量 计数4, 整数型
.局部变量 字符串缓存, 字节集
.局部变量 字节集缓存, 字节集
.局部变量 函数实参内容, 整数型, , "65536"
.局部变量 函数形参内容, 整数型, , "65536"



动态RAM分配地址 ＝ RAM分配地址

主表达式 ＝ _主表达式

表达式指针 ＝ 0
运算符标志 ＝ 0
表达式括号数 ＝ 0
三目运算符跳转表基址 [1] ＝ 0
三目运算符跳转表偏址 [1] ＝ 0
三目运算符条件假跳转地址 [1] ＝ 到字节集 (“”)
三目运算符条件真尾跳转地址 [1] ＝ 到字节集 (“”)
名称符号首地址 ＝ 0
名称符号 ＝ 到字节集 (“”)
条件真跳转地址 [1] ＝ 到字节集 (“”)
条件假跳转地址 [1] ＝ 到字节集 (“”)

表达式括号地址 [1] ＝ -1
子表达式起始地址 [1] ＝ 0
子表达式 ＝ 到字节集 (“”)

状态 ＝ “继续”
累加器内容状态 ＝ “ACC”


.循环判断首 ()

    .判断开始 (到文本 (到字节集 (主表达式 [表达式指针 ＋ 1])) ＝ “(”)

        三目运算符跳转表基址 [表达式括号数 ＋ 2] ＝ 三目运算符跳转表偏址 [表达式括号数 ＋ 1]
        三目运算符跳转表偏址 [表达式括号数 ＋ 2] ＝ 三目运算符跳转表偏址 [表达式括号数 ＋ 1]

        表达式括号数 ＝ 表达式括号数 ＋ 1

        .判断开始 (取字节集长度 (名称符号) ≠ 0 且 (到数值 (名称符号 [1]) ＞ 64 且 到数值 (名称符号 [1]) ＜ 91 或 到数值 (名称符号 [1]) ＞ 96 且 到数值 (名称符号 [1]) ＜ 123 或 到数值 (名称符号 [1]) ＝ 95))
            函数标志 [表达式括号数 ＋ 1] ＝ 1
        .默认
            函数标志 [表达式括号数 ＋ 1] ＝ 0
        .判断结束

        表达式括号地址 [表达式括号数 ＋ 1] ＝ 表达式指针
        子表达式起始地址 [表达式括号数 ＋ 1] ＝ 表达式指针 ＋ 1
        表达式括号前名称符号 [表达式括号数 ＋ 1] ＝ 名称符号
        表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＝ 名称符号首地址
        子表达式 ＝ 到字节集 (“”)
        名称符号首地址 ＝ 表达式指针
        名称符号 ＝ 到字节集 (“”)
        条件真跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)
        条件假跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)
        三目运算符条件假跳转地址 [三目运算符跳转表偏址 [表达式括号数 ＋ 1] ＋ 1] ＝ 到字节集 (“”)
        三目运算符条件真尾跳转地址 [三目运算符跳转表偏址 [表达式括号数 ＋ 1] ＋ 1] ＝ 到字节集 (“”)
        运算符标志 ＝ 0
        表达式指针 ＝ 表达式指针 ＋ 1


    .判断 (到文本 (到字节集 (主表达式 [表达式指针 ＋ 1])) ＝ “[”)


        三目运算符跳转表基址 [表达式括号数 ＋ 2] ＝ 三目运算符跳转表偏址 [表达式括号数 ＋ 1]
        三目运算符跳转表偏址 [表达式括号数 ＋ 2] ＝ 三目运算符跳转表偏址 [表达式括号数 ＋ 1]
        表达式括号数 ＝ 表达式括号数 ＋ 1
        表达式括号地址 [表达式括号数 ＋ 1] ＝ 表达式指针
        子表达式起始地址 [表达式括号数 ＋ 1] ＝ 表达式指针 ＋ 1
        表达式括号前名称符号 [表达式括号数 ＋ 1] ＝ 名称符号
        表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＝ 名称符号首地址
        子表达式 ＝ 到字节集 (“”)
        名称符号首地址 ＝ 表达式指针
        名称符号 ＝ 到字节集 (“”)
        条件真跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)
        条件假跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)
        三目运算符条件假跳转地址 [三目运算符跳转表偏址 [表达式括号数 ＋ 1] ＋ 1] ＝ 到字节集 (“”)
        三目运算符条件真尾跳转地址 [三目运算符跳转表偏址 [表达式括号数 ＋ 1] ＋ 1] ＝ 到字节集 (“”)
        运算符标志 ＝ 0
        表达式指针 ＝ 表达式指针 ＋ 1



    .判断 (到文本 (到字节集 (主表达式 [表达式指针 ＋ 1])) ＝ “)”)


        .判断开始 (取字节集长度 (条件真跳转地址 [表达式括号数 ＋ 1]) ≠ 0 或 取字节集长度 (条件假跳转地址 [表达式括号数 ＋ 1]) ≠ 0)

            子表达式一级提取 (子表达式)

            .判断开始 (运算符标志_提取 ＝ 1)

                运算符标志_提取 ＝ 0

                状态 ＝ 子表达式处理 (表达式_提取)

                .如果真 (状态 ＝ “完成”)

                    子表达式 [起始地址_提取 ＋ 1] ＝ 右移 (子表达式处理_返回值, 16)
                    子表达式 [起始地址_提取 ＋ 2] ＝ 右移 (子表达式处理_返回值, 8)
                    子表达式 [起始地址_提取 ＋ 3] ＝ 子表达式处理_返回值

                    计数1 ＝ 起始地址_提取 ＋ 4

                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                        子表达式 [计数1] ＝ 32
                        计数1 ＝ 计数1 ＋ 1
                    .判断循环尾 ()

                    计数1 ＝ 1

                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                        主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                        计数1 ＝ 计数1 ＋ 1
                    .判断循环尾 ()

                    子表达式 ＝ 到字节集 (“”)
                    名称符号 ＝ 到字节集 (“”)
                    表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                    运算符标志 ＝ 0
                    状态 ＝ “继续”
                .如果真结束


            .默认
                计数1 ＝ 1
                .判断循环首 (表达式_提取 [计数1] ＝ 32)
                    计数1 ＝ 计数1 ＋ 1
                .判断循环尾 ()

                .判断开始 (表达式_提取 [计数1] ＞ 47 且 表达式_提取 [计数1] ＜ 58)

                    字符串缓存 ＝ 到字节集 (“”)
                    .循环判断首 ()
                        字符串缓存 ＝ 字符串缓存 ＋ 到字节集 (表达式_提取 [计数1])
                        计数1 ＝ 计数1 ＋ 1
                    .循环判断尾 (表达式_提取 [计数1] ＞ 47 且 表达式_提取 [计数1] ＜ 58)


                    .判断开始 (到数值 (到文本 (字符串缓存)) ≠ 0)
                        待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                        JMP (0)
                        待修改条件假跳转地址 ＝ 到字节集 (“”)
                        待修改条件跳转出口状态 ＝ “假”

                    .默认
                        待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                        JMP (0)
                        待修改条件真跳转地址 ＝ 到字节集 (“”)
                        待修改条件跳转出口状态 ＝ “真”

                    .判断结束


                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 条件真跳转地址 [表达式括号数 ＋ 1]
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 条件假跳转地址 [表达式括号数 ＋ 1]

                    条件真跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)
                    条件假跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)


                    状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, #待修改跳转地址 × 65536)
                    子表达式 [起始地址_提取 ＋ 1] ＝ #有符号ACC
                    表达式累加器地址 ＝ 起始地址_提取
                    累加器内容状态 ＝ “有符号ACC”

                    .如果真 (状态 ＝ “完成”)

                        计数1 ＝ 起始地址_提取 ＋ 2

                        .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                            子表达式 [计数1] ＝ 32
                            计数1 ＝ 计数1 ＋ 1
                        .判断循环尾 ()

                        计数1 ＝ 1

                        .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                            主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                            计数1 ＝ 计数1 ＋ 1
                        .判断循环尾 ()

                        子表达式 ＝ 到字节集 (“”)
                        名称符号 ＝ 到字节集 (“”)
                        表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                        运算符标志 ＝ 0
                        状态 ＝ “继续”

                    .如果真结束



                .判断 (表达式_提取 [计数1] ＞ 64 且 表达式_提取 [计数1] ＜ 91 或 表达式_提取 [计数1] ＞ 96 且 表达式_提取 [计数1] ＜ 123 或 表达式_提取 [计数1] ＝ 95)

                    字符串缓存 ＝ 到字节集 (“”)
                    .循环判断首 ()
                        字符串缓存 ＝ 字符串缓存 ＋ 到字节集 (表达式_提取 [计数1])
                        计数1 ＝ 计数1 ＋ 1
                    .循环判断尾 (表达式_提取 [计数1] ＞ 47 且 表达式_提取 [计数1] ＜ 58 或 表达式_提取 [计数1] ＞ 64 且 表达式_提取 [计数1] ＜ 91 或 表达式_提取 [计数1] ＞ 96 且 表达式_提取 [计数1] ＜ 123 或 表达式_提取 [计数1] ＝ 95)

                    计数2 ＝ 操作数查询 (字符串缓存)

                    .判断开始 (右移 (计数2, 16) ＝ #无符号char 或 右移 (计数2, 16) ＝ #无符号int 或 右移 (计数2, 16) ＝ #无符号长int 或 右移 (计数2, 16) ＝ #有符号char 或 右移 (计数2, 16) ＝ #有符号int 或 右移 (计数2, 16) ＝ #有符号长int 或 右移 (计数2, 16) ＝ #无符号char指针 或 右移 (计数2, 16) ＝ #无符号int指针 或 右移 (计数2, 16) ＝ #无符号长int指针 或 右移 (计数2, 16) ＝ #有符号char指针 或 右移 (计数2, 16) ＝ #有符号int指针 或 右移 (计数2, 16) ＝ #有符号长int指针 或 右移 (计数2, 16) ＝ #ACC)

                        状态 ＝ 子表达式处理 (到字节集 (到字节 (右移 (计数2, 16))) ＋ 到字节集 (到字节 (右移 (计数2, 8))) ＋ 到字节集 (到字节 (计数2)) ＋ 到字节集 (“!=0  ”))

                        .如果真 (状态 ＝ “完成”)

                            .判断开始 (右移 (子表达式处理_返回值, 16) ＝ #待修改跳转地址)

                                待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 条件真跳转地址 [表达式括号数 ＋ 1]
                                待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 条件假跳转地址 [表达式括号数 ＋ 1]

                                条件真跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)
                                条件假跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)


                                状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, #待修改跳转地址 × 65536)
                                子表达式 [起始地址_提取 ＋ 1] ＝ #有符号ACC
                                表达式累加器地址 ＝ 起始地址_提取
                                累加器内容状态 ＝ “有符号ACC”

                                .如果真 (状态 ＝ “完成”)

                                    计数1 ＝ 起始地址_提取 ＋ 2

                                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                        子表达式 [计数1] ＝ 32
                                        计数1 ＝ 计数1 ＋ 1
                                    .判断循环尾 ()

                                    计数1 ＝ 1

                                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                        主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                                        计数1 ＝ 计数1 ＋ 1
                                    .判断循环尾 ()

                                    子表达式 ＝ 到字节集 (“”)
                                    名称符号 ＝ 到字节集 (“”)
                                    表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                                    运算符标志 ＝ 0
                                    状态 ＝ “继续”

                                .如果真结束



                            .默认
                                状态 ＝ “主表达式处理_)_子表达式处理_返回值错误...”
                            .判断结束

                        .如果真结束



                    .判断 (右移 (计数2, 16) ＝ #常量 或 右移 (计数2, 16) ＝ #无符号char数组 或 右移 (计数2, 16) ＝ #无符号int数组 或 右移 (计数2, 16) ＝ #无符号长int数组 或 右移 (计数2, 16) ＝ #有符号char数组 或 右移 (计数2, 16) ＝ #有符号int数组 或 右移 (计数2, 16) ＝ #有符号长int数组)

                        .判断开始 (右移 (计数2, 16) ＝ #常量 且 常量值 [位与 (计数2, 65535) ＋ 1] ≠ 0 或 (右移 (计数2, 16) ＝ #无符号char数组 或 右移 (计数2, 16) ＝ #无符号int数组 或 右移 (计数2, 16) ＝ #无符号长int数组 或 右移 (计数2, 16) ＝ #有符号char数组 或 右移 (计数2, 16) ＝ #有符号int数组 或 右移 (计数2, 16) ＝ #有符号长int数组) 且 位与 (计数2, 65535) ≠ 0)
                            待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                            JMP (0)
                            待修改条件假跳转地址 ＝ 到字节集 (“”)
                            待修改条件跳转出口状态 ＝ “假”

                        .默认
                            待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                            JMP (0)
                            待修改条件真跳转地址 ＝ 到字节集 (“”)
                            待修改条件跳转出口状态 ＝ “真”

                        .判断结束


                        待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 条件真跳转地址 [表达式括号数 ＋ 1]
                        待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 条件假跳转地址 [表达式括号数 ＋ 1]

                        条件真跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)
                        条件假跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)


                        状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, #待修改跳转地址 × 65536)
                        子表达式 [起始地址_提取 ＋ 1] ＝ #有符号ACC
                        表达式累加器地址 ＝ 起始地址_提取
                        累加器内容状态 ＝ “有符号ACC”

                        .如果真 (状态 ＝ “完成”)

                            计数1 ＝ 起始地址_提取 ＋ 2

                            .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                子表达式 [计数1] ＝ 32
                                计数1 ＝ 计数1 ＋ 1
                            .判断循环尾 ()

                            计数1 ＝ 1

                            .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                                计数1 ＝ 计数1 ＋ 1
                            .判断循环尾 ()

                            子表达式 ＝ 到字节集 (“”)
                            名称符号 ＝ 到字节集 (“”)
                            表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                            运算符标志 ＝ 0
                            状态 ＝ “继续”

                        .如果真结束


                    .默认
                        状态 ＝ “主表达式处理_)_操作数查询错误”
                    .判断结束




                .判断 (表达式_提取 [计数1] ＝ #无符号char 或 表达式_提取 [计数1] ＝ #无符号int 或 表达式_提取 [计数1] ＝ #无符号长int 或 表达式_提取 [计数1] ＝ #有符号char 或 表达式_提取 [计数1] ＝ #有符号int 或 表达式_提取 [计数1] ＝ #有符号长int 或 表达式_提取 [计数1] ＝ #无符号char指针 或 表达式_提取 [计数1] ＝ #无符号int指针 或 表达式_提取 [计数1] ＝ #无符号长int指针 或 表达式_提取 [计数1] ＝ #有符号char指针 或 表达式_提取 [计数1] ＝ #有符号int指针 或 表达式_提取 [计数1] ＝ #有符号长int指针 或 表达式_提取 [计数1] ＝ #ACC 或 表达式_提取 [计数1] ＝ #无符号ACC 或 表达式_提取 [计数1] ＝ #有符号ACC 或 表达式_提取 [计数1] ＝ #无符号char指针指向内容 或 表达式_提取 [计数1] ＝ #无符号int指针指向内容 或 表达式_提取 [计数1] ＝ #无符号长int指针指向内容 或 表达式_提取 [计数1] ＝ #有符号char指针指向内容 或 表达式_提取 [计数1] ＝ #有符号int指针指向内容 或 表达式_提取 [计数1] ＝ #有符号长int指针指向内容)

                    状态 ＝ 子表达式处理 (到字节集 (表达式_提取 [计数1]) ＋ 到字节集 (表达式_提取 [计数1 ＋ 1]) ＋ 到字节集 (表达式_提取 [计数1 ＋ 2]) ＋ 到字节集 (“!=0  ”))

                    .如果真 (状态 ＝ “完成”)

                        .判断开始 (右移 (子表达式处理_返回值, 16) ＝ #待修改跳转地址)

                            待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 条件真跳转地址 [表达式括号数 ＋ 1]
                            待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 条件假跳转地址 [表达式括号数 ＋ 1]

                            条件真跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)
                            条件假跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)


                            状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, #待修改跳转地址 × 65536)
                            子表达式 [起始地址_提取 ＋ 1] ＝ #有符号ACC
                            表达式累加器地址 ＝ 起始地址_提取
                            累加器内容状态 ＝ “有符号ACC”

                            .如果真 (状态 ＝ “完成”)

                                计数1 ＝ 起始地址_提取 ＋ 2

                                .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                    子表达式 [计数1] ＝ 32
                                    计数1 ＝ 计数1 ＋ 1
                                .判断循环尾 ()

                                计数1 ＝ 1

                                .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                    主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                                    计数1 ＝ 计数1 ＋ 1
                                .判断循环尾 ()

                                子表达式 ＝ 到字节集 (“”)
                                名称符号 ＝ 到字节集 (“”)
                                表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                                运算符标志 ＝ 0
                                状态 ＝ “继续”

                            .如果真结束



                        .默认
                            状态 ＝ “主表达式处理_)_子表达式处理_返回值错误...”
                        .判断结束

                    .如果真结束




                .判断 (表达式_提取 [计数1] ＝ #立即数)

                    .判断开始 (立即数值 [表达式_提取 [计数1 ＋ 1] × 256 ＋ 表达式_提取 [计数1 ＋ 2] ＋ 1] ≠ 0)
                        待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                        JMP (0)
                        待修改条件假跳转地址 ＝ 到字节集 (“”)
                        待修改条件跳转出口状态 ＝ “假”

                    .默认
                        待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                        JMP (0)
                        待修改条件真跳转地址 ＝ 到字节集 (“”)
                        待修改条件跳转出口状态 ＝ “真”

                    .判断结束


                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 条件真跳转地址 [表达式括号数 ＋ 1]
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 条件假跳转地址 [表达式括号数 ＋ 1]

                    条件真跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)
                    条件假跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)


                    状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, #待修改跳转地址 × 65536)
                    子表达式 [起始地址_提取 ＋ 1] ＝ #有符号ACC
                    表达式累加器地址 ＝ 起始地址_提取
                    累加器内容状态 ＝ “有符号ACC”

                    .如果真 (状态 ＝ “完成”)

                        计数1 ＝ 起始地址_提取 ＋ 2

                        .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                            子表达式 [计数1] ＝ 32
                            计数1 ＝ 计数1 ＋ 1
                        .判断循环尾 ()

                        计数1 ＝ 1

                        .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                            主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                            计数1 ＝ 计数1 ＋ 1
                        .判断循环尾 ()

                        子表达式 ＝ 到字节集 (“”)
                        名称符号 ＝ 到字节集 (“”)
                        表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                        运算符标志 ＝ 0
                        状态 ＝ “继续”

                    .如果真结束




                .判断 (表达式_提取 [计数1] ＝ #待修改跳转地址)

                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 条件真跳转地址 [表达式括号数 ＋ 1]
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 条件假跳转地址 [表达式括号数 ＋ 1]

                    条件真跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)
                    条件假跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)


                    状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, #待修改跳转地址 × 65536)
                    子表达式 [起始地址_提取 ＋ 1] ＝ #有符号ACC
                    表达式累加器地址 ＝ 起始地址_提取
                    累加器内容状态 ＝ “有符号ACC”

                    .如果真 (状态 ＝ “完成”)

                        计数1 ＝ 起始地址_提取 ＋ 2

                        .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                            子表达式 [计数1] ＝ 32
                            计数1 ＝ 计数1 ＋ 1
                        .判断循环尾 ()

                        计数1 ＝ 1

                        .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                            主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                            计数1 ＝ 计数1 ＋ 1
                        .判断循环尾 ()

                        子表达式 ＝ 到字节集 (“”)
                        名称符号 ＝ 到字节集 (“”)
                        表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                        运算符标志 ＝ 0
                        状态 ＝ “继续”

                    .如果真结束



                .默认
                    状态 ＝ “主表达式处理_)_操作数类型错误_!- =~...”
                .判断结束



            .判断结束


        .判断 (三目运算符跳转表偏址 [表达式括号数 ＋ 1] － 三目运算符跳转表基址 [表达式括号数 ＋ 1] ＝ 0)

            .判断开始 (取字节集长度 (三目运算符条件真尾跳转地址 [三目运算符跳转表偏址 [表达式括号数 ＋ 1] ＋ 1]) ≠ 0)

                子表达式二级提取 (子表达式)

                状态 ＝ 子表达式处理 (表达式_提取)

                .如果真 (状态 ＝ “完成”)

                    子表达式 [起始地址_提取 ＋ 1] ＝ 右移 (子表达式处理_返回值, 16)
                    子表达式 [起始地址_提取 ＋ 2] ＝ 右移 (子表达式处理_返回值, 8)
                    子表达式 [起始地址_提取 ＋ 3] ＝ 子表达式处理_返回值

                    计数1 ＝ 起始地址_提取 ＋ 4

                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                        子表达式 [计数1] ＝ 32
                        计数1 ＝ 计数1 ＋ 1
                    .判断循环尾 ()

                    计数1 ＝ 1

                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                        主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                        计数1 ＝ 计数1 ＋ 1
                    .判断循环尾 ()

                    子表达式 ＝ 到字节集 (“”)
                    名称符号 ＝ 到字节集 (“”)
                    表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                    运算符标志 ＝ 0
                    状态 ＝ “继续”


                    字节集缓存 ＝ 三目运算符条件真尾跳转地址 [三目运算符跳转表偏址 [表达式括号数 ＋ 1] ＋ 1]

                    计数1 ＝ 1

                    .判断循环首 (计数1 ＜ 取字节集长度 (字节集缓存))
                        修改R2R3 (字节集缓存 [计数1] ＋ 字节集缓存 [计数1 ＋ 1] × 256, ROM_缓存使用字节)
                        计数1 ＝ 计数1 ＋ 2
                    .判断循环尾 ()

                    三目运算符条件真尾跳转地址 [三目运算符跳转表偏址 [表达式括号数 ＋ 1] ＋ 1] ＝ 到字节集 (“”)

                .如果真结束



            .判断 (运算符标志 ＝ 1)

                状态 ＝ 子表达式处理 (子表达式)

                .如果真 (状态 ＝ “完成”)

                    .判断开始 (右移 (子表达式处理_返回值, 16) ＝ #无符号ACC)
                        累加器内容状态 ＝ “无符号ACC”
                        表达式累加器地址 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                    .判断 (右移 (子表达式处理_返回值, 16) ＝ #有符号ACC)
                        累加器内容状态 ＝ “有符号ACC”
                        表达式累加器地址 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                    .判断 (右移 (子表达式处理_返回值, 16) ＝ #待修改跳转地址)
                        状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, #待修改跳转地址 × 65536)
                        累加器内容状态 ＝ “有符号ACC”
                        表达式累加器地址 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                        子表达式处理_返回值 ＝ #有符号ACC × 65536
                    .默认

                    .判断结束

                    .如果真 (状态 ＝ “完成”)

                        主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 1] ＝ 右移 (子表达式处理_返回值, 16)
                        主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 2] ＝ 右移 (子表达式处理_返回值, 8)
                        主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 3] ＝ 子表达式处理_返回值

                        计数1 ＝ 子表达式起始地址 [表达式括号数 ＋ 1] ＋ 4

                        .判断循环首 (计数1 ≤ 表达式指针)
                            主表达式 [计数1] ＝ 32
                            计数1 ＝ 计数1 ＋ 1
                        .判断循环尾 ()

                        子表达式 ＝ 到字节集 (“”)
                        名称符号 ＝ 到字节集 (“”)
                        表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                        运算符标志 ＝ 0
                        状态 ＝ “继续”
                    .如果真结束

                .如果真结束



            .判断 (函数标志 [表达式括号数 ＋ 1] ＝ 1)

                .判断开始 (到文本 (表达式括号前名称符号 [表达式括号数 ＋ 1]) ＝ “sizeof”)

                    .判断开始 (取字节集长度 (名称符号) ≠ 0)

                        .判断开始 (名称符号 [1] ＞ 64 且 名称符号 [1] ＜ 91 或 名称符号 [1] ＞ 96 且 名称符号 [1] ＜ 123 或 名称符号 [1] ＝ 95)

                            计数1 ＝ 操作数查询 (名称符号)

                            .判断开始 (计数1 ≠ 0)

                                .判断开始 (右移 (计数1, 16) ＝ #无符号char 或 右移 (计数1, 16) ＝ #有符号char 或 右移 (计数1, 16) ＝ #无符号char指针指向内容 或 右移 (计数1, 16) ＝ #有符号char指针指向内容 或 右移 (计数1, 16) ＝ #无符号ACC 或 右移 (计数1, 16) ＝ #有符号ACC 或 右移 (计数1, 16) ＝ #ACC)
                                    计数1 ＝ 1
                                .判断 (右移 (计数1, 16) ＝ #无符号int 或 右移 (计数1, 16) ＝ #有符号int 或 右移 (计数1, 16) ＝ #无符号int指针指向内容 或 右移 (计数1, 16) ＝ #有符号int指针指向内容 或 右移 (计数1, 16) ＝ #无符号char指针 或 右移 (计数1, 16) ＝ #有符号char指针 或 右移 (计数1, 16) ＝ #无符号int指针 或 右移 (计数1, 16) ＝ #有符号int指针 或 右移 (计数1, 16) ＝ #无符号长int指针 或 右移 (计数1, 16) ＝ #有符号长int指针)
                                    计数1 ＝ 2
                                .判断 (右移 (计数1, 16) ＝ #无符号长int 或 右移 (计数1, 16) ＝ #有符号长int 或 右移 (计数1, 16) ＝ #无符号长int指针指向内容 或 右移 (计数1, 16) ＝ #有符号长int指针指向内容)
                                    计数1 ＝ 4
                                .判断 (右移 (计数1, 16) ＝ #常量 或 右移 (计数1, 16) ＝ #立即数)

                                    .判断开始 (右移 (计数1, 16) ＝ #常量)
                                        计数1 ＝ 常量值 [位与 (计数1, 65535) ＋ 1]
                                    .默认
                                        计数1 ＝ 立即数值 [位与 (计数1, 65535) ＋ 1]
                                    .判断结束

                                    .判断开始 (计数1 ≤ 127 且 计数1 ≥ -128)
                                        计数1 ＝ 1
                                    .判断 (计数1 ≤ 32767 且 计数1 ≥ -32768)
                                        计数1 ＝ 2
                                    .默认
                                        计数1 ＝ 4
                                    .判断结束


                                .判断 (右移 (计数1, 16) ＝ #无符号char数组 或 右移 (计数1, 16) ＝ #有符号char数组 或 右移 (计数1, 16) ＝ #无符号int数组 或 右移 (计数1, 16) ＝ #有符号int数组 或 右移 (计数1, 16) ＝ #无符号长int数组 或 右移 (计数1, 16) ＝ #有符号长int数组)

                                    状态 ＝ “主表达式处理_)_sizeof_操作数错误_!- =~...”

                                .默认
                                    状态 ＝ “主表达式处理_)_sizeof_操作数错误_!- =~...”
                                .判断结束


                            .默认
                                状态 ＝ “主表达式处理_)_sizeof_操作数查询错误_!- =~...”
                            .判断结束


                        .判断 (名称符号 [1] ＝ #无符号char 或 名称符号 [1] ＝ #有符号char 或 名称符号 [1] ＝ #无符号char指针指向内容 或 名称符号 [1] ＝ #有符号char指针指向内容 或 名称符号 [1] ＝ #无符号ACC 或 名称符号 [1] ＝ #有符号ACC 或 名称符号 [1] ＝ #ACC)
                            计数1 ＝ 1
                        .判断 (名称符号 [1] ＝ #无符号int 或 名称符号 [1] ＝ #有符号int 或 名称符号 [1] ＝ #无符号int指针指向内容 或 名称符号 [1] ＝ #有符号int指针指向内容 或 名称符号 [1] ＝ #无符号char指针 或 名称符号 [1] ＝ #有符号char指针 或 名称符号 [1] ＝ #无符号int指针 或 名称符号 [1] ＝ #有符号int指针 或 名称符号 [1] ＝ #无符号长int指针 或 名称符号 [1] ＝ #有符号长int指针)
                            计数1 ＝ 2
                        .判断 (名称符号 [1] ＝ #无符号长int 或 名称符号 [1] ＝ #有符号长int 或 名称符号 [1] ＝ #无符号长int指针指向内容 或 名称符号 [1] ＝ #有符号长int指针指向内容)
                            计数1 ＝ 4
                        .判断 (名称符号 [1] ＝ #立即数)

                            计数1 ＝ 立即数值 [名称符号 [2] × 256 ＋ 名称符号 [3] ＋ 1]

                            .判断开始 (计数1 ≤ 127 且 计数1 ≥ -128)
                                计数1 ＝ 1
                            .判断 (计数1 ≤ 32767 且 计数1 ≥ -32768)
                                计数1 ＝ 2
                            .默认
                                计数1 ＝ 4
                            .判断结束


                        .判断 (名称符号 [1] ＝ #无符号char数组 或 名称符号 [1] ＝ #有符号char数组 或 名称符号 [1] ＝ #无符号int数组 或 名称符号 [1] ＝ #有符号int数组 或 名称符号 [1] ＝ #无符号长int数组 或 名称符号 [1] ＝ #有符号长int数组)

                            状态 ＝ “主表达式处理_)_sizeof_操作数错误_!- =~...”

                        .默认
                            状态 ＝ “主表达式处理_)_sizeof_操作数错误_!- =~...”
                        .判断结束



                        .如果真 (状态 ＝ “继续”)

                            立即数值 [立即数总数 ＋ 1] ＝ 计数1

                            主表达式 [表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 1] ＝ #立即数
                            主表达式 [表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 2] ＝ 右移 (立即数总数, 8)
                            主表达式 [表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 3] ＝ 立即数总数

                            立即数总数 ＝ 立即数总数 ＋ 1

                            计数1 ＝ 表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 4

                            .判断循环首 (计数1 ≤ 表达式指针 ＋ 1)
                                主表达式 [计数1] ＝ 32
                                计数1 ＝ 计数1 ＋ 1
                            .判断循环尾 ()

                            子表达式 ＝ 到字节集 (“”)
                            名称符号 ＝ 到字节集 (“”)
                            表达式括号数 ＝ 表达式括号数 － 1
                            表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]

                            状态 ＝ “继续”


                        .如果真结束



                    .默认
                        状态 ＝ “主表达式处理_)_sizeof_操作数不能空!- =~...”
                    .判断结束




                .默认

                    .判断开始 (累加器内容状态 ≠ “ACC”)

                        状态 ＝ 二元式机器码生成 (0, #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, #ACC × 65536)
                        .如果真 (状态 ＝ “完成”)

                            .判断开始 (累加器内容状态 ＝ “无符号ACC”)
                                计数4 ＝ #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                            .默认
                                计数4 ＝ #有符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                            .判断结束

                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 1

                            主表达式 [表达式累加器地址 ＋ 1] ＝ 右移 (计数4, 16)
                            主表达式 [表达式累加器地址 ＋ 2] ＝ 右移 (计数4, 8)
                            主表达式 [表达式累加器地址 ＋ 3] ＝ 计数4
                            累加器内容状态 ＝ “ACC”

                        .如果真结束

                    .默认
                        状态 ＝ “完成”
                    .判断结束

                    .如果真 (状态 ＝ “完成”)

                        状态 ＝ “继续”

                        计数2 ＝ 表达式括号地址 [表达式括号数 ＋ 1] ＋ 2

                        计数3 ＝ 0

                        .循环判断首 ()

                            .判断循环首 (到文本 (到字节集 (主表达式 [计数2])) ＝ “ ”)
                                计数2 ＝ 计数2 ＋ 1
                            .判断循环尾 ()

                            字符串缓存 ＝ 到字节集 (“”)
                            .判断开始 (到数值 (主表达式 [计数2]) ＞ 64 且 到数值 (主表达式 [计数2]) ＜ 91 或 到数值 (主表达式 [计数2]) ＞ 96 且 到数值 (主表达式 [计数2]) ＜ 123 或 到数值 (主表达式 [计数2]) ＝ 95)

                                .循环判断首 ()
                                    字符串缓存 ＝ 字符串缓存 ＋ 到字节集 (主表达式 [计数2])
                                    计数2 ＝ 计数2 ＋ 1
                                .循环判断尾 (到数值 (主表达式 [计数2]) ＞ 47 且 到数值 (主表达式 [计数2]) ＜ 58 或 到数值 (主表达式 [计数2]) ＞ 64 且 到数值 (主表达式 [计数2]) ＜ 91 或 到数值 (主表达式 [计数2]) ＞ 96 且 到数值 (主表达式 [计数2]) ＜ 123 或 到数值 (主表达式 [计数2]) ＝ 95)

                                函数实参内容 [计数3 ＋ 1] ＝ 操作数查询 (字符串缓存)

                                .如果真 (函数实参内容 [计数3 ＋ 1] ＝ 0)
                                    状态 ＝ “主表达式处理_)_函数实参未找到_!- =~...”
                                .如果真结束

                                计数3 ＝ 计数3 ＋ 1



                            .判断 (到数值 (主表达式 [计数2]) ＞ 47 且 到数值 (主表达式 [计数2]) ＜ 58)

                                .循环判断首 ()
                                    字符串缓存 ＝ 字符串缓存 ＋ 到字节集 (主表达式 [计数2])
                                    计数2 ＝ 计数2 ＋ 1
                                .循环判断尾 (到数值 (主表达式 [计数2]) ＞ 47 且 到数值 (主表达式 [计数2]) ＜ 58)

                                立即数值 [立即数总数 ＋ 1] ＝ 到数值 (到文本 (字符串缓存))
                                函数实参内容 [计数3 ＋ 1] ＝ #立即数 × 65536 ＋ 位与 (立即数总数, 65535)
                                立即数总数 ＝ 立即数总数 ＋ 1
                                计数3 ＝ 计数3 ＋ 1


                            .判断 (到数值 (主表达式 [计数2]) ≥ 128 且 到数值 (主表达式 [计数2]) ≤ 255)

                                函数实参内容 [计数3 ＋ 1] ＝ 到数值 (主表达式 [计数2]) × 65536 ＋ 到数值 (主表达式 [计数2 ＋ 1]) × 256 ＋ 到数值 (主表达式 [计数2 ＋ 2])
                                计数2 ＝ 计数2 ＋ 3
                                计数3 ＝ 计数3 ＋ 1

                            .判断 (到文本 (到字节集 (主表达式 [计数2])) ＝ “)”)

                                状态 ＝ “完成”

                            .默认
                                状态 ＝ “主表达式处理_)_函数参数扫描错误_!- =~...”
                            .判断结束


                            .如果真 (状态 ＝ “继续”)

                                .判断循环首 (到文本 (到字节集 (主表达式 [计数2])) ＝ “ ”)
                                    计数2 ＝ 计数2 ＋ 1
                                .判断循环尾 ()

                                .判断开始 (到文本 (到字节集 (主表达式 [计数2])) ＝ “,”)
                                    计数2 ＝ 计数2 ＋ 1
                                .判断 (到文本 (到字节集 (主表达式 [计数2])) ＝ “)”)
                                    状态 ＝ “完成”
                                .默认
                                    状态 ＝ “主表达式处理_)_函数参数扫描错误_!- =~.....”
                                .判断结束


                            .如果真结束


                        .循环判断尾 (状态 ＝ “继续”)

                        .如果真 (状态 ＝ “完成”)

                            计数1 ＝ 1

                            .判断循环首 (计数1 ≤ 函数总数 且 表达式括号前名称符号 [表达式括号数 ＋ 1] ≠ 函数名称 [计数1])
                                计数1 ＝ 计数1 ＋ 1
                            .判断循环尾 ()

                            .判断开始 (计数1 ≤ 函数总数)

                                .判断开始 (函数参数偏址 [计数1] － 函数参数基址 [计数1] ＝ 计数3)

                                    .判断开始 (右移 (函数入口地址 [计数1], 16) ＝ 右移 (函数入口地址 [函数总数 ＋ 1], 16) 或 函数共享状态 [计数1] ＝ “页间共享”)

                                        计数2 ＝ 函数参数基址 [计数1]
                                        .判断循环首 (计数2 ＜ 函数参数偏址 [计数1])

                                            .判断开始 (函数参数类型 [计数2 ＋ 1] ＝ “unsigned char”)
                                                函数形参内容 [计数2 － 函数参数基址 [计数1] ＋ 1] ＝ #无符号char × 65536 ＋ 位与 (函数参数地址 [计数2 ＋ 1], 65535)
                                            .判断 (函数参数类型 [计数2 ＋ 1] ＝ “unsigned int”)
                                                函数形参内容 [计数2 － 函数参数基址 [计数1] ＋ 1] ＝ #无符号int × 65536 ＋ 位与 (函数参数地址 [计数2 ＋ 1], 65535)
                                            .判断 (函数参数类型 [计数2 ＋ 1] ＝ “unsigned long int”)
                                                函数形参内容 [计数2 － 函数参数基址 [计数1] ＋ 1] ＝ #无符号长int × 65536 ＋ 位与 (函数参数地址 [计数2 ＋ 1], 65535)
                                            .判断 (函数参数类型 [计数2 ＋ 1] ＝ “char”)
                                                函数形参内容 [计数2 － 函数参数基址 [计数1] ＋ 1] ＝ #有符号char × 65536 ＋ 位与 (函数参数地址 [计数2 ＋ 1], 65535)
                                            .判断 (函数参数类型 [计数2 ＋ 1] ＝ “int”)
                                                函数形参内容 [计数2 － 函数参数基址 [计数1] ＋ 1] ＝ #有符号int × 65536 ＋ 位与 (函数参数地址 [计数2 ＋ 1], 65535)
                                            .判断 (函数参数类型 [计数2 ＋ 1] ＝ “long int”)
                                                函数形参内容 [计数2 － 函数参数基址 [计数1] ＋ 1] ＝ #有符号长int × 65536 ＋ 位与 (函数参数地址 [计数2 ＋ 1], 65535)
                                            .判断 (函数参数类型 [计数2 ＋ 1] ＝ “unsigned char*”)
                                                函数形参内容 [计数2 － 函数参数基址 [计数1] ＋ 1] ＝ #无符号char指针 × 65536 ＋ 位与 (函数参数地址 [计数2 ＋ 1], 65535)
                                            .判断 (函数参数类型 [计数2 ＋ 1] ＝ “unsigned int*”)
                                                函数形参内容 [计数2 － 函数参数基址 [计数1] ＋ 1] ＝ #无符号int指针 × 65536 ＋ 位与 (函数参数地址 [计数2 ＋ 1], 65535)
                                            .判断 (函数参数类型 [计数2 ＋ 1] ＝ “unsigned long int*”)
                                                函数形参内容 [计数2 － 函数参数基址 [计数1] ＋ 1] ＝ #无符号长int指针 × 65536 ＋ 位与 (函数参数地址 [计数2 ＋ 1], 65535)
                                            .判断 (函数参数类型 [计数2 ＋ 1] ＝ “char*”)
                                                函数形参内容 [计数2 － 函数参数基址 [计数1] ＋ 1] ＝ #有符号char指针 × 65536 ＋ 位与 (函数参数地址 [计数2 ＋ 1], 65535)
                                            .判断 (函数参数类型 [计数2 ＋ 1] ＝ “int*”)
                                                函数形参内容 [计数2 － 函数参数基址 [计数1] ＋ 1] ＝ #有符号int指针 × 65536 ＋ 位与 (函数参数地址 [计数2 ＋ 1], 65535)
                                            .判断 (函数参数类型 [计数2 ＋ 1] ＝ “long int*”)
                                                函数形参内容 [计数2 － 函数参数基址 [计数1] ＋ 1] ＝ #有符号长int指针 × 65536 ＋ 位与 (函数参数地址 [计数2 ＋ 1], 65535)
                                            .判断 (函数参数类型 [计数2 ＋ 1] ＝ “unsigned char[]”)
                                                函数形参内容 [计数2 － 函数参数基址 [计数1] ＋ 1] ＝ #无符号char指针 × 65536 ＋ 位与 (函数参数地址 [计数2 ＋ 1], 65535)
                                            .判断 (函数参数类型 [计数2 ＋ 1] ＝ “unsigned int[]”)
                                                函数形参内容 [计数2 － 函数参数基址 [计数1] ＋ 1] ＝ #无符号int指针 × 65536 ＋ 位与 (函数参数地址 [计数2 ＋ 1], 65535)
                                            .判断 (函数参数类型 [计数2 ＋ 1] ＝ “unsigned long int[]”)
                                                函数形参内容 [计数2 － 函数参数基址 [计数1] ＋ 1] ＝ #无符号长int指针 × 65536 ＋ 位与 (函数参数地址 [计数2 ＋ 1], 65535)
                                            .判断 (函数参数类型 [计数2 ＋ 1] ＝ “char[]”)
                                                函数形参内容 [计数2 － 函数参数基址 [计数1] ＋ 1] ＝ #有符号char指针 × 65536 ＋ 位与 (函数参数地址 [计数2 ＋ 1], 65535)
                                            .判断 (函数参数类型 [计数2 ＋ 1] ＝ “int[]”)
                                                函数形参内容 [计数2 － 函数参数基址 [计数1] ＋ 1] ＝ #有符号int指针 × 65536 ＋ 位与 (函数参数地址 [计数2 ＋ 1], 65535)
                                            .判断 (函数参数类型 [计数2 ＋ 1] ＝ “long int[]”)
                                                函数形参内容 [计数2 － 函数参数基址 [计数1] ＋ 1] ＝ #有符号长int指针 × 65536 ＋ 位与 (函数参数地址 [计数2 ＋ 1], 65535)
                                            .默认
                                                状态 ＝ “没找到函数参数类型”
                                            .判断结束

                                            计数2 ＝ 计数2 ＋ 1

                                        .判断循环尾 ()

                                        .如果真 (状态 ＝ “完成”)

                                            .判断循环首 (计数3 ＞ 0 且 状态 ＝ “完成”)
                                                状态 ＝ 子表达式处理 (到字节集 (到字节 (右移 (函数形参内容 [计数3], 16))) ＋ 到字节集 (到字节 (右移 (函数形参内容 [计数3], 8))) ＋ 到字节集 (到字节 (函数形参内容 [计数3])) ＋ 到字节集 (“=”) ＋ 到字节集 (到字节 (右移 (函数实参内容 [计数3], 16))) ＋ 到字节集 (到字节 (右移 (函数实参内容 [计数3], 8))) ＋ 到字节集 (到字节 (函数实参内容 [计数3])))
                                                计数3 ＝ 计数3 － 1
                                            .判断循环尾 ()

                                            .如果真 (状态 ＝ “完成”)

                                                .判断开始 (函数共享状态 [计数1] ＝ “页内共享”)

                                                    计数3 ＝ ROM_缓存使用字节 ＋ 19

                                                    A等于立即数 (计数3)
                                                    _RAM等于A (函数返回地址 [计数1])
                                                    A等于立即数 (右移 (计数3, 8))
                                                    _RAM等于A (函数返回地址 [计数1] ＋ 1)
                                                    JMP (函数入口地址 [计数1])


                                                .默认
                                                    计数3 ＝ ROM_缓存使用字节 ＋ 47

                                                    A等于立即数 (计数3)
                                                    _RAM等于A (函数返回地址 [计数1])
                                                    A等于立即数 (右移 (计数3, 8))
                                                    _RAM等于A (函数返回地址 [计数1] ＋ 1)
                                                    A等于立即数 (右移 (函数入口地址 [函数总数 ＋ 1], 16))
                                                    _RAM等于A (函数返回地址 [计数1] ＋ 2)

                                                    A等于立即数 (函数入口地址 [计数1])
                                                    _RAM等于A (#页间跳转地址_L)
                                                    A等于立即数 (右移 (函数入口地址 [计数1], 8))
                                                    _RAM等于A (#页间跳转地址_H)
                                                    A等于立即数 (右移 (函数入口地址 [计数1], 16))
                                                    _RAM等于A (#页间跳转地址_CS)
                                                    JMP (65488)

                                                .判断结束




                                                计数2 ＝ 表达式指针 ＋ 2
                                                .判断循环首 (主表达式 [计数2] ＝ 32)
                                                    计数2 ＝ 计数2 ＋ 1
                                                .判断循环尾 ()

                                                .判断开始 (到文本 (到字节集 (主表达式 [计数2])) ＝ “;”)

                                                    .判断开始 (函数类型 [计数1] ＝ “unsigned char”)
                                                        计数3 ＝ #无符号char × 65536 ＋ #函数返回值内存地址
                                                    .判断 (函数类型 [计数1] ＝ “unsigned int”)
                                                        计数3 ＝ #无符号int × 65536 ＋ #函数返回值内存地址
                                                    .判断 (函数类型 [计数1] ＝ “unsigned long int”)
                                                        计数3 ＝ #无符号长int × 65536 ＋ #函数返回值内存地址
                                                    .判断 (函数类型 [计数1] ＝ “char”)
                                                        计数3 ＝ #有符号char × 65536 ＋ #函数返回值内存地址
                                                    .判断 (函数类型 [计数1] ＝ “int”)
                                                        计数3 ＝ #有符号int × 65536 ＋ #函数返回值内存地址
                                                    .判断 (函数类型 [计数1] ＝ “long int”)
                                                        计数3 ＝ #有符号长int × 65536 ＋ #函数返回值内存地址
                                                    .判断 (函数类型 [计数1] ＝ “unsigned char*”)
                                                        计数3 ＝ #无符号char指针 × 65536 ＋ #函数返回值内存地址
                                                    .判断 (函数类型 [计数1] ＝ “unsigned int*”)
                                                        计数3 ＝ #无符号int指针 × 65536 ＋ #函数返回值内存地址
                                                    .判断 (函数类型 [计数1] ＝ “unsigned long int*”)
                                                        计数3 ＝ #无符号长int指针 × 65536 ＋ #函数返回值内存地址
                                                    .判断 (函数类型 [计数1] ＝ “char*”)
                                                        计数3 ＝ #有符号char指针 × 65536 ＋ #函数返回值内存地址
                                                    .判断 (函数类型 [计数1] ＝ “int*”)
                                                        计数3 ＝ #有符号int指针 × 65536 ＋ #函数返回值内存地址
                                                    .判断 (函数类型 [计数1] ＝ “long int*”)
                                                        计数3 ＝ #有符号长int指针 × 65536 ＋ #函数返回值内存地址
                                                    .判断 (函数类型 [计数1] ＝ “void”)
                                                        立即数值 [立即数总数 ＋ 1] ＝ 0
                                                        计数3 ＝ #立即数 × 65536 ＋ 位与 (立即数总数, 65535)
                                                        立即数总数 ＝ 立即数总数 ＋ 1
                                                    .默认
                                                        状态 ＝ “没找到函数类型”
                                                    .判断结束


                                                .默认

                                                    .判断开始 (函数类型 [计数1] ＝ “unsigned char”)

                                                        状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, #无符号char × 65536 ＋ #函数返回值内存地址)
                                                        .如果真 (状态 ＝ “完成”)
                                                            状态 ＝ 二元式机器码生成 (0, #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, #ACC × 65536)
                                                            .如果真 (状态 ＝ “完成”)
                                                                计数3 ＝ #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 1
                                                            .如果真结束

                                                        .如果真结束

                                                    .判断 (函数类型 [计数1] ＝ “unsigned int”)

                                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, #无符号int × 65536 ＋ #函数返回值内存地址)
                                                        计数3 ＝ #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2

                                                    .判断 (函数类型 [计数1] ＝ “unsigned long int”)

                                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, #无符号长int × 65536 ＋ #函数返回值内存地址)
                                                        计数3 ＝ #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4

                                                    .判断 (函数类型 [计数1] ＝ “char”)

                                                        状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, #无符号char × 65536 ＋ #函数返回值内存地址)
                                                        .如果真 (状态 ＝ “完成”)
                                                            状态 ＝ 二元式机器码生成 (0, #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, #ACC × 65536)
                                                            .如果真 (状态 ＝ “完成”)
                                                                计数3 ＝ #有符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 1
                                                            .如果真结束

                                                        .如果真结束

                                                    .判断 (函数类型 [计数1] ＝ “int”)

                                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, #无符号int × 65536 ＋ #函数返回值内存地址)
                                                        计数3 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2

                                                    .判断 (函数类型 [计数1] ＝ “long int”)

                                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, #无符号长int × 65536 ＋ #函数返回值内存地址)
                                                        计数3 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4

                                                    .判断 (函数类型 [计数1] ＝ “unsigned char*”)

                                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, #无符号int × 65536 ＋ #函数返回值内存地址)
                                                        计数3 ＝ #无符号char指针 × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2

                                                    .判断 (函数类型 [计数1] ＝ “unsigned int*”)

                                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, #无符号int × 65536 ＋ #函数返回值内存地址)
                                                        计数3 ＝ #无符号int指针 × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2

                                                    .判断 (函数类型 [计数1] ＝ “unsigned long int*”)

                                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, #无符号int × 65536 ＋ #函数返回值内存地址)
                                                        计数3 ＝ #无符号长int指针 × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2

                                                    .判断 (函数类型 [计数1] ＝ “char*”)

                                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, #无符号int × 65536 ＋ #函数返回值内存地址)
                                                        计数3 ＝ #有符号char指针 × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2

                                                    .判断 (函数类型 [计数1] ＝ “int*”)

                                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, #无符号int × 65536 ＋ #函数返回值内存地址)
                                                        计数3 ＝ #有符号int指针 × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2

                                                    .判断 (函数类型 [计数1] ＝ “long int*”)

                                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, #无符号int × 65536 ＋ #函数返回值内存地址)
                                                        计数3 ＝ #有符号长int指针 × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2

                                                    .判断 (函数类型 [计数1] ＝ “void”)
                                                        立即数值 [立即数总数 ＋ 1] ＝ 0
                                                        计数3 ＝ #立即数 × 65536 ＋ 位与 (立即数总数, 65535)
                                                        立即数总数 ＝ 立即数总数 ＋ 1
                                                    .默认
                                                        状态 ＝ “没找到函数类型”
                                                    .判断结束

                                                .判断结束




                                                .如果真 (状态 ＝ “完成”)

                                                    主表达式 [表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 1] ＝ 右移 (计数3, 16)
                                                    主表达式 [表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 2] ＝ 右移 (计数3, 8)
                                                    主表达式 [表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 3] ＝ 计数3

                                                    计数1 ＝ 表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 4

                                                    .判断循环首 (计数1 ≤ 表达式指针 ＋ 1)
                                                        主表达式 [计数1] ＝ 32
                                                        计数1 ＝ 计数1 ＋ 1
                                                    .判断循环尾 ()

                                                    子表达式 ＝ 到字节集 (“”)
                                                    名称符号 ＝ 到字节集 (“”)
                                                    表达式括号数 ＝ 表达式括号数 － 1
                                                    表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]

                                                    状态 ＝ “继续”

                                                .如果真结束


                                            .如果真结束



                                        .如果真结束


                                    .默认
                                        状态 ＝ “被调函数不同页而且不是页间共享”
                                    .判断结束


                                .判断 (函数参数偏址 [计数1] － 函数参数基址 [计数1] ＞ 计数3)
                                    状态 ＝ “函数参数传递太少”
                                .默认
                                    状态 ＝ “传递了过多的参数”
                                .判断结束


                            .默认
                                状态 ＝ “没有找到函数”
                            .判断结束

                        .如果真结束


                    .如果真结束



                .判断结束



            .默认



                .判断开始 (取字节集长度 (名称符号) ≠ 0)

                    .如果真 (名称符号 [1] ＝ #无符号ACC 或 名称符号 [1] ＝ #有符号ACC)

                        子表达式 ＝ 到字节集 (名称符号 [1])
                        表达式累加器地址 ＝ 表达式括号地址 [表达式括号数 ＋ 1]

                    .如果真结束


                    计数1 ＝ 1
                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                        主表达式 [表达式括号地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                        计数1 ＝ 计数1 ＋ 1
                    .判断循环尾 ()

                    .判断循环首 (表达式括号地址 [表达式括号数 ＋ 1] ＋ 计数1 ≤ 表达式指针 ＋ 1)
                        主表达式 [表达式括号地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 32
                        计数1 ＝ 计数1 ＋ 1
                    .判断循环尾 ()

                    子表达式 ＝ 到字节集 (“”)
                    名称符号 ＝ 到字节集 (“”)
                    表达式括号数 ＝ 表达式括号数 － 1
                    表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]


                .默认
                    状态 ＝ “主表达式处理_)_括号内容错误_!- =~...”
                .判断结束




            .判断结束



        .默认
            状态 ＝ “三目运算符?:错误”
        .判断结束







    .判断 (到文本 (到字节集 (主表达式 [表达式指针 ＋ 1])) ＝ “]”)

        .判断开始 (取字节集长度 (条件真跳转地址 [表达式括号数 ＋ 1]) ≠ 0 或 取字节集长度 (条件假跳转地址 [表达式括号数 ＋ 1]) ≠ 0)

            子表达式一级提取 (子表达式)

            .判断开始 (运算符标志_提取 ＝ 1)

                运算符标志_提取 ＝ 0

                状态 ＝ 子表达式处理 (表达式_提取)

                .如果真 (状态 ＝ “完成”)

                    子表达式 [起始地址_提取 ＋ 1] ＝ 右移 (子表达式处理_返回值, 16)
                    子表达式 [起始地址_提取 ＋ 2] ＝ 右移 (子表达式处理_返回值, 8)
                    子表达式 [起始地址_提取 ＋ 3] ＝ 子表达式处理_返回值

                    计数1 ＝ 起始地址_提取 ＋ 4

                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                        子表达式 [计数1] ＝ 32
                        计数1 ＝ 计数1 ＋ 1
                    .判断循环尾 ()

                    计数1 ＝ 1

                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                        主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                        计数1 ＝ 计数1 ＋ 1
                    .判断循环尾 ()

                    子表达式 ＝ 到字节集 (“”)
                    名称符号 ＝ 到字节集 (“”)
                    表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                    运算符标志 ＝ 0
                    状态 ＝ “继续”
                .如果真结束


            .默认
                计数1 ＝ 1
                .判断循环首 (表达式_提取 [计数1] ＝ 32)
                    计数1 ＝ 计数1 ＋ 1
                .判断循环尾 ()

                .判断开始 (表达式_提取 [计数1] ＞ 47 且 表达式_提取 [计数1] ＜ 58)

                    字符串缓存 ＝ 到字节集 (“”)
                    .循环判断首 ()
                        字符串缓存 ＝ 字符串缓存 ＋ 到字节集 (表达式_提取 [计数1])
                        计数1 ＝ 计数1 ＋ 1
                    .循环判断尾 (表达式_提取 [计数1] ＞ 47 且 表达式_提取 [计数1] ＜ 58)


                    .判断开始 (到数值 (到文本 (字符串缓存)) ≠ 0)
                        待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                        JMP (0)
                        待修改条件假跳转地址 ＝ 到字节集 (“”)
                        待修改条件跳转出口状态 ＝ “假”

                    .默认
                        待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                        JMP (0)
                        待修改条件真跳转地址 ＝ 到字节集 (“”)
                        待修改条件跳转出口状态 ＝ “真”

                    .判断结束


                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 条件真跳转地址 [表达式括号数 ＋ 1]
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 条件假跳转地址 [表达式括号数 ＋ 1]

                    条件真跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)
                    条件假跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)


                    状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, #待修改跳转地址 × 65536)
                    子表达式 [起始地址_提取 ＋ 1] ＝ #有符号ACC
                    表达式累加器地址 ＝ 起始地址_提取
                    累加器内容状态 ＝ “有符号ACC”

                    .如果真 (状态 ＝ “完成”)

                        计数1 ＝ 起始地址_提取 ＋ 2

                        .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                            子表达式 [计数1] ＝ 32
                            计数1 ＝ 计数1 ＋ 1
                        .判断循环尾 ()

                        计数1 ＝ 1

                        .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                            主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                            计数1 ＝ 计数1 ＋ 1
                        .判断循环尾 ()

                        子表达式 ＝ 到字节集 (“”)
                        名称符号 ＝ 到字节集 (“”)
                        表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                        运算符标志 ＝ 0
                        状态 ＝ “继续”

                    .如果真结束



                .判断 (表达式_提取 [计数1] ＞ 64 且 表达式_提取 [计数1] ＜ 91 或 表达式_提取 [计数1] ＞ 96 且 表达式_提取 [计数1] ＜ 123 或 表达式_提取 [计数1] ＝ 95)

                    字符串缓存 ＝ 到字节集 (“”)
                    .循环判断首 ()
                        字符串缓存 ＝ 字符串缓存 ＋ 到字节集 (表达式_提取 [计数1])
                        计数1 ＝ 计数1 ＋ 1
                    .循环判断尾 (表达式_提取 [计数1] ＞ 47 且 表达式_提取 [计数1] ＜ 58 或 表达式_提取 [计数1] ＞ 64 且 表达式_提取 [计数1] ＜ 91 或 表达式_提取 [计数1] ＞ 96 且 表达式_提取 [计数1] ＜ 123 或 表达式_提取 [计数1] ＝ 95)

                    计数2 ＝ 操作数查询 (字符串缓存)

                    .判断开始 (右移 (计数2, 16) ＝ #无符号char 或 右移 (计数2, 16) ＝ #无符号int 或 右移 (计数2, 16) ＝ #无符号长int 或 右移 (计数2, 16) ＝ #有符号char 或 右移 (计数2, 16) ＝ #有符号int 或 右移 (计数2, 16) ＝ #有符号长int 或 右移 (计数2, 16) ＝ #无符号char指针 或 右移 (计数2, 16) ＝ #无符号int指针 或 右移 (计数2, 16) ＝ #无符号长int指针 或 右移 (计数2, 16) ＝ #有符号char指针 或 右移 (计数2, 16) ＝ #有符号int指针 或 右移 (计数2, 16) ＝ #有符号长int指针 或 右移 (计数2, 16) ＝ #ACC)

                        状态 ＝ 子表达式处理 (到字节集 (到字节 (右移 (计数2, 16))) ＋ 到字节集 (到字节 (右移 (计数2, 8))) ＋ 到字节集 (到字节 (计数2)) ＋ 到字节集 (“!=0  ”))

                        .如果真 (状态 ＝ “完成”)

                            .判断开始 (右移 (子表达式处理_返回值, 16) ＝ #待修改跳转地址)

                                待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 条件真跳转地址 [表达式括号数 ＋ 1]
                                待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 条件假跳转地址 [表达式括号数 ＋ 1]

                                条件真跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)
                                条件假跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)


                                状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, #待修改跳转地址 × 65536)
                                子表达式 [起始地址_提取 ＋ 1] ＝ #有符号ACC
                                表达式累加器地址 ＝ 起始地址_提取
                                累加器内容状态 ＝ “有符号ACC”

                                .如果真 (状态 ＝ “完成”)

                                    计数1 ＝ 起始地址_提取 ＋ 2

                                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                        子表达式 [计数1] ＝ 32
                                        计数1 ＝ 计数1 ＋ 1
                                    .判断循环尾 ()

                                    计数1 ＝ 1

                                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                        主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                                        计数1 ＝ 计数1 ＋ 1
                                    .判断循环尾 ()

                                    子表达式 ＝ 到字节集 (“”)
                                    名称符号 ＝ 到字节集 (“”)
                                    表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                                    运算符标志 ＝ 0
                                    状态 ＝ “继续”

                                .如果真结束



                            .默认
                                状态 ＝ “主表达式处理_]_子表达式处理_返回值错误...”
                            .判断结束

                        .如果真结束



                    .判断 (右移 (计数2, 16) ＝ #常量 或 右移 (计数2, 16) ＝ #无符号char数组 或 右移 (计数2, 16) ＝ #无符号int数组 或 右移 (计数2, 16) ＝ #无符号长int数组 或 右移 (计数2, 16) ＝ #有符号char数组 或 右移 (计数2, 16) ＝ #有符号int数组 或 右移 (计数2, 16) ＝ #有符号长int数组)

                        .判断开始 (右移 (计数2, 16) ＝ #常量 且 常量值 [位与 (计数2, 65535) ＋ 1] ≠ 0 或 (右移 (计数2, 16) ＝ #无符号char数组 或 右移 (计数2, 16) ＝ #无符号int数组 或 右移 (计数2, 16) ＝ #无符号长int数组 或 右移 (计数2, 16) ＝ #有符号char数组 或 右移 (计数2, 16) ＝ #有符号int数组 或 右移 (计数2, 16) ＝ #有符号长int数组) 且 位与 (计数2, 65535) ≠ 0)
                            待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                            JMP (0)
                            待修改条件假跳转地址 ＝ 到字节集 (“”)
                            待修改条件跳转出口状态 ＝ “假”

                        .默认
                            待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                            JMP (0)
                            待修改条件真跳转地址 ＝ 到字节集 (“”)
                            待修改条件跳转出口状态 ＝ “真”

                        .判断结束


                        待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 条件真跳转地址 [表达式括号数 ＋ 1]
                        待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 条件假跳转地址 [表达式括号数 ＋ 1]

                        条件真跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)
                        条件假跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)


                        状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, #待修改跳转地址 × 65536)
                        子表达式 [起始地址_提取 ＋ 1] ＝ #有符号ACC
                        表达式累加器地址 ＝ 起始地址_提取
                        累加器内容状态 ＝ “有符号ACC”

                        .如果真 (状态 ＝ “完成”)

                            计数1 ＝ 起始地址_提取 ＋ 2

                            .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                子表达式 [计数1] ＝ 32
                                计数1 ＝ 计数1 ＋ 1
                            .判断循环尾 ()

                            计数1 ＝ 1

                            .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                                计数1 ＝ 计数1 ＋ 1
                            .判断循环尾 ()

                            子表达式 ＝ 到字节集 (“”)
                            名称符号 ＝ 到字节集 (“”)
                            表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                            运算符标志 ＝ 0
                            状态 ＝ “继续”

                        .如果真结束


                    .默认
                        状态 ＝ “主表达式处理_]_操作数查询错误”
                    .判断结束




                .判断 (表达式_提取 [计数1] ＝ #无符号char 或 表达式_提取 [计数1] ＝ #无符号int 或 表达式_提取 [计数1] ＝ #无符号长int 或 表达式_提取 [计数1] ＝ #有符号char 或 表达式_提取 [计数1] ＝ #有符号int 或 表达式_提取 [计数1] ＝ #有符号长int 或 表达式_提取 [计数1] ＝ #无符号char指针 或 表达式_提取 [计数1] ＝ #无符号int指针 或 表达式_提取 [计数1] ＝ #无符号长int指针 或 表达式_提取 [计数1] ＝ #有符号char指针 或 表达式_提取 [计数1] ＝ #有符号int指针 或 表达式_提取 [计数1] ＝ #有符号长int指针 或 表达式_提取 [计数1] ＝ #ACC 或 表达式_提取 [计数1] ＝ #无符号ACC 或 表达式_提取 [计数1] ＝ #有符号ACC 或 表达式_提取 [计数1] ＝ #无符号char指针指向内容 或 表达式_提取 [计数1] ＝ #无符号int指针指向内容 或 表达式_提取 [计数1] ＝ #无符号长int指针指向内容 或 表达式_提取 [计数1] ＝ #有符号char指针指向内容 或 表达式_提取 [计数1] ＝ #有符号int指针指向内容 或 表达式_提取 [计数1] ＝ #有符号长int指针指向内容)

                    状态 ＝ 子表达式处理 (到字节集 (表达式_提取 [计数1]) ＋ 到字节集 (表达式_提取 [计数1 ＋ 1]) ＋ 到字节集 (表达式_提取 [计数1 ＋ 2]) ＋ 到字节集 (“!=0  ”))

                    .如果真 (状态 ＝ “完成”)

                        .判断开始 (右移 (子表达式处理_返回值, 16) ＝ #待修改跳转地址)

                            待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 条件真跳转地址 [表达式括号数 ＋ 1]
                            待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 条件假跳转地址 [表达式括号数 ＋ 1]

                            条件真跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)
                            条件假跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)


                            状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, #待修改跳转地址 × 65536)
                            子表达式 [起始地址_提取 ＋ 1] ＝ #有符号ACC
                            表达式累加器地址 ＝ 起始地址_提取
                            累加器内容状态 ＝ “有符号ACC”

                            .如果真 (状态 ＝ “完成”)

                                计数1 ＝ 起始地址_提取 ＋ 2

                                .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                    子表达式 [计数1] ＝ 32
                                    计数1 ＝ 计数1 ＋ 1
                                .判断循环尾 ()

                                计数1 ＝ 1

                                .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                    主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                                    计数1 ＝ 计数1 ＋ 1
                                .判断循环尾 ()

                                子表达式 ＝ 到字节集 (“”)
                                名称符号 ＝ 到字节集 (“”)
                                表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                                运算符标志 ＝ 0
                                状态 ＝ “继续”

                            .如果真结束



                        .默认
                            状态 ＝ “主表达式处理_]_子表达式处理_返回值错误...”
                        .判断结束

                    .如果真结束




                .判断 (表达式_提取 [计数1] ＝ #立即数)

                    .判断开始 (立即数值 [表达式_提取 [计数1 ＋ 1] × 256 ＋ 表达式_提取 [计数1 ＋ 2] ＋ 1] ≠ 0)
                        待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                        JMP (0)
                        待修改条件假跳转地址 ＝ 到字节集 (“”)
                        待修改条件跳转出口状态 ＝ “假”

                    .默认
                        待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                        JMP (0)
                        待修改条件真跳转地址 ＝ 到字节集 (“”)
                        待修改条件跳转出口状态 ＝ “真”

                    .判断结束


                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 条件真跳转地址 [表达式括号数 ＋ 1]
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 条件假跳转地址 [表达式括号数 ＋ 1]

                    条件真跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)
                    条件假跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)


                    状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, #待修改跳转地址 × 65536)
                    子表达式 [起始地址_提取 ＋ 1] ＝ #有符号ACC
                    表达式累加器地址 ＝ 起始地址_提取
                    累加器内容状态 ＝ “有符号ACC”

                    .如果真 (状态 ＝ “完成”)

                        计数1 ＝ 起始地址_提取 ＋ 2

                        .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                            子表达式 [计数1] ＝ 32
                            计数1 ＝ 计数1 ＋ 1
                        .判断循环尾 ()

                        计数1 ＝ 1

                        .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                            主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                            计数1 ＝ 计数1 ＋ 1
                        .判断循环尾 ()

                        子表达式 ＝ 到字节集 (“”)
                        名称符号 ＝ 到字节集 (“”)
                        表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                        运算符标志 ＝ 0
                        状态 ＝ “继续”

                    .如果真结束




                .判断 (表达式_提取 [计数1] ＝ #待修改跳转地址)

                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 条件真跳转地址 [表达式括号数 ＋ 1]
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 条件假跳转地址 [表达式括号数 ＋ 1]

                    条件真跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)
                    条件假跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)


                    状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, #待修改跳转地址 × 65536)
                    子表达式 [起始地址_提取 ＋ 1] ＝ #有符号ACC
                    表达式累加器地址 ＝ 起始地址_提取
                    累加器内容状态 ＝ “有符号ACC”

                    .如果真 (状态 ＝ “完成”)

                        计数1 ＝ 起始地址_提取 ＋ 2

                        .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                            子表达式 [计数1] ＝ 32
                            计数1 ＝ 计数1 ＋ 1
                        .判断循环尾 ()

                        计数1 ＝ 1

                        .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                            主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                            计数1 ＝ 计数1 ＋ 1
                        .判断循环尾 ()

                        子表达式 ＝ 到字节集 (“”)
                        名称符号 ＝ 到字节集 (“”)
                        表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                        运算符标志 ＝ 0
                        状态 ＝ “继续”

                    .如果真结束



                .默认
                    状态 ＝ “主表达式处理_]_操作数类型错误_!- =~...”
                .判断结束



            .判断结束



        .判断 (三目运算符跳转表偏址 [表达式括号数 ＋ 1] － 三目运算符跳转表基址 [表达式括号数 ＋ 1] ＝ 0)

            .判断开始 (取字节集长度 (三目运算符条件真尾跳转地址 [三目运算符跳转表偏址 [表达式括号数 ＋ 1] ＋ 1]) ≠ 0)

                子表达式二级提取 (子表达式)

                状态 ＝ 子表达式处理 (表达式_提取)

                .如果真 (状态 ＝ “完成”)

                    子表达式 [起始地址_提取 ＋ 1] ＝ 右移 (子表达式处理_返回值, 16)
                    子表达式 [起始地址_提取 ＋ 2] ＝ 右移 (子表达式处理_返回值, 8)
                    子表达式 [起始地址_提取 ＋ 3] ＝ 子表达式处理_返回值

                    计数1 ＝ 起始地址_提取 ＋ 4

                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                        子表达式 [计数1] ＝ 32
                        计数1 ＝ 计数1 ＋ 1
                    .判断循环尾 ()

                    计数1 ＝ 1

                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                        主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                        计数1 ＝ 计数1 ＋ 1
                    .判断循环尾 ()

                    子表达式 ＝ 到字节集 (“”)
                    名称符号 ＝ 到字节集 (“”)
                    表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                    运算符标志 ＝ 0
                    状态 ＝ “继续”


                    字节集缓存 ＝ 三目运算符条件真尾跳转地址 [三目运算符跳转表偏址 [表达式括号数 ＋ 1] ＋ 1]

                    计数1 ＝ 1

                    .判断循环首 (计数1 ＜ 取字节集长度 (字节集缓存))
                        修改R2R3 (字节集缓存 [计数1] ＋ 字节集缓存 [计数1 ＋ 1] × 256, ROM_缓存使用字节)
                        计数1 ＝ 计数1 ＋ 2
                    .判断循环尾 ()

                    三目运算符条件真尾跳转地址 [三目运算符跳转表偏址 [表达式括号数 ＋ 1] ＋ 1] ＝ 到字节集 (“”)

                .如果真结束



            .判断 (运算符标志 ＝ 1)

                状态 ＝ 子表达式处理 (子表达式)

                .如果真 (状态 ＝ “完成”)

                    .判断开始 (右移 (子表达式处理_返回值, 16) ＝ #无符号ACC)
                        累加器内容状态 ＝ “无符号ACC”
                        表达式累加器地址 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                    .判断 (右移 (子表达式处理_返回值, 16) ＝ #有符号ACC)
                        累加器内容状态 ＝ “有符号ACC”
                        表达式累加器地址 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                    .判断 (右移 (子表达式处理_返回值, 16) ＝ #待修改跳转地址)
                        状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, #待修改跳转地址 × 65536)
                        累加器内容状态 ＝ “有符号ACC”
                        表达式累加器地址 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                        子表达式处理_返回值 ＝ #有符号ACC × 65536
                    .默认

                    .判断结束

                    .如果真 (状态 ＝ “完成”)

                        主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 1] ＝ 右移 (子表达式处理_返回值, 16)
                        主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 2] ＝ 右移 (子表达式处理_返回值, 8)
                        主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 3] ＝ 子表达式处理_返回值

                        计数1 ＝ 子表达式起始地址 [表达式括号数 ＋ 1] ＋ 4

                        .判断循环首 (计数1 ≤ 表达式指针)
                            主表达式 [计数1] ＝ 32
                            计数1 ＝ 计数1 ＋ 1
                        .判断循环尾 ()

                        子表达式 ＝ 到字节集 (“”)
                        名称符号 ＝ 到字节集 (“”)
                        表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                        运算符标志 ＝ 0
                        状态 ＝ “继续”
                    .如果真结束

                .如果真结束




            .默认
                字节集缓存 ＝ 表达式括号前名称符号 [表达式括号数 ＋ 1]

                .判断开始 (到文本 (字节集缓存) ≠ “” 且 (字节集缓存 [1] ＞ 64 且 字节集缓存 [1] ＜ 91 或 字节集缓存 [1] ＞ 96 且 字节集缓存 [1] ＜ 123 或 字节集缓存 [1] ＝ 95))

                    状态 ＝ 子表达式处理 (表达式括号前名称符号 [表达式括号数 ＋ 1] ＋ 到字节集 (“  +”) ＋ 子表达式)

                    .如果真 (状态 ＝ “完成”)

                        .判断开始 (右移 (子表达式处理_返回值, 16) ＝ #无符号char指针)
                            主表达式 [表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 1] ＝ #无符号char指针指向内容
                            主表达式 [表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 2] ＝ 右移 (子表达式处理_返回值, 8)
                            主表达式 [表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 3] ＝ 子表达式处理_返回值
                        .判断 (右移 (子表达式处理_返回值, 16) ＝ #有符号char指针)
                            主表达式 [表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 1] ＝ #有符号char指针指向内容
                            主表达式 [表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 2] ＝ 右移 (子表达式处理_返回值, 8)
                            主表达式 [表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 3] ＝ 子表达式处理_返回值
                        .判断 (右移 (子表达式处理_返回值, 16) ＝ #无符号int指针)
                            主表达式 [表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 1] ＝ #无符号int指针指向内容
                            主表达式 [表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 2] ＝ 右移 (子表达式处理_返回值, 8)
                            主表达式 [表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 3] ＝ 子表达式处理_返回值
                        .判断 (右移 (子表达式处理_返回值, 16) ＝ #有符号int指针)
                            主表达式 [表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 1] ＝ #有符号int指针指向内容
                            主表达式 [表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 2] ＝ 右移 (子表达式处理_返回值, 8)
                            主表达式 [表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 3] ＝ 子表达式处理_返回值
                        .判断 (右移 (子表达式处理_返回值, 16) ＝ #无符号长int指针)
                            主表达式 [表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 1] ＝ #无符号长int指针指向内容
                            主表达式 [表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 2] ＝ 右移 (子表达式处理_返回值, 8)
                            主表达式 [表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 3] ＝ 子表达式处理_返回值
                        .判断 (右移 (子表达式处理_返回值, 16) ＝ #有符号长int指针)
                            主表达式 [表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 1] ＝ #有符号长int指针指向内容
                            主表达式 [表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 2] ＝ 右移 (子表达式处理_返回值, 8)
                            主表达式 [表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 3] ＝ 子表达式处理_返回值
                        .判断 (右移 (子表达式处理_返回值, 16) ＝ #无符号char数组)
                            主表达式 [表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 1] ＝ #无符号char
                            主表达式 [表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 2] ＝ 右移 (子表达式处理_返回值, 8)
                            主表达式 [表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 3] ＝ 子表达式处理_返回值
                        .判断 (右移 (子表达式处理_返回值, 16) ＝ #有符号char数组)
                            主表达式 [表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 1] ＝ #有符号char
                            主表达式 [表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 2] ＝ 右移 (子表达式处理_返回值, 8)
                            主表达式 [表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 3] ＝ 子表达式处理_返回值
                        .判断 (右移 (子表达式处理_返回值, 16) ＝ #无符号int数组)
                            主表达式 [表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 1] ＝ #无符号int
                            主表达式 [表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 2] ＝ 右移 (子表达式处理_返回值, 8)
                            主表达式 [表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 3] ＝ 子表达式处理_返回值
                        .判断 (右移 (子表达式处理_返回值, 16) ＝ #有符号int数组)
                            主表达式 [表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 1] ＝ #有符号int
                            主表达式 [表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 2] ＝ 右移 (子表达式处理_返回值, 8)
                            主表达式 [表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 3] ＝ 子表达式处理_返回值
                        .判断 (右移 (子表达式处理_返回值, 16) ＝ #无符号长int数组)
                            主表达式 [表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 1] ＝ #无符号长int
                            主表达式 [表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 2] ＝ 右移 (子表达式处理_返回值, 8)
                            主表达式 [表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 3] ＝ 子表达式处理_返回值
                        .判断 (右移 (子表达式处理_返回值, 16) ＝ #有符号长int数组)
                            主表达式 [表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 1] ＝ #有符号长int
                            主表达式 [表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 2] ＝ 右移 (子表达式处理_返回值, 8)
                            主表达式 [表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 3] ＝ 子表达式处理_返回值
                        .默认
                            状态 ＝ “主表达式处理_]_子表达式处理_返回值错误...~- +!”
                        .判断结束


                        .如果真 (状态 ＝ “完成”)

                            计数1 ＝ 表达式括号前名称符号地址 [表达式括号数 ＋ 1] ＋ 4

                            .判断循环首 (计数1 ≤ 表达式指针 ＋ 1)
                                主表达式 [计数1] ＝ 32
                                计数1 ＝ 计数1 ＋ 1
                            .判断循环尾 ()

                            子表达式 ＝ 到字节集 (“”)
                            名称符号 ＝ 到字节集 (“”)
                            表达式括号数 ＝ 表达式括号数 － 1
                            表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]

                            状态 ＝ “继续”

                        .如果真结束


                    .如果真结束


                .默认
                    状态 ＝ “主表达式处理_]_数组名称错误...~- +!”
                .判断结束



            .判断结束



        .默认
            状态 ＝ “主表达式处理_]_三目运算符?:错误...~- +!”
        .判断结束







    .判断 (到文本 (到字节集 (主表达式 [表达式指针 ＋ 1])) ＝ “,”)

        .判断开始 (取字节集长度 (条件真跳转地址 [表达式括号数 ＋ 1]) ≠ 0 或 取字节集长度 (条件假跳转地址 [表达式括号数 ＋ 1]) ≠ 0)

            子表达式一级提取 (子表达式)

            .判断开始 (运算符标志_提取 ＝ 1)

                运算符标志_提取 ＝ 0

                状态 ＝ 子表达式处理 (表达式_提取)

                .如果真 (状态 ＝ “完成”)

                    子表达式 [起始地址_提取 ＋ 1] ＝ 右移 (子表达式处理_返回值, 16)
                    子表达式 [起始地址_提取 ＋ 2] ＝ 右移 (子表达式处理_返回值, 8)
                    子表达式 [起始地址_提取 ＋ 3] ＝ 子表达式处理_返回值

                    计数1 ＝ 起始地址_提取 ＋ 4

                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                        子表达式 [计数1] ＝ 32
                        计数1 ＝ 计数1 ＋ 1
                    .判断循环尾 ()

                    计数1 ＝ 1

                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                        主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                        计数1 ＝ 计数1 ＋ 1
                    .判断循环尾 ()

                    子表达式 ＝ 到字节集 (“”)
                    名称符号 ＝ 到字节集 (“”)
                    表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                    运算符标志 ＝ 0
                    状态 ＝ “继续”
                .如果真结束


            .默认
                计数1 ＝ 1
                .判断循环首 (表达式_提取 [计数1] ＝ 32)
                    计数1 ＝ 计数1 ＋ 1
                .判断循环尾 ()

                .判断开始 (表达式_提取 [计数1] ＞ 47 且 表达式_提取 [计数1] ＜ 58)

                    字符串缓存 ＝ 到字节集 (“”)
                    .循环判断首 ()
                        字符串缓存 ＝ 字符串缓存 ＋ 到字节集 (表达式_提取 [计数1])
                        计数1 ＝ 计数1 ＋ 1
                    .循环判断尾 (表达式_提取 [计数1] ＞ 47 且 表达式_提取 [计数1] ＜ 58)


                    .判断开始 (到数值 (到文本 (字符串缓存)) ≠ 0)
                        待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                        JMP (0)
                        待修改条件假跳转地址 ＝ 到字节集 (“”)
                        待修改条件跳转出口状态 ＝ “假”

                    .默认
                        待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                        JMP (0)
                        待修改条件真跳转地址 ＝ 到字节集 (“”)
                        待修改条件跳转出口状态 ＝ “真”

                    .判断结束


                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 条件真跳转地址 [表达式括号数 ＋ 1]
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 条件假跳转地址 [表达式括号数 ＋ 1]

                    条件真跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)
                    条件假跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)


                    状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, #待修改跳转地址 × 65536)
                    子表达式 [起始地址_提取 ＋ 1] ＝ #有符号ACC
                    表达式累加器地址 ＝ 起始地址_提取
                    累加器内容状态 ＝ “有符号ACC”

                    .如果真 (状态 ＝ “完成”)

                        计数1 ＝ 起始地址_提取 ＋ 2

                        .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                            子表达式 [计数1] ＝ 32
                            计数1 ＝ 计数1 ＋ 1
                        .判断循环尾 ()

                        计数1 ＝ 1

                        .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                            主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                            计数1 ＝ 计数1 ＋ 1
                        .判断循环尾 ()

                        子表达式 ＝ 到字节集 (“”)
                        名称符号 ＝ 到字节集 (“”)
                        表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                        运算符标志 ＝ 0
                        状态 ＝ “继续”

                    .如果真结束



                .判断 (表达式_提取 [计数1] ＞ 64 且 表达式_提取 [计数1] ＜ 91 或 表达式_提取 [计数1] ＞ 96 且 表达式_提取 [计数1] ＜ 123 或 表达式_提取 [计数1] ＝ 95)

                    字符串缓存 ＝ 到字节集 (“”)
                    .循环判断首 ()
                        字符串缓存 ＝ 字符串缓存 ＋ 到字节集 (表达式_提取 [计数1])
                        计数1 ＝ 计数1 ＋ 1
                    .循环判断尾 (表达式_提取 [计数1] ＞ 47 且 表达式_提取 [计数1] ＜ 58 或 表达式_提取 [计数1] ＞ 64 且 表达式_提取 [计数1] ＜ 91 或 表达式_提取 [计数1] ＞ 96 且 表达式_提取 [计数1] ＜ 123 或 表达式_提取 [计数1] ＝ 95)

                    计数2 ＝ 操作数查询 (字符串缓存)

                    .判断开始 (右移 (计数2, 16) ＝ #无符号char 或 右移 (计数2, 16) ＝ #无符号int 或 右移 (计数2, 16) ＝ #无符号长int 或 右移 (计数2, 16) ＝ #有符号char 或 右移 (计数2, 16) ＝ #有符号int 或 右移 (计数2, 16) ＝ #有符号长int 或 右移 (计数2, 16) ＝ #无符号char指针 或 右移 (计数2, 16) ＝ #无符号int指针 或 右移 (计数2, 16) ＝ #无符号长int指针 或 右移 (计数2, 16) ＝ #有符号char指针 或 右移 (计数2, 16) ＝ #有符号int指针 或 右移 (计数2, 16) ＝ #有符号长int指针 或 右移 (计数2, 16) ＝ #ACC)

                        状态 ＝ 子表达式处理 (到字节集 (到字节 (右移 (计数2, 16))) ＋ 到字节集 (到字节 (右移 (计数2, 8))) ＋ 到字节集 (到字节 (计数2)) ＋ 到字节集 (“!=0  ”))

                        .如果真 (状态 ＝ “完成”)

                            .判断开始 (右移 (子表达式处理_返回值, 16) ＝ #待修改跳转地址)

                                待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 条件真跳转地址 [表达式括号数 ＋ 1]
                                待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 条件假跳转地址 [表达式括号数 ＋ 1]

                                条件真跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)
                                条件假跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)


                                状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, #待修改跳转地址 × 65536)
                                子表达式 [起始地址_提取 ＋ 1] ＝ #有符号ACC
                                表达式累加器地址 ＝ 起始地址_提取
                                累加器内容状态 ＝ “有符号ACC”

                                .如果真 (状态 ＝ “完成”)

                                    计数1 ＝ 起始地址_提取 ＋ 2

                                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                        子表达式 [计数1] ＝ 32
                                        计数1 ＝ 计数1 ＋ 1
                                    .判断循环尾 ()

                                    计数1 ＝ 1

                                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                        主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                                        计数1 ＝ 计数1 ＋ 1
                                    .判断循环尾 ()

                                    子表达式 ＝ 到字节集 (“”)
                                    名称符号 ＝ 到字节集 (“”)
                                    表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                                    运算符标志 ＝ 0
                                    状态 ＝ “继续”

                                .如果真结束



                            .默认
                                状态 ＝ “主表达式处理_,_子表达式处理_返回值错误...”
                            .判断结束

                        .如果真结束



                    .判断 (右移 (计数2, 16) ＝ #常量 或 右移 (计数2, 16) ＝ #无符号char数组 或 右移 (计数2, 16) ＝ #无符号int数组 或 右移 (计数2, 16) ＝ #无符号长int数组 或 右移 (计数2, 16) ＝ #有符号char数组 或 右移 (计数2, 16) ＝ #有符号int数组 或 右移 (计数2, 16) ＝ #有符号长int数组)

                        .判断开始 (右移 (计数2, 16) ＝ #常量 且 常量值 [位与 (计数2, 65535) ＋ 1] ≠ 0 或 (右移 (计数2, 16) ＝ #无符号char数组 或 右移 (计数2, 16) ＝ #无符号int数组 或 右移 (计数2, 16) ＝ #无符号长int数组 或 右移 (计数2, 16) ＝ #有符号char数组 或 右移 (计数2, 16) ＝ #有符号int数组 或 右移 (计数2, 16) ＝ #有符号长int数组) 且 位与 (计数2, 65535) ≠ 0)
                            待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                            JMP (0)
                            待修改条件假跳转地址 ＝ 到字节集 (“”)
                            待修改条件跳转出口状态 ＝ “假”

                        .默认
                            待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                            JMP (0)
                            待修改条件真跳转地址 ＝ 到字节集 (“”)
                            待修改条件跳转出口状态 ＝ “真”

                        .判断结束


                        待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 条件真跳转地址 [表达式括号数 ＋ 1]
                        待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 条件假跳转地址 [表达式括号数 ＋ 1]

                        条件真跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)
                        条件假跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)


                        状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, #待修改跳转地址 × 65536)
                        子表达式 [起始地址_提取 ＋ 1] ＝ #有符号ACC
                        表达式累加器地址 ＝ 起始地址_提取
                        累加器内容状态 ＝ “有符号ACC”

                        .如果真 (状态 ＝ “完成”)

                            计数1 ＝ 起始地址_提取 ＋ 2

                            .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                子表达式 [计数1] ＝ 32
                                计数1 ＝ 计数1 ＋ 1
                            .判断循环尾 ()

                            计数1 ＝ 1

                            .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                                计数1 ＝ 计数1 ＋ 1
                            .判断循环尾 ()

                            子表达式 ＝ 到字节集 (“”)
                            名称符号 ＝ 到字节集 (“”)
                            表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                            运算符标志 ＝ 0
                            状态 ＝ “继续”

                        .如果真结束


                    .默认
                        状态 ＝ “主表达式处理_,_操作数查询错误”
                    .判断结束




                .判断 (表达式_提取 [计数1] ＝ #无符号char 或 表达式_提取 [计数1] ＝ #无符号int 或 表达式_提取 [计数1] ＝ #无符号长int 或 表达式_提取 [计数1] ＝ #有符号char 或 表达式_提取 [计数1] ＝ #有符号int 或 表达式_提取 [计数1] ＝ #有符号长int 或 表达式_提取 [计数1] ＝ #无符号char指针 或 表达式_提取 [计数1] ＝ #无符号int指针 或 表达式_提取 [计数1] ＝ #无符号长int指针 或 表达式_提取 [计数1] ＝ #有符号char指针 或 表达式_提取 [计数1] ＝ #有符号int指针 或 表达式_提取 [计数1] ＝ #有符号长int指针 或 表达式_提取 [计数1] ＝ #ACC 或 表达式_提取 [计数1] ＝ #无符号ACC 或 表达式_提取 [计数1] ＝ #有符号ACC 或 表达式_提取 [计数1] ＝ #无符号char指针指向内容 或 表达式_提取 [计数1] ＝ #无符号int指针指向内容 或 表达式_提取 [计数1] ＝ #无符号长int指针指向内容 或 表达式_提取 [计数1] ＝ #有符号char指针指向内容 或 表达式_提取 [计数1] ＝ #有符号int指针指向内容 或 表达式_提取 [计数1] ＝ #有符号长int指针指向内容)

                    状态 ＝ 子表达式处理 (到字节集 (表达式_提取 [计数1]) ＋ 到字节集 (表达式_提取 [计数1 ＋ 1]) ＋ 到字节集 (表达式_提取 [计数1 ＋ 2]) ＋ 到字节集 (“!=0  ”))

                    .如果真 (状态 ＝ “完成”)

                        .判断开始 (右移 (子表达式处理_返回值, 16) ＝ #待修改跳转地址)

                            待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 条件真跳转地址 [表达式括号数 ＋ 1]
                            待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 条件假跳转地址 [表达式括号数 ＋ 1]

                            条件真跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)
                            条件假跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)


                            状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, #待修改跳转地址 × 65536)
                            子表达式 [起始地址_提取 ＋ 1] ＝ #有符号ACC
                            表达式累加器地址 ＝ 起始地址_提取
                            累加器内容状态 ＝ “有符号ACC”

                            .如果真 (状态 ＝ “完成”)

                                计数1 ＝ 起始地址_提取 ＋ 2

                                .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                    子表达式 [计数1] ＝ 32
                                    计数1 ＝ 计数1 ＋ 1
                                .判断循环尾 ()

                                计数1 ＝ 1

                                .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                    主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                                    计数1 ＝ 计数1 ＋ 1
                                .判断循环尾 ()

                                子表达式 ＝ 到字节集 (“”)
                                名称符号 ＝ 到字节集 (“”)
                                表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                                运算符标志 ＝ 0
                                状态 ＝ “继续”

                            .如果真结束



                        .默认
                            状态 ＝ “主表达式处理_,_子表达式处理_返回值错误...”
                        .判断结束

                    .如果真结束




                .判断 (表达式_提取 [计数1] ＝ #立即数)

                    .判断开始 (立即数值 [表达式_提取 [计数1 ＋ 1] × 256 ＋ 表达式_提取 [计数1 ＋ 2] ＋ 1] ≠ 0)
                        待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                        JMP (0)
                        待修改条件假跳转地址 ＝ 到字节集 (“”)
                        待修改条件跳转出口状态 ＝ “假”

                    .默认
                        待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                        JMP (0)
                        待修改条件真跳转地址 ＝ 到字节集 (“”)
                        待修改条件跳转出口状态 ＝ “真”

                    .判断结束


                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 条件真跳转地址 [表达式括号数 ＋ 1]
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 条件假跳转地址 [表达式括号数 ＋ 1]

                    条件真跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)
                    条件假跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)


                    状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, #待修改跳转地址 × 65536)
                    子表达式 [起始地址_提取 ＋ 1] ＝ #有符号ACC
                    表达式累加器地址 ＝ 起始地址_提取
                    累加器内容状态 ＝ “有符号ACC”

                    .如果真 (状态 ＝ “完成”)

                        计数1 ＝ 起始地址_提取 ＋ 2

                        .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                            子表达式 [计数1] ＝ 32
                            计数1 ＝ 计数1 ＋ 1
                        .判断循环尾 ()

                        计数1 ＝ 1

                        .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                            主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                            计数1 ＝ 计数1 ＋ 1
                        .判断循环尾 ()

                        子表达式 ＝ 到字节集 (“”)
                        名称符号 ＝ 到字节集 (“”)
                        表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                        运算符标志 ＝ 0
                        状态 ＝ “继续”

                    .如果真结束




                .判断 (表达式_提取 [计数1] ＝ #待修改跳转地址)

                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 条件真跳转地址 [表达式括号数 ＋ 1]
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 条件假跳转地址 [表达式括号数 ＋ 1]

                    条件真跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)
                    条件假跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)


                    状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, #待修改跳转地址 × 65536)
                    子表达式 [起始地址_提取 ＋ 1] ＝ #有符号ACC
                    表达式累加器地址 ＝ 起始地址_提取
                    累加器内容状态 ＝ “有符号ACC”

                    .如果真 (状态 ＝ “完成”)

                        计数1 ＝ 起始地址_提取 ＋ 2

                        .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                            子表达式 [计数1] ＝ 32
                            计数1 ＝ 计数1 ＋ 1
                        .判断循环尾 ()

                        计数1 ＝ 1

                        .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                            主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                            计数1 ＝ 计数1 ＋ 1
                        .判断循环尾 ()

                        子表达式 ＝ 到字节集 (“”)
                        名称符号 ＝ 到字节集 (“”)
                        表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                        运算符标志 ＝ 0
                        状态 ＝ “继续”

                    .如果真结束



                .默认
                    状态 ＝ “主表达式处理_,_操作数类型错误_!- =~...”
                .判断结束



            .判断结束




        .判断 (三目运算符跳转表偏址 [表达式括号数 ＋ 1] － 三目运算符跳转表基址 [表达式括号数 ＋ 1] ＝ 0)

            .判断开始 (取字节集长度 (三目运算符条件真尾跳转地址 [三目运算符跳转表偏址 [表达式括号数 ＋ 1] ＋ 1]) ≠ 0)

                子表达式二级提取 (子表达式)

                状态 ＝ 子表达式处理 (表达式_提取)

                .如果真 (状态 ＝ “完成”)

                    子表达式 [起始地址_提取 ＋ 1] ＝ 右移 (子表达式处理_返回值, 16)
                    子表达式 [起始地址_提取 ＋ 2] ＝ 右移 (子表达式处理_返回值, 8)
                    子表达式 [起始地址_提取 ＋ 3] ＝ 子表达式处理_返回值

                    计数1 ＝ 起始地址_提取 ＋ 4

                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                        子表达式 [计数1] ＝ 32
                        计数1 ＝ 计数1 ＋ 1
                    .判断循环尾 ()

                    计数1 ＝ 1

                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                        主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                        计数1 ＝ 计数1 ＋ 1
                    .判断循环尾 ()

                    子表达式 ＝ 到字节集 (“”)
                    名称符号 ＝ 到字节集 (“”)
                    表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                    运算符标志 ＝ 0
                    状态 ＝ “继续”


                    字节集缓存 ＝ 三目运算符条件真尾跳转地址 [三目运算符跳转表偏址 [表达式括号数 ＋ 1] ＋ 1]

                    计数1 ＝ 1

                    .判断循环首 (计数1 ＜ 取字节集长度 (字节集缓存))
                        修改R2R3 (字节集缓存 [计数1] ＋ 字节集缓存 [计数1 ＋ 1] × 256, ROM_缓存使用字节)
                        计数1 ＝ 计数1 ＋ 2
                    .判断循环尾 ()

                    三目运算符条件真尾跳转地址 [三目运算符跳转表偏址 [表达式括号数 ＋ 1] ＋ 1] ＝ 到字节集 (“”)

                .如果真结束



            .判断 (运算符标志 ＝ 1)

                状态 ＝ 子表达式处理 (子表达式)

                .如果真 (状态 ＝ “完成”)

                    .判断开始 (右移 (子表达式处理_返回值, 16) ＝ #无符号ACC)
                        累加器内容状态 ＝ “无符号ACC”
                        表达式累加器地址 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                    .判断 (右移 (子表达式处理_返回值, 16) ＝ #有符号ACC)
                        累加器内容状态 ＝ “有符号ACC”
                        表达式累加器地址 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                    .判断 (右移 (子表达式处理_返回值, 16) ＝ #待修改跳转地址)
                        状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, #待修改跳转地址 × 65536)
                        累加器内容状态 ＝ “有符号ACC”
                        表达式累加器地址 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                        子表达式处理_返回值 ＝ #有符号ACC × 65536
                    .默认

                    .判断结束


                    .如果真 (状态 ＝ “完成”)

                        主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 1] ＝ 右移 (子表达式处理_返回值, 16)
                        主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 2] ＝ 右移 (子表达式处理_返回值, 8)
                        主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 3] ＝ 子表达式处理_返回值

                        计数1 ＝ 子表达式起始地址 [表达式括号数 ＋ 1] ＋ 4

                        .判断循环首 (计数1 ≤ 表达式指针)
                            主表达式 [计数1] ＝ 32
                            计数1 ＝ 计数1 ＋ 1
                        .判断循环尾 ()

                        子表达式 ＝ 到字节集 (“”)
                        名称符号 ＝ 到字节集 (“”)
                        表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                        运算符标志 ＝ 0
                        状态 ＝ “继续”

                    .如果真结束

                .如果真结束




            .默认

                .判断开始 (取字节集长度 (名称符号) ≠ 0 且 (名称符号 [1] ＞ 64 且 名称符号 [1] ＜ 91 或 名称符号 [1] ＞ 96 且 名称符号 [1] ＜ 123 或 名称符号 [1] ＝ 95) 且 操作数查询 (名称符号) ＝ 0)

                    状态 ＝ “主表达式处理_,_操作数查询错误_!- =~...”

                .默认

                    .如果真 (到文本 (名称符号) ＝ “_NOP”)
                        NOP ()
                    .如果真结束

                    子表达式 ＝ 到字节集 (“”)
                    名称符号 ＝ 到字节集 (“”)
                    表达式指针 ＝ 表达式指针 ＋ 1
                    子表达式起始地址 [表达式括号数 ＋ 1] ＝ 表达式指针
                    运算符标志 ＝ 0
                    状态 ＝ “继续”
                .判断结束


            .判断结束



        .默认
            状态 ＝ “主表达式处理_,_三目运算符?:错误_!- =~...”
        .判断结束







    .判断 (到文本 (到字节集 (主表达式 [表达式指针 ＋ 1])) ＝ “;”)

        .判断开始 (取字节集长度 (条件真跳转地址 [表达式括号数 ＋ 1]) ≠ 0 或 取字节集长度 (条件假跳转地址 [表达式括号数 ＋ 1]) ≠ 0 或 条件表达式标志 ＝ 1 且 运算符标志 ＝ 0 且 取字节集长度 (名称符号) ≠ 0 且 名称符号 [1] ≠ #待修改跳转地址)

            子表达式一级提取 (子表达式)

            .判断开始 (运算符标志_提取 ＝ 1)

                运算符标志_提取 ＝ 0

                状态 ＝ 子表达式处理 (表达式_提取)

                .如果真 (状态 ＝ “完成”)

                    子表达式 [起始地址_提取 ＋ 1] ＝ 右移 (子表达式处理_返回值, 16)
                    子表达式 [起始地址_提取 ＋ 2] ＝ 右移 (子表达式处理_返回值, 8)
                    子表达式 [起始地址_提取 ＋ 3] ＝ 子表达式处理_返回值

                    计数1 ＝ 起始地址_提取 ＋ 4

                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                        子表达式 [计数1] ＝ 32
                        计数1 ＝ 计数1 ＋ 1
                    .判断循环尾 ()

                    计数1 ＝ 1

                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                        主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                        计数1 ＝ 计数1 ＋ 1
                    .判断循环尾 ()

                    子表达式 ＝ 到字节集 (“”)
                    名称符号 ＝ 到字节集 (“”)
                    表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                    运算符标志 ＝ 0
                    状态 ＝ “继续”
                .如果真结束


            .默认
                计数1 ＝ 1
                .判断循环首 (表达式_提取 [计数1] ＝ 32)
                    计数1 ＝ 计数1 ＋ 1
                .判断循环尾 ()

                .判断开始 (表达式_提取 [计数1] ＞ 47 且 表达式_提取 [计数1] ＜ 58)

                    字符串缓存 ＝ 到字节集 (“”)
                    .循环判断首 ()
                        字符串缓存 ＝ 字符串缓存 ＋ 到字节集 (表达式_提取 [计数1])
                        计数1 ＝ 计数1 ＋ 1
                    .循环判断尾 (表达式_提取 [计数1] ＞ 47 且 表达式_提取 [计数1] ＜ 58)


                    .判断开始 (到数值 (到文本 (字符串缓存)) ≠ 0)
                        待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                        JMP (0)
                        待修改条件假跳转地址 ＝ 到字节集 (“”)
                        待修改条件跳转出口状态 ＝ “假”

                    .默认
                        待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                        JMP (0)
                        待修改条件真跳转地址 ＝ 到字节集 (“”)
                        待修改条件跳转出口状态 ＝ “真”

                    .判断结束


                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 条件真跳转地址 [表达式括号数 ＋ 1]
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 条件假跳转地址 [表达式括号数 ＋ 1]

                    条件真跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)
                    条件假跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)


                    状态 ＝ “完成”
                    .判断开始 (赋值符标志_提取 ＝ 1 或 条件表达式标志 ＝ 0)

                        状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, #待修改跳转地址 × 65536)
                        子表达式 [起始地址_提取 ＋ 1] ＝ #有符号ACC
                        表达式累加器地址 ＝ 起始地址_提取
                        累加器内容状态 ＝ “有符号ACC”

                    .默认
                        子表达式 [起始地址_提取 ＋ 1] ＝ #待修改跳转地址
                    .判断结束


                    .如果真 (状态 ＝ “完成”)

                        计数1 ＝ 起始地址_提取 ＋ 2

                        .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                            子表达式 [计数1] ＝ 32
                            计数1 ＝ 计数1 ＋ 1
                        .判断循环尾 ()

                        计数1 ＝ 1

                        .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                            主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                            计数1 ＝ 计数1 ＋ 1
                        .判断循环尾 ()

                        子表达式 ＝ 到字节集 (“”)
                        名称符号 ＝ 到字节集 (“”)
                        表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                        运算符标志 ＝ 0
                        状态 ＝ “继续”

                    .如果真结束



                .判断 (表达式_提取 [计数1] ＞ 64 且 表达式_提取 [计数1] ＜ 91 或 表达式_提取 [计数1] ＞ 96 且 表达式_提取 [计数1] ＜ 123 或 表达式_提取 [计数1] ＝ 95)

                    字符串缓存 ＝ 到字节集 (“”)
                    .循环判断首 ()
                        字符串缓存 ＝ 字符串缓存 ＋ 到字节集 (表达式_提取 [计数1])
                        计数1 ＝ 计数1 ＋ 1
                    .循环判断尾 (表达式_提取 [计数1] ＞ 47 且 表达式_提取 [计数1] ＜ 58 或 表达式_提取 [计数1] ＞ 64 且 表达式_提取 [计数1] ＜ 91 或 表达式_提取 [计数1] ＞ 96 且 表达式_提取 [计数1] ＜ 123 或 表达式_提取 [计数1] ＝ 95)

                    计数2 ＝ 操作数查询 (字符串缓存)

                    .判断开始 (右移 (计数2, 16) ＝ #无符号char 或 右移 (计数2, 16) ＝ #无符号int 或 右移 (计数2, 16) ＝ #无符号长int 或 右移 (计数2, 16) ＝ #有符号char 或 右移 (计数2, 16) ＝ #有符号int 或 右移 (计数2, 16) ＝ #有符号长int 或 右移 (计数2, 16) ＝ #无符号char指针 或 右移 (计数2, 16) ＝ #无符号int指针 或 右移 (计数2, 16) ＝ #无符号长int指针 或 右移 (计数2, 16) ＝ #有符号char指针 或 右移 (计数2, 16) ＝ #有符号int指针 或 右移 (计数2, 16) ＝ #有符号长int指针 或 右移 (计数2, 16) ＝ #ACC)

                        状态 ＝ 子表达式处理 (到字节集 (到字节 (右移 (计数2, 16))) ＋ 到字节集 (到字节 (右移 (计数2, 8))) ＋ 到字节集 (到字节 (计数2)) ＋ 到字节集 (“!=0  ”))

                        .如果真 (状态 ＝ “完成”)

                            .判断开始 (右移 (子表达式处理_返回值, 16) ＝ #待修改跳转地址)

                                待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 条件真跳转地址 [表达式括号数 ＋ 1]
                                待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 条件假跳转地址 [表达式括号数 ＋ 1]

                                条件真跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)
                                条件假跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)


                                .判断开始 (赋值符标志_提取 ＝ 1 或 条件表达式标志 ＝ 0)

                                    状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, #待修改跳转地址 × 65536)
                                    子表达式 [起始地址_提取 ＋ 1] ＝ #有符号ACC
                                    表达式累加器地址 ＝ 起始地址_提取
                                    累加器内容状态 ＝ “有符号ACC”

                                .默认
                                    子表达式 [起始地址_提取 ＋ 1] ＝ #待修改跳转地址
                                .判断结束


                                .如果真 (状态 ＝ “完成”)

                                    计数1 ＝ 起始地址_提取 ＋ 2

                                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                        子表达式 [计数1] ＝ 32
                                        计数1 ＝ 计数1 ＋ 1
                                    .判断循环尾 ()

                                    计数1 ＝ 1

                                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                        主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                                        计数1 ＝ 计数1 ＋ 1
                                    .判断循环尾 ()

                                    子表达式 ＝ 到字节集 (“”)
                                    名称符号 ＝ 到字节集 (“”)
                                    表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                                    运算符标志 ＝ 0
                                    状态 ＝ “继续”

                                .如果真结束



                            .默认
                                状态 ＝ “主表达式处理_;_子表达式处理_返回值错误...”
                            .判断结束

                        .如果真结束



                    .判断 (右移 (计数2, 16) ＝ #常量 或 右移 (计数2, 16) ＝ #无符号char数组 或 右移 (计数2, 16) ＝ #无符号int数组 或 右移 (计数2, 16) ＝ #无符号长int数组 或 右移 (计数2, 16) ＝ #有符号char数组 或 右移 (计数2, 16) ＝ #有符号int数组 或 右移 (计数2, 16) ＝ #有符号长int数组)

                        .判断开始 (右移 (计数2, 16) ＝ #常量 且 常量值 [位与 (计数2, 65535) ＋ 1] ≠ 0 或 (右移 (计数2, 16) ＝ #无符号char数组 或 右移 (计数2, 16) ＝ #无符号int数组 或 右移 (计数2, 16) ＝ #无符号长int数组 或 右移 (计数2, 16) ＝ #有符号char数组 或 右移 (计数2, 16) ＝ #有符号int数组 或 右移 (计数2, 16) ＝ #有符号长int数组) 且 位与 (计数2, 65535) ≠ 0)
                            待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                            JMP (0)
                            待修改条件假跳转地址 ＝ 到字节集 (“”)
                            待修改条件跳转出口状态 ＝ “假”

                        .默认
                            待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                            JMP (0)
                            待修改条件真跳转地址 ＝ 到字节集 (“”)
                            待修改条件跳转出口状态 ＝ “真”

                        .判断结束


                        待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 条件真跳转地址 [表达式括号数 ＋ 1]
                        待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 条件假跳转地址 [表达式括号数 ＋ 1]

                        条件真跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)
                        条件假跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)


                        状态 ＝ “完成”
                        .判断开始 (赋值符标志_提取 ＝ 1 或 条件表达式标志 ＝ 0)

                            状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, #待修改跳转地址 × 65536)
                            子表达式 [起始地址_提取 ＋ 1] ＝ #有符号ACC
                            表达式累加器地址 ＝ 起始地址_提取
                            累加器内容状态 ＝ “有符号ACC”

                        .默认
                            子表达式 [起始地址_提取 ＋ 1] ＝ #待修改跳转地址
                        .判断结束


                        .如果真 (状态 ＝ “完成”)

                            计数1 ＝ 起始地址_提取 ＋ 2

                            .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                子表达式 [计数1] ＝ 32
                                计数1 ＝ 计数1 ＋ 1
                            .判断循环尾 ()

                            计数1 ＝ 1

                            .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                                计数1 ＝ 计数1 ＋ 1
                            .判断循环尾 ()

                            子表达式 ＝ 到字节集 (“”)
                            名称符号 ＝ 到字节集 (“”)
                            表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                            运算符标志 ＝ 0
                            状态 ＝ “继续”

                        .如果真结束


                    .默认
                        状态 ＝ “主表达式处理_;_操作数查询错误”
                    .判断结束




                .判断 (表达式_提取 [计数1] ＝ #无符号char 或 表达式_提取 [计数1] ＝ #无符号int 或 表达式_提取 [计数1] ＝ #无符号长int 或 表达式_提取 [计数1] ＝ #有符号char 或 表达式_提取 [计数1] ＝ #有符号int 或 表达式_提取 [计数1] ＝ #有符号长int 或 表达式_提取 [计数1] ＝ #无符号char指针 或 表达式_提取 [计数1] ＝ #无符号int指针 或 表达式_提取 [计数1] ＝ #无符号长int指针 或 表达式_提取 [计数1] ＝ #有符号char指针 或 表达式_提取 [计数1] ＝ #有符号int指针 或 表达式_提取 [计数1] ＝ #有符号长int指针 或 表达式_提取 [计数1] ＝ #ACC 或 表达式_提取 [计数1] ＝ #无符号ACC 或 表达式_提取 [计数1] ＝ #有符号ACC 或 表达式_提取 [计数1] ＝ #无符号char指针指向内容 或 表达式_提取 [计数1] ＝ #无符号int指针指向内容 或 表达式_提取 [计数1] ＝ #无符号长int指针指向内容 或 表达式_提取 [计数1] ＝ #有符号char指针指向内容 或 表达式_提取 [计数1] ＝ #有符号int指针指向内容 或 表达式_提取 [计数1] ＝ #有符号长int指针指向内容)

                    状态 ＝ 子表达式处理 (到字节集 (表达式_提取 [计数1]) ＋ 到字节集 (表达式_提取 [计数1 ＋ 1]) ＋ 到字节集 (表达式_提取 [计数1 ＋ 2]) ＋ 到字节集 (“!=0  ”))

                    .如果真 (状态 ＝ “完成”)

                        .判断开始 (右移 (子表达式处理_返回值, 16) ＝ #待修改跳转地址)

                            待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 条件真跳转地址 [表达式括号数 ＋ 1]
                            待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 条件假跳转地址 [表达式括号数 ＋ 1]

                            条件真跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)
                            条件假跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)


                            .判断开始 (赋值符标志_提取 ＝ 1 或 条件表达式标志 ＝ 0)

                                状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, #待修改跳转地址 × 65536)
                                子表达式 [起始地址_提取 ＋ 1] ＝ #有符号ACC
                                表达式累加器地址 ＝ 起始地址_提取
                                累加器内容状态 ＝ “有符号ACC”

                            .默认
                                子表达式 [起始地址_提取 ＋ 1] ＝ #待修改跳转地址
                            .判断结束


                            .如果真 (状态 ＝ “完成”)

                                计数1 ＝ 起始地址_提取 ＋ 2

                                .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                    子表达式 [计数1] ＝ 32
                                    计数1 ＝ 计数1 ＋ 1
                                .判断循环尾 ()

                                计数1 ＝ 1

                                .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                    主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                                    计数1 ＝ 计数1 ＋ 1
                                .判断循环尾 ()

                                子表达式 ＝ 到字节集 (“”)
                                名称符号 ＝ 到字节集 (“”)
                                表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                                运算符标志 ＝ 0
                                状态 ＝ “继续”

                            .如果真结束



                        .默认
                            状态 ＝ “主表达式处理_;_子表达式处理_返回值错误...”
                        .判断结束

                    .如果真结束




                .判断 (表达式_提取 [计数1] ＝ #立即数)

                    .判断开始 (立即数值 [表达式_提取 [计数1 ＋ 1] × 256 ＋ 表达式_提取 [计数1 ＋ 2] ＋ 1] ≠ 0)
                        待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                        JMP (0)
                        待修改条件假跳转地址 ＝ 到字节集 (“”)
                        待修改条件跳转出口状态 ＝ “假”

                    .默认
                        待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                        JMP (0)
                        待修改条件真跳转地址 ＝ 到字节集 (“”)
                        待修改条件跳转出口状态 ＝ “真”

                    .判断结束


                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 条件真跳转地址 [表达式括号数 ＋ 1]
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 条件假跳转地址 [表达式括号数 ＋ 1]

                    条件真跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)
                    条件假跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)


                    状态 ＝ “完成”
                    .判断开始 (赋值符标志_提取 ＝ 1 或 条件表达式标志 ＝ 0)

                        状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, #待修改跳转地址 × 65536)
                        子表达式 [起始地址_提取 ＋ 1] ＝ #有符号ACC
                        表达式累加器地址 ＝ 起始地址_提取
                        累加器内容状态 ＝ “有符号ACC”

                    .默认
                        子表达式 [起始地址_提取 ＋ 1] ＝ #待修改跳转地址
                    .判断结束


                    .如果真 (状态 ＝ “完成”)

                        计数1 ＝ 起始地址_提取 ＋ 2

                        .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                            子表达式 [计数1] ＝ 32
                            计数1 ＝ 计数1 ＋ 1
                        .判断循环尾 ()

                        计数1 ＝ 1

                        .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                            主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                            计数1 ＝ 计数1 ＋ 1
                        .判断循环尾 ()

                        子表达式 ＝ 到字节集 (“”)
                        名称符号 ＝ 到字节集 (“”)
                        表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                        运算符标志 ＝ 0
                        状态 ＝ “继续”

                    .如果真结束




                .判断 (表达式_提取 [计数1] ＝ #待修改跳转地址)

                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 条件真跳转地址 [表达式括号数 ＋ 1]
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 条件假跳转地址 [表达式括号数 ＋ 1]

                    条件真跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)
                    条件假跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)


                    状态 ＝ “完成”
                    .判断开始 (赋值符标志_提取 ＝ 1 或 条件表达式标志 ＝ 0)

                        状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, #待修改跳转地址 × 65536)
                        子表达式 [起始地址_提取 ＋ 1] ＝ #有符号ACC
                        表达式累加器地址 ＝ 起始地址_提取
                        累加器内容状态 ＝ “有符号ACC”

                    .默认
                        子表达式 [起始地址_提取 ＋ 1] ＝ #待修改跳转地址
                    .判断结束


                    .如果真 (状态 ＝ “完成”)

                        计数1 ＝ 起始地址_提取 ＋ 2

                        .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                            子表达式 [计数1] ＝ 32
                            计数1 ＝ 计数1 ＋ 1
                        .判断循环尾 ()

                        计数1 ＝ 1

                        .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                            主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                            计数1 ＝ 计数1 ＋ 1
                        .判断循环尾 ()

                        子表达式 ＝ 到字节集 (“”)
                        名称符号 ＝ 到字节集 (“”)
                        表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                        运算符标志 ＝ 0
                        状态 ＝ “继续”

                    .如果真结束



                .默认
                    状态 ＝ “主表达式处理_;_操作数类型错误_!- =~...”
                .判断结束



            .判断结束




        .判断 (三目运算符跳转表偏址 [表达式括号数 ＋ 1] － 三目运算符跳转表基址 [表达式括号数 ＋ 1] ＝ 0)

            .判断开始 (取字节集长度 (三目运算符条件真尾跳转地址 [三目运算符跳转表偏址 [表达式括号数 ＋ 1] ＋ 1]) ≠ 0)

                子表达式二级提取 (子表达式)

                状态 ＝ 子表达式处理 (表达式_提取)

                .如果真 (状态 ＝ “完成”)

                    子表达式 [起始地址_提取 ＋ 1] ＝ 右移 (子表达式处理_返回值, 16)
                    子表达式 [起始地址_提取 ＋ 2] ＝ 右移 (子表达式处理_返回值, 8)
                    子表达式 [起始地址_提取 ＋ 3] ＝ 子表达式处理_返回值

                    计数1 ＝ 起始地址_提取 ＋ 4

                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                        子表达式 [计数1] ＝ 32
                        计数1 ＝ 计数1 ＋ 1
                    .判断循环尾 ()

                    计数1 ＝ 1

                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                        主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                        计数1 ＝ 计数1 ＋ 1
                    .判断循环尾 ()

                    子表达式 ＝ 到字节集 (“”)
                    名称符号 ＝ 到字节集 (“”)
                    表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                    运算符标志 ＝ 0
                    状态 ＝ “继续”


                    字节集缓存 ＝ 三目运算符条件真尾跳转地址 [三目运算符跳转表偏址 [表达式括号数 ＋ 1] ＋ 1]

                    计数1 ＝ 1

                    .判断循环首 (计数1 ＜ 取字节集长度 (字节集缓存))
                        修改R2R3 (字节集缓存 [计数1] ＋ 字节集缓存 [计数1 ＋ 1] × 256, ROM_缓存使用字节)
                        计数1 ＝ 计数1 ＋ 2
                    .判断循环尾 ()

                    三目运算符条件真尾跳转地址 [三目运算符跳转表偏址 [表达式括号数 ＋ 1] ＋ 1] ＝ 到字节集 (“”)

                .如果真结束



            .判断 (运算符标志 ＝ 1)

                状态 ＝ 子表达式处理 (子表达式)

                .如果真 (状态 ＝ “完成”)

                    .判断开始 (右移 (子表达式处理_返回值, 16) ＝ #无符号ACC)
                        累加器内容状态 ＝ “无符号ACC”
                        表达式累加器地址 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                    .判断 (右移 (子表达式处理_返回值, 16) ＝ #有符号ACC)
                        累加器内容状态 ＝ “有符号ACC”
                        表达式累加器地址 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                    .判断 (右移 (子表达式处理_返回值, 16) ＝ #待修改跳转地址 且 条件表达式标志 ＝ 0)
                        状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, #待修改跳转地址 × 65536)
                        累加器内容状态 ＝ “有符号ACC”
                        表达式累加器地址 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                        子表达式处理_返回值 ＝ #有符号ACC × 65536
                    .默认

                    .判断结束


                    .如果真 (状态 ＝ “完成”)

                        主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 1] ＝ 右移 (子表达式处理_返回值, 16)
                        主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 2] ＝ 右移 (子表达式处理_返回值, 8)
                        主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 3] ＝ 子表达式处理_返回值

                        计数1 ＝ 子表达式起始地址 [表达式括号数 ＋ 1] ＋ 4

                        .判断循环首 (计数1 ≤ 表达式指针)
                            主表达式 [计数1] ＝ 32
                            计数1 ＝ 计数1 ＋ 1
                        .判断循环尾 ()

                        子表达式 ＝ 到字节集 (“”)
                        名称符号 ＝ 到字节集 (“”)
                        表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                        运算符标志 ＝ 0
                        状态 ＝ “继续”

                    .如果真结束

                .如果真结束




            .判断 (条件表达式标志 ＝ 0)

                .判断开始 (取字节集长度 (名称符号) ≠ 0 且 (名称符号 [1] ＞ 64 且 名称符号 [1] ＜ 91 或 名称符号 [1] ＞ 96 且 名称符号 [1] ＜ 123 或 名称符号 [1] ＝ 95) 且 操作数查询 (名称符号) ＝ 0)

                    状态 ＝ “主表达式处理_;_操作数查询错误_!- =~...”

                .默认

                    .如果真 (到文本 (名称符号) ＝ “_NOP”)
                        NOP ()
                    .如果真结束

                    状态 ＝ “;”
                .判断结束


            .默认



                .如果真 (取字节集长度 (名称符号) ＝ 0)

                    待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)
                    待修改条件假跳转地址 ＝ 到字节集 (“”)
                    待修改条件跳转出口状态 ＝ “假”

                .如果真结束


                .如果真 (待修改条件跳转出口状态 ＝ “假”)
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)
                .如果真结束


                计数1 ＝ 1

                .判断循环首 (计数1 ＜ 取字节集长度 (待修改条件真跳转地址))
                    修改R2R3 (待修改条件真跳转地址 [计数1] ＋ 待修改条件真跳转地址 [计数1 ＋ 1] × 256, ROM_缓存使用字节)
                    计数1 ＝ 计数1 ＋ 2
                .判断循环尾 ()


                待修改条件真跳转地址 ＝ 到字节集 (“”)

                状态 ＝ “;”


            .判断结束




        .默认
            状态 ＝ “三目运算符?:错误”
        .判断结束







    .判断 (到文本 (到字节集 (主表达式 [表达式指针 ＋ 1]) ＋ 到字节集 (主表达式 [表达式指针 ＋ 2])) ＝ “||”)

        子表达式一级提取 (子表达式)

        .判断开始 (运算符标志_提取 ＝ 1)

            运算符标志_提取 ＝ 0

            状态 ＝ 子表达式处理 (表达式_提取)

            .如果真 (状态 ＝ “完成”)

                子表达式 [起始地址_提取 ＋ 1] ＝ 右移 (子表达式处理_返回值, 16)
                子表达式 [起始地址_提取 ＋ 2] ＝ 右移 (子表达式处理_返回值, 8)
                子表达式 [起始地址_提取 ＋ 3] ＝ 子表达式处理_返回值

                计数1 ＝ 起始地址_提取 ＋ 4

                .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                    子表达式 [计数1] ＝ 32
                    计数1 ＝ 计数1 ＋ 1
                .判断循环尾 ()

                计数1 ＝ 1

                .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                    主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                    计数1 ＝ 计数1 ＋ 1
                .判断循环尾 ()

                子表达式 ＝ 到字节集 (“”)
                名称符号 ＝ 到字节集 (“”)
                表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                运算符标志 ＝ 0
                状态 ＝ “继续”
            .如果真结束


        .默认
            计数1 ＝ 1
            .判断循环首 (表达式_提取 [计数1] ＝ 32)
                计数1 ＝ 计数1 ＋ 1
            .判断循环尾 ()

            .判断开始 (累加器内容状态 ≠ “ACC” 且 表达式_提取 [计数1] ≠ #无符号ACC 且 表达式_提取 [计数1] ≠ #有符号ACC)

                状态 ＝ 二元式机器码生成 (0, #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, #ACC × 65536)
                .如果真 (状态 ＝ “完成”)

                    .判断开始 (累加器内容状态 ＝ “无符号ACC”)
                        计数4 ＝ #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                    .默认
                        计数4 ＝ #有符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                    .判断结束

                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 1

                    主表达式 [表达式累加器地址 ＋ 1] ＝ 右移 (计数4, 16)
                    主表达式 [表达式累加器地址 ＋ 2] ＝ 右移 (计数4, 8)
                    主表达式 [表达式累加器地址 ＋ 3] ＝ 计数4
                    累加器内容状态 ＝ “ACC”

                .如果真结束


            .默认
                状态 ＝ “完成”
            .判断结束



            .如果真 (状态 ＝ “完成”)


                .判断开始 (表达式_提取 [计数1] ＞ 47 且 表达式_提取 [计数1] ＜ 58)

                    字符串缓存 ＝ 到字节集 (“”)
                    .循环判断首 ()
                        字符串缓存 ＝ 字符串缓存 ＋ 到字节集 (表达式_提取 [计数1])
                        计数1 ＝ 计数1 ＋ 1
                    .循环判断尾 (表达式_提取 [计数1] ＞ 47 且 表达式_提取 [计数1] ＜ 58)


                    .判断开始 (到数值 (到文本 (字符串缓存)) ≠ 0)
                        待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                        JMP (0)
                        待修改条件假跳转地址 ＝ 到字节集 (“”)
                        待修改条件跳转出口状态 ＝ “假”

                    .默认
                        待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                        JMP (0)
                        待修改条件真跳转地址 ＝ 到字节集 (“”)
                        待修改条件跳转出口状态 ＝ “真”

                    .判断结束


                    子表达式 [起始地址_提取 ＋ 1] ＝ #待修改跳转地址

                    计数1 ＝ 起始地址_提取 ＋ 2

                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                        子表达式 [计数1] ＝ 32
                        计数1 ＝ 计数1 ＋ 1
                    .判断循环尾 ()

                    计数1 ＝ 1

                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                        主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                        计数1 ＝ 计数1 ＋ 1
                    .判断循环尾 ()

                    子表达式 ＝ 到字节集 (“”)
                    名称符号 ＝ 到字节集 (“”)
                    表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                    运算符标志 ＝ 0
                    状态 ＝ “继续”




                .判断 (表达式_提取 [计数1] ＞ 64 且 表达式_提取 [计数1] ＜ 91 或 表达式_提取 [计数1] ＞ 96 且 表达式_提取 [计数1] ＜ 123 或 表达式_提取 [计数1] ＝ 95)

                    字符串缓存 ＝ 到字节集 (“”)
                    .循环判断首 ()
                        字符串缓存 ＝ 字符串缓存 ＋ 到字节集 (表达式_提取 [计数1])
                        计数1 ＝ 计数1 ＋ 1
                    .循环判断尾 (表达式_提取 [计数1] ＞ 47 且 表达式_提取 [计数1] ＜ 58 或 表达式_提取 [计数1] ＞ 64 且 表达式_提取 [计数1] ＜ 91 或 表达式_提取 [计数1] ＞ 96 且 表达式_提取 [计数1] ＜ 123 或 表达式_提取 [计数1] ＝ 95)

                    计数2 ＝ 操作数查询 (字符串缓存)

                    .判断开始 (右移 (计数2, 16) ＝ #无符号char 或 右移 (计数2, 16) ＝ #无符号int 或 右移 (计数2, 16) ＝ #无符号长int 或 右移 (计数2, 16) ＝ #有符号char 或 右移 (计数2, 16) ＝ #有符号int 或 右移 (计数2, 16) ＝ #有符号长int 或 右移 (计数2, 16) ＝ #无符号char指针 或 右移 (计数2, 16) ＝ #无符号int指针 或 右移 (计数2, 16) ＝ #无符号长int指针 或 右移 (计数2, 16) ＝ #有符号char指针 或 右移 (计数2, 16) ＝ #有符号int指针 或 右移 (计数2, 16) ＝ #有符号长int指针 或 右移 (计数2, 16) ＝ #ACC)

                        状态 ＝ 子表达式处理 (到字节集 (到字节 (右移 (计数2, 16))) ＋ 到字节集 (到字节 (右移 (计数2, 8))) ＋ 到字节集 (到字节 (计数2)) ＋ 到字节集 (“!=0  ”))

                        .如果真 (状态 ＝ “完成”)

                            .判断开始 (右移 (子表达式处理_返回值, 16) ＝ #待修改跳转地址)

                                子表达式 [起始地址_提取 ＋ 1] ＝ #待修改跳转地址

                                计数1 ＝ 起始地址_提取 ＋ 2

                                .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                    子表达式 [计数1] ＝ 32
                                    计数1 ＝ 计数1 ＋ 1
                                .判断循环尾 ()

                                计数1 ＝ 1

                                .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                    主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                                    计数1 ＝ 计数1 ＋ 1
                                .判断循环尾 ()

                                子表达式 ＝ 到字节集 (“”)
                                名称符号 ＝ 到字节集 (“”)
                                表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                                运算符标志 ＝ 0
                                状态 ＝ “继续”




                            .默认
                                状态 ＝ “主表达式处理_;_子表达式处理_返回值错误...”
                            .判断结束

                        .如果真结束



                    .判断 (右移 (计数2, 16) ＝ #常量 或 右移 (计数2, 16) ＝ #无符号char数组 或 右移 (计数2, 16) ＝ #无符号int数组 或 右移 (计数2, 16) ＝ #无符号长int数组 或 右移 (计数2, 16) ＝ #有符号char数组 或 右移 (计数2, 16) ＝ #有符号int数组 或 右移 (计数2, 16) ＝ #有符号长int数组)

                        .判断开始 (右移 (计数2, 16) ＝ #常量 且 常量值 [位与 (计数2, 65535) ＋ 1] ≠ 0 或 (右移 (计数2, 16) ＝ #无符号char数组 或 右移 (计数2, 16) ＝ #无符号int数组 或 右移 (计数2, 16) ＝ #无符号长int数组 或 右移 (计数2, 16) ＝ #有符号char数组 或 右移 (计数2, 16) ＝ #有符号int数组 或 右移 (计数2, 16) ＝ #有符号长int数组) 且 位与 (计数2, 65535) ≠ 0)
                            待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                            JMP (0)
                            待修改条件假跳转地址 ＝ 到字节集 (“”)
                            待修改条件跳转出口状态 ＝ “假”

                        .默认
                            待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                            JMP (0)
                            待修改条件真跳转地址 ＝ 到字节集 (“”)
                            待修改条件跳转出口状态 ＝ “真”

                        .判断结束


                        子表达式 [起始地址_提取 ＋ 1] ＝ #待修改跳转地址

                        计数1 ＝ 起始地址_提取 ＋ 2

                        .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                            子表达式 [计数1] ＝ 32
                            计数1 ＝ 计数1 ＋ 1
                        .判断循环尾 ()

                        计数1 ＝ 1

                        .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                            主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                            计数1 ＝ 计数1 ＋ 1
                        .判断循环尾 ()

                        子表达式 ＝ 到字节集 (“”)
                        名称符号 ＝ 到字节集 (“”)
                        表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                        运算符标志 ＝ 0
                        状态 ＝ “继续”



                    .默认
                        状态 ＝ “主表达式处理_;_操作数查询错误”
                    .判断结束




                .判断 (表达式_提取 [计数1] ＝ #无符号char 或 表达式_提取 [计数1] ＝ #无符号int 或 表达式_提取 [计数1] ＝ #无符号长int 或 表达式_提取 [计数1] ＝ #有符号char 或 表达式_提取 [计数1] ＝ #有符号int 或 表达式_提取 [计数1] ＝ #有符号长int 或 表达式_提取 [计数1] ＝ #无符号char指针 或 表达式_提取 [计数1] ＝ #无符号int指针 或 表达式_提取 [计数1] ＝ #无符号长int指针 或 表达式_提取 [计数1] ＝ #有符号char指针 或 表达式_提取 [计数1] ＝ #有符号int指针 或 表达式_提取 [计数1] ＝ #有符号长int指针 或 表达式_提取 [计数1] ＝ #ACC 或 表达式_提取 [计数1] ＝ #无符号ACC 或 表达式_提取 [计数1] ＝ #有符号ACC 或 表达式_提取 [计数1] ＝ #无符号char指针指向内容 或 表达式_提取 [计数1] ＝ #无符号int指针指向内容 或 表达式_提取 [计数1] ＝ #无符号长int指针指向内容 或 表达式_提取 [计数1] ＝ #有符号char指针指向内容 或 表达式_提取 [计数1] ＝ #有符号int指针指向内容 或 表达式_提取 [计数1] ＝ #有符号长int指针指向内容)

                    状态 ＝ 子表达式处理 (到字节集 (表达式_提取 [计数1]) ＋ 到字节集 (表达式_提取 [计数1 ＋ 1]) ＋ 到字节集 (表达式_提取 [计数1 ＋ 2]) ＋ 到字节集 (“!=0  ”))

                    .如果真 (状态 ＝ “完成”)

                        .判断开始 (右移 (子表达式处理_返回值, 16) ＝ #待修改跳转地址)

                            子表达式 [起始地址_提取 ＋ 1] ＝ #待修改跳转地址

                            计数1 ＝ 起始地址_提取 ＋ 2

                            .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                子表达式 [计数1] ＝ 32
                                计数1 ＝ 计数1 ＋ 1
                            .判断循环尾 ()

                            计数1 ＝ 1

                            .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                                计数1 ＝ 计数1 ＋ 1
                            .判断循环尾 ()

                            子表达式 ＝ 到字节集 (“”)
                            名称符号 ＝ 到字节集 (“”)
                            表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                            运算符标志 ＝ 0
                            状态 ＝ “继续”




                        .默认
                            状态 ＝ “主表达式处理_;_子表达式处理_返回值错误...”
                        .判断结束

                    .如果真结束




                .判断 (表达式_提取 [计数1] ＝ #立即数)

                    .判断开始 (立即数值 [表达式_提取 [计数1 ＋ 1] × 256 ＋ 表达式_提取 [计数1 ＋ 2] ＋ 1] ≠ 0)
                        待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                        JMP (0)
                        待修改条件假跳转地址 ＝ 到字节集 (“”)
                        待修改条件跳转出口状态 ＝ “假”

                    .默认
                        待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                        JMP (0)
                        待修改条件真跳转地址 ＝ 到字节集 (“”)
                        待修改条件跳转出口状态 ＝ “真”

                    .判断结束


                    子表达式 [起始地址_提取 ＋ 1] ＝ #待修改跳转地址

                    计数1 ＝ 起始地址_提取 ＋ 2

                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                        子表达式 [计数1] ＝ 32
                        计数1 ＝ 计数1 ＋ 1
                    .判断循环尾 ()

                    计数1 ＝ 1

                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                        主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                        计数1 ＝ 计数1 ＋ 1
                    .判断循环尾 ()

                    子表达式 ＝ 到字节集 (“”)
                    名称符号 ＝ 到字节集 (“”)
                    表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                    运算符标志 ＝ 0
                    状态 ＝ “继续”





                .判断 (表达式_提取 [计数1] ＝ #待修改跳转地址)

                    .如果真 (待修改条件跳转出口状态 ＝ “真”)
                        待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                        JMP (0)
                    .如果真结束

                    条件真跳转地址 [表达式括号数 ＋ 1] ＝ 条件真跳转地址 [表达式括号数 ＋ 1] ＋ 待修改条件真跳转地址
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 条件假跳转地址 [表达式括号数 ＋ 1]

                    条件假跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)

                    计数1 ＝ 1

                    .判断循环首 (计数1 ＜ 取字节集长度 (待修改条件假跳转地址))
                        修改R2R3 (待修改条件假跳转地址 [计数1] ＋ 待修改条件假跳转地址 [计数1 ＋ 1] × 256, ROM_缓存使用字节)
                        计数1 ＝ 计数1 ＋ 2
                    .判断循环尾 ()

                    待修改条件真跳转地址 ＝ 到字节集 (“”)
                    待修改条件假跳转地址 ＝ 到字节集 (“”)


                    计数1 ＝ 起始地址_提取 ＋ 1

                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                        子表达式 [计数1] ＝ 32
                        计数1 ＝ 计数1 ＋ 1
                    .判断循环尾 ()

                    计数1 ＝ 1

                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                        主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                        计数1 ＝ 计数1 ＋ 1
                    .判断循环尾 ()

                    主表达式 [表达式指针 ＋ 1] ＝ 32
                    主表达式 [表达式指针 ＋ 2] ＝ 32


                    子表达式 ＝ 到字节集 (“”)
                    名称符号 ＝ 到字节集 (“”)
                    表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                    运算符标志 ＝ 0
                    状态 ＝ “继续”



                .默认
                    状态 ＝ “主表达式处理_||_操作数错误_!- =~...”
                .判断结束



            .如果真结束



        .判断结束





    .判断 (到文本 (到字节集 (主表达式 [表达式指针 ＋ 1]) ＋ 到字节集 (主表达式 [表达式指针 ＋ 2])) ＝ “&&”)

        子表达式一级提取 (子表达式)

        .判断开始 (运算符标志_提取 ＝ 1)

            运算符标志_提取 ＝ 0

            状态 ＝ 子表达式处理 (表达式_提取)

            .如果真 (状态 ＝ “完成”)

                子表达式 [起始地址_提取 ＋ 1] ＝ 右移 (子表达式处理_返回值, 16)
                子表达式 [起始地址_提取 ＋ 2] ＝ 右移 (子表达式处理_返回值, 8)
                子表达式 [起始地址_提取 ＋ 3] ＝ 子表达式处理_返回值

                计数1 ＝ 起始地址_提取 ＋ 4

                .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                    子表达式 [计数1] ＝ 32
                    计数1 ＝ 计数1 ＋ 1
                .判断循环尾 ()

                计数1 ＝ 1

                .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                    主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                    计数1 ＝ 计数1 ＋ 1
                .判断循环尾 ()

                子表达式 ＝ 到字节集 (“”)
                名称符号 ＝ 到字节集 (“”)
                表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                运算符标志 ＝ 0
                状态 ＝ “继续”
            .如果真结束


        .默认
            计数1 ＝ 1
            .判断循环首 (表达式_提取 [计数1] ＝ 32)
                计数1 ＝ 计数1 ＋ 1
            .判断循环尾 ()

            .判断开始 (累加器内容状态 ≠ “ACC” 且 表达式_提取 [计数1] ≠ #无符号ACC 且 表达式_提取 [计数1] ≠ #有符号ACC)

                状态 ＝ 二元式机器码生成 (0, #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, #ACC × 65536)
                .如果真 (状态 ＝ “完成”)

                    .判断开始 (累加器内容状态 ＝ “无符号ACC”)
                        计数4 ＝ #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                    .默认
                        计数4 ＝ #有符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                    .判断结束

                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 1

                    主表达式 [表达式累加器地址 ＋ 1] ＝ 右移 (计数4, 16)
                    主表达式 [表达式累加器地址 ＋ 2] ＝ 右移 (计数4, 8)
                    主表达式 [表达式累加器地址 ＋ 3] ＝ 计数4
                    累加器内容状态 ＝ “ACC”

                .如果真结束


            .默认
                状态 ＝ “完成”
            .判断结束

            .如果真 (状态 ＝ “完成”)

                .判断开始 (表达式_提取 [计数1] ＞ 47 且 表达式_提取 [计数1] ＜ 58)

                    字符串缓存 ＝ 到字节集 (“”)
                    .循环判断首 ()
                        字符串缓存 ＝ 字符串缓存 ＋ 到字节集 (表达式_提取 [计数1])
                        计数1 ＝ 计数1 ＋ 1
                    .循环判断尾 (表达式_提取 [计数1] ＞ 47 且 表达式_提取 [计数1] ＜ 58)


                    .判断开始 (到数值 (到文本 (字符串缓存)) ≠ 0)
                        待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                        JMP (0)
                        待修改条件假跳转地址 ＝ 到字节集 (“”)
                        待修改条件跳转出口状态 ＝ “假”

                    .默认
                        待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                        JMP (0)
                        待修改条件真跳转地址 ＝ 到字节集 (“”)
                        待修改条件跳转出口状态 ＝ “真”

                    .判断结束


                    子表达式 [起始地址_提取 ＋ 1] ＝ #待修改跳转地址

                    计数1 ＝ 起始地址_提取 ＋ 2

                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                        子表达式 [计数1] ＝ 32
                        计数1 ＝ 计数1 ＋ 1
                    .判断循环尾 ()

                    计数1 ＝ 1

                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                        主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                        计数1 ＝ 计数1 ＋ 1
                    .判断循环尾 ()

                    子表达式 ＝ 到字节集 (“”)
                    名称符号 ＝ 到字节集 (“”)
                    表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                    运算符标志 ＝ 0
                    状态 ＝ “继续”




                .判断 (表达式_提取 [计数1] ＞ 64 且 表达式_提取 [计数1] ＜ 91 或 表达式_提取 [计数1] ＞ 96 且 表达式_提取 [计数1] ＜ 123 或 表达式_提取 [计数1] ＝ 95)

                    字符串缓存 ＝ 到字节集 (“”)
                    .循环判断首 ()
                        字符串缓存 ＝ 字符串缓存 ＋ 到字节集 (表达式_提取 [计数1])
                        计数1 ＝ 计数1 ＋ 1
                    .循环判断尾 (表达式_提取 [计数1] ＞ 47 且 表达式_提取 [计数1] ＜ 58 或 表达式_提取 [计数1] ＞ 64 且 表达式_提取 [计数1] ＜ 91 或 表达式_提取 [计数1] ＞ 96 且 表达式_提取 [计数1] ＜ 123 或 表达式_提取 [计数1] ＝ 95)

                    计数2 ＝ 操作数查询 (字符串缓存)

                    .判断开始 (右移 (计数2, 16) ＝ #无符号char 或 右移 (计数2, 16) ＝ #无符号int 或 右移 (计数2, 16) ＝ #无符号长int 或 右移 (计数2, 16) ＝ #有符号char 或 右移 (计数2, 16) ＝ #有符号int 或 右移 (计数2, 16) ＝ #有符号长int 或 右移 (计数2, 16) ＝ #无符号char指针 或 右移 (计数2, 16) ＝ #无符号int指针 或 右移 (计数2, 16) ＝ #无符号长int指针 或 右移 (计数2, 16) ＝ #有符号char指针 或 右移 (计数2, 16) ＝ #有符号int指针 或 右移 (计数2, 16) ＝ #有符号长int指针 或 右移 (计数2, 16) ＝ #ACC)

                        状态 ＝ 子表达式处理 (到字节集 (到字节 (右移 (计数2, 16))) ＋ 到字节集 (到字节 (右移 (计数2, 8))) ＋ 到字节集 (到字节 (计数2)) ＋ 到字节集 (“!=0  ”))

                        .如果真 (状态 ＝ “完成”)

                            .判断开始 (右移 (子表达式处理_返回值, 16) ＝ #待修改跳转地址)

                                子表达式 [起始地址_提取 ＋ 1] ＝ #待修改跳转地址

                                计数1 ＝ 起始地址_提取 ＋ 2

                                .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                    子表达式 [计数1] ＝ 32
                                    计数1 ＝ 计数1 ＋ 1
                                .判断循环尾 ()

                                计数1 ＝ 1

                                .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                    主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                                    计数1 ＝ 计数1 ＋ 1
                                .判断循环尾 ()

                                子表达式 ＝ 到字节集 (“”)
                                名称符号 ＝ 到字节集 (“”)
                                表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                                运算符标志 ＝ 0
                                状态 ＝ “继续”




                            .默认
                                状态 ＝ “主表达式处理_;_子表达式处理_返回值错误...”
                            .判断结束

                        .如果真结束



                    .判断 (右移 (计数2, 16) ＝ #常量 或 右移 (计数2, 16) ＝ #无符号char数组 或 右移 (计数2, 16) ＝ #无符号int数组 或 右移 (计数2, 16) ＝ #无符号长int数组 或 右移 (计数2, 16) ＝ #有符号char数组 或 右移 (计数2, 16) ＝ #有符号int数组 或 右移 (计数2, 16) ＝ #有符号长int数组)

                        .判断开始 (右移 (计数2, 16) ＝ #常量 且 常量值 [位与 (计数2, 65535) ＋ 1] ≠ 0 或 (右移 (计数2, 16) ＝ #无符号char数组 或 右移 (计数2, 16) ＝ #无符号int数组 或 右移 (计数2, 16) ＝ #无符号长int数组 或 右移 (计数2, 16) ＝ #有符号char数组 或 右移 (计数2, 16) ＝ #有符号int数组 或 右移 (计数2, 16) ＝ #有符号长int数组) 且 位与 (计数2, 65535) ≠ 0)
                            待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                            JMP (0)
                            待修改条件假跳转地址 ＝ 到字节集 (“”)
                            待修改条件跳转出口状态 ＝ “假”

                        .默认
                            待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                            JMP (0)
                            待修改条件真跳转地址 ＝ 到字节集 (“”)
                            待修改条件跳转出口状态 ＝ “真”

                        .判断结束


                        子表达式 [起始地址_提取 ＋ 1] ＝ #待修改跳转地址

                        计数1 ＝ 起始地址_提取 ＋ 2

                        .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                            子表达式 [计数1] ＝ 32
                            计数1 ＝ 计数1 ＋ 1
                        .判断循环尾 ()

                        计数1 ＝ 1

                        .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                            主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                            计数1 ＝ 计数1 ＋ 1
                        .判断循环尾 ()

                        子表达式 ＝ 到字节集 (“”)
                        名称符号 ＝ 到字节集 (“”)
                        表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                        运算符标志 ＝ 0
                        状态 ＝ “继续”



                    .默认
                        状态 ＝ “主表达式处理_;_操作数查询错误”
                    .判断结束




                .判断 (表达式_提取 [计数1] ＝ #无符号char 或 表达式_提取 [计数1] ＝ #无符号int 或 表达式_提取 [计数1] ＝ #无符号长int 或 表达式_提取 [计数1] ＝ #有符号char 或 表达式_提取 [计数1] ＝ #有符号int 或 表达式_提取 [计数1] ＝ #有符号长int 或 表达式_提取 [计数1] ＝ #无符号char指针 或 表达式_提取 [计数1] ＝ #无符号int指针 或 表达式_提取 [计数1] ＝ #无符号长int指针 或 表达式_提取 [计数1] ＝ #有符号char指针 或 表达式_提取 [计数1] ＝ #有符号int指针 或 表达式_提取 [计数1] ＝ #有符号长int指针 或 表达式_提取 [计数1] ＝ #ACC 或 表达式_提取 [计数1] ＝ #无符号ACC 或 表达式_提取 [计数1] ＝ #有符号ACC 或 表达式_提取 [计数1] ＝ #无符号char指针指向内容 或 表达式_提取 [计数1] ＝ #无符号int指针指向内容 或 表达式_提取 [计数1] ＝ #无符号长int指针指向内容 或 表达式_提取 [计数1] ＝ #有符号char指针指向内容 或 表达式_提取 [计数1] ＝ #有符号int指针指向内容 或 表达式_提取 [计数1] ＝ #有符号长int指针指向内容)

                    状态 ＝ 子表达式处理 (到字节集 (表达式_提取 [计数1]) ＋ 到字节集 (表达式_提取 [计数1 ＋ 1]) ＋ 到字节集 (表达式_提取 [计数1 ＋ 2]) ＋ 到字节集 (“!=0  ”))

                    .如果真 (状态 ＝ “完成”)

                        .判断开始 (右移 (子表达式处理_返回值, 16) ＝ #待修改跳转地址)

                            子表达式 [起始地址_提取 ＋ 1] ＝ #待修改跳转地址

                            计数1 ＝ 起始地址_提取 ＋ 2

                            .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                子表达式 [计数1] ＝ 32
                                计数1 ＝ 计数1 ＋ 1
                            .判断循环尾 ()

                            计数1 ＝ 1

                            .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                                计数1 ＝ 计数1 ＋ 1
                            .判断循环尾 ()

                            子表达式 ＝ 到字节集 (“”)
                            名称符号 ＝ 到字节集 (“”)
                            表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                            运算符标志 ＝ 0
                            状态 ＝ “继续”




                        .默认
                            状态 ＝ “主表达式处理_;_子表达式处理_返回值错误...”
                        .判断结束

                    .如果真结束




                .判断 (表达式_提取 [计数1] ＝ #立即数)

                    .判断开始 (立即数值 [表达式_提取 [计数1 ＋ 1] × 256 ＋ 表达式_提取 [计数1 ＋ 2] ＋ 1] ≠ 0)
                        待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                        JMP (0)
                        待修改条件假跳转地址 ＝ 到字节集 (“”)
                        待修改条件跳转出口状态 ＝ “假”

                    .默认
                        待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                        JMP (0)
                        待修改条件真跳转地址 ＝ 到字节集 (“”)
                        待修改条件跳转出口状态 ＝ “真”

                    .判断结束


                    子表达式 [起始地址_提取 ＋ 1] ＝ #待修改跳转地址

                    计数1 ＝ 起始地址_提取 ＋ 2

                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                        子表达式 [计数1] ＝ 32
                        计数1 ＝ 计数1 ＋ 1
                    .判断循环尾 ()

                    计数1 ＝ 1

                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                        主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                        计数1 ＝ 计数1 ＋ 1
                    .判断循环尾 ()

                    子表达式 ＝ 到字节集 (“”)
                    名称符号 ＝ 到字节集 (“”)
                    表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                    运算符标志 ＝ 0
                    状态 ＝ “继续”





                .判断 (表达式_提取 [计数1] ＝ #待修改跳转地址)

                    .如果真 (待修改条件跳转出口状态 ＝ “假”)
                        待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                        JMP (0)
                    .如果真结束

                    条件假跳转地址 [表达式括号数 ＋ 1] ＝ 条件假跳转地址 [表达式括号数 ＋ 1] ＋ 待修改条件假跳转地址

                    计数1 ＝ 1

                    .判断循环首 (计数1 ＜ 取字节集长度 (待修改条件真跳转地址))
                        修改R2R3 (待修改条件真跳转地址 [计数1] ＋ 待修改条件真跳转地址 [计数1 ＋ 1] × 256, ROM_缓存使用字节)
                        计数1 ＝ 计数1 ＋ 2
                    .判断循环尾 ()

                    待修改条件真跳转地址 ＝ 到字节集 (“”)
                    待修改条件假跳转地址 ＝ 到字节集 (“”)


                    计数1 ＝ 起始地址_提取 ＋ 1

                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                        子表达式 [计数1] ＝ 32
                        计数1 ＝ 计数1 ＋ 1
                    .判断循环尾 ()

                    计数1 ＝ 1

                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                        主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                        计数1 ＝ 计数1 ＋ 1
                    .判断循环尾 ()

                    主表达式 [表达式指针 ＋ 1] ＝ 32
                    主表达式 [表达式指针 ＋ 2] ＝ 32


                    子表达式 ＝ 到字节集 (“”)
                    名称符号 ＝ 到字节集 (“”)
                    表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                    运算符标志 ＝ 0
                    状态 ＝ “继续”




                .默认
                    状态 ＝ “主表达式处理_&&_操作数错误_!- =~...”
                .判断结束



            .如果真结束



        .判断结束








    .判断 (到文本 (到字节集 (主表达式 [表达式指针 ＋ 1])) ＝ “?”)

        子表达式一级提取 (子表达式)

        .判断开始 (运算符标志_提取 ＝ 1)

            运算符标志_提取 ＝ 0

            状态 ＝ 子表达式处理 (表达式_提取)

            .如果真 (状态 ＝ “完成”)

                子表达式 [起始地址_提取 ＋ 1] ＝ 右移 (子表达式处理_返回值, 16)
                子表达式 [起始地址_提取 ＋ 2] ＝ 右移 (子表达式处理_返回值, 8)
                子表达式 [起始地址_提取 ＋ 3] ＝ 子表达式处理_返回值

                计数1 ＝ 起始地址_提取 ＋ 4

                .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                    子表达式 [计数1] ＝ 32
                    计数1 ＝ 计数1 ＋ 1
                .判断循环尾 ()

                计数1 ＝ 1

                .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                    主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                    计数1 ＝ 计数1 ＋ 1
                .判断循环尾 ()

                子表达式 ＝ 到字节集 (“”)
                名称符号 ＝ 到字节集 (“”)
                表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                运算符标志 ＝ 0
                状态 ＝ “继续”
            .如果真结束


        .默认
            计数1 ＝ 1
            .判断循环首 (表达式_提取 [计数1] ＝ 32)
                计数1 ＝ 计数1 ＋ 1
            .判断循环尾 ()

            .判断开始 (累加器内容状态 ≠ “ACC” 且 表达式_提取 [计数1] ≠ #无符号ACC 且 表达式_提取 [计数1] ≠ #有符号ACC)

                状态 ＝ 二元式机器码生成 (0, #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, #ACC × 65536)
                .如果真 (状态 ＝ “完成”)

                    .判断开始 (累加器内容状态 ＝ “无符号ACC”)
                        计数4 ＝ #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                    .默认
                        计数4 ＝ #有符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                    .判断结束

                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 1

                    主表达式 [表达式累加器地址 ＋ 1] ＝ 右移 (计数4, 16)
                    主表达式 [表达式累加器地址 ＋ 2] ＝ 右移 (计数4, 8)
                    主表达式 [表达式累加器地址 ＋ 3] ＝ 计数4
                    累加器内容状态 ＝ “ACC”

                .如果真结束


            .默认
                状态 ＝ “完成”
            .判断结束


            .如果真 (状态 ＝ “完成”)


                .判断开始 (表达式_提取 [计数1] ＞ 47 且 表达式_提取 [计数1] ＜ 58)

                    字符串缓存 ＝ 到字节集 (“”)
                    .循环判断首 ()
                        字符串缓存 ＝ 字符串缓存 ＋ 到字节集 (表达式_提取 [计数1])
                        计数1 ＝ 计数1 ＋ 1
                    .循环判断尾 (表达式_提取 [计数1] ＞ 47 且 表达式_提取 [计数1] ＜ 58)


                    .判断开始 (到数值 (到文本 (字符串缓存)) ≠ 0)
                        待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                        JMP (0)
                        待修改条件假跳转地址 ＝ 到字节集 (“”)
                        待修改条件跳转出口状态 ＝ “假”

                    .默认
                        待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                        JMP (0)
                        待修改条件真跳转地址 ＝ 到字节集 (“”)
                        待修改条件跳转出口状态 ＝ “真”

                    .判断结束


                    子表达式 [起始地址_提取 ＋ 1] ＝ #待修改跳转地址

                    计数1 ＝ 起始地址_提取 ＋ 2

                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                        子表达式 [计数1] ＝ 32
                        计数1 ＝ 计数1 ＋ 1
                    .判断循环尾 ()

                    计数1 ＝ 1

                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                        主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                        计数1 ＝ 计数1 ＋ 1
                    .判断循环尾 ()

                    子表达式 ＝ 到字节集 (“”)
                    名称符号 ＝ 到字节集 (“”)
                    表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                    运算符标志 ＝ 0
                    状态 ＝ “继续”




                .判断 (表达式_提取 [计数1] ＞ 64 且 表达式_提取 [计数1] ＜ 91 或 表达式_提取 [计数1] ＞ 96 且 表达式_提取 [计数1] ＜ 123 或 表达式_提取 [计数1] ＝ 95)

                    字符串缓存 ＝ 到字节集 (“”)
                    .循环判断首 ()
                        字符串缓存 ＝ 字符串缓存 ＋ 到字节集 (表达式_提取 [计数1])
                        计数1 ＝ 计数1 ＋ 1
                    .循环判断尾 (表达式_提取 [计数1] ＞ 47 且 表达式_提取 [计数1] ＜ 58 或 表达式_提取 [计数1] ＞ 64 且 表达式_提取 [计数1] ＜ 91 或 表达式_提取 [计数1] ＞ 96 且 表达式_提取 [计数1] ＜ 123 或 表达式_提取 [计数1] ＝ 95)

                    计数2 ＝ 操作数查询 (字符串缓存)

                    .判断开始 (右移 (计数2, 16) ＝ #无符号char 或 右移 (计数2, 16) ＝ #无符号int 或 右移 (计数2, 16) ＝ #无符号长int 或 右移 (计数2, 16) ＝ #有符号char 或 右移 (计数2, 16) ＝ #有符号int 或 右移 (计数2, 16) ＝ #有符号长int 或 右移 (计数2, 16) ＝ #无符号char指针 或 右移 (计数2, 16) ＝ #无符号int指针 或 右移 (计数2, 16) ＝ #无符号长int指针 或 右移 (计数2, 16) ＝ #有符号char指针 或 右移 (计数2, 16) ＝ #有符号int指针 或 右移 (计数2, 16) ＝ #有符号长int指针 或 右移 (计数2, 16) ＝ #ACC)

                        状态 ＝ 子表达式处理 (到字节集 (到字节 (右移 (计数2, 16))) ＋ 到字节集 (到字节 (右移 (计数2, 8))) ＋ 到字节集 (到字节 (计数2)) ＋ 到字节集 (“!=0  ”))

                        .如果真 (状态 ＝ “完成”)

                            .判断开始 (右移 (子表达式处理_返回值, 16) ＝ #待修改跳转地址)

                                子表达式 [起始地址_提取 ＋ 1] ＝ #待修改跳转地址

                                计数1 ＝ 起始地址_提取 ＋ 2

                                .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                    子表达式 [计数1] ＝ 32
                                    计数1 ＝ 计数1 ＋ 1
                                .判断循环尾 ()

                                计数1 ＝ 1

                                .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                    主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                                    计数1 ＝ 计数1 ＋ 1
                                .判断循环尾 ()

                                子表达式 ＝ 到字节集 (“”)
                                名称符号 ＝ 到字节集 (“”)
                                表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                                运算符标志 ＝ 0
                                状态 ＝ “继续”




                            .默认
                                状态 ＝ “主表达式处理_;_子表达式处理_返回值错误...”
                            .判断结束

                        .如果真结束



                    .判断 (右移 (计数2, 16) ＝ #常量 或 右移 (计数2, 16) ＝ #无符号char数组 或 右移 (计数2, 16) ＝ #无符号int数组 或 右移 (计数2, 16) ＝ #无符号长int数组 或 右移 (计数2, 16) ＝ #有符号char数组 或 右移 (计数2, 16) ＝ #有符号int数组 或 右移 (计数2, 16) ＝ #有符号长int数组)

                        .判断开始 (右移 (计数2, 16) ＝ #常量 且 常量值 [位与 (计数2, 65535) ＋ 1] ≠ 0 或 (右移 (计数2, 16) ＝ #无符号char数组 或 右移 (计数2, 16) ＝ #无符号int数组 或 右移 (计数2, 16) ＝ #无符号长int数组 或 右移 (计数2, 16) ＝ #有符号char数组 或 右移 (计数2, 16) ＝ #有符号int数组 或 右移 (计数2, 16) ＝ #有符号长int数组) 且 位与 (计数2, 65535) ≠ 0)
                            待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                            JMP (0)
                            待修改条件假跳转地址 ＝ 到字节集 (“”)
                            待修改条件跳转出口状态 ＝ “假”

                        .默认
                            待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                            JMP (0)
                            待修改条件真跳转地址 ＝ 到字节集 (“”)
                            待修改条件跳转出口状态 ＝ “真”

                        .判断结束


                        子表达式 [起始地址_提取 ＋ 1] ＝ #待修改跳转地址

                        计数1 ＝ 起始地址_提取 ＋ 2

                        .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                            子表达式 [计数1] ＝ 32
                            计数1 ＝ 计数1 ＋ 1
                        .判断循环尾 ()

                        计数1 ＝ 1

                        .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                            主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                            计数1 ＝ 计数1 ＋ 1
                        .判断循环尾 ()

                        子表达式 ＝ 到字节集 (“”)
                        名称符号 ＝ 到字节集 (“”)
                        表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                        运算符标志 ＝ 0
                        状态 ＝ “继续”



                    .默认
                        状态 ＝ “主表达式处理_;_操作数查询错误”
                    .判断结束




                .判断 (表达式_提取 [计数1] ＝ #无符号char 或 表达式_提取 [计数1] ＝ #无符号int 或 表达式_提取 [计数1] ＝ #无符号长int 或 表达式_提取 [计数1] ＝ #有符号char 或 表达式_提取 [计数1] ＝ #有符号int 或 表达式_提取 [计数1] ＝ #有符号长int 或 表达式_提取 [计数1] ＝ #无符号char指针 或 表达式_提取 [计数1] ＝ #无符号int指针 或 表达式_提取 [计数1] ＝ #无符号长int指针 或 表达式_提取 [计数1] ＝ #有符号char指针 或 表达式_提取 [计数1] ＝ #有符号int指针 或 表达式_提取 [计数1] ＝ #有符号长int指针 或 表达式_提取 [计数1] ＝ #ACC 或 表达式_提取 [计数1] ＝ #无符号ACC 或 表达式_提取 [计数1] ＝ #有符号ACC 或 表达式_提取 [计数1] ＝ #无符号char指针指向内容 或 表达式_提取 [计数1] ＝ #无符号int指针指向内容 或 表达式_提取 [计数1] ＝ #无符号长int指针指向内容 或 表达式_提取 [计数1] ＝ #有符号char指针指向内容 或 表达式_提取 [计数1] ＝ #有符号int指针指向内容 或 表达式_提取 [计数1] ＝ #有符号长int指针指向内容)

                    状态 ＝ 子表达式处理 (到字节集 (表达式_提取 [计数1]) ＋ 到字节集 (表达式_提取 [计数1 ＋ 1]) ＋ 到字节集 (表达式_提取 [计数1 ＋ 2]) ＋ 到字节集 (“!=0  ”))

                    .如果真 (状态 ＝ “完成”)

                        .判断开始 (右移 (子表达式处理_返回值, 16) ＝ #待修改跳转地址)

                            子表达式 [起始地址_提取 ＋ 1] ＝ #待修改跳转地址

                            计数1 ＝ 起始地址_提取 ＋ 2

                            .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                子表达式 [计数1] ＝ 32
                                计数1 ＝ 计数1 ＋ 1
                            .判断循环尾 ()

                            计数1 ＝ 1

                            .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                                计数1 ＝ 计数1 ＋ 1
                            .判断循环尾 ()

                            子表达式 ＝ 到字节集 (“”)
                            名称符号 ＝ 到字节集 (“”)
                            表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                            运算符标志 ＝ 0
                            状态 ＝ “继续”




                        .默认
                            状态 ＝ “主表达式处理_;_子表达式处理_返回值错误...”
                        .判断结束

                    .如果真结束




                .判断 (表达式_提取 [计数1] ＝ #立即数)

                    .判断开始 (立即数值 [表达式_提取 [计数1 ＋ 1] × 256 ＋ 表达式_提取 [计数1 ＋ 2] ＋ 1] ≠ 0)
                        待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                        JMP (0)
                        待修改条件假跳转地址 ＝ 到字节集 (“”)
                        待修改条件跳转出口状态 ＝ “假”

                    .默认
                        待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                        JMP (0)
                        待修改条件真跳转地址 ＝ 到字节集 (“”)
                        待修改条件跳转出口状态 ＝ “真”

                    .判断结束


                    子表达式 [起始地址_提取 ＋ 1] ＝ #待修改跳转地址

                    计数1 ＝ 起始地址_提取 ＋ 2

                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                        子表达式 [计数1] ＝ 32
                        计数1 ＝ 计数1 ＋ 1
                    .判断循环尾 ()

                    计数1 ＝ 1

                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                        主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                        计数1 ＝ 计数1 ＋ 1
                    .判断循环尾 ()

                    子表达式 ＝ 到字节集 (“”)
                    名称符号 ＝ 到字节集 (“”)
                    表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                    运算符标志 ＝ 0
                    状态 ＝ “继续”





                .判断 (表达式_提取 [计数1] ＝ #待修改跳转地址)

                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 条件真跳转地址 [表达式括号数 ＋ 1]
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 条件假跳转地址 [表达式括号数 ＋ 1]

                    条件真跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)
                    条件假跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)

                    .如果真 (待修改条件跳转出口状态 ＝ “假”)
                        待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                        JMP (0)
                    .如果真结束

                    三目运算符条件假跳转地址 [三目运算符跳转表偏址 [表达式括号数 ＋ 1] ＋ 1] ＝ 待修改条件假跳转地址

                    计数1 ＝ 1

                    .判断循环首 (计数1 ＜ 取字节集长度 (待修改条件真跳转地址))
                        修改R2R3 (待修改条件真跳转地址 [计数1] ＋ 待修改条件真跳转地址 [计数1 ＋ 1] × 256, ROM_缓存使用字节)
                        计数1 ＝ 计数1 ＋ 2
                    .判断循环尾 ()

                    待修改条件真跳转地址 ＝ 到字节集 (“”)
                    待修改条件假跳转地址 ＝ 到字节集 (“”)

                    三目运算符跳转表偏址 [表达式括号数 ＋ 1] ＝ 三目运算符跳转表偏址 [表达式括号数 ＋ 1] ＋ 1

                    三目运算符条件假跳转地址 [三目运算符跳转表偏址 [表达式括号数 ＋ 1] ＋ 1] ＝ 到字节集 (“”)
                    三目运算符条件真尾跳转地址 [三目运算符跳转表偏址 [表达式括号数 ＋ 1] ＋ 1] ＝ 到字节集 (“”)


                    计数1 ＝ 起始地址_提取 ＋ 1

                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                        子表达式 [计数1] ＝ 32
                        计数1 ＝ 计数1 ＋ 1
                    .判断循环尾 ()

                    计数1 ＝ 1

                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                        主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                        计数1 ＝ 计数1 ＋ 1
                    .判断循环尾 ()

                    主表达式 [表达式指针 ＋ 1] ＝ 32


                    子表达式 ＝ 到字节集 (“”)
                    名称符号 ＝ 到字节集 (“”)
                    表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                    运算符标志 ＝ 0
                    状态 ＝ “继续”



                .默认
                    状态 ＝ “主表达式处理_;_操作数类型错误_!- =~...”
                .判断结束



            .如果真结束


        .判断结束




    .判断 (到文本 (到字节集 (主表达式 [表达式指针 ＋ 1])) ＝ “:”)

        .判断开始 (三目运算符跳转表偏址 [表达式括号数 ＋ 1] － 三目运算符跳转表基址 [表达式括号数 ＋ 1] ≠ 0)

            .判断开始 (取字节集长度 (条件真跳转地址 [表达式括号数 ＋ 1]) ≠ 0 或 取字节集长度 (条件假跳转地址 [表达式括号数 ＋ 1]) ≠ 0)

                子表达式一级提取 (子表达式)

                .判断开始 (运算符标志_提取 ＝ 1)

                    运算符标志_提取 ＝ 0

                    状态 ＝ 子表达式处理 (表达式_提取)

                    .如果真 (状态 ＝ “完成”)

                        子表达式 [起始地址_提取 ＋ 1] ＝ 右移 (子表达式处理_返回值, 16)
                        子表达式 [起始地址_提取 ＋ 2] ＝ 右移 (子表达式处理_返回值, 8)
                        子表达式 [起始地址_提取 ＋ 3] ＝ 子表达式处理_返回值

                        计数1 ＝ 起始地址_提取 ＋ 4

                        .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                            子表达式 [计数1] ＝ 32
                            计数1 ＝ 计数1 ＋ 1
                        .判断循环尾 ()

                        计数1 ＝ 1

                        .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                            主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                            计数1 ＝ 计数1 ＋ 1
                        .判断循环尾 ()

                        子表达式 ＝ 到字节集 (“”)
                        名称符号 ＝ 到字节集 (“”)
                        表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                        运算符标志 ＝ 0
                        状态 ＝ “继续”
                    .如果真结束


                .默认
                    计数1 ＝ 1
                    .判断循环首 (表达式_提取 [计数1] ＝ 32)
                        计数1 ＝ 计数1 ＋ 1
                    .判断循环尾 ()

                    .判断开始 (表达式_提取 [计数1] ＞ 47 且 表达式_提取 [计数1] ＜ 58)

                        字符串缓存 ＝ 到字节集 (“”)
                        .循环判断首 ()
                            字符串缓存 ＝ 字符串缓存 ＋ 到字节集 (表达式_提取 [计数1])
                            计数1 ＝ 计数1 ＋ 1
                        .循环判断尾 (表达式_提取 [计数1] ＞ 47 且 表达式_提取 [计数1] ＜ 58)


                        .判断开始 (到数值 (到文本 (字符串缓存)) ≠ 0)
                            待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                            JMP (0)
                            待修改条件假跳转地址 ＝ 到字节集 (“”)
                            待修改条件跳转出口状态 ＝ “假”

                        .默认
                            待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                            JMP (0)
                            待修改条件真跳转地址 ＝ 到字节集 (“”)
                            待修改条件跳转出口状态 ＝ “真”

                        .判断结束


                        待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 条件真跳转地址 [表达式括号数 ＋ 1]
                        待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 条件假跳转地址 [表达式括号数 ＋ 1]

                        条件真跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)
                        条件假跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)


                        状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, #待修改跳转地址 × 65536)
                        子表达式 [起始地址_提取 ＋ 1] ＝ #有符号ACC
                        表达式累加器地址 ＝ 起始地址_提取
                        累加器内容状态 ＝ “有符号ACC”

                        .如果真 (状态 ＝ “完成”)

                            计数1 ＝ 起始地址_提取 ＋ 2

                            .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                子表达式 [计数1] ＝ 32
                                计数1 ＝ 计数1 ＋ 1
                            .判断循环尾 ()

                            计数1 ＝ 1

                            .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                                计数1 ＝ 计数1 ＋ 1
                            .判断循环尾 ()

                            子表达式 ＝ 到字节集 (“”)
                            名称符号 ＝ 到字节集 (“”)
                            表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                            运算符标志 ＝ 0
                            状态 ＝ “继续”

                        .如果真结束



                    .判断 (表达式_提取 [计数1] ＞ 64 且 表达式_提取 [计数1] ＜ 91 或 表达式_提取 [计数1] ＞ 96 且 表达式_提取 [计数1] ＜ 123 或 表达式_提取 [计数1] ＝ 95)

                        字符串缓存 ＝ 到字节集 (“”)
                        .循环判断首 ()
                            字符串缓存 ＝ 字符串缓存 ＋ 到字节集 (表达式_提取 [计数1])
                            计数1 ＝ 计数1 ＋ 1
                        .循环判断尾 (表达式_提取 [计数1] ＞ 47 且 表达式_提取 [计数1] ＜ 58 或 表达式_提取 [计数1] ＞ 64 且 表达式_提取 [计数1] ＜ 91 或 表达式_提取 [计数1] ＞ 96 且 表达式_提取 [计数1] ＜ 123 或 表达式_提取 [计数1] ＝ 95)

                        计数2 ＝ 操作数查询 (字符串缓存)

                        .判断开始 (右移 (计数2, 16) ＝ #无符号char 或 右移 (计数2, 16) ＝ #无符号int 或 右移 (计数2, 16) ＝ #无符号长int 或 右移 (计数2, 16) ＝ #有符号char 或 右移 (计数2, 16) ＝ #有符号int 或 右移 (计数2, 16) ＝ #有符号长int 或 右移 (计数2, 16) ＝ #无符号char指针 或 右移 (计数2, 16) ＝ #无符号int指针 或 右移 (计数2, 16) ＝ #无符号长int指针 或 右移 (计数2, 16) ＝ #有符号char指针 或 右移 (计数2, 16) ＝ #有符号int指针 或 右移 (计数2, 16) ＝ #有符号长int指针 或 右移 (计数2, 16) ＝ #ACC)

                            状态 ＝ 子表达式处理 (到字节集 (到字节 (右移 (计数2, 16))) ＋ 到字节集 (到字节 (右移 (计数2, 8))) ＋ 到字节集 (到字节 (计数2)) ＋ 到字节集 (“!=0  ”))

                            .如果真 (状态 ＝ “完成”)

                                .判断开始 (右移 (子表达式处理_返回值, 16) ＝ #待修改跳转地址)

                                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 条件真跳转地址 [表达式括号数 ＋ 1]
                                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 条件假跳转地址 [表达式括号数 ＋ 1]

                                    条件真跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)
                                    条件假跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)


                                    状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, #待修改跳转地址 × 65536)
                                    子表达式 [起始地址_提取 ＋ 1] ＝ #有符号ACC
                                    表达式累加器地址 ＝ 起始地址_提取
                                    累加器内容状态 ＝ “有符号ACC”

                                    .如果真 (状态 ＝ “完成”)

                                        计数1 ＝ 起始地址_提取 ＋ 2

                                        .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                            子表达式 [计数1] ＝ 32
                                            计数1 ＝ 计数1 ＋ 1
                                        .判断循环尾 ()

                                        计数1 ＝ 1

                                        .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                            主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                                            计数1 ＝ 计数1 ＋ 1
                                        .判断循环尾 ()

                                        子表达式 ＝ 到字节集 (“”)
                                        名称符号 ＝ 到字节集 (“”)
                                        表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                                        运算符标志 ＝ 0
                                        状态 ＝ “继续”

                                    .如果真结束



                                .默认
                                    状态 ＝ “主表达式处理_,_子表达式处理_返回值错误...”
                                .判断结束

                            .如果真结束



                        .判断 (右移 (计数2, 16) ＝ #常量 或 右移 (计数2, 16) ＝ #无符号char数组 或 右移 (计数2, 16) ＝ #无符号int数组 或 右移 (计数2, 16) ＝ #无符号长int数组 或 右移 (计数2, 16) ＝ #有符号char数组 或 右移 (计数2, 16) ＝ #有符号int数组 或 右移 (计数2, 16) ＝ #有符号长int数组)

                            .判断开始 (右移 (计数2, 16) ＝ #常量 且 常量值 [位与 (计数2, 65535) ＋ 1] ≠ 0 或 (右移 (计数2, 16) ＝ #无符号char数组 或 右移 (计数2, 16) ＝ #无符号int数组 或 右移 (计数2, 16) ＝ #无符号长int数组 或 右移 (计数2, 16) ＝ #有符号char数组 或 右移 (计数2, 16) ＝ #有符号int数组 或 右移 (计数2, 16) ＝ #有符号长int数组) 且 位与 (计数2, 65535) ≠ 0)
                                待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                                JMP (0)
                                待修改条件假跳转地址 ＝ 到字节集 (“”)
                                待修改条件跳转出口状态 ＝ “假”

                            .默认
                                待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                                JMP (0)
                                待修改条件真跳转地址 ＝ 到字节集 (“”)
                                待修改条件跳转出口状态 ＝ “真”

                            .判断结束


                            待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 条件真跳转地址 [表达式括号数 ＋ 1]
                            待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 条件假跳转地址 [表达式括号数 ＋ 1]

                            条件真跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)
                            条件假跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)


                            状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, #待修改跳转地址 × 65536)
                            子表达式 [起始地址_提取 ＋ 1] ＝ #有符号ACC
                            表达式累加器地址 ＝ 起始地址_提取
                            累加器内容状态 ＝ “有符号ACC”

                            .如果真 (状态 ＝ “完成”)

                                计数1 ＝ 起始地址_提取 ＋ 2

                                .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                    子表达式 [计数1] ＝ 32
                                    计数1 ＝ 计数1 ＋ 1
                                .判断循环尾 ()

                                计数1 ＝ 1

                                .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                    主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                                    计数1 ＝ 计数1 ＋ 1
                                .判断循环尾 ()

                                子表达式 ＝ 到字节集 (“”)
                                名称符号 ＝ 到字节集 (“”)
                                表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                                运算符标志 ＝ 0
                                状态 ＝ “继续”

                            .如果真结束


                        .默认
                            状态 ＝ “主表达式处理_,_操作数查询错误”
                        .判断结束




                    .判断 (表达式_提取 [计数1] ＝ #无符号char 或 表达式_提取 [计数1] ＝ #无符号int 或 表达式_提取 [计数1] ＝ #无符号长int 或 表达式_提取 [计数1] ＝ #有符号char 或 表达式_提取 [计数1] ＝ #有符号int 或 表达式_提取 [计数1] ＝ #有符号长int 或 表达式_提取 [计数1] ＝ #无符号char指针 或 表达式_提取 [计数1] ＝ #无符号int指针 或 表达式_提取 [计数1] ＝ #无符号长int指针 或 表达式_提取 [计数1] ＝ #有符号char指针 或 表达式_提取 [计数1] ＝ #有符号int指针 或 表达式_提取 [计数1] ＝ #有符号长int指针 或 表达式_提取 [计数1] ＝ #ACC 或 表达式_提取 [计数1] ＝ #无符号ACC 或 表达式_提取 [计数1] ＝ #有符号ACC 或 表达式_提取 [计数1] ＝ #无符号char指针指向内容 或 表达式_提取 [计数1] ＝ #无符号int指针指向内容 或 表达式_提取 [计数1] ＝ #无符号长int指针指向内容 或 表达式_提取 [计数1] ＝ #有符号char指针指向内容 或 表达式_提取 [计数1] ＝ #有符号int指针指向内容 或 表达式_提取 [计数1] ＝ #有符号长int指针指向内容)

                        状态 ＝ 子表达式处理 (到字节集 (表达式_提取 [计数1]) ＋ 到字节集 (表达式_提取 [计数1 ＋ 1]) ＋ 到字节集 (表达式_提取 [计数1 ＋ 2]) ＋ 到字节集 (“!=0  ”))

                        .如果真 (状态 ＝ “完成”)

                            .判断开始 (右移 (子表达式处理_返回值, 16) ＝ #待修改跳转地址)

                                待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 条件真跳转地址 [表达式括号数 ＋ 1]
                                待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 条件假跳转地址 [表达式括号数 ＋ 1]

                                条件真跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)
                                条件假跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)


                                状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, #待修改跳转地址 × 65536)
                                子表达式 [起始地址_提取 ＋ 1] ＝ #有符号ACC
                                表达式累加器地址 ＝ 起始地址_提取
                                累加器内容状态 ＝ “有符号ACC”

                                .如果真 (状态 ＝ “完成”)

                                    计数1 ＝ 起始地址_提取 ＋ 2

                                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                        子表达式 [计数1] ＝ 32
                                        计数1 ＝ 计数1 ＋ 1
                                    .判断循环尾 ()

                                    计数1 ＝ 1

                                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                        主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                                        计数1 ＝ 计数1 ＋ 1
                                    .判断循环尾 ()

                                    子表达式 ＝ 到字节集 (“”)
                                    名称符号 ＝ 到字节集 (“”)
                                    表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                                    运算符标志 ＝ 0
                                    状态 ＝ “继续”

                                .如果真结束



                            .默认
                                状态 ＝ “主表达式处理_,_子表达式处理_返回值错误...”
                            .判断结束

                        .如果真结束




                    .判断 (表达式_提取 [计数1] ＝ #立即数)

                        .判断开始 (立即数值 [表达式_提取 [计数1 ＋ 1] × 256 ＋ 表达式_提取 [计数1 ＋ 2] ＋ 1] ≠ 0)
                            待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                            JMP (0)
                            待修改条件假跳转地址 ＝ 到字节集 (“”)
                            待修改条件跳转出口状态 ＝ “假”

                        .默认
                            待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                            JMP (0)
                            待修改条件真跳转地址 ＝ 到字节集 (“”)
                            待修改条件跳转出口状态 ＝ “真”

                        .判断结束


                        待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 条件真跳转地址 [表达式括号数 ＋ 1]
                        待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 条件假跳转地址 [表达式括号数 ＋ 1]

                        条件真跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)
                        条件假跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)


                        状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, #待修改跳转地址 × 65536)
                        子表达式 [起始地址_提取 ＋ 1] ＝ #有符号ACC
                        表达式累加器地址 ＝ 起始地址_提取
                        累加器内容状态 ＝ “有符号ACC”

                        .如果真 (状态 ＝ “完成”)

                            计数1 ＝ 起始地址_提取 ＋ 2

                            .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                子表达式 [计数1] ＝ 32
                                计数1 ＝ 计数1 ＋ 1
                            .判断循环尾 ()

                            计数1 ＝ 1

                            .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                                计数1 ＝ 计数1 ＋ 1
                            .判断循环尾 ()

                            子表达式 ＝ 到字节集 (“”)
                            名称符号 ＝ 到字节集 (“”)
                            表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                            运算符标志 ＝ 0
                            状态 ＝ “继续”

                        .如果真结束




                    .判断 (表达式_提取 [计数1] ＝ #待修改跳转地址)

                        待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 条件真跳转地址 [表达式括号数 ＋ 1]
                        待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 条件假跳转地址 [表达式括号数 ＋ 1]

                        条件真跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)
                        条件假跳转地址 [表达式括号数 ＋ 1] ＝ 到字节集 (“”)


                        状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, #待修改跳转地址 × 65536)
                        子表达式 [起始地址_提取 ＋ 1] ＝ #有符号ACC
                        表达式累加器地址 ＝ 起始地址_提取
                        累加器内容状态 ＝ “有符号ACC”

                        .如果真 (状态 ＝ “完成”)

                            计数1 ＝ 起始地址_提取 ＋ 2

                            .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                子表达式 [计数1] ＝ 32
                                计数1 ＝ 计数1 ＋ 1
                            .判断循环尾 ()

                            计数1 ＝ 1

                            .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                                主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                                计数1 ＝ 计数1 ＋ 1
                            .判断循环尾 ()

                            子表达式 ＝ 到字节集 (“”)
                            名称符号 ＝ 到字节集 (“”)
                            表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                            运算符标志 ＝ 0
                            状态 ＝ “继续”

                        .如果真结束



                    .默认
                        状态 ＝ “主表达式处理_,_操作数类型错误_!- =~...”
                    .判断结束





                .判断结束


            .默认
                子表达式二级提取 (子表达式)

                .判断开始 (赋值符标志_提取 ＝ 0)

                    字节集缓存 ＝ 到字节集 (到字节 (#有符号长int)) ＋ 到字节集 (到字节 (右移 (动态RAM分配地址, 8))) ＋ 到字节集 (到字节 (动态RAM分配地址)) ＋ 到字节集 (“=”) ＋ 表达式_提取
                    赋值符_提取 ＝ 32 × 65536 ＋ 32 × 256 ＋ 61
                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4

                .默认
                    字节集缓存 ＝ 表达式_提取
                .判断结束


                状态 ＝ 子表达式处理 (字节集缓存)

                .如果真 (状态 ＝ “完成”)

                    子表达式 [起始地址_提取 ＋ 1] ＝ 右移 (子表达式处理_返回值, 16)
                    子表达式 [起始地址_提取 ＋ 2] ＝ 右移 (子表达式处理_返回值, 8)
                    子表达式 [起始地址_提取 ＋ 3] ＝ 子表达式处理_返回值
                    子表达式 [起始地址_提取 ＋ 4] ＝ 右移 (赋值符_提取, 16)
                    子表达式 [起始地址_提取 ＋ 5] ＝ 右移 (赋值符_提取, 8)
                    子表达式 [起始地址_提取 ＋ 6] ＝ 赋值符_提取

                    计数1 ＝ 起始地址_提取 ＋ 7

                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                        子表达式 [计数1] ＝ 32
                        计数1 ＝ 计数1 ＋ 1
                    .判断循环尾 ()

                    计数1 ＝ 1

                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式))
                        主表达式 [子表达式起始地址 [表达式括号数 ＋ 1] ＋ 计数1] ＝ 子表达式 [计数1]
                        计数1 ＝ 计数1 ＋ 1
                    .判断循环尾 ()

                    主表达式 [表达式指针 ＋ 1] ＝ 32

                    子表达式 ＝ 到字节集 (“”)
                    名称符号 ＝ 到字节集 (“”)
                    表达式指针 ＝ 子表达式起始地址 [表达式括号数 ＋ 1]
                    运算符标志 ＝ 0
                    状态 ＝ “继续”


                    字节集缓存 ＝ 三目运算符条件真尾跳转地址 [三目运算符跳转表偏址 [表达式括号数 ＋ 1] ＋ 1]

                    计数1 ＝ 1

                    .判断循环首 (计数1 ＜ 取字节集长度 (字节集缓存))
                        修改R2R3 (字节集缓存 [计数1] ＋ 字节集缓存 [计数1 ＋ 1] × 256, ROM_缓存使用字节)
                        计数1 ＝ 计数1 ＋ 2
                    .判断循环尾 ()

                    三目运算符跳转表偏址 [表达式括号数 ＋ 1] ＝ 三目运算符跳转表偏址 [表达式括号数 ＋ 1] － 1

                    三目运算符条件真尾跳转地址 [三目运算符跳转表偏址 [表达式括号数 ＋ 1] ＋ 1] ＝ 三目运算符条件真尾跳转地址 [三目运算符跳转表偏址 [表达式括号数 ＋ 1] ＋ 1] ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))

                    JMP (0)


                    字节集缓存 ＝ 三目运算符条件假跳转地址 [三目运算符跳转表偏址 [表达式括号数 ＋ 1] ＋ 1]

                    计数1 ＝ 1

                    .判断循环首 (计数1 ＜ 取字节集长度 (字节集缓存))
                        修改R2R3 (字节集缓存 [计数1] ＋ 字节集缓存 [计数1 ＋ 1] × 256, ROM_缓存使用字节)
                        计数1 ＝ 计数1 ＋ 2
                    .判断循环尾 ()

                .如果真结束



            .判断结束




        .默认
            状态 ＝ “?:对数错误...”
        .判断结束




    .判断 (到数值 (主表达式 [表达式指针 ＋ 1]) ＞ 64 且 到数值 (主表达式 [表达式指针 ＋ 1]) ＜ 91 或 到数值 (主表达式 [表达式指针 ＋ 1]) ＞ 96 且 到数值 (主表达式 [表达式指针 ＋ 1]) ＜ 123 或 到数值 (主表达式 [表达式指针 ＋ 1]) ＝ 95)


        名称符号首地址 ＝ 表达式指针
        名称符号 ＝ 到字节集 (“”)

        .循环判断首 ()
            名称符号 ＝ 名称符号 ＋ 到字节集 (主表达式 [表达式指针 ＋ 1])
            表达式指针 ＝ 表达式指针 ＋ 1
        .循环判断尾 (到数值 (主表达式 [表达式指针 ＋ 1]) ＞ 47 且 到数值 (主表达式 [表达式指针 ＋ 1]) ＜ 58 或 到数值 (主表达式 [表达式指针 ＋ 1]) ＞ 64 且 到数值 (主表达式 [表达式指针 ＋ 1]) ＜ 91 或 到数值 (主表达式 [表达式指针 ＋ 1]) ＞ 96 且 到数值 (主表达式 [表达式指针 ＋ 1]) ＜ 123 或 到数值 (主表达式 [表达式指针 ＋ 1]) ＝ 95)

        子表达式 ＝ 子表达式 ＋ 名称符号



    .判断 (到数值 (主表达式 [表达式指针 ＋ 1]) ＞ 47 且 到数值 (主表达式 [表达式指针 ＋ 1]) ＜ 58)

        名称符号首地址 ＝ 表达式指针
        名称符号 ＝ 到字节集 (“”)

        .循环判断首 ()
            名称符号 ＝ 名称符号 ＋ 到字节集 (主表达式 [表达式指针 ＋ 1])
            表达式指针 ＝ 表达式指针 ＋ 1
        .循环判断尾 (到数值 (主表达式 [表达式指针 ＋ 1]) ＞ 47 且 到数值 (主表达式 [表达式指针 ＋ 1]) ＜ 58)

        子表达式 ＝ 子表达式 ＋ 名称符号



    .判断 (到数值 (主表达式 [表达式指针 ＋ 1]) ≥ 128 且 到数值 (主表达式 [表达式指针 ＋ 1]) ≤ 255)

        名称符号首地址 ＝ 表达式指针
        名称符号 ＝ 到字节集 (“”)

        名称符号 ＝ 到字节集 (主表达式 [表达式指针 ＋ 1]) ＋ 到字节集 (主表达式 [表达式指针 ＋ 2]) ＋ 到字节集 (主表达式 [表达式指针 ＋ 3])

        子表达式 ＝ 子表达式 ＋ 名称符号

        表达式指针 ＝ 表达式指针 ＋ 3



    .判断 (到文本 (到字节集 (主表达式 [表达式指针 ＋ 1]) ＋ 到字节集 (主表达式 [表达式指针 ＋ 2]) ＋ 到字节集 (主表达式 [表达式指针 ＋ 3])) ＝ “<<=” 或 到文本 (到字节集 (主表达式 [表达式指针 ＋ 1]) ＋ 到字节集 (主表达式 [表达式指针 ＋ 2]) ＋ 到字节集 (主表达式 [表达式指针 ＋ 3])) ＝ “>>=”)

        运算符标志 ＝ 1
        名称符号首地址 ＝ 表达式指针
        名称符号 ＝ 到字节集 (“”)
        名称符号 ＝ 到字节集 (主表达式 [表达式指针 ＋ 1]) ＋ 到字节集 (主表达式 [表达式指针 ＋ 2]) ＋ 到字节集 (主表达式 [表达式指针 ＋ 3])
        子表达式 ＝ 子表达式 ＋ 名称符号
        表达式指针 ＝ 表达式指针 ＋ 3


    .判断 (到文本 (到字节集 (主表达式 [表达式指针 ＋ 1]) ＋ 到字节集 (主表达式 [表达式指针 ＋ 2])) ＝ “++” 或 到文本 (到字节集 (主表达式 [表达式指针 ＋ 1]) ＋ 到字节集 (主表达式 [表达式指针 ＋ 2])) ＝ “--” 或 到文本 (到字节集 (主表达式 [表达式指针 ＋ 1]) ＋ 到字节集 (主表达式 [表达式指针 ＋ 2])) ＝ “+=” 或 到文本 (到字节集 (主表达式 [表达式指针 ＋ 1]) ＋ 到字节集 (主表达式 [表达式指针 ＋ 2])) ＝ “-=” 或 到文本 (到字节集 (主表达式 [表达式指针 ＋ 1]) ＋ 到字节集 (主表达式 [表达式指针 ＋ 2])) ＝ “*=” 或 到文本 (到字节集 (主表达式 [表达式指针 ＋ 1]) ＋ 到字节集 (主表达式 [表达式指针 ＋ 2])) ＝ “/=” 或 到文本 (到字节集 (主表达式 [表达式指针 ＋ 1]) ＋ 到字节集 (主表达式 [表达式指针 ＋ 2])) ＝ “%=” 或 到文本 (到字节集 (主表达式 [表达式指针 ＋ 1]) ＋ 到字节集 (主表达式 [表达式指针 ＋ 2])) ＝ “&=” 或 到文本 (到字节集 (主表达式 [表达式指针 ＋ 1]) ＋ 到字节集 (主表达式 [表达式指针 ＋ 2])) ＝ “|=” 或 到文本 (到字节集 (主表达式 [表达式指针 ＋ 1]) ＋ 到字节集 (主表达式 [表达式指针 ＋ 2])) ＝ “^=”)

        .如果真 (到文本 (到字节集 (主表达式 [表达式指针 ＋ 1]) ＋ 到字节集 (主表达式 [表达式指针 ＋ 2])) ＝ “+=” 或 到文本 (到字节集 (主表达式 [表达式指针 ＋ 1]) ＋ 到字节集 (主表达式 [表达式指针 ＋ 2])) ＝ “-=” 或 到文本 (到字节集 (主表达式 [表达式指针 ＋ 1]) ＋ 到字节集 (主表达式 [表达式指针 ＋ 2])) ＝ “*=” 或 到文本 (到字节集 (主表达式 [表达式指针 ＋ 1]) ＋ 到字节集 (主表达式 [表达式指针 ＋ 2])) ＝ “/=” 或 到文本 (到字节集 (主表达式 [表达式指针 ＋ 1]) ＋ 到字节集 (主表达式 [表达式指针 ＋ 2])) ＝ “%=” 或 到文本 (到字节集 (主表达式 [表达式指针 ＋ 1]) ＋ 到字节集 (主表达式 [表达式指针 ＋ 2])) ＝ “&=” 或 到文本 (到字节集 (主表达式 [表达式指针 ＋ 1]) ＋ 到字节集 (主表达式 [表达式指针 ＋ 2])) ＝ “|=” 或 到文本 (到字节集 (主表达式 [表达式指针 ＋ 1]) ＋ 到字节集 (主表达式 [表达式指针 ＋ 2])) ＝ “~=” 或 到文本 (到字节集 (主表达式 [表达式指针 ＋ 1]) ＋ 到字节集 (主表达式 [表达式指针 ＋ 2])) ＝ “^=”)


        .如果真结束


        运算符标志 ＝ 1
        名称符号首地址 ＝ 表达式指针
        名称符号 ＝ 到字节集 (“”)
        名称符号 ＝ 到字节集 (主表达式 [表达式指针 ＋ 1]) ＋ 到字节集 (主表达式 [表达式指针 ＋ 2])
        子表达式 ＝ 子表达式 ＋ 名称符号
        表达式指针 ＝ 表达式指针 ＋ 2


    .判断 (到文本 (到字节集 (主表达式 [表达式指针 ＋ 1])) ＝ “+” 或 到文本 (到字节集 (主表达式 [表达式指针 ＋ 1])) ＝ “-” 或 到文本 (到字节集 (主表达式 [表达式指针 ＋ 1])) ＝ “*” 或 到文本 (到字节集 (主表达式 [表达式指针 ＋ 1])) ＝ “/” 或 到文本 (到字节集 (主表达式 [表达式指针 ＋ 1])) ＝ “%” 或 到文本 (到字节集 (主表达式 [表达式指针 ＋ 1])) ＝ “&” 或 到文本 (到字节集 (主表达式 [表达式指针 ＋ 1])) ＝ “|” 或 到文本 (到字节集 (主表达式 [表达式指针 ＋ 1])) ＝ “~” 或 到文本 (到字节集 (主表达式 [表达式指针 ＋ 1])) ＝ “^” 或 到文本 (到字节集 (主表达式 [表达式指针 ＋ 1])) ＝ “>” 或 到文本 (到字节集 (主表达式 [表达式指针 ＋ 1])) ＝ “<” 或 到文本 (到字节集 (主表达式 [表达式指针 ＋ 1])) ＝ “!” 或 到文本 (到字节集 (主表达式 [表达式指针 ＋ 1])) ＝ “=”)

        .如果真 (到文本 (到字节集 (主表达式 [表达式指针 ＋ 1])) ＝ “=”)

        .如果真结束

        运算符标志 ＝ 1
        名称符号首地址 ＝ 表达式指针
        名称符号 ＝ 到字节集 (“”)
        名称符号 ＝ 到字节集 (主表达式 [表达式指针 ＋ 1])
        子表达式 ＝ 子表达式 ＋ 名称符号
        表达式指针 ＝ 表达式指针 ＋ 1


    .判断 (到文本 (到字节集 (主表达式 [表达式指针 ＋ 1])) ＝ “ ”)

        子表达式 ＝ 子表达式 ＋ 到字节集 (主表达式 [表达式指针 ＋ 1])
        表达式指针 ＝ 表达式指针 ＋ 1

    .默认
        状态 ＝ “主达式处理_出现未识别的符号...+ +!~”
    .判断结束


.循环判断尾 (状态 ＝ “继续”)


.如果真 (动态RAM分配地址 ＞ 函数RAM结束地址 [函数总数 ＋ 1])
    函数RAM结束地址 [函数总数 ＋ 1] ＝ 动态RAM分配地址
.如果真结束


返回 (状态)










.子程序 子表达式处理, 文本型
.参数 子表达式, 字节集
.局部变量 状态, 文本型
.局部变量 计数1, 整数型
.局部变量 计数2, 整数型
.局部变量 计数3, 整数型
.局部变量 计数4, 整数型
.局部变量 字符串缓存, 字节集
.局部变量 扫描指针, 整数型
.局部变量 操作数计数, 整数型
.局部变量 当前操作数段起始位置, 整数型
.局部变量 当前操作数段被运算标志, 整数型
.局部变量 右扫空标志, 整数型
.局部变量 前操作数, 整数型
.局部变量 操作数前运算符位置, 整数型
.局部变量 操作数前赋值符, 字节集
.局部变量 操作数前赋值符计数, 整数型
.局部变量 操作数前运算符, 字节集
.局部变量 操作数前运算符计数, 整数型
.局部变量 左操作数前操作数, 整数型
.局部变量 左操数前运算符, 字节集
.局部变量 左操作数, 整数型
.局部变量 右操作数, 整数型




计数1 ＝ 1
.判断循环首 (计数1 ≤ 取字节集长度 (子表达式) － 2 且 子表达式 [计数1] ≠ #无符号ACC 且 子表达式 [计数1] ≠ #有符号ACC)

    .判断开始 (子表达式 [计数1] ≥ 128 且 子表达式 [计数1] ≤ 255)
        计数1 ＝ 计数1 ＋ 3
    .默认
        计数1 ＝ 计数1 ＋ 1
    .判断结束

.判断循环尾 ()

.判断开始 (计数1 ≤ 取字节集长度 (子表达式) － 2)
    累加器位置 ＝ “子表达式”
    .判断开始 (子表达式 [计数1] ＝ #无符号ACC)
        累加器内容状态 ＝ “无符号ACC”
    .默认
        累加器内容状态 ＝ “有符号ACC”
    .判断结束
    表达式累加器地址 ＝ 计数1 － 1
.默认
    累加器位置 ＝ “主表达式”
.判断结束



计数1 ＝ 1
状态 ＝ “继续”
.判断循环首 (计数1 ≤ 取字节集长度 (子表达式) － 2 且 状态 ＝ “继续”)

    .判断开始 (子表达式 [计数1] ≥ 128 且 子表达式 [计数1] ≤ 255)
        计数1 ＝ 计数1 ＋ 3
    .判断 (子表达式 [计数1] ＞ 47 且 子表达式 [计数1] ＜ 58)

        字符串缓存 ＝ 到字节集 (“”)
        计数2 ＝ 计数1
        .循环判断首 ()
            字符串缓存 ＝ 字符串缓存 ＋ 到字节集 (子表达式 [计数2])
            计数2 ＝ 计数2 ＋ 1
        .循环判断尾 (子表达式 [计数2] ＞ 47 且 子表达式 [计数2] ＜ 58)

        立即数值 [立即数总数 ＋ 1] ＝ 到数值 (到文本 (字符串缓存))

        子表达式 [计数1] ＝ #立即数
        子表达式 [计数1 ＋ 1] ＝ 右移 (立即数总数, 8)
        子表达式 [计数1 ＋ 2] ＝ 立即数总数
        计数3 ＝ 计数1 ＋ 3

        立即数总数 ＝ 立即数总数 ＋ 1

        .判断循环首 (计数3 ＜ 计数2)
            子表达式 [计数3] ＝ 32
            计数3 ＝ 计数3 ＋ 1
        .判断循环尾 ()

        计数1 ＝ 计数3


    .判断 (子表达式 [计数1] ＞ 64 且 子表达式 [计数1] ＜ 91 或 子表达式 [计数1] ＞ 96 且 子表达式 [计数1] ＜ 123 或 子表达式 [计数1] ＝ 95)

        字符串缓存 ＝ 到字节集 (“”)
        计数2 ＝ 计数1
        .循环判断首 ()
            字符串缓存 ＝ 字符串缓存 ＋ 到字节集 (子表达式 [计数2])
            计数2 ＝ 计数2 ＋ 1
        .循环判断尾 (子表达式 [计数2] ＞ 47 且 子表达式 [计数2] ＜ 58 或 子表达式 [计数2] ＞ 64 且 子表达式 [计数2] ＜ 91 或 子表达式 [计数2] ＞ 96 且 子表达式 [计数2] ＜ 123 或 子表达式 [计数2] ＝ 95)

        计数3 ＝ 操作数查询 (字符串缓存)

        .判断开始 (计数3 ≠ 0)

            子表达式 [计数1] ＝ 右移 (计数3, 16)
            子表达式 [计数1 ＋ 1] ＝ 右移 (计数3, 8)
            子表达式 [计数1 ＋ 2] ＝ 计数3
            计数3 ＝ 计数1 ＋ 3

            .判断循环首 (计数3 ＜ 计数2)
                子表达式 [计数3] ＝ 32
                计数3 ＝ 计数3 ＋ 1
            .判断循环尾 ()

            计数1 ＝ 计数3


        .默认
            状态 ＝ “子表达式处理_未找到操作数!~”
        .判断结束


    .默认
        计数1 ＝ 计数1 ＋ 1
    .判断结束


.判断循环尾 ()



.如果真 (状态 ＝ “继续”)

    操作数计数 ＝ 0
    当前操作数段起始位置 ＝ 1
    当前操作数段被运算标志 ＝ 0
    前操作数 ＝ 0

    扫描指针 ＝ 1
    操作数前运算符计数 ＝ 0
    操作数前赋值符计数 ＝ 0


    .循环判断首 ()

        .判断开始 (扫描指针 ＞ 取字节集长度 (子表达式) － 2)

            状态 ＝ “子表达式处理_单目运算符处理_子表达式内容错误...- -”

        .判断 (到文本 (到字节集 (子表达式 [扫描指针])) ＝ “ ”)

            扫描指针 ＝ 扫描指针 ＋ 1

        .判断 (子表达式 [扫描指针] ≥ 128 且 子表达式 [扫描指针] ≤ 255)

            .判断开始 (操作数前运算符计数 ＞ 1 且 到文本 (操作数前运算符) ＝ “*” 或 操作数计数 ＝ 0 且 操作数前运算符计数 ＝ 1 且 到文本 (操作数前运算符) ＝ “*”)

                子表达式 [操作数前运算符位置] ＝ 32

                .判断开始 (子表达式 [扫描指针] ＝ #无符号char指针)
                    子表达式 [扫描指针] ＝ #无符号char指针指向内容
                .判断 (子表达式 [扫描指针] ＝ #有符号char指针)
                    子表达式 [扫描指针] ＝ #有符号char指针指向内容
                .判断 (子表达式 [扫描指针] ＝ #无符号int指针)
                    子表达式 [扫描指针] ＝ #无符号int指针指向内容
                .判断 (子表达式 [扫描指针] ＝ #有符号int指针)
                    子表达式 [扫描指针] ＝ #有符号int指针指向内容
                .判断 (子表达式 [扫描指针] ＝ #无符号长int指针)
                    子表达式 [扫描指针] ＝ #无符号长int指针指向内容
                .判断 (子表达式 [扫描指针] ＝ #有符号长int指针)
                    子表达式 [扫描指针] ＝ #有符号长int指针指向内容
                .判断 (子表达式 [扫描指针] ＝ #无符号char数组)
                    子表达式 [扫描指针] ＝ #无符号char
                .判断 (子表达式 [扫描指针] ＝ #有符号char数组)
                    子表达式 [扫描指针] ＝ #有符号char
                .判断 (子表达式 [扫描指针] ＝ #无符号int数组)
                    子表达式 [扫描指针] ＝ #无符号int
                .判断 (子表达式 [扫描指针] ＝ #有符号int数组)
                    子表达式 [扫描指针] ＝ #有符号int
                .判断 (子表达式 [扫描指针] ＝ #无符号长int数组)
                    子表达式 [扫描指针] ＝ #无符号长int
                .判断 (子表达式 [扫描指针] ＝ #有符号长int数组)
                    子表达式 [扫描指针] ＝ #有符号长int
                .默认
                    状态 ＝ “子表达式处理_单目运算符处理_*操作数类型错误~..”
                .判断结束

                操作数前运算符计数 ＝ 0
                操作数前赋值符计数 ＝ 0
                扫描指针 ＝ 当前操作数段起始位置



            .判断 (操作数前运算符计数 ＞ 1 且 到文本 (操作数前运算符) ＝ “&” 或 操作数计数 ＝ 0 且 操作数前运算符计数 ＝ 1 且 到文本 (操作数前运算符) ＝ “&”)

                .判断开始 (当前操作数段被运算标志 ＝ 0)

                    子表达式 [操作数前运算符位置] ＝ 32

                    .判断开始 (子表达式 [扫描指针] ＝ #无符号char指针指向内容)
                        子表达式 [扫描指针] ＝ #无符号char指针
                    .判断 (子表达式 [扫描指针] ＝ #有符号char指针指向内容)
                        子表达式 [扫描指针] ＝ #有符号char指针
                    .判断 (子表达式 [扫描指针] ＝ #无符号int指针指向内容)
                        子表达式 [扫描指针] ＝ #无符号int指针
                    .判断 (子表达式 [扫描指针] ＝ #有符号int指针指向内容)
                        子表达式 [扫描指针] ＝ #有符号int指针
                    .判断 (子表达式 [扫描指针] ＝ #无符号长int指针指向内容)
                        子表达式 [扫描指针] ＝ #无符号长int指针
                    .判断 (子表达式 [扫描指针] ＝ #有符号长int指针指向内容)
                        子表达式 [扫描指针] ＝ #有符号长int指针
                    .判断 (子表达式 [扫描指针] ＝ #无符号char)
                        子表达式 [扫描指针] ＝ #无符号char数组
                    .判断 (子表达式 [扫描指针] ＝ #有符号char)
                        子表达式 [扫描指针] ＝ #有符号char数组
                    .判断 (子表达式 [扫描指针] ＝ #无符号int)
                        子表达式 [扫描指针] ＝ #无符号int数组
                    .判断 (子表达式 [扫描指针] ＝ #有符号int)
                        子表达式 [扫描指针] ＝ #有符号int数组
                    .判断 (子表达式 [扫描指针] ＝ #无符号长int)
                        子表达式 [扫描指针] ＝ #无符号长int数组
                    .判断 (子表达式 [扫描指针] ＝ #有符号长int)
                        子表达式 [扫描指针] ＝ #有符号长int数组
                    .默认
                        状态 ＝ “子表达式处理_单目运算符处理_&操作数类型错误...~- -”
                    .判断结束

                    扫描指针 ＝ 当前操作数段起始位置
                    操作数前运算符计数 ＝ 0
                    操作数前赋值符计数 ＝ 0



                .默认
                    状态 ＝ “子表达式处理_单目运算符处理_&操作数状态错误...~- -”
                .判断结束



            .默认


                计数1 ＝ 扫描指针 ＋ 3

                .判断循环首 (计数1 ≤ 取字节集长度 (子表达式) 且 子表达式 [计数1] ＝ 32)
                    计数1 ＝ 计数1 ＋ 1
                .判断循环尾 ()

                .判断开始 (计数1 ≤ 取字节集长度 (子表达式))

                    .判断开始 (计数1 ＜ 取字节集长度 (子表达式))

                        .判断开始 (到文本 (到字节集 (子表达式 [计数1]) ＋ 到字节集 (子表达式 [计数1 ＋ 1])) ＝ “++” 或 到文本 (到字节集 (子表达式 [计数1]) ＋ 到字节集 (子表达式 [计数1 ＋ 1])) ＝ “--”)

                            .判断开始 (子表达式 [扫描指针] ＝ #无符号char指针指向内容 或 子表达式 [扫描指针] ＝ #有符号char指针指向内容 或 子表达式 [扫描指针] ＝ #无符号int指针指向内容 或 子表达式 [扫描指针] ＝ #有符号int指针指向内容 或 子表达式 [扫描指针] ＝ #无符号长int指针指向内容 或 子表达式 [扫描指针] ＝ #有符号长int指针指向内容 或 子表达式 [扫描指针] ＝ #无符号char 或 子表达式 [扫描指针] ＝ #有符号char 或 子表达式 [扫描指针] ＝ #无符号int 或 子表达式 [扫描指针] ＝ #有符号int 或 子表达式 [扫描指针] ＝ #无符号长int 或 子表达式 [扫描指针] ＝ #有符号长int 或 子表达式 [扫描指针] ＝ #无符号char指针 或 子表达式 [扫描指针] ＝ #有符号char指针 或 子表达式 [扫描指针] ＝ #无符号int指针 或 子表达式 [扫描指针] ＝ #有符号int指针 或 子表达式 [扫描指针] ＝ #无符号长int指针 或 子表达式 [扫描指针] ＝ #有符号长int指针)

                                .判断开始 (累加器内容状态 ≠ “ACC”)

                                    状态 ＝ 二元式机器码生成 (0, #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, #ACC × 65536)
                                    .如果真 (状态 ＝ “完成”)

                                        .判断开始 (累加器内容状态 ＝ “无符号ACC”)
                                            计数4 ＝ #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        .默认
                                            计数4 ＝ #有符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        .判断结束

                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 1

                                        .判断开始 (累加器位置 ＝ “子表达式”)
                                            子表达式 [表达式累加器地址 ＋ 1] ＝ 右移 (计数4, 16)
                                            子表达式 [表达式累加器地址 ＋ 2] ＝ 右移 (计数4, 8)
                                            子表达式 [表达式累加器地址 ＋ 3] ＝ 计数4
                                        .默认
                                            主表达式 [表达式累加器地址 ＋ 1] ＝ 右移 (计数4, 16)
                                            主表达式 [表达式累加器地址 ＋ 2] ＝ 右移 (计数4, 8)
                                            主表达式 [表达式累加器地址 ＋ 3] ＝ 计数4
                                        .判断结束

                                        累加器内容状态 ＝ “ACC”

                                    .如果真结束


                                .默认
                                    状态 ＝ “完成”
                                .判断结束

                                .如果真 (状态 ＝ “完成”)

                                    当前操作数段被运算标志 ＝ 1

                                    字符串缓存 ＝ 到字节集 (子表达式 [计数1])
                                    子表达式 [计数1] ＝ 32
                                    子表达式 [计数1 ＋ 1] ＝ 32
                                    计数1 ＝ 计数1 ＋ 2


                                    .判断循环首 (计数1 ≤ 取字节集长度 (子表达式) 且 子表达式 [计数1] ＝ 32)
                                        计数1 ＝ 计数1 ＋ 1
                                    .判断循环尾 ()

                                    .判断开始 (计数1 ≤ 取字节集长度 (子表达式))
                                        右扫空标志 ＝ 0
                                    .默认
                                        右扫空标志 ＝ 1
                                    .判断结束


                                    .判断开始 (子表达式 [扫描指针] ＝ #无符号char指针指向内容 或 子表达式 [扫描指针] ＝ #有符号char指针指向内容)
                                        状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                        .如果真 (状态 ＝ “完成”)
                                            .判断开始 (到文本 (字符串缓存) ＝ “+”)
                                                A等于A加1 ()
                                            .默认
                                                A等于A减1 ()
                                            .判断结束

                                            状态 ＝ 二元式机器码生成 (0, #RAM × 65536, “=”, #ACC × 65536)
                                            .如果真 (状态 ＝ “完成”)
                                                .判断开始 (到文本 (字符串缓存) ＝ “+”)
                                                    A等于A减1 ()
                                                .默认
                                                    A等于A加1 ()
                                                .判断结束

                                                .如果真 (状态 ＝ “完成”)

                                                    .判断开始 (子表达式 [扫描指针] ＝ #无符号char指针指向内容)
                                                        子表达式 [扫描指针] ＝ #无符号ACC
                                                        累加器位置 ＝ “子表达式”
                                                        表达式累加器地址 ＝ 扫描指针 － 1
                                                        累加器内容状态 ＝ “无符号ACC”

                                                    .默认
                                                        子表达式 [扫描指针] ＝ #有符号ACC
                                                        累加器位置 ＝ “子表达式”
                                                        表达式累加器地址 ＝ 扫描指针 － 1
                                                        累加器内容状态 ＝ “有符号ACC”

                                                    .判断结束

                                                    状态 ＝ “继续”

                                                .如果真结束

                                            .如果真结束


                                        .如果真结束

                                    .判断 (子表达式 [扫描指针] ＝ #无符号int指针指向内容 或 子表达式 [扫描指针] ＝ #无符号int指针指向内容)

                                        .判断开始 (右扫空标志 ＝ 0 或 操作数计数 ＝ 0 或 右移 (前操作数, 16) ≠ #无符号char指针 且 右移 (前操作数, 16) ≠ #有符号char指针 且 右移 (前操作数, 16) ≠ #无符号int指针 且 右移 (前操作数, 16) ≠ #有符号int指针 且 右移 (前操作数, 16) ≠ #无符号长int指针 且 右移 (前操作数, 16) ≠ #有符号长int指针 且 右移 (前操作数, 16) ≠ #无符号int 且 右移 (前操作数, 16) ≠ #有符号int 或 操作数前运算符计数 ≠ 1 或 到文本 (操作数前运算符) ≠ “=”)

                                            状态 ＝ 二元式机器码生成 (0, #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                            .如果真 (状态 ＝ “完成”)
                                                状态 ＝ 二元式机器码生成 (#有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), 到文本 (字符串缓存), 1)
                                                .如果真 (状态 ＝ “完成”)
                                                    状态 ＝ 二元式机器码生成 (0, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2], “=”, #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535))
                                                    .如果真 (状态 ＝ “完成”)

                                                        .判断开始 (到文本 (字符串缓存) ＝ “+”)
                                                            状态 ＝ 二元式机器码生成 (#有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “-”, 1)
                                                        .默认
                                                            状态 ＝ 二元式机器码生成 (#有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “+”, 1)
                                                        .判断结束

                                                        .如果真 (状态 ＝ “完成”)

                                                            .判断开始 (子表达式 [扫描指针] ＝ #无符号int指针指向内容)
                                                                子表达式 [扫描指针] ＝ #无符号int
                                                            .默认
                                                                子表达式 [扫描指针] ＝ #有符号int
                                                            .判断结束

                                                            子表达式 [扫描指针 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                                            子表达式 [扫描指针 ＋ 2] ＝ 动态RAM分配地址
                                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                                            状态 ＝ “继续”
                                                        .如果真结束


                                                    .如果真结束

                                                .如果真结束

                                            .如果真结束


                                        .默认


                                            状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (前操作数, 65535), “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                            .如果真 (状态 ＝ “完成”)
                                                状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 位与 (前操作数, 65535), #无符号int × 65536 ＋ 位与 (前操作数, 65535), 到文本 (字符串缓存), 1)
                                                .如果真 (状态 ＝ “完成”)
                                                    状态 ＝ 二元式机器码生成 (0, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2], “=”, #无符号int × 65536 ＋ 位与 (前操作数, 65535))
                                                    .如果真 (状态 ＝ “完成”)

                                                        .判断开始 (到文本 (字符串缓存) ＝ “+”)
                                                            状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 位与 (前操作数, 65535), #无符号int × 65536 ＋ 位与 (前操作数, 65535), “-”, 1)
                                                        .默认
                                                            状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 位与 (前操作数, 65535), #无符号int × 65536 ＋ 位与 (前操作数, 65535), “+”, 1)
                                                        .判断结束

                                                        .如果真 (状态 ＝ “完成”)
                                                            计数1 ＝ 0
                                                            .判断循环首 (当前操作数段起始位置 ＋ 计数1 ≤ 取字节集长度 (子表达式))
                                                                子表达式 [当前操作数段起始位置 ＋ 计数1] ＝ 32
                                                                计数1 ＝ 计数1 ＋ 1
                                                            .判断循环尾 ()

                                                        .如果真结束


                                                    .如果真结束

                                                .如果真结束

                                            .如果真结束



                                        .判断结束




                                    .判断 (子表达式 [扫描指针] ＝ #无符号长int指针指向内容 或 子表达式 [扫描指针] ＝ #有符号长int指针指向内容)

                                        .判断开始 (右扫空标志 ＝ 0 或 操作数计数 ＝ 0 或 右移 (前操作数, 16) ≠ #无符号长int 且 右移 (前操作数, 16) ≠ #有符号长int 或 操作数前运算符计数 ≠ 1 或 到文本 (操作数前运算符) ≠ “=”)

                                            状态 ＝ 二元式机器码生成 (0, #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                            .如果真 (状态 ＝ “完成”)
                                                状态 ＝ 二元式机器码生成 (#有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), 到文本 (字符串缓存), 1)
                                                .如果真 (状态 ＝ “完成”)
                                                    状态 ＝ 二元式机器码生成 (0, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2], “=”, #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535))
                                                    .如果真 (状态 ＝ “完成”)

                                                        .判断开始 (到文本 (字符串缓存) ＝ “+”)
                                                            状态 ＝ 二元式机器码生成 (#有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “-”, 1)
                                                        .默认
                                                            状态 ＝ 二元式机器码生成 (#有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “+”, 1)
                                                        .判断结束

                                                        .如果真 (状态 ＝ “完成”)

                                                            .判断开始 (子表达式 [扫描指针] ＝ #无符号长int指针指向内容)
                                                                子表达式 [扫描指针] ＝ #无符号长int
                                                            .默认
                                                                子表达式 [扫描指针] ＝ #有符号长int
                                                            .判断结束

                                                            子表达式 [扫描指针 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                                            子表达式 [扫描指针 ＋ 2] ＝ 动态RAM分配地址
                                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                                            状态 ＝ “继续”
                                                        .如果真结束


                                                    .如果真结束

                                                .如果真结束

                                            .如果真结束


                                        .默认


                                            状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (前操作数, 65535), “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                            .如果真 (状态 ＝ “完成”)
                                                状态 ＝ 二元式机器码生成 (#无符号长int × 65536 ＋ 位与 (前操作数, 65535), #无符号长int × 65536 ＋ 位与 (前操作数, 65535), 到文本 (字符串缓存), 1)
                                                .如果真 (状态 ＝ “完成”)
                                                    状态 ＝ 二元式机器码生成 (0, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2], “=”, #无符号长int × 65536 ＋ 位与 (前操作数, 65535))
                                                    .如果真 (状态 ＝ “完成”)

                                                        .判断开始 (到文本 (字符串缓存) ＝ “+”)
                                                            状态 ＝ 二元式机器码生成 (#无符号长int × 65536 ＋ 位与 (前操作数, 65535), #无符号长int × 65536 ＋ 位与 (前操作数, 65535), “-”, 1)
                                                        .默认
                                                            状态 ＝ 二元式机器码生成 (#无符号长int × 65536 ＋ 位与 (前操作数, 65535), #无符号长int × 65536 ＋ 位与 (前操作数, 65535), “+”, 1)
                                                        .判断结束

                                                        .如果真 (状态 ＝ “完成”)
                                                            计数1 ＝ 0
                                                            .判断循环首 (当前操作数段起始位置 ＋ 计数1 ≤ 取字节集长度 (子表达式))
                                                                子表达式 [当前操作数段起始位置 ＋ 计数1] ＝ 32
                                                                计数1 ＝ 计数1 ＋ 1
                                                            .判断循环尾 ()

                                                        .如果真结束


                                                    .如果真结束

                                                .如果真结束

                                            .如果真结束



                                        .判断结束





                                    .判断 (子表达式 [扫描指针] ＝ #无符号char 或 子表达式 [扫描指针] ＝ #有符号char)
                                        状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                        .如果真 (状态 ＝ “完成”)
                                            .判断开始 (到文本 (字符串缓存) ＝ “+”)
                                                A等于A加1 ()
                                            .默认
                                                A等于A减1 ()
                                            .判断结束

                                            .如果真 (状态 ＝ “完成”)
                                                状态 ＝ 二元式机器码生成 (0, #RAM × 65536, “=”, #ACC × 65536)
                                                .如果真 (状态 ＝ “完成”)
                                                    .判断开始 (到文本 (字符串缓存) ＝ “+”)
                                                        A等于A减1 ()
                                                    .默认
                                                        A等于A加1 ()
                                                    .判断结束

                                                    .如果真 (状态 ＝ “完成”)
                                                        .判断开始 (子表达式 [扫描指针] ＝ #无符号char)
                                                            子表达式 [扫描指针] ＝ #无符号ACC
                                                            累加器位置 ＝ “子表达式”
                                                            表达式累加器地址 ＝ 扫描指针 － 1
                                                            累加器内容状态 ＝ “无符号ACC”
                                                        .默认
                                                            子表达式 [扫描指针] ＝ #有符号ACC
                                                            累加器位置 ＝ “子表达式”
                                                            表达式累加器地址 ＝ 扫描指针 － 1
                                                            累加器内容状态 ＝ “有符号ACC”
                                                        .判断结束

                                                        状态 ＝ “继续”

                                                    .如果真结束

                                                .如果真结束

                                            .如果真结束

                                        .如果真结束


                                    .判断 (子表达式 [扫描指针] ＝ #无符号int 或 子表达式 [扫描指针] ＝ #有符号int)

                                        .判断开始 (右扫空标志 ＝ 0 或 操作数计数 ＝ 0 或 右移 (前操作数, 16) ≠ #无符号char指针 且 右移 (前操作数, 16) ≠ #有符号char指针 且 右移 (前操作数, 16) ≠ #无符号int指针 且 右移 (前操作数, 16) ≠ #有符号int指针 且 右移 (前操作数, 16) ≠ #无符号长int指针 且 右移 (前操作数, 16) ≠ #有符号长int指针 且 右移 (前操作数, 16) ≠ #无符号int 且 右移 (前操作数, 16) ≠ #有符号int 或 操作数前运算符计数 ≠ 1 或 到文本 (操作数前运算符) ≠ “=”)

                                            状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                            .如果真 (状态 ＝ “完成”)
                                                状态 ＝ 二元式机器码生成 (子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2], 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2], 到文本 (字符串缓存), 1)
                                                .如果真 (状态 ＝ “完成”)
                                                    子表达式 [扫描指针 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                                    子表达式 [扫描指针 ＋ 2] ＝ 动态RAM分配地址
                                                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                                    状态 ＝ “继续”
                                                .如果真结束


                                            .如果真结束


                                        .默认

                                            状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (前操作数, 65535), “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                            .如果真 (状态 ＝ “完成”)
                                                状态 ＝ 二元式机器码生成 (子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2], 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2], 到文本 (字符串缓存), 1)

                                                .如果真 (状态 ＝ “完成”)
                                                    计数1 ＝ 0
                                                    .判断循环首 (当前操作数段起始位置 ＋ 计数1 ≤ 取字节集长度 (子表达式))
                                                        子表达式 [当前操作数段起始位置 ＋ 计数1] ＝ 32
                                                        计数1 ＝ 计数1 ＋ 1
                                                    .判断循环尾 ()

                                                .如果真结束


                                            .如果真结束


                                        .判断结束



                                    .判断 (子表达式 [扫描指针] ＝ #无符号长int 或 子表达式 [扫描指针] ＝ #有符号长int)

                                        .判断开始 (右扫空标志 ＝ 0 或 操作数计数 ＝ 0 或 右移 (前操作数, 16) ≠ #无符号长int 且 右移 (前操作数, 16) ≠ #有符号长int 或 操作数前运算符计数 ≠ 1 或 到文本 (操作数前运算符) ≠ “=”)

                                            状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                            .如果真 (状态 ＝ “完成”)
                                                状态 ＝ 二元式机器码生成 (子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2], 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2], 到文本 (字符串缓存), 1)
                                                .如果真 (状态 ＝ “完成”)
                                                    子表达式 [扫描指针 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                                    子表达式 [扫描指针 ＋ 2] ＝ 动态RAM分配地址
                                                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                                    状态 ＝ “继续”
                                                .如果真结束


                                            .如果真结束


                                        .默认

                                            状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (前操作数, 65535), “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                            .如果真 (状态 ＝ “完成”)
                                                状态 ＝ 二元式机器码生成 (子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2], 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2], 到文本 (字符串缓存), 1)

                                                .如果真 (状态 ＝ “完成”)
                                                    计数1 ＝ 0
                                                    .判断循环首 (当前操作数段起始位置 ＋ 计数1 ≤ 取字节集长度 (子表达式))
                                                        子表达式 [当前操作数段起始位置 ＋ 计数1] ＝ 32
                                                        计数1 ＝ 计数1 ＋ 1
                                                    .判断循环尾 ()

                                                .如果真结束


                                            .如果真结束


                                        .判断结束



                                    .判断 (子表达式 [扫描指针] ＝ #无符号char指针 或 子表达式 [扫描指针] ＝ #有符号char指针 或 子表达式 [扫描指针] ＝ #无符号int指针 或 子表达式 [扫描指针] ＝ #有符号int指针 或 子表达式 [扫描指针] ＝ #无符号长int指针 或 子表达式 [扫描指针] ＝ #有符号长int指针)

                                        .判断开始 (右扫空标志 ＝ 0 或 操作数计数 ＝ 0 或 右移 (前操作数, 16) ≠ #无符号char指针 且 右移 (前操作数, 16) ≠ #有符号char指针 且 右移 (前操作数, 16) ≠ #无符号int指针 且 右移 (前操作数, 16) ≠ #有符号int指针 且 右移 (前操作数, 16) ≠ #无符号长int指针 且 右移 (前操作数, 16) ≠ #有符号长int指针 且 右移 (前操作数, 16) ≠ #无符号int 且 右移 (前操作数, 16) ≠ #有符号int 或 操作数前运算符计数 ≠ 1 或 到文本 (操作数前运算符) ≠ “=”)

                                            状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, #无符号int × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                            .如果真 (状态 ＝ “完成”)

                                                .判断开始 (子表达式 [扫描指针] ＝ #无符号char指针 或 子表达式 [扫描指针] ＝ #有符号char指针)
                                                    状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2], #无符号int × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2], 到文本 (字符串缓存), 1)

                                                .判断 (子表达式 [扫描指针] ＝ #无符号int指针 或 子表达式 [扫描指针] ＝ #有符号int指针)
                                                    状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2], #无符号int × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2], 到文本 (字符串缓存), 2)

                                                .默认
                                                    状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2], #无符号int × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2], 到文本 (字符串缓存), 4)

                                                .判断结束


                                                .如果真 (状态 ＝ “完成”)

                                                    子表达式 [扫描指针 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                                    子表达式 [扫描指针 ＋ 2] ＝ 动态RAM分配地址
                                                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2

                                                    状态 ＝ “继续”
                                                .如果真结束


                                            .如果真结束


                                        .默认

                                            状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (前操作数, 65535), “=”, #无符号int × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                            .如果真 (状态 ＝ “完成”)
                                                .判断开始 (子表达式 [扫描指针] ＝ #无符号char指针 或 子表达式 [扫描指针] ＝ #有符号char指针)
                                                    状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2], #无符号int × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2], 到文本 (字符串缓存), 1)

                                                .判断 (子表达式 [扫描指针] ＝ #无符号int指针 或 子表达式 [扫描指针] ＝ #有符号int指针)
                                                    状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2], #无符号int × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2], 到文本 (字符串缓存), 2)

                                                .默认
                                                    状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2], #无符号int × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2], 到文本 (字符串缓存), 4)

                                                .判断结束


                                                .如果真 (状态 ＝ “完成”)
                                                    计数1 ＝ 0
                                                    .判断循环首 (当前操作数段起始位置 ＋ 计数1 ≤ 取字节集长度 (子表达式))
                                                        子表达式 [当前操作数段起始位置 ＋ 计数1] ＝ 32
                                                        计数1 ＝ 计数1 ＋ 1
                                                    .判断循环尾 ()

                                                .如果真结束


                                            .如果真结束


                                        .判断结束



                                    .默认

                                    .判断结束






                                .如果真结束




                            .默认
                                状态 ＝ “子表达式处理_单目运算符处理_操作数右侧++或--错误...~- -”
                            .判断结束




                        .默认
                            右扫空标志 ＝ 0
                        .判断结束



                    .默认
                        状态 ＝ “子表达式处理_单目运算符处理_操作数右侧符号错误。。。！~”
                    .判断结束


                .默认
                    右扫空标志 ＝ 1
                .判断结束








                .如果真 (状态 ＝ “继续”)

                    .判断开始 (操作数前运算符计数 ＞ 1 或 操作数计数 ＝ 0 且 操作数前运算符计数 ＝ 1)

                        .判断开始 (到文本 (操作数前运算符) ＝ “++” 或 到文本 (操作数前运算符) ＝ “--”)

                            .判断开始 (当前操作数段被运算标志 ＝ 0)

                                .判断开始 (子表达式 [扫描指针] ＝ #无符号char指针指向内容 或 子表达式 [扫描指针] ＝ #有符号char指针指向内容 或 子表达式 [扫描指针] ＝ #无符号int指针指向内容 或 子表达式 [扫描指针] ＝ #有符号int指针指向内容 或 子表达式 [扫描指针] ＝ #无符号长int指针指向内容 或 子表达式 [扫描指针] ＝ #有符号长int指针指向内容 或 子表达式 [扫描指针] ＝ #无符号char 或 子表达式 [扫描指针] ＝ #有符号char 或 子表达式 [扫描指针] ＝ #无符号int 或 子表达式 [扫描指针] ＝ #有符号int 或 子表达式 [扫描指针] ＝ #无符号长int 或 子表达式 [扫描指针] ＝ #有符号长int 或 子表达式 [扫描指针] ＝ #无符号char指针 或 子表达式 [扫描指针] ＝ #有符号char指针 或 子表达式 [扫描指针] ＝ #无符号int指针 或 子表达式 [扫描指针] ＝ #有符号int指针 或 子表达式 [扫描指针] ＝ #无符号长int指针 或 子表达式 [扫描指针] ＝ #有符号长int指针 或 子表达式 [扫描指针] ＝ #ACC)


                                    .判断开始 (累加器内容状态 ≠ “ACC”)

                                        状态 ＝ 二元式机器码生成 (0, #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, #ACC × 65536)
                                        .如果真 (状态 ＝ “完成”)

                                            .判断开始 (累加器内容状态 ＝ “无符号ACC”)
                                                计数4 ＝ #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            .默认
                                                计数4 ＝ #有符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            .判断结束

                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 1

                                            .判断开始 (累加器位置 ＝ “子表达式”)
                                                子表达式 [表达式累加器地址 ＋ 1] ＝ 右移 (计数4, 16)
                                                子表达式 [表达式累加器地址 ＋ 2] ＝ 右移 (计数4, 8)
                                                子表达式 [表达式累加器地址 ＋ 3] ＝ 计数4
                                            .默认
                                                主表达式 [表达式累加器地址 ＋ 1] ＝ 右移 (计数4, 16)
                                                主表达式 [表达式累加器地址 ＋ 2] ＝ 右移 (计数4, 8)
                                                主表达式 [表达式累加器地址 ＋ 3] ＝ 计数4
                                            .判断结束

                                            累加器内容状态 ＝ “ACC”

                                        .如果真结束


                                    .默认
                                        状态 ＝ “完成”
                                    .判断结束

                                    .如果真 (状态 ＝ “完成”)

                                        当前操作数段被运算标志 ＝ 1

                                        字符串缓存 ＝ 到字节集 (操作数前运算符 [1])
                                        子表达式 [操作数前运算符位置] ＝ 32
                                        子表达式 [操作数前运算符位置 ＋ 1] ＝ 32


                                        .判断开始 (子表达式 [扫描指针] ＝ #无符号char指针指向内容)
                                            状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                            .如果真 (状态 ＝ “完成”)
                                                .判断开始 (到文本 (字符串缓存) ＝ “+”)
                                                    A等于A加1 ()
                                                .默认
                                                    A等于A减1 ()
                                                .判断结束

                                                状态 ＝ 二元式机器码生成 (0, #RAM × 65536, “=”, #ACC × 65536)
                                                .如果真 (状态 ＝ “完成”)

                                                    子表达式 [扫描指针] ＝ #无符号ACC
                                                    累加器位置 ＝ “子表达式”
                                                    表达式累加器地址 ＝ 扫描指针 － 1
                                                    累加器内容状态 ＝ “无符号ACC”
                                                    状态 ＝ “继续”

                                                .如果真结束


                                            .如果真结束

                                        .判断 (子表达式 [扫描指针] ＝ #有符号char指针指向内容)
                                            状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                            .如果真 (状态 ＝ “完成”)
                                                .判断开始 (到文本 (字符串缓存) ＝ “+”)
                                                    A等于A加1 ()
                                                .默认
                                                    A等于A减1 ()
                                                .判断结束

                                                状态 ＝ 二元式机器码生成 (0, #RAM × 65536, “=”, #ACC × 65536)
                                                .如果真 (状态 ＝ “完成”)

                                                    子表达式 [扫描指针] ＝ #有符号ACC
                                                    累加器位置 ＝ “子表达式”
                                                    表达式累加器地址 ＝ 扫描指针 － 1
                                                    累加器内容状态 ＝ “有符号ACC”
                                                    状态 ＝ “继续”

                                                .如果真结束


                                            .如果真结束

                                        .判断 (子表达式 [扫描指针] ＝ #无符号int指针指向内容)
                                            状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                            .如果真 (状态 ＝ “完成”)
                                                状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), 到文本 (字符串缓存), 1)
                                                .如果真 (状态 ＝ “完成”)
                                                    状态 ＝ 二元式机器码生成 (0, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2], “=”, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535))
                                                    .如果真 (状态 ＝ “完成”)

                                                        子表达式 [扫描指针] ＝ #无符号int
                                                        子表达式 [扫描指针 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                                        子表达式 [扫描指针 ＋ 2] ＝ 动态RAM分配地址
                                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                                        状态 ＝ “继续”

                                                    .如果真结束

                                                .如果真结束

                                            .如果真结束


                                        .判断 (子表达式 [扫描指针] ＝ #有符号int指针指向内容)
                                            状态 ＝ 二元式机器码生成 (0, #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                            .如果真 (状态 ＝ “完成”)
                                                状态 ＝ 二元式机器码生成 (#有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), 到文本 (字符串缓存), 1)
                                                .如果真 (状态 ＝ “完成”)
                                                    状态 ＝ 二元式机器码生成 (0, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2], “=”, #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535))
                                                    .如果真 (状态 ＝ “完成”)

                                                        子表达式 [扫描指针] ＝ #有符号int
                                                        子表达式 [扫描指针 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                                        子表达式 [扫描指针 ＋ 2] ＝ 动态RAM分配地址
                                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                                        状态 ＝ “继续”

                                                    .如果真结束

                                                .如果真结束

                                            .如果真结束


                                        .判断 (子表达式 [扫描指针] ＝ #无符号长int指针指向内容)
                                            状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                            .如果真 (状态 ＝ “完成”)
                                                状态 ＝ 二元式机器码生成 (#无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), 到文本 (字符串缓存), 1)
                                                .如果真 (状态 ＝ “完成”)
                                                    状态 ＝ 二元式机器码生成 (0, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2], “=”, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535))
                                                    .如果真 (状态 ＝ “完成”)

                                                        子表达式 [扫描指针] ＝ #无符号长int
                                                        子表达式 [扫描指针 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                                        子表达式 [扫描指针 ＋ 2] ＝ 动态RAM分配地址
                                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                                        状态 ＝ “继续”

                                                    .如果真结束

                                                .如果真结束

                                            .如果真结束

                                        .判断 (子表达式 [扫描指针] ＝ #有符号长int指针指向内容)
                                            状态 ＝ 二元式机器码生成 (0, #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                            .如果真 (状态 ＝ “完成”)
                                                状态 ＝ 二元式机器码生成 (#有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), 到文本 (字符串缓存), 1)
                                                .如果真 (状态 ＝ “完成”)
                                                    状态 ＝ 二元式机器码生成 (0, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2], “=”, #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535))
                                                    .如果真 (状态 ＝ “完成”)

                                                        子表达式 [扫描指针] ＝ #有符号长int
                                                        子表达式 [扫描指针 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                                        子表达式 [扫描指针 ＋ 2] ＝ 动态RAM分配地址
                                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                                        状态 ＝ “继续”

                                                    .如果真结束

                                                .如果真结束

                                            .如果真结束

                                        .判断 (子表达式 [扫描指针] ＝ #无符号char 或 子表达式 [扫描指针] ＝ #有符号char)
                                            状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                            .如果真 (状态 ＝ “完成”)
                                                .判断开始 (到文本 (字符串缓存) ＝ “+”)
                                                    A等于A加1 ()
                                                .默认
                                                    A等于A减1 ()
                                                .判断结束

                                                RAM等于A ()

                                                .判断开始 (子表达式 [扫描指针] ＝ #无符号char)
                                                    子表达式 [扫描指针] ＝ #无符号ACC
                                                    累加器位置 ＝ “子表达式”
                                                    表达式累加器地址 ＝ 扫描指针 － 1
                                                    累加器内容状态 ＝ “无符号ACC”
                                                .默认
                                                    子表达式 [扫描指针] ＝ #有符号ACC
                                                    累加器位置 ＝ “子表达式”
                                                    表达式累加器地址 ＝ 扫描指针 － 1
                                                    累加器内容状态 ＝ “有符号ACC”
                                                .判断结束

                                                状态 ＝ “继续”




                                            .如果真结束


                                        .判断 (子表达式 [扫描指针] ＝ #无符号int 或 子表达式 [扫描指针] ＝ #有符号int)
                                            状态 ＝ 二元式机器码生成 (子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2], 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2], 到文本 (字符串缓存), 1)
                                            .如果真 (状态 ＝ “完成”)
                                                状态 ＝ “继续”
                                            .如果真结束


                                        .判断 (子表达式 [扫描指针] ＝ #无符号长int 或 子表达式 [扫描指针] ＝ #有符号长int)
                                            状态 ＝ 二元式机器码生成 (子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2], 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2], 到文本 (字符串缓存), 1)
                                            .如果真 (状态 ＝ “完成”)
                                                状态 ＝ “继续”
                                            .如果真结束


                                        .判断 (子表达式 [扫描指针] ＝ #无符号char指针 或 子表达式 [扫描指针] ＝ #有符号char指针 或 子表达式 [扫描指针] ＝ #无符号int指针 或 子表达式 [扫描指针] ＝ #有符号int指针 或 子表达式 [扫描指针] ＝ #无符号长int指针 或 子表达式 [扫描指针] ＝ #有符号长int指针)
                                            .判断开始 (子表达式 [扫描指针] ＝ #无符号char指针 或 子表达式 [扫描指针] ＝ #有符号char指针)
                                                状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2], #无符号int × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2], 到文本 (字符串缓存), 1)
                                            .判断 (子表达式 [扫描指针] ＝ #无符号int指针 或 子表达式 [扫描指针] ＝ #有符号int指针)
                                                状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2], #无符号int × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2], 到文本 (字符串缓存), 2)

                                            .默认
                                                状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2], #无符号int × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2], 到文本 (字符串缓存), 4)
                                            .判断结束


                                            .如果真 (状态 ＝ “完成”)
                                                状态 ＝ “继续”
                                            .如果真结束



                                        .判断 (子表达式 [扫描指针] ＝ #ACC)
                                            .判断开始 (到文本 (字符串缓存) ＝ “+”)
                                                A等于A加1 ()
                                            .默认
                                                A等于A减1 ()
                                            .判断结束
                                            状态 ＝ “继续”


                                        .默认

                                        .判断结束

                                        扫描指针 ＝ 当前操作数段起始位置
                                        操作数前运算符计数 ＝ 0
                                        操作数前赋值符计数 ＝ 0

                                    .如果真结束




                                .默认
                                    状态 ＝ “子表达式处理_单目运算符处理_操作数左侧++或--错误...~- -”
                                .判断结束




                            .默认
                                状态 ＝ “子表达式处理_单目运算符处理_操作数左侧++或--错误。。。！~”
                            .判断结束









                        .判断 (到文本 (操作数前运算符) ＝ “+”)

                            .判断开始 (子表达式 [扫描指针] ＝ #无符号char指针指向内容 或 子表达式 [扫描指针] ＝ #有符号char指针指向内容 或 子表达式 [扫描指针] ＝ #无符号int指针指向内容 或 子表达式 [扫描指针] ＝ #有符号int指针指向内容 或 子表达式 [扫描指针] ＝ #无符号长int指针指向内容 或 子表达式 [扫描指针] ＝ #有符号长int指针指向内容 或 子表达式 [扫描指针] ＝ #无符号char 或 子表达式 [扫描指针] ＝ #有符号char 或 子表达式 [扫描指针] ＝ #无符号int 或 子表达式 [扫描指针] ＝ #有符号int 或 子表达式 [扫描指针] ＝ #无符号长int 或 子表达式 [扫描指针] ＝ #有符号长int 或 子表达式 [扫描指针] ＝ #无符号ACC 或 子表达式 [扫描指针] ＝ #有符号ACC 或 子表达式 [扫描指针] ＝ #常量 或 子表达式 [扫描指针] ＝ #立即数)

                                .判断开始 (累加器内容状态 ≠ “ACC” 且 子表达式 [扫描指针] ≠ #无符号ACC 且 子表达式 [扫描指针] ≠ #有符号ACC)

                                    状态 ＝ 二元式机器码生成 (0, #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, #ACC × 65536)
                                    .如果真 (状态 ＝ “完成”)

                                        .判断开始 (累加器内容状态 ＝ “无符号ACC”)
                                            计数4 ＝ #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        .默认
                                            计数4 ＝ #有符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        .判断结束

                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 1

                                        .判断开始 (累加器位置 ＝ “子表达式”)
                                            子表达式 [表达式累加器地址 ＋ 1] ＝ 右移 (计数4, 16)
                                            子表达式 [表达式累加器地址 ＋ 2] ＝ 右移 (计数4, 8)
                                            子表达式 [表达式累加器地址 ＋ 3] ＝ 计数4
                                        .默认
                                            主表达式 [表达式累加器地址 ＋ 1] ＝ 右移 (计数4, 16)
                                            主表达式 [表达式累加器地址 ＋ 2] ＝ 右移 (计数4, 8)
                                            主表达式 [表达式累加器地址 ＋ 3] ＝ 计数4
                                        .判断结束

                                        累加器内容状态 ＝ “ACC”

                                    .如果真结束


                                .默认
                                    状态 ＝ “完成”
                                .判断结束


                                .如果真 (状态 ＝ “完成”)

                                    当前操作数段被运算标志 ＝ 1
                                    子表达式 [操作数前运算符位置] ＝ 32

                                    .判断开始 (子表达式 [扫描指针] ＝ #无符号char指针指向内容)
                                        状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                        .如果真 (状态 ＝ “完成”)
                                            状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, #ACC × 65536)
                                            .如果真 (状态 ＝ “完成”)
                                                子表达式 [扫描指针] ＝ #有符号int
                                                子表达式 [扫描指针 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                                子表达式 [扫描指针 ＋ 2] ＝ 动态RAM分配地址
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                                状态 ＝ “继续”
                                            .如果真结束

                                        .如果真结束

                                    .判断 (子表达式 [扫描指针] ＝ #无符号int指针指向内容)
                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                        .如果真 (状态 ＝ “完成”)
                                            状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址 ＋ 2, 65535), “=”, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535))
                                            .如果真 (状态 ＝ “完成”)
                                                子表达式 [扫描指针] ＝ #有符号长int
                                                子表达式 [扫描指针 ＋ 1] ＝ 右移 (动态RAM分配地址 ＋ 2, 8)
                                                子表达式 [扫描指针 ＋ 2] ＝ 动态RAM分配地址 ＋ 2
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 6
                                                状态 ＝ “继续”
                                            .如果真结束

                                        .如果真结束


                                    .判断 (子表达式 [扫描指针] ＝ #无符号长int指针指向内容)



                                    .判断 (子表达式 [扫描指针] ＝ #无符号char)
                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                        .如果真 (状态 ＝ “完成”)
                                            子表达式 [扫描指针] ＝ #有符号int
                                            子表达式 [扫描指针 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                            子表达式 [扫描指针 ＋ 2] ＝ 动态RAM分配地址
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                            状态 ＝ “继续”
                                        .如果真结束


                                    .判断 (子表达式 [扫描指针] ＝ #无符号int)
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                        .如果真 (状态 ＝ “完成”)
                                            子表达式 [扫描指针] ＝ #有符号长int
                                            子表达式 [扫描指针 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                            子表达式 [扫描指针 ＋ 2] ＝ 动态RAM分配地址
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束


                                    .判断 (子表达式 [扫描指针] ＝ #无符号长int)



                                    .判断 (子表达式 [扫描指针] ＝ #无符号ACC)
                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, #ACC × 65536)
                                        .如果真 (状态 ＝ “完成”)
                                            子表达式 [扫描指针] ＝ #有符号int
                                            子表达式 [扫描指针 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                            子表达式 [扫描指针 ＋ 2] ＝ 动态RAM分配地址
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                            累加器内容状态 ＝ “ACC”
                                            状态 ＝ “继续”
                                        .如果真结束


                                    .默认

                                    .判断结束


                                    扫描指针 ＝ 当前操作数段起始位置
                                    操作数前运算符计数 ＝ 0
                                    操作数前赋值符计数 ＝ 0
                                .如果真结束



                            .默认
                                状态 ＝ “子表达式处理_单目运算符处理_操作数左侧+错误...~- -”
                            .判断结束









                        .判断 (到文本 (操作数前运算符) ＝ “-”)

                            .判断开始 (子表达式 [扫描指针] ＝ #无符号char指针指向内容 或 子表达式 [扫描指针] ＝ #有符号char指针指向内容 或 子表达式 [扫描指针] ＝ #无符号int指针指向内容 或 子表达式 [扫描指针] ＝ #有符号int指针指向内容 或 子表达式 [扫描指针] ＝ #无符号长int指针指向内容 或 子表达式 [扫描指针] ＝ #有符号长int指针指向内容 或 子表达式 [扫描指针] ＝ #无符号char 或 子表达式 [扫描指针] ＝ #有符号char 或 子表达式 [扫描指针] ＝ #无符号int 或 子表达式 [扫描指针] ＝ #有符号int 或 子表达式 [扫描指针] ＝ #无符号长int 或 子表达式 [扫描指针] ＝ #有符号长int 或 子表达式 [扫描指针] ＝ #无符号ACC 或 子表达式 [扫描指针] ＝ #有符号ACC 或 子表达式 [扫描指针] ＝ #常量 或 子表达式 [扫描指针] ＝ #立即数)

                                .判断开始 (累加器内容状态 ≠ “ACC” 且 子表达式 [扫描指针] ≠ #无符号ACC 且 子表达式 [扫描指针] ≠ #有符号ACC)

                                    状态 ＝ 二元式机器码生成 (0, #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, #ACC × 65536)
                                    .如果真 (状态 ＝ “完成”)

                                        .判断开始 (累加器内容状态 ＝ “无符号ACC”)
                                            计数4 ＝ #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        .默认
                                            计数4 ＝ #有符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        .判断结束

                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 1

                                        .判断开始 (累加器位置 ＝ “子表达式”)
                                            子表达式 [表达式累加器地址 ＋ 1] ＝ 右移 (计数4, 16)
                                            子表达式 [表达式累加器地址 ＋ 2] ＝ 右移 (计数4, 8)
                                            子表达式 [表达式累加器地址 ＋ 3] ＝ 计数4
                                        .默认
                                            主表达式 [表达式累加器地址 ＋ 1] ＝ 右移 (计数4, 16)
                                            主表达式 [表达式累加器地址 ＋ 2] ＝ 右移 (计数4, 8)
                                            主表达式 [表达式累加器地址 ＋ 3] ＝ 计数4
                                        .判断结束

                                        累加器内容状态 ＝ “ACC”

                                    .如果真结束


                                .默认
                                    状态 ＝ “完成”
                                .判断结束


                                .如果真 (状态 ＝ “完成”)

                                    当前操作数段被运算标志 ＝ 1
                                    子表达式 [操作数前运算符位置] ＝ 32


                                    .判断开始 (子表达式 [扫描指针] ＝ #无符号char指针指向内容)
                                        状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                        .如果真 (状态 ＝ “完成”)
                                            状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, #ACC × 65536)
                                            .如果真 (状态 ＝ “完成”)
                                                状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), 0, “~”, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535))
                                                .如果真 (状态 ＝ “完成”)
                                                    状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “+”, 1)
                                                    .如果真 (状态 ＝ “完成”)
                                                        子表达式 [扫描指针] ＝ #有符号int
                                                        子表达式 [扫描指针 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                                        子表达式 [扫描指针 ＋ 2] ＝ 动态RAM分配地址
                                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                                        状态 ＝ “继续”
                                                    .如果真结束

                                                .如果真结束

                                            .如果真结束

                                        .如果真结束


                                    .判断 (子表达式 [扫描指针] ＝ #有符号char指针指向内容)
                                        状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                        .如果真 (状态 ＝ “完成”)
                                            A取反 ()
                                            A等于A加1 ()

                                            子表达式 [扫描指针] ＝ #有符号ACC
                                            累加器位置 ＝ “子表达式”
                                            表达式累加器地址 ＝ 扫描指针 － 1
                                            累加器内容状态 ＝ “有符号ACC”
                                            状态 ＝ “继续”


                                        .如果真结束


                                    .判断 (子表达式 [扫描指针] ＝ #无符号int指针指向内容)

                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                        .如果真 (状态 ＝ “完成”)
                                            状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址 ＋ 2, 65535), “=”, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535))
                                            .如果真 (状态 ＝ “完成”)
                                                状态 ＝ 二元式机器码生成 (#无符号长int × 65536 ＋ 位与 (动态RAM分配地址 ＋ 2, 65535), 0, “~”, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址 ＋ 2, 65535))
                                                .如果真 (状态 ＝ “完成”)
                                                    状态 ＝ 二元式机器码生成 (#无符号长int × 65536 ＋ 位与 (动态RAM分配地址 ＋ 2, 65535), #无符号长int × 65536 ＋ 位与 (动态RAM分配地址 ＋ 2, 65535), “+”, 1)
                                                    .如果真 (状态 ＝ “完成”)
                                                        子表达式 [扫描指针] ＝ #有符号长int
                                                        子表达式 [扫描指针 ＋ 1] ＝ 右移 (动态RAM分配地址 ＋ 2, 8)
                                                        子表达式 [扫描指针 ＋ 2] ＝ 动态RAM分配地址 ＋ 2
                                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 6
                                                        状态 ＝ “继续”
                                                    .如果真结束

                                                .如果真结束


                                            .如果真结束


                                        .如果真结束



                                    .判断 (子表达式 [扫描指针] ＝ #有符号int指针指向内容)
                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                        .如果真 (状态 ＝ “完成”)
                                            状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), 0, “~”, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535))
                                            .如果真 (状态 ＝ “完成”)
                                                状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “+”, 1)
                                                .如果真 (状态 ＝ “完成”)
                                                    子表达式 [扫描指针] ＝ #有符号int
                                                    子表达式 [扫描指针 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                                    子表达式 [扫描指针 ＋ 2] ＝ 动态RAM分配地址
                                                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                                    状态 ＝ “继续”
                                                .如果真结束

                                            .如果真结束


                                        .如果真结束


                                    .判断 (子表达式 [扫描指针] ＝ #无符号长int指针指向内容)
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                        .如果真 (状态 ＝ “完成”)
                                            状态 ＝ 二元式机器码生成 (#无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), 0, “~”, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535))
                                            .如果真 (状态 ＝ “完成”)
                                                状态 ＝ 二元式机器码生成 (#无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “+”, 1)
                                                .如果真 (状态 ＝ “完成”)
                                                    子表达式 [扫描指针] ＝ #无符号长int
                                                    子表达式 [扫描指针 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                                    子表达式 [扫描指针 ＋ 2] ＝ 动态RAM分配地址
                                                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                                    状态 ＝ “继续”
                                                .如果真结束

                                            .如果真结束


                                        .如果真结束


                                    .判断 (子表达式 [扫描指针] ＝ #有符号长int指针指向内容)
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                        .如果真 (状态 ＝ “完成”)
                                            状态 ＝ 二元式机器码生成 (#无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), 0, “~”, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535))
                                            .如果真 (状态 ＝ “完成”)
                                                状态 ＝ 二元式机器码生成 (#无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “+”, 1)
                                                .如果真 (状态 ＝ “完成”)
                                                    子表达式 [扫描指针] ＝ #有符号长int
                                                    子表达式 [扫描指针 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                                    子表达式 [扫描指针 ＋ 2] ＝ 动态RAM分配地址
                                                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                                    状态 ＝ “继续”
                                                .如果真结束

                                            .如果真结束


                                        .如果真结束


                                    .判断 (子表达式 [扫描指针] ＝ #无符号char)
                                        状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                        .如果真 (状态 ＝ “完成”)
                                            状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, #ACC × 65536)
                                            .如果真 (状态 ＝ “完成”)
                                                状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), 0, “~”, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535))
                                                .如果真 (状态 ＝ “完成”)
                                                    状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “+”, 1)
                                                    .如果真 (状态 ＝ “完成”)
                                                        子表达式 [扫描指针] ＝ #有符号int
                                                        子表达式 [扫描指针 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                                        子表达式 [扫描指针 ＋ 2] ＝ 动态RAM分配地址
                                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                                        状态 ＝ “继续”
                                                    .如果真结束

                                                .如果真结束

                                            .如果真结束

                                        .如果真结束


                                    .判断 (子表达式 [扫描指针] ＝ #有符号char)
                                        状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                        .如果真 (状态 ＝ “完成”)
                                            A取反 ()
                                            A等于A加1 ()

                                            子表达式 [扫描指针] ＝ #有符号ACC
                                            累加器位置 ＝ “子表达式”
                                            表达式累加器地址 ＝ 扫描指针 － 1
                                            累加器内容状态 ＝ “有符号ACC”
                                            状态 ＝ “继续”


                                        .如果真结束


                                    .判断 (子表达式 [扫描指针] ＝ #无符号int)
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                        .如果真 (状态 ＝ “完成”)
                                            状态 ＝ 二元式机器码生成 (#无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), 0, “~”, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535))
                                            .如果真 (状态 ＝ “完成”)
                                                状态 ＝ 二元式机器码生成 (#无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “+”, 1)
                                                .如果真 (状态 ＝ “完成”)
                                                    子表达式 [扫描指针] ＝ #有符号长int
                                                    子表达式 [扫描指针 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                                    子表达式 [扫描指针 ＋ 2] ＝ 动态RAM分配地址
                                                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                                    状态 ＝ “继续”
                                                .如果真结束

                                            .如果真结束


                                        .如果真结束


                                    .判断 (子表达式 [扫描指针] ＝ #有符号int)
                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                        .如果真 (状态 ＝ “完成”)
                                            状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), 0, “~”, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535))
                                            .如果真 (状态 ＝ “完成”)
                                                状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “+”, 1)
                                                .如果真 (状态 ＝ “完成”)
                                                    子表达式 [扫描指针] ＝ #有符号int
                                                    子表达式 [扫描指针 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                                    子表达式 [扫描指针 ＋ 2] ＝ 动态RAM分配地址
                                                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                                    状态 ＝ “继续”
                                                .如果真结束

                                            .如果真结束


                                        .如果真结束


                                    .判断 (子表达式 [扫描指针] ＝ #无符号长int)
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                        .如果真 (状态 ＝ “完成”)
                                            状态 ＝ 二元式机器码生成 (#无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), 0, “~”, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535))
                                            .如果真 (状态 ＝ “完成”)
                                                状态 ＝ 二元式机器码生成 (#无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “+”, 1)
                                                .如果真 (状态 ＝ “完成”)
                                                    子表达式 [扫描指针] ＝ #无符号长int
                                                    子表达式 [扫描指针 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                                    子表达式 [扫描指针 ＋ 2] ＝ 动态RAM分配地址
                                                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                                    状态 ＝ “继续”
                                                .如果真结束

                                            .如果真结束


                                        .如果真结束


                                    .判断 (子表达式 [扫描指针] ＝ #有符号长int)
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                        .如果真 (状态 ＝ “完成”)
                                            状态 ＝ 二元式机器码生成 (#无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), 0, “~”, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535))
                                            .如果真 (状态 ＝ “完成”)
                                                状态 ＝ 二元式机器码生成 (#无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “+”, 1)
                                                .如果真 (状态 ＝ “完成”)
                                                    子表达式 [扫描指针] ＝ #有符号长int
                                                    子表达式 [扫描指针 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                                    子表达式 [扫描指针 ＋ 2] ＝ 动态RAM分配地址
                                                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                                    状态 ＝ “继续”
                                                .如果真结束

                                            .如果真结束


                                        .如果真结束


                                    .判断 (子表达式 [扫描指针] ＝ #无符号ACC)
                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, #ACC × 65536)
                                        .如果真 (状态 ＝ “完成”)
                                            状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), 0, “~”, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535))
                                            .如果真 (状态 ＝ “完成”)
                                                状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “+”, 1)
                                                .如果真 (状态 ＝ “完成”)
                                                    子表达式 [扫描指针] ＝ #有符号int
                                                    子表达式 [扫描指针 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                                    子表达式 [扫描指针 ＋ 2] ＝ 动态RAM分配地址
                                                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                                    累加器内容状态 ＝ “ACC”
                                                    状态 ＝ “继续”
                                                .如果真结束

                                            .如果真结束

                                        .如果真结束


                                    .判断 (子表达式 [扫描指针] ＝ #有符号ACC)
                                        A取反 ()
                                        A等于A加1 ()

                                        状态 ＝ “继续”



                                    .判断 (子表达式 [扫描指针] ＝ #常量)

                                        立即数值 [立即数总数 ＋ 1] ＝ 位取反 (常量值 [子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2] ＋ 1]) ＋ 1

                                        子表达式 [扫描指针] ＝ #立即数
                                        子表达式 [扫描指针 ＋ 1] ＝ 右移 (立即数总数, 8)
                                        子表达式 [扫描指针 ＋ 2] ＝ 立即数总数

                                        立即数总数 ＝ 立即数总数 ＋ 1

                                        状态 ＝ “继续”

                                    .判断 (子表达式 [扫描指针] ＝ #立即数)

                                        立即数值 [子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2] ＋ 1] ＝ 位取反 (立即数值 [子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2] ＋ 1]) ＋ 1

                                        状态 ＝ “继续”

                                    .默认

                                    .判断结束

                                    扫描指针 ＝ 当前操作数段起始位置
                                    操作数前运算符计数 ＝ 0
                                    操作数前赋值符计数 ＝ 0
                                .如果真结束




                            .默认
                                状态 ＝ “子表达式处理_单目运算符处理_操作数左侧-错误...~- -”
                            .判断结束








                        .判断 (到文本 (操作数前运算符) ＝ “!”)

                            .判断开始 (子表达式 [扫描指针] ＝ #无符号char指针指向内容 或 子表达式 [扫描指针] ＝ #有符号char指针指向内容 或 子表达式 [扫描指针] ＝ #无符号int指针指向内容 或 子表达式 [扫描指针] ＝ #有符号int指针指向内容 或 子表达式 [扫描指针] ＝ #无符号长int指针指向内容 或 子表达式 [扫描指针] ＝ #有符号长int指针指向内容 或 子表达式 [扫描指针] ＝ #无符号char 或 子表达式 [扫描指针] ＝ #有符号char 或 子表达式 [扫描指针] ＝ #无符号int 或 子表达式 [扫描指针] ＝ #有符号int 或 子表达式 [扫描指针] ＝ #无符号长int 或 子表达式 [扫描指针] ＝ #有符号长int 或 子表达式 [扫描指针] ＝ #无符号char指针 或 子表达式 [扫描指针] ＝ #有符号char指针 或 子表达式 [扫描指针] ＝ #无符号int指针 或 子表达式 [扫描指针] ＝ #有符号int指针 或 子表达式 [扫描指针] ＝ #无符号长int指针 或 子表达式 [扫描指针] ＝ #有符号长int指针 或 子表达式 [扫描指针] ＝ #无符号char数组 或 子表达式 [扫描指针] ＝ #有符号char数组 或 子表达式 [扫描指针] ＝ #无符号int数组 或 子表达式 [扫描指针] ＝ #有符号int数组 或 子表达式 [扫描指针] ＝ #无符号长int数组 或 子表达式 [扫描指针] ＝ #有符号长int数组 或 子表达式 [扫描指针] ＝ #有符号ACC 或 子表达式 [扫描指针] ＝ #无符号ACC 或 子表达式 [扫描指针] ＝ #常量 或 子表达式 [扫描指针] ＝ #立即数)

                                .判断开始 (累加器内容状态 ≠ “ACC” 且 子表达式 [扫描指针] ≠ #无符号ACC 且 子表达式 [扫描指针] ≠ #有符号ACC)

                                    状态 ＝ 二元式机器码生成 (0, #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, #ACC × 65536)
                                    .如果真 (状态 ＝ “完成”)

                                        .判断开始 (累加器内容状态 ＝ “无符号ACC”)
                                            计数4 ＝ #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        .默认
                                            计数4 ＝ #有符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        .判断结束

                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 1

                                        .判断开始 (累加器位置 ＝ “子表达式”)
                                            子表达式 [表达式累加器地址 ＋ 1] ＝ 右移 (计数4, 16)
                                            子表达式 [表达式累加器地址 ＋ 2] ＝ 右移 (计数4, 8)
                                            子表达式 [表达式累加器地址 ＋ 3] ＝ 计数4
                                        .默认
                                            主表达式 [表达式累加器地址 ＋ 1] ＝ 右移 (计数4, 16)
                                            主表达式 [表达式累加器地址 ＋ 2] ＝ 右移 (计数4, 8)
                                            主表达式 [表达式累加器地址 ＋ 3] ＝ 计数4
                                        .判断结束

                                        累加器内容状态 ＝ “ACC”

                                    .如果真结束


                                .默认
                                    状态 ＝ “完成”
                                .判断结束


                                .如果真 (状态 ＝ “完成”)

                                    当前操作数段被运算标志 ＝ 1
                                    子表达式 [操作数前运算符位置] ＝ 32

                                    .判断开始 (子表达式 [扫描指针] ＝ #无符号char指针指向内容)
                                        状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                        .如果真 (状态 ＝ “完成”)
                                            子表达式 [扫描指针] ＝ #无符号ACC
                                        .如果真结束

                                    .判断 (子表达式 [扫描指针] ＝ #有符号char指针指向内容)
                                        状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                        .如果真 (状态 ＝ “完成”)
                                            子表达式 [扫描指针] ＝ #有符号ACC
                                        .如果真结束

                                    .判断 (子表达式 [扫描指针] ＝ #无符号int指针指向内容)
                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                        .如果真 (状态 ＝ “完成”)
                                            子表达式 [扫描指针] ＝ #无符号int
                                            子表达式 [扫描指针 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                            子表达式 [扫描指针 ＋ 2] ＝ 动态RAM分配地址
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        .如果真结束

                                    .判断 (子表达式 [扫描指针] ＝ #有符号int指针指向内容)
                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                        .如果真 (状态 ＝ “完成”)
                                            子表达式 [扫描指针] ＝ #有符号int
                                            子表达式 [扫描指针 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                            子表达式 [扫描指针 ＋ 2] ＝ 动态RAM分配地址
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        .如果真结束

                                    .判断 (子表达式 [扫描指针] ＝ #无符号长int指针指向内容)
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                        .如果真 (状态 ＝ “完成”)
                                            子表达式 [扫描指针] ＝ #无符号长int
                                            子表达式 [扫描指针 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                            子表达式 [扫描指针 ＋ 2] ＝ 动态RAM分配地址
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        .如果真结束

                                    .判断 (子表达式 [扫描指针] ＝ #有符号长int指针指向内容)
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                        .如果真 (状态 ＝ “完成”)
                                            子表达式 [扫描指针] ＝ #有符号长int
                                            子表达式 [扫描指针 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                            子表达式 [扫描指针 ＋ 2] ＝ 动态RAM分配地址
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        .如果真结束

                                    .判断 (子表达式 [扫描指针] ＝ #无符号char)
                                        状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                        .如果真 (状态 ＝ “完成”)
                                            子表达式 [扫描指针] ＝ #无符号ACC
                                        .如果真结束

                                    .判断 (子表达式 [扫描指针] ＝ #有符号char)
                                        状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                        .如果真 (状态 ＝ “完成”)
                                            子表达式 [扫描指针] ＝ #有符号ACC
                                        .如果真结束

                                    .默认

                                    .判断结束


                                    .如果真 (状态 ＝ “完成”)

                                        .判断开始 (子表达式 [扫描指针] ＝ #无符号int 或 子表达式 [扫描指针] ＝ #有符号int 或 子表达式 [扫描指针] ＝ #无符号char指针 或 子表达式 [扫描指针] ＝ #有符号char指针 或 子表达式 [扫描指针] ＝ #无符号int指针 或 子表达式 [扫描指针] ＝ #有符号int指针 或 子表达式 [扫描指针] ＝ #无符号长int指针 或 子表达式 [扫描指针] ＝ #有符号长int指针)
                                            状态 ＝ 二元式机器码生成 (#待修改跳转地址 × 65536, #无符号int × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2], “==”, 0)
                                            .如果真 (状态 ＝ “完成”)
                                                状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, #待修改跳转地址 × 65536)
                                                .如果真 (状态 ＝ “完成”)
                                                    子表达式 [扫描指针] ＝ #有符号ACC
                                                    累加器位置 ＝ “子表达式”
                                                    表达式累加器地址 ＝ 扫描指针 － 1
                                                    累加器内容状态 ＝ “有符号ACC”
                                                    状态 ＝ “继续”
                                                .如果真结束

                                            .如果真结束


                                        .判断 (子表达式 [扫描指针] ＝ #无符号长int 或 子表达式 [扫描指针] ＝ #有符号长int)
                                            状态 ＝ 二元式机器码生成 (#待修改跳转地址 × 65536, #无符号长int × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2], “==”, 0)
                                            .如果真 (状态 ＝ “完成”)
                                                状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, #待修改跳转地址 × 65536)
                                                .如果真 (状态 ＝ “完成”)
                                                    子表达式 [扫描指针] ＝ #有符号ACC
                                                    累加器位置 ＝ “子表达式”
                                                    表达式累加器地址 ＝ 扫描指针 － 1
                                                    累加器内容状态 ＝ “有符号ACC”
                                                    状态 ＝ “继续”
                                                .如果真结束

                                            .如果真结束


                                        .判断 (子表达式 [扫描指针] ＝ #有符号ACC 或 子表达式 [扫描指针] ＝ #无符号ACC)
                                            A等于A减1 ()
                                            状态 ＝ 二元式机器码生成 (#待修改跳转地址 × 65536, #C × 65536, “==”, 1)
                                            .如果真 (状态 ＝ “完成”)
                                                状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, #待修改跳转地址 × 65536)
                                                .如果真 (状态 ＝ “完成”)
                                                    子表达式 [扫描指针] ＝ #有符号ACC
                                                    累加器位置 ＝ “子表达式”
                                                    表达式累加器地址 ＝ 扫描指针 － 1
                                                    累加器内容状态 ＝ “有符号ACC”
                                                    状态 ＝ “继续”
                                                .如果真结束

                                            .如果真结束


                                        .判断 (子表达式 [扫描指针] ＝ #无符号char数组 或 子表达式 [扫描指针] ＝ #有符号char数组 或 子表达式 [扫描指针] ＝ #无符号int数组 或 子表达式 [扫描指针] ＝ #有符号int数组 或 子表达式 [扫描指针] ＝ #无符号长int数组 或 子表达式 [扫描指针] ＝ #有符号长int数组)

                                            立即数值 [立即数总数 ＋ 1] ＝ 0
                                            子表达式 [扫描指针] ＝ #立即数
                                            子表达式 [扫描指针 ＋ 1] ＝ 右移 (立即数总数, 8)
                                            子表达式 [扫描指针 ＋ 2] ＝ 立即数总数
                                            立即数总数 ＝ 立即数总数 ＋ 1
                                            状态 ＝ “继续”

                                        .判断 (子表达式 [扫描指针] ＝ #常量)

                                            .判断开始 (常量值 [子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2] ＋ 1] ＝ 0)
                                                立即数值 [立即数总数 ＋ 1] ＝ 1
                                            .默认
                                                立即数值 [立即数总数 ＋ 1] ＝ 0
                                            .判断结束

                                            子表达式 [扫描指针] ＝ #立即数
                                            子表达式 [扫描指针 ＋ 1] ＝ 右移 (立即数总数, 8)
                                            子表达式 [扫描指针 ＋ 2] ＝ 立即数总数
                                            立即数总数 ＝ 立即数总数 ＋ 1

                                            状态 ＝ “继续”


                                        .判断 (子表达式 [扫描指针] ＝ #立即数)

                                            .判断开始 (立即数值 [子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2] ＋ 1] ＝ 0)

                                                立即数值 [子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2] ＋ 1] ＝ 1

                                            .默认
                                                立即数值 [子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2] ＋ 1] ＝ 0
                                            .判断结束

                                            状态 ＝ “继续”

                                        .默认

                                        .判断结束

                                        扫描指针 ＝ 当前操作数段起始位置
                                        操作数前运算符计数 ＝ 0
                                        操作数前赋值符计数 ＝ 0


                                    .如果真结束


                                .如果真结束



                            .默认
                                状态 ＝ “子表达式处理_单目运算符处理_操作数左侧!错误...~- -”
                            .判断结束







                        .判断 (到文本 (操作数前运算符) ＝ “~”)

                            .判断开始 (子表达式 [扫描指针] ＝ #无符号char指针指向内容 或 子表达式 [扫描指针] ＝ #有符号char指针指向内容 或 子表达式 [扫描指针] ＝ #无符号int指针指向内容 或 子表达式 [扫描指针] ＝ #有符号int指针指向内容 或 子表达式 [扫描指针] ＝ #无符号长int指针指向内容 或 子表达式 [扫描指针] ＝ #有符号长int指针指向内容 或 子表达式 [扫描指针] ＝ #无符号char 或 子表达式 [扫描指针] ＝ #有符号char 或 子表达式 [扫描指针] ＝ #无符号int 或 子表达式 [扫描指针] ＝ #有符号int 或 子表达式 [扫描指针] ＝ #无符号长int 或 子表达式 [扫描指针] ＝ #有符号长int 或 子表达式 [扫描指针] ＝ #ACC 或 子表达式 [扫描指针] ＝ #有符号ACC 或 子表达式 [扫描指针] ＝ #无符号ACC 或 子表达式 [扫描指针] ＝ #常量 或 子表达式 [扫描指针] ＝ #立即数)

                                .判断开始 (累加器内容状态 ≠ “ACC” 且 子表达式 [扫描指针] ≠ #无符号ACC 且 子表达式 [扫描指针] ≠ #有符号ACC)

                                    状态 ＝ 二元式机器码生成 (0, #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, #ACC × 65536)
                                    .如果真 (状态 ＝ “完成”)

                                        .判断开始 (累加器内容状态 ＝ “无符号ACC”)
                                            计数4 ＝ #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        .默认
                                            计数4 ＝ #有符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        .判断结束

                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 1

                                        .判断开始 (累加器位置 ＝ “子表达式”)
                                            子表达式 [表达式累加器地址 ＋ 1] ＝ 右移 (计数4, 16)
                                            子表达式 [表达式累加器地址 ＋ 2] ＝ 右移 (计数4, 8)
                                            子表达式 [表达式累加器地址 ＋ 3] ＝ 计数4
                                        .默认
                                            主表达式 [表达式累加器地址 ＋ 1] ＝ 右移 (计数4, 16)
                                            主表达式 [表达式累加器地址 ＋ 2] ＝ 右移 (计数4, 8)
                                            主表达式 [表达式累加器地址 ＋ 3] ＝ 计数4
                                        .判断结束

                                        累加器内容状态 ＝ “ACC”

                                    .如果真结束


                                .默认
                                    状态 ＝ “完成”
                                .判断结束


                                .如果真 (状态 ＝ “完成”)

                                    当前操作数段被运算标志 ＝ 1
                                    子表达式 [操作数前运算符位置] ＝ 32


                                    .判断开始 (子表达式 [扫描指针] ＝ #无符号char指针指向内容 或 子表达式 [扫描指针] ＝ #有符号char指针指向内容)
                                        状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                        .如果真 (状态 ＝ “完成”)
                                            A取反 ()
                                            .判断开始 (子表达式 [扫描指针] ＝ #无符号char指针指向内容)
                                                子表达式 [扫描指针] ＝ #无符号ACC
                                                累加器位置 ＝ “子表达式”
                                                表达式累加器地址 ＝ 扫描指针 － 1
                                                累加器内容状态 ＝ “无符号ACC”

                                            .默认
                                                子表达式 [扫描指针] ＝ #有符号ACC
                                                累加器位置 ＝ “子表达式”
                                                表达式累加器地址 ＝ 扫描指针 － 1
                                                累加器内容状态 ＝ “有符号ACC”
                                            .判断结束

                                            状态 ＝ “继续”


                                        .如果真结束



                                    .判断 (子表达式 [扫描指针] ＝ #无符号int指针指向内容 或 子表达式 [扫描指针] ＝ #有符号int指针指向内容)

                                        .判断开始 (右扫空标志 ＝ 1 且 操作数计数 ≠ 0 且 (右移 (前操作数, 16) ＝ #无符号int 或 右移 (前操作数, 16) ＝ #有符号int 或 右移 (前操作数, 16) ＝ #无符号char指针 或 右移 (前操作数, 16) ＝ #有符号char指针 或 右移 (前操作数, 16) ＝ #无符号int指针 或 右移 (前操作数, 16) ＝ #有符号int指针 或 右移 (前操作数, 16) ＝ #无符号长int指针 或 右移 (前操作数, 16) ＝ #有符号长int指针) 且 操作数前运算符计数 ＝ 2 且 操作数前赋值符计数 ＝ 1 且 到文本 (操作数前赋值符) ＝ “=”)

                                            状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (前操作数, 65535), “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                            .如果真 (状态 ＝ “完成”)
                                                状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 位与 (前操作数, 65535), 0, “~”, #无符号int × 65536 ＋ 位与 (前操作数, 65535))
                                                .如果真 (状态 ＝ “完成”)
                                                    计数1 ＝ 0
                                                    .判断循环首 (当前操作数段起始位置 ＋ 计数1 ≤ 取字节集长度 (子表达式))
                                                        子表达式 [当前操作数段起始位置 ＋ 计数1] ＝ 32
                                                        计数1 ＝ 计数1 ＋ 1
                                                    .判断循环尾 ()

                                                .如果真结束

                                            .如果真结束



                                        .默认

                                            状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                            .如果真 (状态 ＝ “完成”)
                                                状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), 0, “~”, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535))
                                                .如果真 (状态 ＝ “完成”)

                                                    .判断开始 (子表达式 [扫描指针] ＝ #无符号int指针指向内容)
                                                        子表达式 [扫描指针] ＝ #无符号int
                                                    .默认
                                                        子表达式 [扫描指针] ＝ #有符号int
                                                    .判断结束

                                                    子表达式 [扫描指针 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                                    子表达式 [扫描指针 ＋ 2] ＝ 动态RAM分配地址
                                                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                                    状态 ＝ “继续”
                                                .如果真结束

                                            .如果真结束


                                        .判断结束



                                    .判断 (子表达式 [扫描指针] ＝ #无符号长int指针指向内容 或 子表达式 [扫描指针] ＝ #有符号长int指针指向内容)

                                        .判断开始 (右扫空标志 ＝ 1 且 操作数计数 ≠ 0 且 (右移 (前操作数, 16) ＝ #无符号长int 或 右移 (前操作数, 16) ＝ #有符号长int) 且 操作数前运算符计数 ＝ 2 且 操作数前赋值符计数 ＝ 1 且 到文本 (操作数前赋值符) ＝ “=”)

                                            状态 ＝ 二元式机器码生成 (0, 前操作数, “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                            .如果真 (状态 ＝ “完成”)
                                                状态 ＝ 二元式机器码生成 (前操作数, 0, “~”, 前操作数)
                                                .如果真 (状态 ＝ “完成”)
                                                    计数1 ＝ 0
                                                    .判断循环首 (当前操作数段起始位置 ＋ 计数1 ≤ 取字节集长度 (子表达式))
                                                        子表达式 [当前操作数段起始位置 ＋ 计数1] ＝ 32
                                                        计数1 ＝ 计数1 ＋ 1
                                                    .判断循环尾 ()

                                                .如果真结束

                                            .如果真结束



                                        .默认

                                            状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                            .如果真 (状态 ＝ “完成”)
                                                状态 ＝ 二元式机器码生成 (#无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), 0, “~”, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535))
                                                .如果真 (状态 ＝ “完成”)

                                                    .判断开始 (子表达式 [扫描指针] ＝ #无符号长int指针指向内容)
                                                        子表达式 [扫描指针] ＝ #无符号长int
                                                    .默认
                                                        子表达式 [扫描指针] ＝ #有符号长int
                                                    .判断结束

                                                    子表达式 [扫描指针 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                                    子表达式 [扫描指针 ＋ 2] ＝ 动态RAM分配地址
                                                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                                    状态 ＝ “继续”
                                                .如果真结束

                                            .如果真结束


                                        .判断结束



                                    .判断 (子表达式 [扫描指针] ＝ #无符号char 或 子表达式 [扫描指针] ＝ #有符号char)

                                        .判断开始 (右扫空标志 ＝ 1 且 操作数计数 ≠ 0 且 (右移 (前操作数, 16) ＝ #无符号char 或 右移 (前操作数, 16) ＝ #有符号char) 且 操作数前运算符计数 ＝ 2 且 操作数前赋值符计数 ＝ 1 且 到文本 (操作数前赋值符) ＝ “=”)

                                            状态 ＝ 二元式机器码生成 (前操作数, 0, “~”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                            .如果真 (状态 ＝ “完成”)
                                                计数1 ＝ 0
                                                .判断循环首 (当前操作数段起始位置 ＋ 计数1 ≤ 取字节集长度 (子表达式))
                                                    子表达式 [当前操作数段起始位置 ＋ 计数1] ＝ 32
                                                    计数1 ＝ 计数1 ＋ 1
                                                .判断循环尾 ()
                                            .如果真结束


                                        .默认

                                            A等于_RAM (子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                            A取反 ()

                                            .判断开始 (子表达式 [扫描指针] ＝ #无符号char)
                                                子表达式 [扫描指针] ＝ #无符号ACC
                                                累加器位置 ＝ “子表达式”
                                                表达式累加器地址 ＝ 扫描指针 － 1
                                                累加器内容状态 ＝ “无符号ACC”

                                            .默认
                                                子表达式 [扫描指针] ＝ #有符号ACC
                                                累加器位置 ＝ “子表达式”
                                                表达式累加器地址 ＝ 扫描指针 － 1
                                                累加器内容状态 ＝ “有符号ACC”
                                            .判断结束

                                            状态 ＝ “继续”

                                        .判断结束




                                    .判断 (子表达式 [扫描指针] ＝ #无符号int 或 子表达式 [扫描指针] ＝ #有符号int)

                                        .判断开始 (右扫空标志 ＝ 1 且 操作数计数 ≠ 0 且 (右移 (前操作数, 16) ＝ #无符号char 或 右移 (前操作数, 16) ＝ #有符号char 或 右移 (前操作数, 16) ＝ #无符号int 或 右移 (前操作数, 16) ＝ #有符号int 或 右移 (前操作数, 16) ＝ #无符号char指针 或 右移 (前操作数, 16) ＝ #有符号char指针 或 右移 (前操作数, 16) ＝ #无符号int指针 或 右移 (前操作数, 16) ＝ #有符号int指针 或 右移 (前操作数, 16) ＝ #无符号长int指针 或 右移 (前操作数, 16) ＝ #有符号长int指针) 且 操作数前运算符计数 ＝ 2 且 操作数前赋值符计数 ＝ 1 且 到文本 (操作数前赋值符) ＝ “=”)

                                            状态 ＝ 二元式机器码生成 (前操作数, 0, “~”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                            .如果真 (状态 ＝ “完成”)
                                                计数1 ＝ 0
                                                .判断循环首 (当前操作数段起始位置 ＋ 计数1 ≤ 取字节集长度 (子表达式))
                                                    子表达式 [当前操作数段起始位置 ＋ 计数1] ＝ 32
                                                    计数1 ＝ 计数1 ＋ 1
                                                .判断循环尾 ()

                                            .如果真结束



                                        .默认

                                            状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), 0, “~”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                            .如果真 (状态 ＝ “完成”)

                                                子表达式 [扫描指针 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                                子表达式 [扫描指针 ＋ 2] ＝ 动态RAM分配地址
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                                状态 ＝ “继续”

                                            .如果真结束



                                        .判断结束


                                    .判断 (子表达式 [扫描指针] ＝ #无符号长int 或 子表达式 [扫描指针] ＝ #有符号长int)

                                        .判断开始 (右扫空标志 ＝ 1 且 操作数计数 ≠ 0 且 (右移 (前操作数, 16) ＝ #无符号char 或 右移 (前操作数, 16) ＝ #有符号char 或 右移 (前操作数, 16) ＝ #无符号int 或 右移 (前操作数, 16) ＝ #有符号int 或 右移 (前操作数, 16) ＝ #无符号char指针 或 右移 (前操作数, 16) ＝ #有符号char指针 或 右移 (前操作数, 16) ＝ #无符号int指针 或 右移 (前操作数, 16) ＝ #有符号int指针 或 右移 (前操作数, 16) ＝ #无符号长int指针 或 右移 (前操作数, 16) ＝ #有符号长int指针 或 右移 (前操作数, 16) ＝ #无符号长int 或 右移 (前操作数, 16) ＝ #有符号长int) 且 操作数前运算符计数 ＝ 2 且 操作数前赋值符计数 ＝ 1 且 到文本 (操作数前赋值符) ＝ “=”)

                                            状态 ＝ 二元式机器码生成 (前操作数, 0, “~”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                            .如果真 (状态 ＝ “完成”)
                                                计数1 ＝ 0
                                                .判断循环首 (当前操作数段起始位置 ＋ 计数1 ≤ 取字节集长度 (子表达式))
                                                    子表达式 [当前操作数段起始位置 ＋ 计数1] ＝ 32
                                                    计数1 ＝ 计数1 ＋ 1
                                                .判断循环尾 ()

                                            .如果真结束



                                        .默认


                                            状态 ＝ 二元式机器码生成 (#无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), 0, “~”, 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2])
                                            .如果真 (状态 ＝ “完成”)

                                                子表达式 [扫描指针 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                                子表达式 [扫描指针 ＋ 2] ＝ 动态RAM分配地址
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                                状态 ＝ “继续”

                                            .如果真结束


                                        .判断结束



                                    .判断 (子表达式 [扫描指针] ＝ #ACC 或 子表达式 [扫描指针] ＝ #有符号ACC 或 子表达式 [扫描指针] ＝ #无符号ACC)
                                        A取反 ()
                                        状态 ＝ “继续”


                                    .判断 (子表达式 [扫描指针] ＝ #常量)

                                        立即数值 [立即数总数 ＋ 1] ＝ 位取反 (常量值 [子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2] ＋ 1])

                                        子表达式 [扫描指针] ＝ #立即数
                                        子表达式 [扫描指针 ＋ 1] ＝ 右移 (立即数总数, 8)
                                        子表达式 [扫描指针 ＋ 2] ＝ 立即数总数

                                        立即数总数 ＝ 立即数总数 ＋ 1

                                        状态 ＝ “继续”

                                    .判断 (子表达式 [扫描指针] ＝ #立即数)

                                        立即数值 [子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2] ＋ 1] ＝ 位取反 (立即数值 [子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2] ＋ 1])

                                        状态 ＝ “继续”

                                    .默认

                                    .判断结束


                                    扫描指针 ＝ 当前操作数段起始位置
                                    操作数前运算符计数 ＝ 0
                                    操作数前赋值符计数 ＝ 0


                                .如果真结束





                            .默认
                                状态 ＝ “子表达式处理_单目运算符处理_操作数左侧~错误...~- -”
                            .判断结束






                        .默认
                            状态 ＝ “子表达式处理_单目运算符处理_操作数左侧运算符错误...~- -”
                        .判断结束




                    .判断 (操作数计数 ≥ 1 且 操作数前运算符计数 ＝ 0)

                        状态 ＝ “子表达式处理_单目运算符处理_操作数和操作数之间缺少运算符...~- =”

                    .判断 (右扫空标志 ＝ 0)

                        前操作数 ＝ 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2]
                        当前操作数段起始位置 ＝ 扫描指针 ＋ 3
                        扫描指针 ＝ 当前操作数段起始位置
                        操作数计数 ＝ 操作数计数 ＋ 1
                        当前操作数段被运算标志 ＝ 0
                        操作数前运算符计数 ＝ 0
                        操作数前赋值符计数 ＝ 0


                    .默认
                        状态 ＝ “完成”
                    .判断结束



                .如果真结束





            .判断结束



        .判断 (到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 2])) ＝ “<<=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 2])) ＝ “>>=”)

            操作数前运算符 ＝ 到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 2])
            操作数前赋值符 ＝ 操作数前运算符
            操作数前运算符位置 ＝ 扫描指针
            操作数前运算符计数 ＝ 操作数前运算符计数 ＋ 1
            操作数前赋值符计数 ＝ 操作数前赋值符计数 ＋ 1
            扫描指针 ＝ 扫描指针 ＋ 3


        .判断 (到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “+=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “-=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “*=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “/=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “%=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “&=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “|=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “^=”)

            操作数前运算符 ＝ 到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])
            操作数前赋值符 ＝ 操作数前运算符
            操作数前运算符位置 ＝ 扫描指针
            操作数前运算符计数 ＝ 操作数前运算符计数 ＋ 1
            操作数前赋值符计数 ＝ 操作数前赋值符计数 ＋ 1
            扫描指针 ＝ 扫描指针 ＋ 2


        .判断 (到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “++” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “--” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “>=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “<=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “==” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “!=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “<<” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “>>”)

            操作数前运算符 ＝ 到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])
            操作数前运算符位置 ＝ 扫描指针
            操作数前运算符计数 ＝ 操作数前运算符计数 ＋ 1
            扫描指针 ＝ 扫描指针 ＋ 2

        .判断 (到文本 (到字节集 (子表达式 [扫描指针])) ＝ “+” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “-” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “*” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “/” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “%” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “&” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “|” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “~” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “^” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “>” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “<” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “!”)

            操作数前运算符 ＝ 到字节集 (子表达式 [扫描指针])
            操作数前运算符位置 ＝ 扫描指针
            操作数前运算符计数 ＝ 操作数前运算符计数 ＋ 1
            扫描指针 ＝ 扫描指针 ＋ 1

        .判断 (到文本 (到字节集 (子表达式 [扫描指针])) ＝ “=”)

            操作数前运算符 ＝ 到字节集 (子表达式 [扫描指针])
            操作数前赋值符 ＝ 操作数前运算符
            操作数前运算符位置 ＝ 扫描指针
            操作数前运算符计数 ＝ 操作数前运算符计数 ＋ 1
            操作数前赋值符计数 ＝ 操作数前赋值符计数 ＋ 1
            扫描指针 ＝ 扫描指针 ＋ 1

        .默认
            状态 ＝ “子表达式处理_单目运算符处理_出现未识别的符号..+_+~”
        .判断结束


    .循环判断尾 (状态 ＝ “继续”)





    .如果真 (状态 ＝ “完成”)
        状态 ＝ 子表达式处理部件_运算符处理 (子表达式)
        .如果真 (状态 ＝ “完成”)
            状态 ＝ 子表达式处理部件_赋值符处理 (子表达式处理部件_子表达式)
            .如果真 (状态 ＝ “完成”)

                .如果真 (累加器位置 ＝ “子表达式”)
                    累加器内容状态 ＝ “ACC”
                .如果真结束

                计数1 ＝ 1
                .判断循环首 (子表达式处理部件_子表达式 [计数1] ＝ 32)
                    计数1 ＝ 计数1 ＋ 1
                .判断循环尾 ()

                子表达式处理_返回值 ＝ 子表达式处理部件_子表达式 [计数1] × 65536 ＋ 子表达式处理部件_子表达式 [计数1 ＋ 1] × 256 ＋ 子表达式处理部件_子表达式 [计数1 ＋ 2]

                状态 ＝ “完成”

            .如果真结束


        .如果真结束


    .如果真结束






.如果真结束




返回 (状态)








.子程序 子表达式处理部件_赋值符处理, 文本型
.参数 子表达式, 字节集
.局部变量 状态, 文本型
.局部变量 右扫空标志, 整数型
.局部变量 扫描指针, 整数型
.局部变量 左操作数, 整数型
.局部变量 左操作数位置, 整数型
.局部变量 赋值符, 字节集
.局部变量 赋值符位置, 整数型
.局部变量 右操作数, 整数型
.局部变量 右操作数位置, 整数型
.局部变量 计数4, 整数型




子表达式 ＝ 子表达式 ＋ 到字节集 (“       ”)

扫描指针 ＝ 1

状态 ＝ “继续”
.循环判断首 ()

    .判断开始 (扫描指针 ＞ 取字节集长度 (子表达式))

        状态 ＝ “完成”

    .判断 (到文本 (到字节集 (子表达式 [扫描指针])) ＝ “ ”)

        扫描指针 ＝ 扫描指针 ＋ 1

    .判断 (子表达式 [扫描指针] ≥ 128 且 子表达式 [扫描指针] ≤ 255)

        左操作数 ＝ 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2]
        左操作数位置 ＝ 扫描指针
        扫描指针 ＝ 扫描指针 ＋ 3


    .判断 (到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 2])) ＝ “<<=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1]) ＋ 到字节集 (主表达式 [扫描指针 ＋ 2])) ＝ “>>=”)

        赋值符 ＝ 到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 2])
        赋值符位置 ＝ 扫描指针

        扫描指针 ＝ 扫描指针 ＋ 3
        .判断循环首 (扫描指针 ≤ 取字节集长度 (子表达式) 且 子表达式 [扫描指针] ＝ 32)
            扫描指针 ＝ 扫描指针 ＋ 1
        .判断循环尾 ()

        右操作数 ＝ 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2]
        右操作数位置 ＝ 扫描指针

        扫描指针 ＝ 扫描指针 ＋ 3
        .判断循环首 (扫描指针 ≤ 取字节集长度 (子表达式) 且 子表达式 [扫描指针] ＝ 32)
            扫描指针 ＝ 扫描指针 ＋ 1
        .判断循环尾 ()

        .判断开始 (扫描指针 ≤ 取字节集长度 (子表达式))
            右扫空标志 ＝ 0
        .默认
            右扫空标志 ＝ 1
        .判断结束


        .判断开始 (右扫空标志 ＝ 0)
            左操作数 ＝ 右操作数
        .默认

            .判断开始 (累加器内容状态 ≠ “ACC” 且 右移 (左操作数, 16) ≠ #无符号ACC 且 右移 (左操作数, 16) ≠ #有符号ACC 且 右移 (右操作数, 16) ≠ #无符号ACC 且 右移 (右操作数, 16) ≠ #有符号ACC)

                状态 ＝ 二元式机器码生成 (0, #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, #ACC × 65536)
                .如果真 (状态 ＝ “完成”)

                    .判断开始 (累加器内容状态 ＝ “无符号ACC”)
                        计数4 ＝ #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                    .默认
                        计数4 ＝ #有符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                    .判断结束

                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 1

                    .判断开始 (累加器位置 ＝ “子表达式”)
                        子表达式 [表达式累加器地址 ＋ 1] ＝ 右移 (计数4, 16)
                        子表达式 [表达式累加器地址 ＋ 2] ＝ 右移 (计数4, 8)
                        子表达式 [表达式累加器地址 ＋ 3] ＝ 计数4
                    .默认
                        主表达式 [表达式累加器地址 ＋ 1] ＝ 右移 (计数4, 16)
                        主表达式 [表达式累加器地址 ＋ 2] ＝ 右移 (计数4, 8)
                        主表达式 [表达式累加器地址 ＋ 3] ＝ 计数4
                    .判断结束

                    累加器内容状态 ＝ “ACC”

                .如果真结束


            .默认
                状态 ＝ “完成”
                累加器内容状态 ＝ “ACC”
            .判断结束


            .如果真 (状态 ＝ “完成”)

                子表达式 [赋值符位置] ＝ 32
                子表达式 [赋值符位置 ＋ 1] ＝ 32

                子表达式 [右操作数位置] ＝ 右移 (左操作数, 16)
                子表达式 [右操作数位置 ＋ 1] ＝ 右移 (左操作数, 8)
                子表达式 [右操作数位置 ＋ 2] ＝ 左操作数

                子表达式 [右操作数位置 ＋ 3] ＝ 赋值符 [1]
                子表达式 [右操作数位置 ＋ 4] ＝ 赋值符 [2]

                子表达式 [右操作数位置 ＋ 5] ＝ 右移 (右操作数, 16)
                子表达式 [右操作数位置 ＋ 6] ＝ 右移 (右操作数, 8)
                子表达式 [右操作数位置 ＋ 7] ＝ 右操作数

                状态 ＝ 子表达式处理部件_运算符处理 (子表达式)

                .如果真 (状态 ＝ “完成”)

                    子表达式 ＝ 子表达式处理部件_子表达式
                    扫描指针 ＝ 1
                    状态 ＝ “继续”

                .如果真结束


            .如果真结束


        .判断结束




    .判断 (到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “+=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “-=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “*=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “/=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “%=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “&=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “|=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “^=”)

        赋值符 ＝ 到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])
        赋值符位置 ＝ 扫描指针

        扫描指针 ＝ 扫描指针 ＋ 2
        .判断循环首 (扫描指针 ≤ 取字节集长度 (子表达式) 且 子表达式 [扫描指针] ＝ 32)
            扫描指针 ＝ 扫描指针 ＋ 1
        .判断循环尾 ()

        右操作数 ＝ 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2]
        右操作数位置 ＝ 扫描指针

        扫描指针 ＝ 扫描指针 ＋ 3
        .判断循环首 (扫描指针 ≤ 取字节集长度 (子表达式) 且 子表达式 [扫描指针] ＝ 32)
            扫描指针 ＝ 扫描指针 ＋ 1
        .判断循环尾 ()

        .判断开始 (扫描指针 ≤ 取字节集长度 (子表达式))
            右扫空标志 ＝ 0
        .默认
            右扫空标志 ＝ 1
        .判断结束


        .判断开始 (右扫空标志 ＝ 0)
            左操作数 ＝ 右操作数
        .默认

            .判断开始 (累加器内容状态 ≠ “ACC” 且 右移 (左操作数, 16) ≠ #无符号ACC 且 右移 (左操作数, 16) ≠ #有符号ACC 且 右移 (右操作数, 16) ≠ #无符号ACC 且 右移 (右操作数, 16) ≠ #有符号ACC)

                状态 ＝ 二元式机器码生成 (0, #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, #ACC × 65536)
                .如果真 (状态 ＝ “完成”)

                    .判断开始 (累加器内容状态 ＝ “无符号ACC”)
                        计数4 ＝ #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                    .默认
                        计数4 ＝ #有符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                    .判断结束

                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 1

                    .判断开始 (累加器位置 ＝ “子表达式”)
                        子表达式 [表达式累加器地址 ＋ 1] ＝ 右移 (计数4, 16)
                        子表达式 [表达式累加器地址 ＋ 2] ＝ 右移 (计数4, 8)
                        子表达式 [表达式累加器地址 ＋ 3] ＝ 计数4
                    .默认
                        主表达式 [表达式累加器地址 ＋ 1] ＝ 右移 (计数4, 16)
                        主表达式 [表达式累加器地址 ＋ 2] ＝ 右移 (计数4, 8)
                        主表达式 [表达式累加器地址 ＋ 3] ＝ 计数4
                    .判断结束

                    累加器内容状态 ＝ “ACC”

                .如果真结束


            .默认
                状态 ＝ “完成”
                累加器内容状态 ＝ “ACC”
            .判断结束


            .如果真 (状态 ＝ “完成”)

                子表达式 [赋值符位置] ＝ 32

                子表达式 [右操作数位置] ＝ 右移 (左操作数, 16)
                子表达式 [右操作数位置 ＋ 1] ＝ 右移 (左操作数, 8)
                子表达式 [右操作数位置 ＋ 2] ＝ 左操作数

                子表达式 [右操作数位置 ＋ 3] ＝ 赋值符 [1]

                子表达式 [右操作数位置 ＋ 4] ＝ 右移 (右操作数, 16)
                子表达式 [右操作数位置 ＋ 5] ＝ 右移 (右操作数, 8)
                子表达式 [右操作数位置 ＋ 6] ＝ 右操作数

                状态 ＝ 子表达式处理部件_运算符处理 (子表达式)

                .如果真 (状态 ＝ “完成”)

                    子表达式 ＝ 子表达式处理部件_子表达式
                    扫描指针 ＝ 1
                    状态 ＝ “继续”

                .如果真结束


            .如果真结束


        .判断结束



    .判断 (到文本 (到字节集 (子表达式 [扫描指针])) ＝ “=”)

        赋值符 ＝ 到字节集 (子表达式 [扫描指针])
        赋值符位置 ＝ 扫描指针

        扫描指针 ＝ 扫描指针 ＋ 1
        .判断循环首 (扫描指针 ≤ 取字节集长度 (子表达式) 且 子表达式 [扫描指针] ＝ 32)
            扫描指针 ＝ 扫描指针 ＋ 1
        .判断循环尾 ()

        右操作数 ＝ 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2]
        右操作数位置 ＝ 扫描指针

        扫描指针 ＝ 扫描指针 ＋ 3
        .判断循环首 (扫描指针 ≤ 取字节集长度 (子表达式) 且 子表达式 [扫描指针] ＝ 32)
            扫描指针 ＝ 扫描指针 ＋ 1
        .判断循环尾 ()

        .判断开始 (扫描指针 ≤ 取字节集长度 (子表达式))
            右扫空标志 ＝ 0
        .默认
            右扫空标志 ＝ 1
        .判断结束


        .判断开始 (右扫空标志 ＝ 0)
            左操作数 ＝ 右操作数
        .默认

            .判断开始 (累加器内容状态 ≠ “ACC” 且 右移 (左操作数, 16) ≠ #无符号ACC 且 右移 (左操作数, 16) ≠ #有符号ACC 且 右移 (右操作数, 16) ≠ #无符号ACC 且 右移 (右操作数, 16) ≠ #有符号ACC)

                状态 ＝ 二元式机器码生成 (0, #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, #ACC × 65536)
                .如果真 (状态 ＝ “完成”)

                    .判断开始 (累加器内容状态 ＝ “无符号ACC”)
                        计数4 ＝ #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                    .默认
                        计数4 ＝ #有符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                    .判断结束

                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 1

                    .判断开始 (累加器位置 ＝ “子表达式”)
                        子表达式 [表达式累加器地址 ＋ 1] ＝ 右移 (计数4, 16)
                        子表达式 [表达式累加器地址 ＋ 2] ＝ 右移 (计数4, 8)
                        子表达式 [表达式累加器地址 ＋ 3] ＝ 计数4
                    .默认
                        主表达式 [表达式累加器地址 ＋ 1] ＝ 右移 (计数4, 16)
                        主表达式 [表达式累加器地址 ＋ 2] ＝ 右移 (计数4, 8)
                        主表达式 [表达式累加器地址 ＋ 3] ＝ 计数4
                    .判断结束

                    累加器内容状态 ＝ “ACC”

                .如果真结束


            .默认
                状态 ＝ “完成”
                累加器内容状态 ＝ “ACC”
            .判断结束


            .如果真 (状态 ＝ “完成”)

                状态 ＝ “继续”

                .如果真 (右移 (左操作数, 16) ＝ #无符号char指针 或 右移 (左操作数, 16) ＝ #有符号char指针 或 右移 (左操作数, 16) ＝ #无符号int指针 或 右移 (左操作数, 16) ＝ #有符号int指针 或 右移 (左操作数, 16) ＝ #无符号长int指针 或 右移 (左操作数, 16) ＝ #有符号长int指针)

                    左操作数 ＝ #无符号int × 65536 ＋ 位与 (左操作数, 65535)

                .如果真结束


                .判断开始 ((右移 (右操作数, 16) ＝ #无符号char指针指向内容 或 右移 (右操作数, 16) ＝ #有符号char指针指向内容) 且 右移 (左操作数, 16) ≠ #无符号ACC 且 右移 (左操作数, 16) ≠ #有符号ACC)

                    状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, 右操作数)
                    .如果真 (状态 ＝ “完成”)
                        .判断开始 (右移 (右操作数, 16) ＝ #无符号char指针指向内容)
                            右操作数 ＝ #无符号ACC × 65536
                        .默认
                            右操作数 ＝ #有符号ACC × 65536
                        .判断结束
                        状态 ＝ “继续”
                    .如果真结束


                .判断 ((右移 (右操作数, 16) ＝ #无符号int指针指向内容 或 右移 (右操作数, 16) ＝ #有符号int指针指向内容) 且 右移 (左操作数, 16) ≠ #无符号int 且 右移 (左操作数, 16) ≠ #有符号int)

                    状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                    .如果真 (状态 ＝ “完成”)
                        .判断开始 (右移 (右操作数, 16) ＝ #无符号int指针指向内容)
                            右操作数 ＝ #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                        .默认
                            右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                        .判断结束
                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                        状态 ＝ “继续”
                    .如果真结束


                .判断 ((右移 (右操作数, 16) ＝ #无符号长int指针指向内容 或 右移 (右操作数, 16) ＝ #有符号长int指针指向内容) 且 右移 (左操作数, 16) ≠ #无符号长int 且 右移 (左操作数, 16) ≠ #有符号长int)

                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                    .如果真 (状态 ＝ “完成”)
                        .判断开始 (右移 (右操作数, 16) ＝ #无符号长int指针指向内容)
                            右操作数 ＝ #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                        .默认
                            右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                        .判断结束
                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                        状态 ＝ “继续”
                    .如果真结束


                .判断 (右移 (右操作数, 16) ＝ #无符号char指针 或 右移 (右操作数, 16) ＝ #有符号char指针 或 右移 (右操作数, 16) ＝ #无符号int指针 或 右移 (右操作数, 16) ＝ #有符号int指针 或 右移 (右操作数, 16) ＝ #无符号长int指针 或 右移 (右操作数, 16) ＝ #有符号长int指针)

                    右操作数 ＝ #无符号int × 65536 ＋ 位与 (右操作数, 65535)


                .默认

                .判断结束

                .如果真 (状态 ＝ “继续”)

                    .判断开始 ((右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char) 且 右移 (左操作数, 16) ≠ #ACC 且 右移 (左操作数, 16) ≠ #有符号ACC 且 右移 (左操作数, 16) ≠ #无符号ACC 且 右移 (左操作数, 16) ≠ #R1 且 右移 (左操作数, 16) ≠ #R2 且 右移 (左操作数, 16) ≠ #R3)

                        状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, 右操作数)
                        .如果真 (状态 ＝ “完成”)

                            .判断开始 (右移 (右操作数, 16) ＝ #无符号char)
                                右操作数 ＝ #无符号ACC × 65536
                            .默认
                                右操作数 ＝ #有符号ACC × 65536
                            .判断结束

                            .判断开始 (右移 (左操作数, 16) ＝ #无符号int指针指向内容 或 右移 (左操作数, 16) ＝ #有符号int指针指向内容)

                                状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                .如果真 (状态 ＝ “完成”)
                                    右操作数 ＝ #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                    状态 ＝ “继续”
                                .如果真结束


                            .判断 (右移 (左操作数, 16) ＝ #无符号长int指针指向内容 或 右移 (左操作数, 16) ＝ #有符号长int指针指向内容)

                                状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                .如果真 (状态 ＝ “完成”)
                                    右操作数 ＝ #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                    状态 ＝ “继续”
                                .如果真结束


                            .默认
                                状态 ＝ “继续”
                            .判断结束


                        .如果真结束



                    .判断 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int)

                        .判断开始 (右移 (左操作数, 16) ＝ #无符号char指针指向内容 或 右移 (左操作数, 16) ＝ #有符号char指针指向内容 或 右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char)

                            状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, 右操作数)
                            .如果真 (状态 ＝ “完成”)
                                右操作数 ＝ #ACC × 65536
                                状态 ＝ “继续”
                            .如果真结束


                        .判断 (右移 (左操作数, 16) ＝ #无符号长int指针指向内容 或 右移 (左操作数, 16) ＝ #有符号长int指针指向内容)

                            状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                            .如果真 (状态 ＝ “完成”)
                                右操作数 ＝ #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                状态 ＝ “继续”
                            .如果真结束


                        .默认

                        .判断结束



                    .判断 ((右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #无符号char指针指向内容 或 右移 (左操作数, 16) ＝ #有符号char指针指向内容 或 右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char))

                        状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, 右操作数)
                        .如果真 (状态 ＝ “完成”)
                            右操作数 ＝ #ACC × 65536
                            状态 ＝ “继续”
                        .如果真结束


                    .判断 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC 或 右移 (右操作数, 16) ＝ #ACC)

                        .判断开始 (右移 (左操作数, 16) ＝ #无符号int指针指向内容 或 右移 (左操作数, 16) ＝ #有符号int指针指向内容)

                            状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                            .如果真 (状态 ＝ “完成”)
                                右操作数 ＝ #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                状态 ＝ “继续”
                            .如果真结束


                        .判断 (右移 (左操作数, 16) ＝ #无符号长int指针指向内容 或 右移 (左操作数, 16) ＝ #有符号长int指针指向内容)

                            状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                            .如果真 (状态 ＝ “完成”)
                                右操作数 ＝ #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                状态 ＝ “继续”
                            .如果真结束


                        .默认

                        .判断结束


                    .判断 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数 或 右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组)

                        .判断开始 (右移 (左操作数, 16) ＝ #无符号char指针指向内容 或 右移 (左操作数, 16) ＝ #有符号char指针指向内容 或 右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char)

                            状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, 右操作数)
                            .如果真 (状态 ＝ “完成”)
                                右操作数 ＝ #ACC × 65536
                                状态 ＝ “继续”
                            .如果真结束


                        .默认

                        .判断结束


                    .默认

                    .判断结束


                    .如果真 (状态 ＝ “继续”)

                        状态 ＝ 二元式机器码生成 (0, 左操作数, “=”, 右操作数)

                        .如果真 (状态 ＝ “完成”)

                            子表达式 [赋值符位置] ＝ 32
                            子表达式 [右操作数位置] ＝ 32
                            子表达式 [右操作数位置 ＋ 1] ＝ 32
                            子表达式 [右操作数位置 ＋ 2] ＝ 32

                            扫描指针 ＝ 1

                            状态 ＝ “继续”

                        .如果真结束



                    .如果真结束



                .如果真结束



            .如果真结束



        .判断结束



    .默认
        状态 ＝ “子表达式处理_双目运算符处理_出现未识别的符号...+_+~”
    .判断结束




.循环判断尾 (状态 ＝ “继续”)


子表达式处理部件_子表达式 ＝ 子表达式


返回 (状态)




.子程序 子表达式处理部件_运算符处理, 文本型
.参数 子表达式, 字节集
.局部变量 状态, 文本型
.局部变量 右扫空标志, 整数型
.局部变量 扫描指针, 整数型
.局部变量 操作数计数, 整数型
.局部变量 左操作数前操作数, 整数型
.局部变量 左操作数前操作数位置, 整数型
.局部变量 左操作数前运算符, 字节集
.局部变量 左操作数前运算符位置, 整数型
.局部变量 左操作数, 整数型
.局部变量 左操作数位置, 整数型
.局部变量 运算符, 字节集
.局部变量 运算符位置, 整数型
.局部变量 右操作数, 整数型
.局部变量 右操作数位置, 整数型
.局部变量 优先级计数, 整数型
.局部变量 计数4, 整数型



扫描指针 ＝ 1
操作数计数 ＝ 0
优先级计数 ＝ 0

状态 ＝ “继续”
.循环判断首 ()

    .判断开始 (扫描指针 ＞ 取字节集长度 (子表达式))

        .判断开始 (优先级计数 ＝ 7)

            状态 ＝ “完成”

        .默认
            优先级计数 ＝ 优先级计数 ＋ 1
            扫描指针 ＝ 1
            操作数计数 ＝ 0
        .判断结束


    .判断 (到文本 (到字节集 (子表达式 [扫描指针])) ＝ “ ”)

        扫描指针 ＝ 扫描指针 ＋ 1

    .判断 (子表达式 [扫描指针] ≥ 128 且 子表达式 [扫描指针] ≤ 255)

        左操作数前操作数 ＝ 左操作数
        左操作数前操作数位置 ＝ 左操作数位置
        左操作数 ＝ 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2]
        左操作数位置 ＝ 扫描指针
        操作数计数 ＝ 操作数计数 ＋ 1
        扫描指针 ＝ 扫描指针 ＋ 3

    .判断 (到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 2])) ＝ “<<=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 2])) ＝ “>>=”)

        左操作数前运算符 ＝ 到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 2])
        左操作数前运算符位置 ＝ 扫描指针
        扫描指针 ＝ 扫描指针 ＋ 3

    .判断 (到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “+=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “-=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “*=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “/=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “%=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “&=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “|=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “^=”)

        左操作数前运算符 ＝ 到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])
        左操作数前运算符位置 ＝ 扫描指针
        扫描指针 ＝ 扫描指针 ＋ 2

    .判断 (到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “>=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “<=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “==” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “!=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “<<” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “>>”)

        .判断开始 (优先级计数 ＝ 2 且 (到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “<<” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “>>”))

            运算符 ＝ 到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])
            运算符位置 ＝ 扫描指针

            扫描指针 ＝ 扫描指针 ＋ 2
            .判断循环首 (扫描指针 ≤ 取字节集长度 (子表达式) 且 子表达式 [扫描指针] ＝ 32)
                扫描指针 ＝ 扫描指针 ＋ 1
            .判断循环尾 ()

            右操作数 ＝ 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2]
            右操作数位置 ＝ 扫描指针

            扫描指针 ＝ 扫描指针 ＋ 3
            .判断循环首 (扫描指针 ≤ 取字节集长度 (子表达式) 且 子表达式 [扫描指针] ＝ 32)
                扫描指针 ＝ 扫描指针 ＋ 1
            .判断循环尾 ()

            .判断开始 (扫描指针 ≤ 取字节集长度 (子表达式))
                右扫空标志 ＝ 0
            .默认
                右扫空标志 ＝ 1
            .判断结束


            .判断开始 (累加器内容状态 ≠ “ACC” 且 右移 (左操作数, 16) ≠ #无符号ACC 且 右移 (左操作数, 16) ≠ #有符号ACC 且 右移 (右操作数, 16) ≠ #无符号ACC 且 右移 (右操作数, 16) ≠ #有符号ACC)

                状态 ＝ 二元式机器码生成 (0, #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, #ACC × 65536)
                .如果真 (状态 ＝ “完成”)

                    .判断开始 (累加器内容状态 ＝ “无符号ACC”)
                        计数4 ＝ #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                    .默认
                        计数4 ＝ #有符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                    .判断结束

                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 1

                    .判断开始 (累加器位置 ＝ “子表达式”)
                        子表达式 [表达式累加器地址 ＋ 1] ＝ 右移 (计数4, 16)
                        子表达式 [表达式累加器地址 ＋ 2] ＝ 右移 (计数4, 8)
                        子表达式 [表达式累加器地址 ＋ 3] ＝ 计数4
                    .默认
                        主表达式 [表达式累加器地址 ＋ 1] ＝ 右移 (计数4, 16)
                        主表达式 [表达式累加器地址 ＋ 2] ＝ 右移 (计数4, 8)
                        主表达式 [表达式累加器地址 ＋ 3] ＝ 计数4
                    .判断结束

                    累加器内容状态 ＝ “ACC”

                .如果真结束


            .默认
                状态 ＝ “完成”
                累加器内容状态 ＝ “ACC”
            .判断结束


            .如果真 (状态 ＝ “完成”)

                状态 ＝ “继续”

                .判断开始 (右移 (左操作数, 16) ＝ #无符号char指针指向内容 或 右移 (左操作数, 16) ＝ #有符号char指针指向内容)

                    .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC)
                        状态 ＝ 二元式机器码生成 (0, #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                        .如果真 (状态 ＝ “完成”)
                            .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC)
                                右操作数 ＝ #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                            .默认
                                右操作数 ＝ #有符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                            .判断结束
                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 1
                        .如果真结束

                    .默认
                        状态 ＝ “完成”
                    .判断结束

                    .如果真 (状态 ＝ “完成”)
                        状态 ＝ 二元式机器码生成 (0, #无符号ACC × 65536, “=”, 左操作数)
                        .如果真 (状态 ＝ “完成”)
                            .判断开始 (右移 (左操作数, 16) ＝ #无符号char指针指向内容)
                                左操作数 ＝ #无符号ACC × 65536
                            .默认
                                左操作数 ＝ #有符号ACC × 65536
                            .判断结束

                            状态 ＝ “继续”
                        .如果真结束

                    .如果真结束


                .判断 (右移 (左操作数, 16) ＝ #无符号int指针指向内容 或 右移 (左操作数, 16) ＝ #有符号int指针指向内容)

                    .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC)
                        状态 ＝ 二元式机器码生成 (0, #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                        .如果真 (状态 ＝ “完成”)
                            .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC)
                                右操作数 ＝ #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                            .默认
                                右操作数 ＝ #有符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                            .判断结束
                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 1
                        .如果真结束

                    .默认
                        状态 ＝ “完成”
                    .判断结束

                    .如果真 (状态 ＝ “完成”)
                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                        .如果真 (状态 ＝ “完成”)
                            .判断开始 (右移 (左操作数, 16) ＝ #无符号int指针指向内容)
                                左操作数 ＝ #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                            .默认
                                左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                            .判断结束
                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                            状态 ＝ “继续”
                        .如果真结束

                    .如果真结束


                .判断 (右移 (左操作数, 16) ＝ #无符号长int指针指向内容 或 右移 (左操作数, 16) ＝ #有符号长int指针指向内容)

                    .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC)
                        状态 ＝ 二元式机器码生成 (0, #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                        .如果真 (状态 ＝ “完成”)
                            .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC)
                                右操作数 ＝ #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                            .默认
                                右操作数 ＝ #有符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                            .判断结束
                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 1
                        .如果真结束

                    .默认
                        状态 ＝ “完成”
                    .判断结束

                    .如果真 (状态 ＝ “完成”)
                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                        .如果真 (状态 ＝ “完成”)
                            .判断开始 (右移 (左操作数, 16) ＝ #无符号长int指针指向内容)
                                左操作数 ＝ #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                            .默认
                                左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                            .判断结束
                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                            状态 ＝ “继续”
                        .如果真结束

                    .如果真结束


                .默认

                .判断结束


                .如果真 (状态 ＝ “继续”)

                    .判断开始 (右移 (右操作数, 16) ＝ #无符号char指针指向内容 或 右移 (右操作数, 16) ＝ #有符号char指针指向内容)

                        .判断开始 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC)
                            状态 ＝ 二元式机器码生成 (0, #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                            .如果真 (状态 ＝ “完成”)
                                .判断开始 (右移 (左操作数, 16) ＝ #无符号ACC)
                                    左操作数 ＝ #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                .默认
                                    左操作数 ＝ #有符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                .判断结束
                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 1
                            .如果真结束

                        .默认
                            状态 ＝ “完成”
                        .判断结束

                        .如果真 (状态 ＝ “完成”)
                            状态 ＝ 二元式机器码生成 (0, #无符号ACC × 65536, “=”, 右操作数)
                            .如果真 (状态 ＝ “完成”)
                                .判断开始 (右移 (右操作数, 16) ＝ #无符号char指针指向内容)
                                    右操作数 ＝ #无符号ACC × 65536
                                .默认
                                    右操作数 ＝ #有符号ACC × 65536
                                .判断结束

                                状态 ＝ “继续”
                            .如果真结束

                        .如果真结束


                    .判断 (右移 (右操作数, 16) ＝ #无符号int指针指向内容 或 右移 (右操作数, 16) ＝ #有符号int指针指向内容)

                        .判断开始 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC)
                            状态 ＝ 二元式机器码生成 (0, #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                            .如果真 (状态 ＝ “完成”)
                                .判断开始 (右移 (左操作数, 16) ＝ #无符号ACC)
                                    左操作数 ＝ #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                .默认
                                    左操作数 ＝ #有符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                .判断结束
                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 1
                            .如果真结束

                        .默认
                            状态 ＝ “完成”
                        .判断结束

                        .如果真 (状态 ＝ “完成”)
                            状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                            .如果真 (状态 ＝ “完成”)
                                .判断开始 (右移 (右操作数, 16) ＝ #无符号int指针指向内容)
                                    右操作数 ＝ #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                .默认
                                    右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                .判断结束
                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                状态 ＝ “继续”
                            .如果真结束

                        .如果真结束


                    .判断 (右移 (右操作数, 16) ＝ #无符号长int指针指向内容 或 右移 (右操作数, 16) ＝ #有符号长int指针指向内容)

                        .判断开始 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC)
                            状态 ＝ 二元式机器码生成 (0, #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                            .如果真 (状态 ＝ “完成”)
                                .判断开始 (右移 (左操作数, 16) ＝ #无符号ACC)
                                    左操作数 ＝ #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                .默认
                                    左操作数 ＝ #有符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                .判断结束
                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 1
                            .如果真结束

                        .默认
                            状态 ＝ “完成”
                        .判断结束

                        .如果真 (状态 ＝ “完成”)
                            状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                            .如果真 (状态 ＝ “完成”)
                                .判断开始 (右移 (右操作数, 16) ＝ #无符号长int指针指向内容)
                                    右操作数 ＝ #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                .默认
                                    右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                .判断结束
                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                状态 ＝ “继续”
                            .如果真结束

                        .如果真结束


                    .默认

                    .判断结束



                    .如果真 (状态 ＝ “继续”)

                        .判断开始 (右移 (左操作数, 16) ＝ #常量 且 右移 (右操作数, 16) ≠ #常量 且 右移 (右操作数, 16) ≠ #立即数)

                            .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC)
                                状态 ＝ 二元式机器码生成 (0, #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                .如果真 (状态 ＝ “完成”)
                                    .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC)
                                        右操作数 ＝ #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                    .默认
                                        右操作数 ＝ #有符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                    .判断结束
                                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 1
                                .如果真结束

                            .默认
                                状态 ＝ “完成”
                            .判断结束

                            .如果真 (状态 ＝ “完成”)

                                .判断开始 (常量值 [位与 (左操作数, 65535) ＋ 1] ≤ 127 且 常量值 [位与 (左操作数, 65535) ＋ 1] ≥ -128)

                                    状态 ＝ 二元式机器码生成 (0, #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        左操作数 ＝ #有符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 1
                                        状态 ＝ “继续”

                                    .如果真结束


                                .判断 (常量值 [位与 (左操作数, 65535) ＋ 1] ≤ 32767 且 常量值 [位与 (左操作数, 65535) ＋ 1] ≥ -32768)

                                    状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        状态 ＝ “继续”
                                    .如果真结束


                                .默认
                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束

                                .判断结束



                            .如果真结束


                        .判断 (右移 (左操作数, 16) ＝ #立即数 且 右移 (右操作数, 16) ≠ #常量 且 右移 (右操作数, 16) ≠ #立即数)

                            .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC)
                                状态 ＝ 二元式机器码生成 (0, #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                .如果真 (状态 ＝ “完成”)
                                    .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC)
                                        右操作数 ＝ #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                    .默认
                                        右操作数 ＝ #有符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                    .判断结束
                                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 1
                                .如果真结束

                            .默认
                                状态 ＝ “完成”
                            .判断结束

                            .如果真 (状态 ＝ “完成”)

                                .判断开始 (立即数值 [位与 (左操作数, 65535) ＋ 1] ≤ 127 且 立即数值 [位与 (左操作数, 65535) ＋ 1] ≥ -128)

                                    状态 ＝ 二元式机器码生成 (0, #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        左操作数 ＝ #有符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 1
                                        状态 ＝ “继续”

                                    .如果真结束


                                .判断 (立即数值 [位与 (左操作数, 65535) ＋ 1] ≤ 32767 且 立即数值 [位与 (左操作数, 65535) ＋ 1] ≥ -32768)

                                    状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        状态 ＝ “继续”
                                    .如果真结束


                                .默认
                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束

                                .判断结束



                            .如果真结束


                        .默认

                        .判断结束



                        .如果真 (状态 ＝ “继续”)

                            .判断开始 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC)

                                状态 ＝ 二元式机器码生成 (0, #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                .如果真 (状态 ＝ “完成”)
                                    .判断开始 (右移 (左操作数, 16) ＝ #无符号ACC)
                                        左操作数 ＝ #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                    .默认
                                        左操作数 ＝ #有符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                    .判断结束
                                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 1
                                    状态 ＝ “继续”
                                .如果真结束


                            .默认

                            .判断结束


                            .如果真 (状态 ＝ “继续”)

                                .判断开始 ((右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int 或 右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC 或 右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数))

                                    .判断开始 (右扫空标志 ＝ 1 且 操作数计数 ≥ 2 且 (右移 (左操作数前操作数, 16) ＝ #无符号char 或 右移 (左操作数前操作数, 16) ＝ #有符号char) 且 到文本 (左操作数前运算符) ＝ “=”)

                                        状态 ＝ 二元式机器码生成 (左操作数前操作数, 左操作数, 到文本 (运算符), 右操作数)
                                        .如果真 (状态 ＝ “完成”)

                                            子表达式 [左操作数前运算符位置] ＝ 32
                                            子表达式 [左操作数位置] ＝ 32
                                            子表达式 [左操作数位置 ＋ 1] ＝ 32
                                            子表达式 [左操作数位置 ＋ 2] ＝ 32
                                            子表达式 [运算符位置] ＝ 32
                                            子表达式 [运算符位置 ＋ 1] ＝ 32
                                            子表达式 [右操作数位置] ＝ 32
                                            子表达式 [右操作数位置 ＋ 1] ＝ 32
                                            子表达式 [右操作数位置 ＋ 2] ＝ 32

                                            扫描指针 ＝ 1
                                            操作数计数 ＝ 0
                                            状态 ＝ “继续”


                                        .如果真结束


                                    .默认
                                        状态 ＝ 二元式机器码生成 (#无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535), 左操作数, 到文本 (运算符), 右操作数)
                                        .如果真 (状态 ＝ “完成”)

                                            子表达式 [左操作数位置] ＝ 右移 (左操作数, 16)
                                            子表达式 [左操作数位置 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                            子表达式 [左操作数位置 ＋ 2] ＝ 动态RAM分配地址

                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 1

                                            子表达式 [运算符位置] ＝ 32
                                            子表达式 [运算符位置 ＋ 1] ＝ 32
                                            子表达式 [右操作数位置] ＝ 32
                                            子表达式 [右操作数位置 ＋ 1] ＝ 32
                                            子表达式 [右操作数位置 ＋ 2] ＝ 32

                                            扫描指针 ＝ 1
                                            操作数计数 ＝ 0
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .判断结束



                                .判断 ((右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int 或 右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC 或 右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数))

                                    .判断开始 (右扫空标志 ＝ 1 且 操作数计数 ≥ 2 且 (右移 (左操作数前操作数, 16) ＝ #无符号int 或 右移 (左操作数前操作数, 16) ＝ #有符号int) 且 到文本 (左操作数前运算符) ＝ “=”)

                                        状态 ＝ 二元式机器码生成 (左操作数前操作数, 左操作数, 到文本 (运算符), 右操作数)
                                        .如果真 (状态 ＝ “完成”)

                                            子表达式 [左操作数前运算符位置] ＝ 32
                                            子表达式 [左操作数位置] ＝ 32
                                            子表达式 [左操作数位置 ＋ 1] ＝ 32
                                            子表达式 [左操作数位置 ＋ 2] ＝ 32
                                            子表达式 [运算符位置] ＝ 32
                                            子表达式 [运算符位置 ＋ 1] ＝ 32
                                            子表达式 [右操作数位置] ＝ 32
                                            子表达式 [右操作数位置 ＋ 1] ＝ 32
                                            子表达式 [右操作数位置 ＋ 2] ＝ 32

                                            扫描指针 ＝ 1
                                            操作数计数 ＝ 0
                                            状态 ＝ “继续”


                                        .如果真结束


                                    .默认
                                        状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), 左操作数, 到文本 (运算符), 右操作数)
                                        .如果真 (状态 ＝ “完成”)

                                            子表达式 [左操作数位置] ＝ 右移 (左操作数, 16)
                                            子表达式 [左操作数位置 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                            子表达式 [左操作数位置 ＋ 2] ＝ 动态RAM分配地址

                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2

                                            子表达式 [运算符位置] ＝ 32
                                            子表达式 [运算符位置 ＋ 1] ＝ 32
                                            子表达式 [右操作数位置] ＝ 32
                                            子表达式 [右操作数位置 ＋ 1] ＝ 32
                                            子表达式 [右操作数位置 ＋ 2] ＝ 32

                                            扫描指针 ＝ 1
                                            操作数计数 ＝ 0
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .判断结束



                                .判断 ((右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int 或 右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC 或 右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数))

                                    .判断开始 (右扫空标志 ＝ 1 且 操作数计数 ≥ 2 且 (右移 (左操作数前操作数, 16) ＝ #无符号长int 或 右移 (左操作数前操作数, 16) ＝ #有符号长int) 且 到文本 (左操作数前运算符) ＝ “=”)

                                        状态 ＝ 二元式机器码生成 (左操作数前操作数, 左操作数, 到文本 (运算符), 右操作数)
                                        .如果真 (状态 ＝ “完成”)

                                            子表达式 [左操作数前运算符位置] ＝ 32
                                            子表达式 [左操作数位置] ＝ 32
                                            子表达式 [左操作数位置 ＋ 1] ＝ 32
                                            子表达式 [左操作数位置 ＋ 2] ＝ 32
                                            子表达式 [运算符位置] ＝ 32
                                            子表达式 [运算符位置 ＋ 1] ＝ 32
                                            子表达式 [右操作数位置] ＝ 32
                                            子表达式 [右操作数位置 ＋ 1] ＝ 32
                                            子表达式 [右操作数位置 ＋ 2] ＝ 32

                                            扫描指针 ＝ 1
                                            操作数计数 ＝ 0
                                            状态 ＝ “继续”

                                        .如果真结束


                                    .默认
                                        状态 ＝ 二元式机器码生成 (#无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), 左操作数, 到文本 (运算符), 右操作数)
                                        .如果真 (状态 ＝ “完成”)

                                            子表达式 [左操作数位置] ＝ 右移 (左操作数, 16)
                                            子表达式 [左操作数位置 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                            子表达式 [左操作数位置 ＋ 2] ＝ 动态RAM分配地址

                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4

                                            子表达式 [运算符位置] ＝ 32
                                            子表达式 [运算符位置 ＋ 1] ＝ 32
                                            子表达式 [右操作数位置] ＝ 32
                                            子表达式 [右操作数位置 ＋ 1] ＝ 32
                                            子表达式 [右操作数位置 ＋ 2] ＝ 32

                                            扫描指针 ＝ 1
                                            操作数计数 ＝ 0
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .判断结束




                                .判断 ((右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数))

                                    子表达式 [左操作数位置] ＝ #立即数

                                    .判断开始 (右移 (左操作数, 16) ＝ #常量)
                                        左操作数 ＝ 常量值 [位与 (左操作数, 65535) ＋ 1]
                                    .默认
                                        左操作数 ＝ 立即数值 [位与 (左操作数, 65535) ＋ 1]
                                    .判断结束

                                    .判断开始 (右移 (右操作数, 16) ＝ #常量)
                                        右操作数 ＝ 常量值 [位与 (右操作数, 65535) ＋ 1]
                                    .默认
                                        右操作数 ＝ 立即数值 [位与 (右操作数, 65535) ＋ 1]
                                    .判断结束

                                    .判断开始 (到文本 (运算符) ＝ “<<”)
                                        立即数值 [立即数总数 ＋ 1] ＝ 左移 (左操作数, 右操作数)
                                    .默认
                                        立即数值 [立即数总数 ＋ 1] ＝ 右移 (左操作数, 右操作数)
                                    .判断结束

                                    子表达式 [左操作数位置 ＋ 1] ＝ 右移 (立即数总数, 8)
                                    子表达式 [左操作数位置 ＋ 2] ＝ 立即数总数

                                    立即数总数 ＝ 立即数总数 ＋ 1

                                    子表达式 [运算符位置] ＝ 32
                                    子表达式 [运算符位置 ＋ 1] ＝ 32
                                    子表达式 [右操作数位置] ＝ 32
                                    子表达式 [右操作数位置 ＋ 1] ＝ 32
                                    子表达式 [右操作数位置 ＋ 2] ＝ 32

                                    扫描指针 ＝ 1
                                    操作数计数 ＝ 0
                                    状态 ＝ “继续”



                                .默认
                                    状态 ＝ “子表达式处理_双目运算符处理_参加>><<运算的操作数错误~!- =”
                                .判断结束


                            .如果真结束



                        .如果真结束



                    .如果真结束



                .如果真结束



            .如果真结束


        .判断 (优先级计数 ＝ 3 且 (到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “>=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “<=”) 或 优先级计数 ＝ 4 且 (到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “==” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “!=”))

            运算符 ＝ 到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])
            运算符位置 ＝ 扫描指针

            扫描指针 ＝ 扫描指针 ＋ 2
            .判断循环首 (扫描指针 ≤ 取字节集长度 (子表达式) 且 子表达式 [扫描指针] ＝ 32)
                扫描指针 ＝ 扫描指针 ＋ 1
            .判断循环尾 ()

            右操作数 ＝ 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2]
            右操作数位置 ＝ 扫描指针

            扫描指针 ＝ 扫描指针 ＋ 3
            .判断循环首 (扫描指针 ≤ 取字节集长度 (子表达式) 且 子表达式 [扫描指针] ＝ 32)
                扫描指针 ＝ 扫描指针 ＋ 1
            .判断循环尾 ()

            .判断开始 (扫描指针 ≤ 取字节集长度 (子表达式))
                右扫空标志 ＝ 0
            .默认
                右扫空标志 ＝ 1
            .判断结束


            .判断开始 (累加器内容状态 ≠ “ACC” 且 右移 (左操作数, 16) ≠ #无符号ACC 且 右移 (左操作数, 16) ≠ #有符号ACC 且 右移 (右操作数, 16) ≠ #无符号ACC 且 右移 (右操作数, 16) ≠ #有符号ACC)

                状态 ＝ 二元式机器码生成 (0, #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, #ACC × 65536)
                .如果真 (状态 ＝ “完成”)

                    .判断开始 (累加器内容状态 ＝ “无符号ACC”)
                        计数4 ＝ #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                    .默认
                        计数4 ＝ #有符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                    .判断结束

                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 1

                    .判断开始 (累加器位置 ＝ “子表达式”)
                        子表达式 [表达式累加器地址 ＋ 1] ＝ 右移 (计数4, 16)
                        子表达式 [表达式累加器地址 ＋ 2] ＝ 右移 (计数4, 8)
                        子表达式 [表达式累加器地址 ＋ 3] ＝ 计数4
                    .默认
                        主表达式 [表达式累加器地址 ＋ 1] ＝ 右移 (计数4, 16)
                        主表达式 [表达式累加器地址 ＋ 2] ＝ 右移 (计数4, 8)
                        主表达式 [表达式累加器地址 ＋ 3] ＝ 计数4
                    .判断结束

                    累加器内容状态 ＝ “ACC”

                .如果真结束


            .默认
                状态 ＝ “完成”
                累加器内容状态 ＝ “ACC”
            .判断结束


            .如果真 (状态 ＝ “完成”)

                状态 ＝ “继续”

                .如果真 (右移 (左操作数, 16) ＝ #无符号char指针 或 右移 (左操作数, 16) ＝ #有符号char指针 或 右移 (左操作数, 16) ＝ #无符号int指针 或 右移 (左操作数, 16) ＝ #有符号int指针 或 右移 (左操作数, 16) ＝ #无符号长int指针 或 右移 (左操作数, 16) ＝ #有符号长int指针)
                    左操作数 ＝ #无符号int × 65536 ＋ 位与 (左操作数, 65535)
                .如果真结束

                .如果真 (右移 (右操作数, 16) ＝ #无符号char指针 或 右移 (右操作数, 16) ＝ #有符号char指针 或 右移 (右操作数, 16) ＝ #无符号int指针 或 右移 (右操作数, 16) ＝ #有符号int指针 或 右移 (右操作数, 16) ＝ #无符号长int指针 或 右移 (右操作数, 16) ＝ #有符号长int指针)
                    右操作数 ＝ #无符号int × 65536 ＋ 位与 (右操作数, 65535)
                .如果真结束


                .判断开始 (右移 (左操作数, 16) ＝ #无符号char指针指向内容 或 右移 (左操作数, 16) ＝ #有符号char指针指向内容)

                    .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC)
                        状态 ＝ 二元式机器码生成 (0, #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                        .如果真 (状态 ＝ “完成”)
                            .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC)
                                右操作数 ＝ #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                            .默认
                                右操作数 ＝ #有符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                            .判断结束
                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 1
                        .如果真结束

                    .默认
                        状态 ＝ “完成”
                    .判断结束

                    .如果真 (状态 ＝ “完成”)
                        状态 ＝ 二元式机器码生成 (0, #无符号ACC × 65536, “=”, 左操作数)
                        .如果真 (状态 ＝ “完成”)
                            .判断开始 (右移 (左操作数, 16) ＝ #无符号char指针指向内容)
                                左操作数 ＝ #无符号ACC × 65536
                            .默认
                                左操作数 ＝ #有符号ACC × 65536
                            .判断结束

                            状态 ＝ “继续”
                        .如果真结束

                    .如果真结束


                .判断 (右移 (左操作数, 16) ＝ #无符号int指针指向内容 或 右移 (左操作数, 16) ＝ #有符号int指针指向内容)

                    .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC)
                        状态 ＝ 二元式机器码生成 (0, #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                        .如果真 (状态 ＝ “完成”)
                            右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                        .如果真结束

                    .默认
                        状态 ＝ “完成”
                    .判断结束

                    .如果真 (状态 ＝ “完成”)
                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                        .如果真 (状态 ＝ “完成”)
                            .判断开始 (右移 (左操作数, 16) ＝ #无符号int指针指向内容)
                                左操作数 ＝ #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                            .默认
                                左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                            .判断结束
                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                            状态 ＝ “继续”
                        .如果真结束

                    .如果真结束


                .判断 (右移 (左操作数, 16) ＝ #无符号长int指针指向内容 或 右移 (左操作数, 16) ＝ #有符号长int指针指向内容)

                    .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC)
                        状态 ＝ 二元式机器码生成 (0, #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                        .如果真 (状态 ＝ “完成”)
                            右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                        .如果真结束

                    .默认
                        状态 ＝ “完成”
                    .判断结束

                    .如果真 (状态 ＝ “完成”)
                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                        .如果真 (状态 ＝ “完成”)
                            .判断开始 (右移 (左操作数, 16) ＝ #无符号长int指针指向内容)
                                左操作数 ＝ #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                            .默认
                                左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                            .判断结束
                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                            状态 ＝ “继续”
                        .如果真结束

                    .如果真结束


                .默认

                .判断结束


                .如果真 (状态 ＝ “继续”)

                    .判断开始 (右移 (右操作数, 16) ＝ #无符号char指针指向内容 或 右移 (右操作数, 16) ＝ #有符号char指针指向内容)

                        .判断开始 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC)
                            状态 ＝ 二元式机器码生成 (0, #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                            .如果真 (状态 ＝ “完成”)
                                .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC)
                                    左操作数 ＝ #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                .默认
                                    左操作数 ＝ #有符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                .判断结束
                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 1
                            .如果真结束

                        .默认
                            状态 ＝ “完成”
                        .判断结束

                        .如果真 (状态 ＝ “完成”)
                            状态 ＝ 二元式机器码生成 (0, #无符号ACC × 65536, “=”, 右操作数)
                            .如果真 (状态 ＝ “完成”)
                                .判断开始 (右移 (右操作数, 16) ＝ #无符号char指针指向内容)
                                    右操作数 ＝ #无符号ACC × 65536
                                .默认
                                    右操作数 ＝ #有符号ACC × 65536
                                .判断结束

                                状态 ＝ “继续”
                            .如果真结束

                        .如果真结束


                    .判断 (右移 (右操作数, 16) ＝ #无符号int指针指向内容 或 右移 (右操作数, 16) ＝ #有符号int指针指向内容)

                        .判断开始 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC)
                            状态 ＝ 二元式机器码生成 (0, #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                            .如果真 (状态 ＝ “完成”)
                                左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                            .如果真结束

                        .默认
                            状态 ＝ “完成”
                        .判断结束

                        .如果真 (状态 ＝ “完成”)
                            状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                            .如果真 (状态 ＝ “完成”)
                                .判断开始 (右移 (右操作数, 16) ＝ #无符号int指针指向内容)
                                    右操作数 ＝ #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                .默认
                                    右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                .判断结束
                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                状态 ＝ “继续”
                            .如果真结束

                        .如果真结束


                    .判断 (右移 (右操作数, 16) ＝ #无符号长int指针指向内容 或 右移 (右操作数, 16) ＝ #有符号长int指针指向内容)

                        .判断开始 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC)
                            状态 ＝ 二元式机器码生成 (0, #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                            .如果真 (状态 ＝ “完成”)
                                左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                            .如果真结束

                        .默认
                            状态 ＝ “完成”
                        .判断结束

                        .如果真 (状态 ＝ “完成”)
                            状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                            .如果真 (状态 ＝ “完成”)
                                .判断开始 (右移 (右操作数, 16) ＝ #无符号长int指针指向内容)
                                    右操作数 ＝ #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                .默认
                                    右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                .判断结束
                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                状态 ＝ “继续”
                            .如果真结束

                        .如果真结束


                    .默认

                    .判断结束



                    .如果真 (状态 ＝ “继续”)

                        .判断开始 (右移 (左操作数, 16) ＝ #常量)

                            .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC)

                                .判断开始 (右移 (常量值 [位与 (左操作数, 65535) ＋ 1], 8) ＝ 0)



                                .判断 (右移 (常量值 [位与 (左操作数, 65535) ＋ 1], 16) ＝ 0)

                                    状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                    .如果真结束


                                .默认
                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                    .如果真结束

                                .判断结束



                            .判断 (右移 (右操作数, 16) ＝ #有符号ACC)

                                .判断开始 (常量值 [位与 (左操作数, 65535) ＋ 1] ≤ 127 且 常量值 [位与 (左操作数, 65535) ＋ 1] ≥ -128)



                                .判断 (常量值 [位与 (左操作数, 65535) ＋ 1] ≤ 32767 且 常量值 [位与 (左操作数, 65535) ＋ 1] ≥ -32768)

                                    状态 ＝ 二元式机器码生成 (0, #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                    .如果真结束


                                .默认
                                    状态 ＝ 二元式机器码生成 (0, #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4

                                    .如果真结束


                                .判断结束



                            .判断 (右移 (右操作数, 16) ＝ #无符号char)

                                .判断开始 (右移 (常量值 [位与 (左操作数, 65535) ＋ 1], 8) ＝ 0)

                                .判断 (右移 (常量值 [位与 (左操作数, 65535) ＋ 1], 16) ＝ 0)
                                    状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        状态 ＝ “继续”
                                    .如果真结束

                                .默认
                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束

                                .判断结束



                            .判断 (右移 (右操作数, 16) ＝ #有符号char)

                                .判断开始 (常量值 [位与 (左操作数, 65535) ＋ 1] ≤ 127 且 常量值 [位与 (左操作数, 65535) ＋ 1] ≥ -128)

                                .判断 (常量值 [位与 (左操作数, 65535) ＋ 1] ≤ 32767 且 常量值 [位与 (左操作数, 65535) ＋ 1] ≥ -32768)
                                    状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        状态 ＝ “继续”
                                    .如果真结束

                                .默认
                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束

                                .判断结束



                            .判断 (右移 (右操作数, 16) ＝ #无符号int)

                                .判断开始 (右移 (常量值 [位与 (左操作数, 65535) ＋ 1], 16) ＝ 0)

                                .默认
                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束

                                .判断结束



                            .判断 (右移 (右操作数, 16) ＝ #有符号int)

                                .判断开始 (常量值 [位与 (左操作数, 65535) ＋ 1] ≤ 32767 且 常量值 [位与 (左操作数, 65535) ＋ 1] ≥ -32768)

                                .默认
                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束

                                .判断结束



                            .默认

                            .判断结束





                        .判断 (右移 (左操作数, 16) ＝ #立即数)

                            .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC)

                                .判断开始 (右移 (立即数值 [位与 (左操作数, 65535) ＋ 1], 8) ＝ 0)




                                .判断 (右移 (立即数值 [位与 (左操作数, 65535) ＋ 1], 16) ＝ 0)

                                    状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                    .如果真结束


                                .默认
                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                    .如果真结束

                                .判断结束



                            .判断 (右移 (右操作数, 16) ＝ #有符号ACC)

                                .判断开始 (立即数值 [位与 (左操作数, 65535) ＋ 1] ≤ 127 且 立即数值 [位与 (左操作数, 65535) ＋ 1] ≥ -128)



                                .判断 (立即数值 [位与 (左操作数, 65535) ＋ 1] ≤ 32767 且 立即数值 [位与 (左操作数, 65535) ＋ 1] ≥ -32768)

                                    状态 ＝ 二元式机器码生成 (0, #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                    .如果真结束


                                .默认
                                    状态 ＝ 二元式机器码生成 (0, #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                    .如果真结束


                                .判断结束



                            .判断 (右移 (右操作数, 16) ＝ #无符号char)

                                .判断开始 (右移 (立即数值 [位与 (左操作数, 65535) ＋ 1], 8) ＝ 0)


                                .判断 (右移 (立即数值 [位与 (左操作数, 65535) ＋ 1], 16) ＝ 0)
                                    状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        状态 ＝ “继续”
                                    .如果真结束

                                .默认
                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束

                                .判断结束



                            .判断 (右移 (右操作数, 16) ＝ #有符号char)

                                .判断开始 (立即数值 [位与 (左操作数, 65535) ＋ 1] ≤ 127 且 立即数值 [位与 (左操作数, 65535) ＋ 1] ≥ -128)

                                .判断 (立即数值 [位与 (左操作数, 65535) ＋ 1] ≤ 32767 且 立即数值 [位与 (左操作数, 65535) ＋ 1] ≥ -32768)
                                    状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        状态 ＝ “继续”
                                    .如果真结束

                                .默认
                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束

                                .判断结束



                            .判断 (右移 (右操作数, 16) ＝ #无符号int)

                                .判断开始 (右移 (立即数值 [位与 (左操作数, 65535) ＋ 1], 16) ＝ 0)

                                .默认
                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束

                                .判断结束



                            .判断 (右移 (右操作数, 16) ＝ #有符号int)

                                .判断开始 (立即数值 [位与 (左操作数, 65535) ＋ 1] ≤ 32767 且 立即数值 [位与 (左操作数, 65535) ＋ 1] ≥ -32768)

                                .默认
                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束

                                .判断结束



                            .默认

                            .判断结束

                        .默认

                        .判断结束




                        .如果真 (状态 ＝ “继续”)

                            .判断开始 (右移 (右操作数, 16) ＝ #常量)

                                .判断开始 (右移 (左操作数, 16) ＝ #无符号ACC)

                                    .判断开始 (右移 (常量值 [位与 (右操作数, 65535) ＋ 1], 8) ＝ 0)



                                    .判断 (右移 (常量值 [位与 (右操作数, 65535) ＋ 1], 16) ＝ 0)

                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        .如果真结束


                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        .如果真结束

                                    .判断结束



                                .判断 (右移 (左操作数, 16) ＝ #有符号ACC)

                                    .判断开始 (常量值 [位与 (右操作数, 65535) ＋ 1] ≤ 127 且 常量值 [位与 (右操作数, 65535) ＋ 1] ≥ -128)



                                    .判断 (常量值 [位与 (右操作数, 65535) ＋ 1] ≤ 32767 且 常量值 [位与 (右操作数, 65535) ＋ 1] ≥ -32768)

                                        状态 ＝ 二元式机器码生成 (0, #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        .如果真结束


                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        .如果真结束


                                    .判断结束



                                .判断 (右移 (左操作数, 16) ＝ #无符号char)

                                    .判断开始 (右移 (常量值 [位与 (右操作数, 65535) ＋ 1], 8) ＝ 0)

                                    .判断 (右移 (常量值 [位与 (右操作数, 65535) ＋ 1], 16) ＝ 0)
                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .判断结束



                                .判断 (右移 (左操作数, 16) ＝ #有符号char)

                                    .判断开始 (常量值 [位与 (右操作数, 65535) ＋ 1] ≤ 127 且 常量值 [位与 (右操作数, 65535) ＋ 1] ≥ -128)

                                    .判断 (常量值 [位与 (右操作数, 65535) ＋ 1] ≤ 32767 且 常量值 [位与 (右操作数, 65535) ＋ 1] ≥ -32768)
                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .判断结束



                                .判断 (右移 (左操作数, 16) ＝ #无符号int)

                                    .判断开始 (右移 (常量值 [位与 (右操作数, 65535) ＋ 1], 16) ＝ 0)

                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .判断结束



                                .判断 (右移 (左操作数, 16) ＝ #有符号int)

                                    .判断开始 (常量值 [位与 (右操作数, 65535) ＋ 1] ≤ 32767 且 常量值 [位与 (右操作数, 65535) ＋ 1] ≥ -32768)

                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .判断结束



                                .默认

                                .判断结束




                            .判断 (右移 (右操作数, 16) ＝ #立即数)

                                .判断开始 (右移 (左操作数, 16) ＝ #无符号ACC)

                                    .判断开始 (右移 (立即数值 [位与 (右操作数, 65535) ＋ 1], 8) ＝ 0)



                                    .判断 (右移 (立即数值 [位与 (右操作数, 65535) ＋ 1], 16) ＝ 0)

                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        .如果真结束


                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        .如果真结束

                                    .判断结束



                                .判断 (右移 (左操作数, 16) ＝ #有符号ACC)

                                    .判断开始 (立即数值 [位与 (右操作数, 65535) ＋ 1] ≤ 127 且 立即数值 [位与 (右操作数, 65535) ＋ 1] ≥ -128)


                                    .判断 (立即数值 [位与 (右操作数, 65535) ＋ 1] ≤ 32767 且 立即数值 [位与 (右操作数, 65535) ＋ 1] ≥ -32768)

                                        状态 ＝ 二元式机器码生成 (0, #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        .如果真结束


                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        .如果真结束


                                    .判断结束



                                .判断 (右移 (左操作数, 16) ＝ #无符号char)

                                    .判断开始 (右移 (立即数值 [位与 (右操作数, 65535) ＋ 1], 8) ＝ 0)

                                    .判断 (右移 (立即数值 [位与 (右操作数, 65535) ＋ 1], 16) ＝ 0)
                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .判断结束



                                .判断 (右移 (左操作数, 16) ＝ #有符号char)

                                    .判断开始 (立即数值 [位与 (右操作数, 65535) ＋ 1] ≤ 127 且 立即数值 [位与 (右操作数, 65535) ＋ 1] ≥ -128)

                                    .判断 (立即数值 [位与 (右操作数, 65535) ＋ 1] ≤ 32767 且 立即数值 [位与 (右操作数, 65535) ＋ 1] ≥ -32768)
                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .判断结束



                                .判断 (右移 (左操作数, 16) ＝ #无符号int)

                                    .判断开始 (右移 (立即数值 [位与 (右操作数, 65535) ＋ 1], 16) ＝ 0)

                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .判断结束



                                .判断 (右移 (左操作数, 16) ＝ #有符号int)

                                    .判断开始 (立即数值 [位与 (右操作数, 65535) ＋ 1] ≤ 32767 且 立即数值 [位与 (右操作数, 65535) ＋ 1] ≥ -32768)

                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .判断结束



                                .默认

                                .判断结束

                            .默认

                            .判断结束



                            .如果真 (状态 ＝ “继续”)

                                .判断开始 ((右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int) 且 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC))

                                    状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        状态 ＝ “继续”
                                    .如果真结束


                                .判断 ((右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char))

                                    A等于_RAM (右操作数)
                                    .判断开始 (右移 (右操作数, 16) ＝ #无符号char)
                                        右操作数 ＝ #无符号ACC × 65536
                                    .默认
                                        右操作数 ＝ #有符号ACC × 65536
                                    .判断结束

                                    状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        状态 ＝ “继续”
                                    .如果真结束



                                .判断 ((右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC))

                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束


                                .判断 ((右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char))

                                    A等于_RAM (右操作数)
                                    .判断开始 (右移 (右操作数, 16) ＝ #无符号char)
                                        右操作数 ＝ #无符号ACC × 65536
                                    .默认
                                        右操作数 ＝ #有符号ACC × 65536
                                    .判断结束

                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束



                                .判断 ((右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int))

                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束



                                .判断 ((右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int) 且 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC))

                                    状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        状态 ＝ “继续”
                                    .如果真结束


                                .判断 ((右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int) 且 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char))

                                    A等于_RAM (左操作数)
                                    .判断开始 (右移 (左操作数, 16) ＝ #无符号char)
                                        左操作数 ＝ #无符号ACC × 65536
                                    .默认
                                        左操作数 ＝ #有符号ACC × 65536
                                    .判断结束

                                    状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        状态 ＝ “继续”
                                    .如果真结束



                                .判断 ((右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC))

                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束


                                .判断 ((右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char))

                                    A等于_RAM (左操作数)
                                    .判断开始 (右移 (左操作数, 16) ＝ #无符号char)
                                        左操作数 ＝ #无符号ACC × 65536
                                    .默认
                                        左操作数 ＝ #有符号ACC × 65536
                                    .判断结束

                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束



                                .判断 ((右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int))

                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束



                                .默认

                                .判断结束




                                .如果真 (状态 ＝ “继续”)

                                    .判断开始 ((右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char) 且 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC) 或 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char) 或 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char) 或 (右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int) 且 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int) 或 (右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 或 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC 或 右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char 或 右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int 或 右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数 或 右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组) 或 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC 或 右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数 或 右移 (左操作数, 16) ＝ #无符号char数组 或 右移 (左操作数, 16) ＝ #有符号char数组 或 右移 (左操作数, 16) ＝ #无符号int数组 或 右移 (左操作数, 16) ＝ #有符号int数组 或 右移 (左操作数, 16) ＝ #无符号长int数组 或 右移 (左操作数, 16) ＝ #有符号长int数组) 或 (右移 (左操作数, 16) ＝ #C 或 右移 (左操作数, 16) ＝ #Z 或 右移 (左操作数, 16) ＝ #A) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 (右移 (右操作数, 16) ＝ #C 或 右移 (右操作数, 16) ＝ #Z 或 右移 (右操作数, 16) ＝ #A) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数))
                                        状态 ＝ 二元式机器码生成 (#待修改跳转地址 × 65536, 左操作数, 到文本 (运算符), 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            .判断开始 (右扫空标志 ＝ 1 且 操作数计数 ＝ 1)
                                                子表达式 [左操作数位置] ＝ #待修改跳转地址

                                                子表达式 [运算符位置] ＝ 32
                                                子表达式 [运算符位置 ＋ 1] ＝ 32
                                                子表达式 [右操作数位置] ＝ 32
                                                子表达式 [右操作数位置 ＋ 1] ＝ 32
                                                子表达式 [右操作数位置 ＋ 2] ＝ 32

                                                扫描指针 ＝ 1
                                                操作数计数 ＝ 0
                                                状态 ＝ “继续”

                                            .默认
                                                状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, #待修改跳转地址 × 65536)
                                                .如果真 (状态 ＝ “完成”)
                                                    子表达式 [左操作数位置] ＝ #有符号ACC

                                                    累加器内容状态 ＝ “有符号ACC”
                                                    累加器位置 ＝ “子表达式”
                                                    表达式累加器地址 ＝ 左操作数位置 － 1

                                                    子表达式 [运算符位置] ＝ 32
                                                    子表达式 [运算符位置 ＋ 1] ＝ 32
                                                    子表达式 [右操作数位置] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 2] ＝ 32

                                                    扫描指针 ＝ 1
                                                    操作数计数 ＝ 0
                                                    状态 ＝ “继续”

                                                .如果真结束

                                            .判断结束

                                        .如果真结束



                                    .判断 ((右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数))

                                        子表达式 [左操作数位置] ＝ #立即数

                                        .判断开始 (右移 (左操作数, 16) ＝ #常量)
                                            左操作数 ＝ 常量值 [位与 (左操作数, 65535) ＋ 1]
                                        .默认
                                            左操作数 ＝ 立即数值 [位与 (左操作数, 65535) ＋ 1]
                                        .判断结束

                                        .判断开始 (右移 (右操作数, 16) ＝ #常量)
                                            右操作数 ＝ 常量值 [位与 (右操作数, 65535) ＋ 1]
                                        .默认
                                            右操作数 ＝ 立即数值 [位与 (右操作数, 65535) ＋ 1]
                                        .判断结束

                                        .判断开始 (到文本 (运算符) ＝ “>=”)
                                            .判断开始 (左操作数 ≥ 右操作数)
                                                立即数值 [立即数总数 ＋ 1] ＝ 1
                                            .默认
                                                立即数值 [立即数总数 ＋ 1] ＝ 0
                                            .判断结束

                                        .判断 (到文本 (运算符) ＝ “<=”)
                                            .判断开始 (左操作数 ≤ 右操作数)
                                                立即数值 [立即数总数 ＋ 1] ＝ 1
                                            .默认
                                                立即数值 [立即数总数 ＋ 1] ＝ 0
                                            .判断结束

                                        .判断 (到文本 (运算符) ＝ “==”)
                                            .判断开始 (左操作数 ＝ 右操作数)
                                                立即数值 [立即数总数 ＋ 1] ＝ 1
                                            .默认
                                                立即数值 [立即数总数 ＋ 1] ＝ 0
                                            .判断结束

                                        .判断 (到文本 (运算符) ＝ “!=”)
                                            .判断开始 (左操作数 ≠ 右操作数)
                                                立即数值 [立即数总数 ＋ 1] ＝ 1
                                            .默认
                                                立即数值 [立即数总数 ＋ 1] ＝ 0
                                            .判断结束

                                        .默认

                                        .判断结束

                                        子表达式 [左操作数位置 ＋ 1] ＝ 右移 (立即数总数, 8)
                                        子表达式 [左操作数位置 ＋ 2] ＝ 立即数总数

                                        立即数总数 ＝ 立即数总数 ＋ 1

                                        子表达式 [运算符位置] ＝ 32
                                        子表达式 [运算符位置 ＋ 1] ＝ 32
                                        子表达式 [右操作数位置] ＝ 32
                                        子表达式 [右操作数位置 ＋ 1] ＝ 32
                                        子表达式 [右操作数位置 ＋ 2] ＝ 32

                                        扫描指针 ＝ 1
                                        操作数计数 ＝ 0
                                        状态 ＝ “继续”


                                    .默认
                                        状态 ＝ “子表达式处理_双目运算符处理_参加>=,<=,==,!=运算的操作数错误~!- =”
                                    .判断结束


                                .如果真结束



                            .如果真结束



                        .如果真结束



                    .如果真结束



                .如果真结束



            .如果真结束



        .默认
            左操作数前运算符 ＝ 到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])
            左操作数前运算符位置 ＝ 扫描指针
            扫描指针 ＝ 扫描指针 ＋ 2
        .判断结束


    .判断 (到文本 (到字节集 (子表达式 [扫描指针])) ＝ “+” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “-” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “*” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “/” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “%” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “&” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “|” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “^” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “>” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “<”)

        .判断开始 (优先级计数 ＝ 0 且 (到文本 (到字节集 (子表达式 [扫描指针])) ＝ “*” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “/” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “%”))

            运算符 ＝ 到字节集 (子表达式 [扫描指针])
            运算符位置 ＝ 扫描指针

            扫描指针 ＝ 扫描指针 ＋ 1
            .判断循环首 (扫描指针 ≤ 取字节集长度 (子表达式) 且 子表达式 [扫描指针] ＝ 32)
                扫描指针 ＝ 扫描指针 ＋ 1
            .判断循环尾 ()

            右操作数 ＝ 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2]
            右操作数位置 ＝ 扫描指针

            扫描指针 ＝ 扫描指针 ＋ 3
            .判断循环首 (扫描指针 ≤ 取字节集长度 (子表达式) 且 子表达式 [扫描指针] ＝ 32)
                扫描指针 ＝ 扫描指针 ＋ 1
            .判断循环尾 ()

            .判断开始 (扫描指针 ≤ 取字节集长度 (子表达式))
                右扫空标志 ＝ 0
            .默认
                右扫空标志 ＝ 1
            .判断结束


            .判断开始 (累加器内容状态 ≠ “ACC” 且 右移 (左操作数, 16) ≠ #无符号ACC 且 右移 (左操作数, 16) ≠ #有符号ACC 且 右移 (右操作数, 16) ≠ #无符号ACC 且 右移 (右操作数, 16) ≠ #有符号ACC)

                状态 ＝ 二元式机器码生成 (0, #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, #ACC × 65536)
                .如果真 (状态 ＝ “完成”)

                    .判断开始 (累加器内容状态 ＝ “无符号ACC”)
                        计数4 ＝ #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                    .默认
                        计数4 ＝ #有符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                    .判断结束

                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 1

                    .判断开始 (累加器位置 ＝ “子表达式”)
                        子表达式 [表达式累加器地址 ＋ 1] ＝ 右移 (计数4, 16)
                        子表达式 [表达式累加器地址 ＋ 2] ＝ 右移 (计数4, 8)
                        子表达式 [表达式累加器地址 ＋ 3] ＝ 计数4
                    .默认
                        主表达式 [表达式累加器地址 ＋ 1] ＝ 右移 (计数4, 16)
                        主表达式 [表达式累加器地址 ＋ 2] ＝ 右移 (计数4, 8)
                        主表达式 [表达式累加器地址 ＋ 3] ＝ 计数4
                    .判断结束

                    累加器内容状态 ＝ “ACC”

                .如果真结束


            .默认
                状态 ＝ “完成”
                累加器内容状态 ＝ “ACC”
            .判断结束


            .如果真 (状态 ＝ “完成”)

                状态 ＝ “继续”

                .判断开始 (右移 (左操作数, 16) ＝ #无符号char指针指向内容 或 右移 (左操作数, 16) ＝ #有符号char指针指向内容)

                    .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC)
                        状态 ＝ 二元式机器码生成 (0, #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                        .如果真 (状态 ＝ “完成”)
                            .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC)
                                右操作数 ＝ #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                            .默认
                                右操作数 ＝ #有符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                            .判断结束
                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 1
                        .如果真结束

                    .默认
                        状态 ＝ “完成”
                    .判断结束

                    .如果真 (状态 ＝ “完成”)
                        状态 ＝ 二元式机器码生成 (0, #无符号ACC × 65536, “=”, 左操作数)
                        .如果真 (状态 ＝ “完成”)
                            .判断开始 (右移 (左操作数, 16) ＝ #无符号char指针指向内容)
                                左操作数 ＝ #无符号ACC × 65536
                            .默认
                                左操作数 ＝ #有符号ACC × 65536
                            .判断结束

                            状态 ＝ “继续”
                        .如果真结束

                    .如果真结束


                .判断 (右移 (左操作数, 16) ＝ #无符号int指针指向内容 或 右移 (左操作数, 16) ＝ #有符号int指针指向内容)

                    .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC)
                        状态 ＝ 二元式机器码生成 (0, #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                        .如果真 (状态 ＝ “完成”)
                            右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                        .如果真结束

                    .默认
                        状态 ＝ “完成”
                    .判断结束

                    .如果真 (状态 ＝ “完成”)
                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                        .如果真 (状态 ＝ “完成”)
                            .判断开始 (右移 (左操作数, 16) ＝ #无符号int指针指向内容)
                                左操作数 ＝ #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                            .默认
                                左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                            .判断结束
                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                            状态 ＝ “继续”
                        .如果真结束

                    .如果真结束


                .判断 (右移 (左操作数, 16) ＝ #无符号长int指针指向内容 或 右移 (左操作数, 16) ＝ #有符号长int指针指向内容)

                    .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC)
                        状态 ＝ 二元式机器码生成 (0, #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                        .如果真 (状态 ＝ “完成”)
                            右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                        .如果真结束

                    .默认
                        状态 ＝ “完成”
                    .判断结束

                    .如果真 (状态 ＝ “完成”)
                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                        .如果真 (状态 ＝ “完成”)
                            .判断开始 (右移 (左操作数, 16) ＝ #无符号长int指针指向内容)
                                左操作数 ＝ #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                            .默认
                                左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                            .判断结束
                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                            状态 ＝ “继续”
                        .如果真结束

                    .如果真结束


                .默认

                .判断结束


                .如果真 (状态 ＝ “继续”)

                    .判断开始 (右移 (右操作数, 16) ＝ #无符号char指针指向内容 或 右移 (右操作数, 16) ＝ #有符号char指针指向内容)

                        .判断开始 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC)
                            状态 ＝ 二元式机器码生成 (0, #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                            .如果真 (状态 ＝ “完成”)
                                .判断开始 (右移 (左操作数, 16) ＝ #无符号ACC)
                                    左操作数 ＝ #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                .默认
                                    左操作数 ＝ #有符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                .判断结束
                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 1
                            .如果真结束

                        .默认
                            状态 ＝ “完成”
                        .判断结束

                        .如果真 (状态 ＝ “完成”)
                            状态 ＝ 二元式机器码生成 (0, #无符号ACC × 65536, “=”, 右操作数)
                            .如果真 (状态 ＝ “完成”)
                                .判断开始 (右移 (右操作数, 16) ＝ #无符号char指针指向内容)
                                    右操作数 ＝ #无符号ACC × 65536
                                .默认
                                    右操作数 ＝ #有符号ACC × 65536
                                .判断结束

                                状态 ＝ “继续”
                            .如果真结束

                        .如果真结束


                    .判断 (右移 (右操作数, 16) ＝ #无符号int指针指向内容 或 右移 (右操作数, 16) ＝ #有符号int指针指向内容)

                        .判断开始 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC)
                            状态 ＝ 二元式机器码生成 (0, #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                            .如果真 (状态 ＝ “完成”)
                                左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                            .如果真结束

                        .默认
                            状态 ＝ “完成”
                        .判断结束

                        .如果真 (状态 ＝ “完成”)
                            状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                            .如果真 (状态 ＝ “完成”)
                                .判断开始 (右移 (右操作数, 16) ＝ #无符号int指针指向内容)
                                    右操作数 ＝ #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                .默认
                                    右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                .判断结束
                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                状态 ＝ “继续”
                            .如果真结束

                        .如果真结束


                    .判断 (右移 (右操作数, 16) ＝ #无符号长int指针指向内容 或 右移 (右操作数, 16) ＝ #有符号长int指针指向内容)

                        .判断开始 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC)
                            状态 ＝ 二元式机器码生成 (0, #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                            .如果真 (状态 ＝ “完成”)
                                左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                            .如果真结束

                        .默认
                            状态 ＝ “完成”
                        .判断结束

                        .如果真 (状态 ＝ “完成”)
                            状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                            .如果真 (状态 ＝ “完成”)
                                .判断开始 (右移 (右操作数, 16) ＝ #无符号长int指针指向内容)
                                    右操作数 ＝ #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                .默认
                                    右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                .判断结束
                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                状态 ＝ “继续”
                            .如果真结束

                        .如果真结束


                    .默认

                    .判断结束



                    .如果真 (状态 ＝ “继续”)

                        .判断开始 (右移 (左操作数, 16) ＝ #常量)

                            .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC)

                                .判断开始 (右移 (常量值 [位与 (左操作数, 65535) ＋ 1], 8) ＝ 0)



                                .判断 (右移 (常量值 [位与 (左操作数, 65535) ＋ 1], 16) ＝ 0)

                                    状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                    .如果真结束


                                .默认
                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                    .如果真结束

                                .判断结束



                            .判断 (右移 (右操作数, 16) ＝ #有符号ACC)

                                .判断开始 (常量值 [位与 (左操作数, 65535) ＋ 1] ≤ 127 且 常量值 [位与 (左操作数, 65535) ＋ 1] ≥ -128)



                                .判断 (常量值 [位与 (左操作数, 65535) ＋ 1] ≤ 32767 且 常量值 [位与 (左操作数, 65535) ＋ 1] ≥ -32768)

                                    状态 ＝ 二元式机器码生成 (0, #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                    .如果真结束


                                .默认
                                    状态 ＝ 二元式机器码生成 (0, #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4

                                    .如果真结束


                                .判断结束



                            .判断 (右移 (右操作数, 16) ＝ #无符号char)

                                .判断开始 (右移 (常量值 [位与 (左操作数, 65535) ＋ 1], 8) ＝ 0)

                                .判断 (右移 (常量值 [位与 (左操作数, 65535) ＋ 1], 16) ＝ 0)
                                    状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        状态 ＝ “继续”
                                    .如果真结束

                                .默认
                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束

                                .判断结束



                            .判断 (右移 (右操作数, 16) ＝ #有符号char)

                                .判断开始 (常量值 [位与 (左操作数, 65535) ＋ 1] ≤ 127 且 常量值 [位与 (左操作数, 65535) ＋ 1] ≥ -128)

                                .判断 (常量值 [位与 (左操作数, 65535) ＋ 1] ≤ 32767 且 常量值 [位与 (左操作数, 65535) ＋ 1] ≥ -32768)
                                    状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        状态 ＝ “继续”
                                    .如果真结束

                                .默认
                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束

                                .判断结束



                            .判断 (右移 (右操作数, 16) ＝ #无符号int)

                                .判断开始 (右移 (常量值 [位与 (左操作数, 65535) ＋ 1], 16) ＝ 0)

                                .默认
                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束

                                .判断结束



                            .判断 (右移 (右操作数, 16) ＝ #有符号int)

                                .判断开始 (常量值 [位与 (左操作数, 65535) ＋ 1] ≤ 32767 且 常量值 [位与 (左操作数, 65535) ＋ 1] ≥ -32768)

                                .默认
                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束

                                .判断结束



                            .默认

                            .判断结束





                        .判断 (右移 (左操作数, 16) ＝ #立即数)

                            .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC)

                                .判断开始 (右移 (立即数值 [位与 (左操作数, 65535) ＋ 1], 8) ＝ 0)




                                .判断 (右移 (立即数值 [位与 (左操作数, 65535) ＋ 1], 16) ＝ 0)

                                    状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                    .如果真结束


                                .默认
                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                    .如果真结束

                                .判断结束



                            .判断 (右移 (右操作数, 16) ＝ #有符号ACC)

                                .判断开始 (立即数值 [位与 (左操作数, 65535) ＋ 1] ≤ 127 且 立即数值 [位与 (左操作数, 65535) ＋ 1] ≥ -128)



                                .判断 (立即数值 [位与 (左操作数, 65535) ＋ 1] ≤ 32767 且 立即数值 [位与 (左操作数, 65535) ＋ 1] ≥ -32768)

                                    状态 ＝ 二元式机器码生成 (0, #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                    .如果真结束


                                .默认
                                    状态 ＝ 二元式机器码生成 (0, #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                    .如果真结束


                                .判断结束



                            .判断 (右移 (右操作数, 16) ＝ #无符号char)

                                .判断开始 (右移 (立即数值 [位与 (左操作数, 65535) ＋ 1], 8) ＝ 0)


                                .判断 (右移 (立即数值 [位与 (左操作数, 65535) ＋ 1], 16) ＝ 0)
                                    状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        状态 ＝ “继续”
                                    .如果真结束

                                .默认
                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束

                                .判断结束



                            .判断 (右移 (右操作数, 16) ＝ #有符号char)

                                .判断开始 (立即数值 [位与 (左操作数, 65535) ＋ 1] ≤ 127 且 立即数值 [位与 (左操作数, 65535) ＋ 1] ≥ -128)

                                .判断 (立即数值 [位与 (左操作数, 65535) ＋ 1] ≤ 32767 且 立即数值 [位与 (左操作数, 65535) ＋ 1] ≥ -32768)
                                    状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        状态 ＝ “继续”
                                    .如果真结束

                                .默认
                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束

                                .判断结束



                            .判断 (右移 (右操作数, 16) ＝ #无符号int)

                                .判断开始 (右移 (立即数值 [位与 (左操作数, 65535) ＋ 1], 16) ＝ 0)

                                .默认
                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束

                                .判断结束



                            .判断 (右移 (右操作数, 16) ＝ #有符号int)

                                .判断开始 (立即数值 [位与 (左操作数, 65535) ＋ 1] ≤ 32767 且 立即数值 [位与 (左操作数, 65535) ＋ 1] ≥ -32768)

                                .默认
                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束

                                .判断结束



                            .默认

                            .判断结束

                        .默认

                        .判断结束



                        .如果真 (状态 ＝ “继续”)

                            .判断开始 (右移 (右操作数, 16) ＝ #常量)

                                .判断开始 (右移 (左操作数, 16) ＝ #无符号ACC)

                                    .判断开始 (右移 (常量值 [位与 (右操作数, 65535) ＋ 1], 8) ＝ 0)



                                    .判断 (右移 (常量值 [位与 (右操作数, 65535) ＋ 1], 16) ＝ 0)

                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        .如果真结束


                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        .如果真结束

                                    .判断结束



                                .判断 (右移 (左操作数, 16) ＝ #有符号ACC)

                                    .判断开始 (常量值 [位与 (右操作数, 65535) ＋ 1] ≤ 127 且 常量值 [位与 (右操作数, 65535) ＋ 1] ≥ -128)



                                    .判断 (常量值 [位与 (右操作数, 65535) ＋ 1] ≤ 32767 且 常量值 [位与 (右操作数, 65535) ＋ 1] ≥ -32768)

                                        状态 ＝ 二元式机器码生成 (0, #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        .如果真结束


                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        .如果真结束


                                    .判断结束



                                .判断 (右移 (左操作数, 16) ＝ #无符号char)

                                    .判断开始 (右移 (常量值 [位与 (右操作数, 65535) ＋ 1], 8) ＝ 0)

                                    .判断 (右移 (常量值 [位与 (右操作数, 65535) ＋ 1], 16) ＝ 0)
                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .判断结束



                                .判断 (右移 (左操作数, 16) ＝ #有符号char)

                                    .判断开始 (常量值 [位与 (右操作数, 65535) ＋ 1] ≤ 127 且 常量值 [位与 (右操作数, 65535) ＋ 1] ≥ -128)

                                    .判断 (常量值 [位与 (右操作数, 65535) ＋ 1] ≤ 32767 且 常量值 [位与 (右操作数, 65535) ＋ 1] ≥ -32768)
                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .判断结束



                                .判断 (右移 (左操作数, 16) ＝ #无符号int)

                                    .判断开始 (右移 (常量值 [位与 (右操作数, 65535) ＋ 1], 16) ＝ 0)

                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .判断结束



                                .判断 (右移 (左操作数, 16) ＝ #有符号int)

                                    .判断开始 (常量值 [位与 (右操作数, 65535) ＋ 1] ≤ 32767 且 常量值 [位与 (右操作数, 65535) ＋ 1] ≥ -32768)

                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .判断结束



                                .默认

                                .判断结束




                            .判断 (右移 (右操作数, 16) ＝ #立即数)

                                .判断开始 (右移 (左操作数, 16) ＝ #无符号ACC)

                                    .判断开始 (右移 (立即数值 [位与 (右操作数, 65535) ＋ 1], 8) ＝ 0)



                                    .判断 (右移 (立即数值 [位与 (右操作数, 65535) ＋ 1], 16) ＝ 0)

                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        .如果真结束


                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        .如果真结束

                                    .判断结束



                                .判断 (右移 (左操作数, 16) ＝ #有符号ACC)

                                    .判断开始 (立即数值 [位与 (右操作数, 65535) ＋ 1] ≤ 127 且 立即数值 [位与 (右操作数, 65535) ＋ 1] ≥ -128)


                                    .判断 (立即数值 [位与 (右操作数, 65535) ＋ 1] ≤ 32767 且 立即数值 [位与 (右操作数, 65535) ＋ 1] ≥ -32768)

                                        状态 ＝ 二元式机器码生成 (0, #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        .如果真结束


                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        .如果真结束


                                    .判断结束



                                .判断 (右移 (左操作数, 16) ＝ #无符号char)

                                    .判断开始 (右移 (立即数值 [位与 (右操作数, 65535) ＋ 1], 8) ＝ 0)

                                    .判断 (右移 (立即数值 [位与 (右操作数, 65535) ＋ 1], 16) ＝ 0)
                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .判断结束



                                .判断 (右移 (左操作数, 16) ＝ #有符号char)

                                    .判断开始 (立即数值 [位与 (右操作数, 65535) ＋ 1] ≤ 127 且 立即数值 [位与 (右操作数, 65535) ＋ 1] ≥ -128)

                                    .判断 (立即数值 [位与 (右操作数, 65535) ＋ 1] ≤ 32767 且 立即数值 [位与 (右操作数, 65535) ＋ 1] ≥ -32768)
                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .判断结束



                                .判断 (右移 (左操作数, 16) ＝ #无符号int)

                                    .判断开始 (右移 (立即数值 [位与 (右操作数, 65535) ＋ 1], 16) ＝ 0)

                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .判断结束



                                .判断 (右移 (左操作数, 16) ＝ #有符号int)

                                    .判断开始 (立即数值 [位与 (右操作数, 65535) ＋ 1] ≤ 32767 且 立即数值 [位与 (右操作数, 65535) ＋ 1] ≥ -32768)

                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .判断结束



                                .默认

                                .判断结束

                            .默认

                            .判断结束



                            .如果真 (状态 ＝ “继续”)

                                .判断开始 ((右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int) 且 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC))

                                    状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        状态 ＝ “继续”
                                    .如果真结束


                                .判断 ((右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char))

                                    A等于_RAM (右操作数)
                                    .判断开始 (右移 (右操作数, 16) ＝ #无符号char)
                                        右操作数 ＝ #无符号ACC × 65536
                                    .默认
                                        右操作数 ＝ #有符号ACC × 65536
                                    .判断结束

                                    状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        状态 ＝ “继续”
                                    .如果真结束



                                .判断 ((右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC))

                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束


                                .判断 ((右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char))

                                    A等于_RAM (右操作数)
                                    .判断开始 (右移 (右操作数, 16) ＝ #无符号char)
                                        右操作数 ＝ #无符号ACC × 65536
                                    .默认
                                        右操作数 ＝ #有符号ACC × 65536
                                    .判断结束

                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束



                                .判断 ((右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int))

                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束



                                .判断 ((右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int) 且 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC))

                                    状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        状态 ＝ “继续”
                                    .如果真结束


                                .判断 ((右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int) 且 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char))

                                    A等于_RAM (左操作数)
                                    .判断开始 (右移 (左操作数, 16) ＝ #无符号char)
                                        左操作数 ＝ #无符号ACC × 65536
                                    .默认
                                        左操作数 ＝ #有符号ACC × 65536
                                    .判断结束

                                    状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        状态 ＝ “继续”
                                    .如果真结束



                                .判断 ((右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC))

                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束


                                .判断 ((右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char))

                                    A等于_RAM (左操作数)
                                    .判断开始 (右移 (左操作数, 16) ＝ #无符号char)
                                        左操作数 ＝ #无符号ACC × 65536
                                    .默认
                                        左操作数 ＝ #有符号ACC × 65536
                                    .判断结束

                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束



                                .判断 ((右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int))

                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束




                                .默认

                                .判断结束




                                .如果真 (状态 ＝ “继续”)

                                    .判断开始 ((右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char) 或 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char) 且 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC) 或 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char) 或 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数) 或 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数))

                                        .判断开始 (右扫空标志 ＝ 1 且 操作数计数 ≥ 2 且 (右移 (左操作数前操作数, 16) ＝ #无符号char 或 右移 (左操作数前操作数, 16) ＝ #有符号char) 且 到文本 (左操作数前运算符) ＝ “=”)

                                            状态 ＝ 二元式机器码生成 (左操作数前操作数, 左操作数, 到文本 (运算符), 右操作数)
                                            .如果真 (状态 ＝ “完成”)

                                                子表达式 [左操作数前运算符位置] ＝ 32
                                                子表达式 [左操作数位置] ＝ 32
                                                子表达式 [左操作数位置 ＋ 1] ＝ 32
                                                子表达式 [左操作数位置 ＋ 2] ＝ 32
                                                子表达式 [运算符位置] ＝ 32
                                                子表达式 [右操作数位置] ＝ 32
                                                子表达式 [右操作数位置 ＋ 1] ＝ 32
                                                子表达式 [右操作数位置 ＋ 2] ＝ 32

                                                扫描指针 ＝ 1
                                                操作数计数 ＝ 0
                                                状态 ＝ “继续”
                                            .如果真结束




                                        .默认
                                            状态 ＝ 二元式机器码生成 (#ACC × 65536, 左操作数, 到文本 (运算符), 右操作数)
                                            .如果真 (状态 ＝ “完成”)

                                                .判断开始 (右移 (左操作数, 16) ≠ #常量 且 右移 (左操作数, 16) ≠ #立即数 且 右移 (右操作数, 16) ≠ #常量 且 右移 (右操作数, 16) ≠ #立即数)

                                                    .判断开始 ((右移 (左操作数, 16) ＝ #有符号char 或 右移 (左操作数, 16) ＝ #有符号ACC) 且 (右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #有符号ACC))
                                                        子表达式 [左操作数位置] ＝ #有符号ACC
                                                        累加器内容状态 ＝ “有符号ACC”
                                                    .默认
                                                        子表达式 [左操作数位置] ＝ #无符号ACC
                                                        累加器内容状态 ＝ “无符号ACC”
                                                    .判断结束

                                                .默认

                                                    .判断开始 (右移 (左操作数, 16) ＝ #有符号char 或 右移 (左操作数, 16) ＝ #有符号ACC 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #有符号ACC)
                                                        子表达式 [左操作数位置] ＝ #有符号ACC
                                                        累加器内容状态 ＝ “有符号ACC”
                                                    .默认
                                                        子表达式 [左操作数位置] ＝ #无符号ACC
                                                        累加器内容状态 ＝ “无符号ACC”
                                                    .判断结束

                                                .判断结束


                                                累加器位置 ＝ “子表达式”
                                                表达式累加器地址 ＝ 左操作数位置 － 1

                                                子表达式 [运算符位置] ＝ 32
                                                子表达式 [右操作数位置] ＝ 32
                                                子表达式 [右操作数位置 ＋ 1] ＝ 32
                                                子表达式 [右操作数位置 ＋ 2] ＝ 32

                                                扫描指针 ＝ 1
                                                操作数计数 ＝ 0
                                                状态 ＝ “继续”

                                            .如果真结束


                                        .判断结束





                                    .判断 ((右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int) 且 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int) 或 (右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数))

                                        .判断开始 (右扫空标志 ＝ 1 且 操作数计数 ≥ 2 且 (右移 (左操作数前操作数, 16) ＝ #无符号int 或 右移 (左操作数前操作数, 16) ＝ #有符号int) 且 到文本 (左操作数前运算符) ＝ “=”)

                                            状态 ＝ 二元式机器码生成 (左操作数前操作数, 左操作数, 到文本 (运算符), 右操作数)
                                            .如果真 (状态 ＝ “完成”)

                                                子表达式 [左操作数前运算符位置] ＝ 32
                                                子表达式 [左操作数位置] ＝ 32
                                                子表达式 [左操作数位置 ＋ 1] ＝ 32
                                                子表达式 [左操作数位置 ＋ 2] ＝ 32
                                                子表达式 [运算符位置] ＝ 32
                                                子表达式 [右操作数位置] ＝ 32
                                                子表达式 [右操作数位置 ＋ 1] ＝ 32
                                                子表达式 [右操作数位置 ＋ 2] ＝ 32

                                                扫描指针 ＝ 1
                                                操作数计数 ＝ 0
                                                状态 ＝ “继续”
                                            .如果真结束


                                        .默认
                                            状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), 左操作数, 到文本 (运算符), 右操作数)
                                            .如果真 (状态 ＝ “完成”)

                                                .判断开始 (右移 (左操作数, 16) ≠ #常量 且 右移 (左操作数, 16) ≠ #立即数 且 右移 (右操作数, 16) ≠ #常量 且 右移 (右操作数, 16) ≠ #立即数)

                                                    .判断开始 (右移 (左操作数, 16) ＝ #有符号int 且 右移 (右操作数, 16) ＝ #有符号int)
                                                        子表达式 [左操作数位置] ＝ #有符号int
                                                    .默认
                                                        子表达式 [左操作数位置] ＝ #无符号int
                                                    .判断结束

                                                .默认

                                                    .判断开始 (右移 (左操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #有符号int)
                                                        子表达式 [左操作数位置] ＝ #有符号int
                                                    .默认
                                                        子表达式 [左操作数位置] ＝ #无符号int
                                                    .判断结束

                                                .判断结束


                                                子表达式 [左操作数位置 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                                子表达式 [左操作数位置 ＋ 2] ＝ 动态RAM分配地址

                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2

                                                子表达式 [运算符位置] ＝ 32
                                                子表达式 [右操作数位置] ＝ 32
                                                子表达式 [右操作数位置 ＋ 1] ＝ 32
                                                子表达式 [右操作数位置 ＋ 2] ＝ 32

                                                扫描指针 ＝ 1
                                                操作数计数 ＝ 0
                                                状态 ＝ “继续”
                                            .如果真结束

                                        .判断结束



                                    .判断 ((右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 或 (右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 (右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数))

                                        .判断开始 (右扫空标志 ＝ 1 且 操作数计数 ≥ 2 且 (右移 (左操作数前操作数, 16) ＝ #无符号长int 或 右移 (左操作数前操作数, 16) ＝ #有符号长int) 且 到文本 (左操作数前运算符) ＝ “=”)

                                            状态 ＝ 二元式机器码生成 (左操作数前操作数, 左操作数, 到文本 (运算符), 右操作数)
                                            .如果真 (状态 ＝ “完成”)

                                                子表达式 [左操作数前运算符位置] ＝ 32
                                                子表达式 [左操作数位置] ＝ 32
                                                子表达式 [左操作数位置 ＋ 1] ＝ 32
                                                子表达式 [左操作数位置 ＋ 2] ＝ 32
                                                子表达式 [运算符位置] ＝ 32
                                                子表达式 [右操作数位置] ＝ 32
                                                子表达式 [右操作数位置 ＋ 1] ＝ 32
                                                子表达式 [右操作数位置 ＋ 2] ＝ 32

                                                扫描指针 ＝ 1
                                                操作数计数 ＝ 0
                                                状态 ＝ “继续”
                                            .如果真结束


                                        .默认
                                            状态 ＝ 二元式机器码生成 (#无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), 左操作数, 到文本 (运算符), 右操作数)
                                            .如果真 (状态 ＝ “完成”)

                                                .判断开始 (右移 (左操作数, 16) ≠ #常量 且 右移 (左操作数, 16) ≠ #立即数 且 右移 (右操作数, 16) ≠ #常量 且 右移 (右操作数, 16) ≠ #立即数)

                                                    .判断开始 (右移 (左操作数, 16) ＝ #有符号长int 且 右移 (右操作数, 16) ＝ #有符号长int)
                                                        子表达式 [左操作数位置] ＝ #有符号长int
                                                    .默认
                                                        子表达式 [左操作数位置] ＝ #无符号长int
                                                    .判断结束

                                                .默认

                                                    .判断开始 (右移 (左操作数, 16) ＝ #有符号长int 或 右移 (右操作数, 16) ＝ #有符号长int)
                                                        子表达式 [左操作数位置] ＝ #有符号长int
                                                    .默认
                                                        子表达式 [左操作数位置] ＝ #无符号长int
                                                    .判断结束

                                                .判断结束



                                                子表达式 [左操作数位置 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                                子表达式 [左操作数位置 ＋ 2] ＝ 动态RAM分配地址

                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4

                                                子表达式 [运算符位置] ＝ 32
                                                子表达式 [右操作数位置] ＝ 32
                                                子表达式 [右操作数位置 ＋ 1] ＝ 32
                                                子表达式 [右操作数位置 ＋ 2] ＝ 32

                                                扫描指针 ＝ 1
                                                操作数计数 ＝ 0
                                                状态 ＝ “继续”
                                            .如果真结束

                                        .判断结束






                                    .判断 ((右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数))

                                        子表达式 [左操作数位置] ＝ #立即数

                                        .判断开始 (右移 (左操作数, 16) ＝ #常量)
                                            左操作数 ＝ 常量值 [位与 (左操作数, 65535) ＋ 1]
                                        .默认
                                            左操作数 ＝ 立即数值 [位与 (左操作数, 65535) ＋ 1]
                                        .判断结束

                                        .判断开始 (右移 (右操作数, 16) ＝ #常量)
                                            右操作数 ＝ 常量值 [位与 (右操作数, 65535) ＋ 1]
                                        .默认
                                            右操作数 ＝ 立即数值 [位与 (右操作数, 65535) ＋ 1]
                                        .判断结束

                                        .判断开始 (到文本 (运算符) ＝ “*”)
                                            立即数值 [立即数总数 ＋ 1] ＝ 左操作数 × 右操作数
                                        .判断 (到文本 (运算符) ＝ “/”)
                                            立即数值 [立即数总数 ＋ 1] ＝ 左操作数 ÷ 右操作数
                                        .默认
                                            立即数值 [立即数总数 ＋ 1] ＝ 左操作数 ％ 右操作数
                                        .判断结束

                                        子表达式 [左操作数位置 ＋ 1] ＝ 右移 (立即数总数, 8)
                                        子表达式 [左操作数位置 ＋ 2] ＝ 立即数总数

                                        立即数总数 ＝ 立即数总数 ＋ 1

                                        子表达式 [运算符位置] ＝ 32
                                        子表达式 [右操作数位置] ＝ 32
                                        子表达式 [右操作数位置 ＋ 1] ＝ 32
                                        子表达式 [右操作数位置 ＋ 2] ＝ 32

                                        扫描指针 ＝ 1
                                        操作数计数 ＝ 0
                                        状态 ＝ “继续”



                                    .默认
                                        状态 ＝ “子表达式处理_双目运算符处理_参加*/%运算的操作数错误~!- =”
                                    .判断结束



                                .如果真结束



                            .如果真结束



                        .如果真结束



                    .如果真结束



                .如果真结束



            .如果真结束





        .判断 (优先级计数 ＝ 1 且 (到文本 (到字节集 (子表达式 [扫描指针])) ＝ “+” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “-”))

            运算符 ＝ 到字节集 (子表达式 [扫描指针])
            运算符位置 ＝ 扫描指针

            扫描指针 ＝ 扫描指针 ＋ 1
            .判断循环首 (扫描指针 ≤ 取字节集长度 (子表达式) 且 子表达式 [扫描指针] ＝ 32)
                扫描指针 ＝ 扫描指针 ＋ 1
            .判断循环尾 ()

            右操作数 ＝ 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2]
            右操作数位置 ＝ 扫描指针

            扫描指针 ＝ 扫描指针 ＋ 3
            .判断循环首 (扫描指针 ≤ 取字节集长度 (子表达式) 且 子表达式 [扫描指针] ＝ 32)
                扫描指针 ＝ 扫描指针 ＋ 1
            .判断循环尾 ()

            .判断开始 (扫描指针 ≤ 取字节集长度 (子表达式))
                右扫空标志 ＝ 0
            .默认
                右扫空标志 ＝ 1
            .判断结束


            .判断开始 (累加器内容状态 ≠ “ACC” 且 右移 (左操作数, 16) ≠ #无符号ACC 且 右移 (左操作数, 16) ≠ #有符号ACC 且 右移 (右操作数, 16) ≠ #无符号ACC 且 右移 (右操作数, 16) ≠ #有符号ACC)

                状态 ＝ 二元式机器码生成 (0, #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, #ACC × 65536)
                .如果真 (状态 ＝ “完成”)

                    .判断开始 (累加器内容状态 ＝ “无符号ACC”)
                        计数4 ＝ #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                    .默认
                        计数4 ＝ #有符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                    .判断结束

                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 1

                    .判断开始 (累加器位置 ＝ “子表达式”)
                        子表达式 [表达式累加器地址 ＋ 1] ＝ 右移 (计数4, 16)
                        子表达式 [表达式累加器地址 ＋ 2] ＝ 右移 (计数4, 8)
                        子表达式 [表达式累加器地址 ＋ 3] ＝ 计数4
                    .默认
                        主表达式 [表达式累加器地址 ＋ 1] ＝ 右移 (计数4, 16)
                        主表达式 [表达式累加器地址 ＋ 2] ＝ 右移 (计数4, 8)
                        主表达式 [表达式累加器地址 ＋ 3] ＝ 计数4
                    .判断结束

                    累加器内容状态 ＝ “ACC”

                .如果真结束


            .默认
                状态 ＝ “完成”
                累加器内容状态 ＝ “ACC”
            .判断结束


            .如果真 (状态 ＝ “完成”)

                状态 ＝ “继续”

                .判断开始 (右移 (左操作数, 16) ＝ #ACC 且 右移 (右操作数, 16) ＝ #R1)

                    .判断开始 (到文本 (运算符) ＝ “+”)
                        A等于A加R1 ()
                    .默认
                        A等于A减R1 ()
                    .判断结束

                    子表达式 [运算符位置] ＝ 32
                    子表达式 [右操作数位置] ＝ 32
                    子表达式 [右操作数位置 ＋ 1] ＝ 32
                    子表达式 [右操作数位置 ＋ 2] ＝ 32

                    扫描指针 ＝ 1
                    操作数计数 ＝ 0


                .判断 (右移 (左操作数, 16) ＝ #R1 且 右移 (右操作数, 16) ＝ #ACC 且 到文本 (运算符) ＝ “+”)

                    A等于A加R1 ()
                    子表达式 [左操作数位置] ＝ #ACC

                    子表达式 [运算符位置] ＝ 32
                    子表达式 [右操作数位置] ＝ 32
                    子表达式 [右操作数位置 ＋ 1] ＝ 32
                    子表达式 [右操作数位置 ＋ 2] ＝ 32

                    扫描指针 ＝ 1
                    操作数计数 ＝ 0


                .默认

                    .判断开始 (右移 (左操作数, 16) ＝ #无符号char指针指向内容 或 右移 (左操作数, 16) ＝ #有符号char指针指向内容)

                        .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC)
                            状态 ＝ 二元式机器码生成 (0, #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                            .如果真 (状态 ＝ “完成”)
                                .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC)
                                    右操作数 ＝ #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                .默认
                                    右操作数 ＝ #有符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                .判断结束
                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 1
                            .如果真结束

                        .默认
                            状态 ＝ “完成”
                        .判断结束

                        .如果真 (状态 ＝ “完成”)
                            状态 ＝ 二元式机器码生成 (0, #无符号ACC × 65536, “=”, 左操作数)
                            .如果真 (状态 ＝ “完成”)
                                .判断开始 (右移 (左操作数, 16) ＝ #无符号char指针指向内容)
                                    左操作数 ＝ #无符号ACC × 65536
                                .默认
                                    左操作数 ＝ #有符号ACC × 65536
                                .判断结束

                                状态 ＝ “继续”
                            .如果真结束

                        .如果真结束


                    .判断 (右移 (左操作数, 16) ＝ #无符号int指针指向内容 或 右移 (左操作数, 16) ＝ #有符号int指针指向内容)

                        .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC)
                            状态 ＝ 二元式机器码生成 (0, #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                            .如果真 (状态 ＝ “完成”)
                                右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                            .如果真结束

                        .默认
                            状态 ＝ “完成”
                        .判断结束

                        .如果真 (状态 ＝ “完成”)
                            状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                            .如果真 (状态 ＝ “完成”)
                                .判断开始 (右移 (左操作数, 16) ＝ #无符号int指针指向内容)
                                    左操作数 ＝ #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                .默认
                                    左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                .判断结束
                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                状态 ＝ “继续”
                            .如果真结束

                        .如果真结束


                    .判断 (右移 (左操作数, 16) ＝ #无符号长int指针指向内容 或 右移 (左操作数, 16) ＝ #有符号长int指针指向内容)

                        .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC)
                            状态 ＝ 二元式机器码生成 (0, #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                            .如果真 (状态 ＝ “完成”)
                                右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                            .如果真结束

                        .默认
                            状态 ＝ “完成”
                        .判断结束

                        .如果真 (状态 ＝ “完成”)
                            状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                            .如果真 (状态 ＝ “完成”)
                                .判断开始 (右移 (左操作数, 16) ＝ #无符号长int指针指向内容)
                                    左操作数 ＝ #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                .默认
                                    左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                .判断结束
                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                状态 ＝ “继续”
                            .如果真结束

                        .如果真结束


                    .默认

                    .判断结束


                    .如果真 (状态 ＝ “继续”)

                        .判断开始 (右移 (右操作数, 16) ＝ #无符号char指针指向内容 或 右移 (右操作数, 16) ＝ #有符号char指针指向内容)

                            .判断开始 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC)
                                状态 ＝ 二元式机器码生成 (0, #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                .如果真 (状态 ＝ “完成”)
                                    .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC)
                                        左操作数 ＝ #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                    .默认
                                        左操作数 ＝ #有符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                    .判断结束
                                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 1
                                .如果真结束

                            .默认
                                状态 ＝ “完成”
                            .判断结束

                            .如果真 (状态 ＝ “完成”)
                                状态 ＝ 二元式机器码生成 (0, #无符号ACC × 65536, “=”, 右操作数)
                                .如果真 (状态 ＝ “完成”)
                                    .判断开始 (右移 (右操作数, 16) ＝ #无符号char指针指向内容)
                                        右操作数 ＝ #无符号ACC × 65536
                                    .默认
                                        右操作数 ＝ #有符号ACC × 65536
                                    .判断结束

                                    状态 ＝ “继续”
                                .如果真结束

                            .如果真结束


                        .判断 (右移 (右操作数, 16) ＝ #无符号int指针指向内容 或 右移 (右操作数, 16) ＝ #有符号int指针指向内容)

                            .判断开始 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC)
                                状态 ＝ 二元式机器码生成 (0, #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                .如果真 (状态 ＝ “完成”)
                                    左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                .如果真结束

                            .默认
                                状态 ＝ “完成”
                            .判断结束

                            .如果真 (状态 ＝ “完成”)
                                状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                .如果真 (状态 ＝ “完成”)
                                    .判断开始 (右移 (右操作数, 16) ＝ #无符号int指针指向内容)
                                        右操作数 ＝ #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                    .默认
                                        右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                    .判断结束
                                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                    状态 ＝ “继续”
                                .如果真结束

                            .如果真结束


                        .判断 (右移 (右操作数, 16) ＝ #无符号长int指针指向内容 或 右移 (右操作数, 16) ＝ #有符号长int指针指向内容)

                            .判断开始 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC)
                                状态 ＝ 二元式机器码生成 (0, #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                .如果真 (状态 ＝ “完成”)
                                    左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                .如果真结束

                            .默认
                                状态 ＝ “完成”
                            .判断结束

                            .如果真 (状态 ＝ “完成”)
                                状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                .如果真 (状态 ＝ “完成”)
                                    .判断开始 (右移 (右操作数, 16) ＝ #无符号长int指针指向内容)
                                        右操作数 ＝ #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                    .默认
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                    .判断结束
                                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                    状态 ＝ “继续”
                                .如果真结束

                            .如果真结束


                        .默认

                        .判断结束



                        .如果真 (状态 ＝ “继续”)

                            .判断开始 (右移 (左操作数, 16) ＝ #常量)

                                .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC)

                                    .判断开始 (右移 (常量值 [位与 (左操作数, 65535) ＋ 1], 8) ＝ 0)



                                    .判断 (右移 (常量值 [位与 (左操作数, 65535) ＋ 1], 16) ＝ 0)

                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        .如果真结束


                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        .如果真结束

                                    .判断结束



                                .判断 (右移 (右操作数, 16) ＝ #有符号ACC)

                                    .判断开始 (常量值 [位与 (左操作数, 65535) ＋ 1] ≤ 127 且 常量值 [位与 (左操作数, 65535) ＋ 1] ≥ -128)



                                    .判断 (常量值 [位与 (左操作数, 65535) ＋ 1] ≤ 32767 且 常量值 [位与 (左操作数, 65535) ＋ 1] ≥ -32768)

                                        状态 ＝ 二元式机器码生成 (0, #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        .如果真结束


                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4

                                        .如果真结束


                                    .判断结束



                                .判断 (右移 (右操作数, 16) ＝ #无符号char)

                                    .判断开始 (右移 (常量值 [位与 (左操作数, 65535) ＋ 1], 8) ＝ 0)

                                    .判断 (右移 (常量值 [位与 (左操作数, 65535) ＋ 1], 16) ＝ 0)
                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .判断结束



                                .判断 (右移 (右操作数, 16) ＝ #有符号char)

                                    .判断开始 (常量值 [位与 (左操作数, 65535) ＋ 1] ≤ 127 且 常量值 [位与 (左操作数, 65535) ＋ 1] ≥ -128)

                                    .判断 (常量值 [位与 (左操作数, 65535) ＋ 1] ≤ 32767 且 常量值 [位与 (左操作数, 65535) ＋ 1] ≥ -32768)
                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .判断结束



                                .判断 (右移 (右操作数, 16) ＝ #无符号int)

                                    .判断开始 (右移 (常量值 [位与 (左操作数, 65535) ＋ 1], 16) ＝ 0)

                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .判断结束



                                .判断 (右移 (右操作数, 16) ＝ #有符号int)

                                    .判断开始 (常量值 [位与 (左操作数, 65535) ＋ 1] ≤ 32767 且 常量值 [位与 (左操作数, 65535) ＋ 1] ≥ -32768)

                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .判断结束



                                .默认

                                .判断结束





                            .判断 (右移 (左操作数, 16) ＝ #立即数)

                                .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC)

                                    .判断开始 (右移 (立即数值 [位与 (左操作数, 65535) ＋ 1], 8) ＝ 0)




                                    .判断 (右移 (立即数值 [位与 (左操作数, 65535) ＋ 1], 16) ＝ 0)

                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        .如果真结束


                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        .如果真结束

                                    .判断结束



                                .判断 (右移 (右操作数, 16) ＝ #有符号ACC)

                                    .判断开始 (立即数值 [位与 (左操作数, 65535) ＋ 1] ≤ 127 且 立即数值 [位与 (左操作数, 65535) ＋ 1] ≥ -128)



                                    .判断 (立即数值 [位与 (左操作数, 65535) ＋ 1] ≤ 32767 且 立即数值 [位与 (左操作数, 65535) ＋ 1] ≥ -32768)

                                        状态 ＝ 二元式机器码生成 (0, #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        .如果真结束


                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        .如果真结束


                                    .判断结束



                                .判断 (右移 (右操作数, 16) ＝ #无符号char)

                                    .判断开始 (右移 (立即数值 [位与 (左操作数, 65535) ＋ 1], 8) ＝ 0)


                                    .判断 (右移 (立即数值 [位与 (左操作数, 65535) ＋ 1], 16) ＝ 0)
                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .判断结束



                                .判断 (右移 (右操作数, 16) ＝ #有符号char)

                                    .判断开始 (立即数值 [位与 (左操作数, 65535) ＋ 1] ≤ 127 且 立即数值 [位与 (左操作数, 65535) ＋ 1] ≥ -128)

                                    .判断 (立即数值 [位与 (左操作数, 65535) ＋ 1] ≤ 32767 且 立即数值 [位与 (左操作数, 65535) ＋ 1] ≥ -32768)
                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .判断结束



                                .判断 (右移 (右操作数, 16) ＝ #无符号int)

                                    .判断开始 (右移 (立即数值 [位与 (左操作数, 65535) ＋ 1], 16) ＝ 0)

                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .判断结束



                                .判断 (右移 (右操作数, 16) ＝ #有符号int)

                                    .判断开始 (立即数值 [位与 (左操作数, 65535) ＋ 1] ≤ 32767 且 立即数值 [位与 (左操作数, 65535) ＋ 1] ≥ -32768)

                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .判断结束



                                .默认

                                .判断结束

                            .默认

                            .判断结束



                            .如果真 (状态 ＝ “继续”)

                                .判断开始 (右移 (右操作数, 16) ＝ #常量)

                                    .判断开始 (右移 (左操作数, 16) ＝ #无符号ACC)

                                        .判断开始 (右移 (常量值 [位与 (右操作数, 65535) ＋ 1], 8) ＝ 0)



                                        .判断 (右移 (常量值 [位与 (右操作数, 65535) ＋ 1], 16) ＝ 0)

                                            状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                            .如果真 (状态 ＝ “完成”)
                                                左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                            .如果真结束


                                        .默认
                                            状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                            .如果真 (状态 ＝ “完成”)
                                                左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            .如果真结束

                                        .判断结束



                                    .判断 (右移 (左操作数, 16) ＝ #有符号ACC)

                                        .判断开始 (常量值 [位与 (右操作数, 65535) ＋ 1] ≤ 127 且 常量值 [位与 (右操作数, 65535) ＋ 1] ≥ -128)



                                        .判断 (常量值 [位与 (右操作数, 65535) ＋ 1] ≤ 32767 且 常量值 [位与 (右操作数, 65535) ＋ 1] ≥ -32768)

                                            状态 ＝ 二元式机器码生成 (0, #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                            .如果真 (状态 ＝ “完成”)
                                                左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                            .如果真结束


                                        .默认
                                            状态 ＝ 二元式机器码生成 (0, #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                            .如果真 (状态 ＝ “完成”)
                                                左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            .如果真结束


                                        .判断结束



                                    .判断 (右移 (左操作数, 16) ＝ #无符号char)

                                        .判断开始 (右移 (常量值 [位与 (右操作数, 65535) ＋ 1], 8) ＝ 0)

                                        .判断 (右移 (常量值 [位与 (右操作数, 65535) ＋ 1], 16) ＝ 0)
                                            状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                            .如果真 (状态 ＝ “完成”)
                                                左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                                状态 ＝ “继续”
                                            .如果真结束

                                        .默认
                                            状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                            .如果真 (状态 ＝ “完成”)
                                                左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                                状态 ＝ “继续”
                                            .如果真结束

                                        .判断结束



                                    .判断 (右移 (左操作数, 16) ＝ #有符号char)

                                        .判断开始 (常量值 [位与 (右操作数, 65535) ＋ 1] ≤ 127 且 常量值 [位与 (右操作数, 65535) ＋ 1] ≥ -128)

                                        .判断 (常量值 [位与 (右操作数, 65535) ＋ 1] ≤ 32767 且 常量值 [位与 (右操作数, 65535) ＋ 1] ≥ -32768)
                                            状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                            .如果真 (状态 ＝ “完成”)
                                                左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                                状态 ＝ “继续”
                                            .如果真结束

                                        .默认
                                            状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                            .如果真 (状态 ＝ “完成”)
                                                左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                                状态 ＝ “继续”
                                            .如果真结束

                                        .判断结束



                                    .判断 (右移 (左操作数, 16) ＝ #无符号int)

                                        .判断开始 (右移 (常量值 [位与 (右操作数, 65535) ＋ 1], 16) ＝ 0)

                                        .默认
                                            状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                            .如果真 (状态 ＝ “完成”)
                                                左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                                状态 ＝ “继续”
                                            .如果真结束

                                        .判断结束



                                    .判断 (右移 (左操作数, 16) ＝ #有符号int)

                                        .判断开始 (常量值 [位与 (右操作数, 65535) ＋ 1] ≤ 32767 且 常量值 [位与 (右操作数, 65535) ＋ 1] ≥ -32768)

                                        .默认
                                            状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                            .如果真 (状态 ＝ “完成”)
                                                左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                                状态 ＝ “继续”
                                            .如果真结束

                                        .判断结束



                                    .默认

                                    .判断结束




                                .判断 (右移 (右操作数, 16) ＝ #立即数)

                                    .判断开始 (右移 (左操作数, 16) ＝ #无符号ACC)

                                        .判断开始 (右移 (立即数值 [位与 (右操作数, 65535) ＋ 1], 8) ＝ 0)



                                        .判断 (右移 (立即数值 [位与 (右操作数, 65535) ＋ 1], 16) ＝ 0)

                                            状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                            .如果真 (状态 ＝ “完成”)
                                                左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                            .如果真结束


                                        .默认
                                            状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                            .如果真 (状态 ＝ “完成”)
                                                左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            .如果真结束

                                        .判断结束



                                    .判断 (右移 (左操作数, 16) ＝ #有符号ACC)

                                        .判断开始 (立即数值 [位与 (右操作数, 65535) ＋ 1] ≤ 127 且 立即数值 [位与 (右操作数, 65535) ＋ 1] ≥ -128)


                                        .判断 (立即数值 [位与 (右操作数, 65535) ＋ 1] ≤ 32767 且 立即数值 [位与 (右操作数, 65535) ＋ 1] ≥ -32768)

                                            状态 ＝ 二元式机器码生成 (0, #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                            .如果真 (状态 ＝ “完成”)
                                                左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                            .如果真结束


                                        .默认
                                            状态 ＝ 二元式机器码生成 (0, #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                            .如果真 (状态 ＝ “完成”)
                                                左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            .如果真结束


                                        .判断结束



                                    .判断 (右移 (左操作数, 16) ＝ #无符号char)

                                        .判断开始 (右移 (立即数值 [位与 (右操作数, 65535) ＋ 1], 8) ＝ 0)

                                        .判断 (右移 (立即数值 [位与 (右操作数, 65535) ＋ 1], 16) ＝ 0)
                                            状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                            .如果真 (状态 ＝ “完成”)
                                                左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                                状态 ＝ “继续”
                                            .如果真结束

                                        .默认
                                            状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                            .如果真 (状态 ＝ “完成”)
                                                左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                                状态 ＝ “继续”
                                            .如果真结束

                                        .判断结束



                                    .判断 (右移 (左操作数, 16) ＝ #有符号char)

                                        .判断开始 (立即数值 [位与 (右操作数, 65535) ＋ 1] ≤ 127 且 立即数值 [位与 (右操作数, 65535) ＋ 1] ≥ -128)

                                        .判断 (立即数值 [位与 (右操作数, 65535) ＋ 1] ≤ 32767 且 立即数值 [位与 (右操作数, 65535) ＋ 1] ≥ -32768)
                                            状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                            .如果真 (状态 ＝ “完成”)
                                                左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                                状态 ＝ “继续”
                                            .如果真结束

                                        .默认
                                            状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                            .如果真 (状态 ＝ “完成”)
                                                左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                                状态 ＝ “继续”
                                            .如果真结束

                                        .判断结束



                                    .判断 (右移 (左操作数, 16) ＝ #无符号int)

                                        .判断开始 (右移 (立即数值 [位与 (右操作数, 65535) ＋ 1], 16) ＝ 0)

                                        .默认
                                            状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                            .如果真 (状态 ＝ “完成”)
                                                左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                                状态 ＝ “继续”
                                            .如果真结束

                                        .判断结束



                                    .判断 (右移 (左操作数, 16) ＝ #有符号int)

                                        .判断开始 (立即数值 [位与 (右操作数, 65535) ＋ 1] ≤ 32767 且 立即数值 [位与 (右操作数, 65535) ＋ 1] ≥ -32768)

                                        .默认
                                            状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                            .如果真 (状态 ＝ “完成”)
                                                左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                                状态 ＝ “继续”
                                            .如果真结束

                                        .判断结束



                                    .默认

                                    .判断结束

                                .默认

                                .判断结束



                                .如果真 (状态 ＝ “继续”)

                                    .判断开始 ((右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int) 且 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC))

                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                            状态 ＝ “继续”
                                        .如果真结束


                                    .判断 ((右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char))

                                        A等于_RAM (右操作数)
                                        .判断开始 (右移 (右操作数, 16) ＝ #无符号char)
                                            右操作数 ＝ #无符号ACC × 65536
                                        .默认
                                            右操作数 ＝ #有符号ACC × 65536
                                        .判断结束

                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                            状态 ＝ “继续”
                                        .如果真结束



                                    .判断 ((右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC))

                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束


                                    .判断 ((右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char))

                                        A等于_RAM (右操作数)
                                        .判断开始 (右移 (右操作数, 16) ＝ #无符号char)
                                            右操作数 ＝ #无符号ACC × 65536
                                        .默认
                                            右操作数 ＝ #有符号ACC × 65536
                                        .判断结束

                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束



                                    .判断 ((右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int))

                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束



                                    .判断 ((右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int) 且 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC))

                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                            状态 ＝ “继续”
                                        .如果真结束


                                    .判断 ((右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int) 且 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char))

                                        A等于_RAM (左操作数)
                                        .判断开始 (右移 (左操作数, 16) ＝ #无符号char)
                                            左操作数 ＝ #无符号ACC × 65536
                                        .默认
                                            左操作数 ＝ #有符号ACC × 65536
                                        .判断结束

                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                            状态 ＝ “继续”
                                        .如果真结束



                                    .判断 ((右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC))

                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束


                                    .判断 ((右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char))

                                        A等于_RAM (左操作数)
                                        .判断开始 (右移 (左操作数, 16) ＝ #无符号char)
                                            左操作数 ＝ #无符号ACC × 65536
                                        .默认
                                            左操作数 ＝ #有符号ACC × 65536
                                        .判断结束

                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束



                                    .判断 ((右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int))

                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束



                                    .判断 ((右移 (左操作数, 16) ＝ #无符号char指针 或 右移 (左操作数, 16) ＝ #有符号char指针) 且 (右移 (右操作数, 16) ＝ #无符号int指针 或 右移 (右操作数, 16) ＝ #有符号int指针 或 右移 (右操作数, 16) ＝ #无符号长int指针 或 右移 (右操作数, 16) ＝ #有符号长int指针) 或 (右移 (左操作数, 16) ＝ #无符号int指针 或 右移 (左操作数, 16) ＝ #有符号int指针) 且 (右移 (右操作数, 16) ＝ #无符号char指针 或 右移 (右操作数, 16) ＝ #有符号char指针 或 右移 (右操作数, 16) ＝ #无符号长int指针 或 右移 (右操作数, 16) ＝ #有符号长int指针) 或 (右移 (左操作数, 16) ＝ #无符号长int指针 或 右移 (左操作数, 16) ＝ #有符号长int指针) 且 (右移 (右操作数, 16) ＝ #无符号char指针 或 右移 (右操作数, 16) ＝ #有符号char指针 或 右移 (右操作数, 16) ＝ #无符号int指针 或 右移 (右操作数, 16) ＝ #有符号int指针))

                                        左操作数 ＝ #无符号int × 65536 ＋ 位与 (左操作数, 65535)
                                        右操作数 ＝ #无符号int × 65536 ＋ 位与 (右操作数, 65535)


                                    .默认

                                    .判断结束




                                    .如果真 (状态 ＝ “继续”)

                                        .判断开始 ((右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char) 或 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char) 且 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC) 或 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char) 或 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数) 或 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数))

                                            .判断开始 (右扫空标志 ＝ 1 且 操作数计数 ≥ 2 且 (右移 (左操作数前操作数, 16) ＝ #无符号char 或 右移 (左操作数前操作数, 16) ＝ #有符号char) 且 到文本 (左操作数前运算符) ＝ “=”)

                                                状态 ＝ 二元式机器码生成 (左操作数前操作数, 左操作数, 到文本 (运算符), 右操作数)
                                                .如果真 (状态 ＝ “完成”)

                                                    子表达式 [左操作数前运算符位置] ＝ 32
                                                    子表达式 [左操作数位置] ＝ 32
                                                    子表达式 [左操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [左操作数位置 ＋ 2] ＝ 32
                                                    子表达式 [运算符位置] ＝ 32
                                                    子表达式 [右操作数位置] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 2] ＝ 32

                                                    扫描指针 ＝ 1
                                                    操作数计数 ＝ 0
                                                    状态 ＝ “继续”
                                                .如果真结束




                                            .默认
                                                状态 ＝ 二元式机器码生成 (#ACC × 65536, 左操作数, 到文本 (运算符), 右操作数)
                                                .如果真 (状态 ＝ “完成”)

                                                    .判断开始 (右移 (左操作数, 16) ≠ #常量 且 右移 (左操作数, 16) ≠ #立即数 且 右移 (右操作数, 16) ≠ #常量 且 右移 (右操作数, 16) ≠ #立即数)

                                                        .判断开始 ((右移 (左操作数, 16) ＝ #有符号char 或 右移 (左操作数, 16) ＝ #有符号ACC) 且 (右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #有符号ACC))
                                                            子表达式 [左操作数位置] ＝ #有符号ACC
                                                            累加器内容状态 ＝ “有符号ACC”
                                                        .默认
                                                            子表达式 [左操作数位置] ＝ #无符号ACC
                                                            累加器内容状态 ＝ “无符号ACC”
                                                        .判断结束

                                                    .默认

                                                        .判断开始 (右移 (左操作数, 16) ＝ #有符号char 或 右移 (左操作数, 16) ＝ #有符号ACC 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #有符号ACC)
                                                            子表达式 [左操作数位置] ＝ #有符号ACC
                                                            累加器内容状态 ＝ “有符号ACC”
                                                        .默认
                                                            子表达式 [左操作数位置] ＝ #无符号ACC
                                                            累加器内容状态 ＝ “无符号ACC”
                                                        .判断结束

                                                    .判断结束


                                                    累加器位置 ＝ “子表达式”
                                                    表达式累加器地址 ＝ 左操作数位置 － 1

                                                    子表达式 [运算符位置] ＝ 32
                                                    子表达式 [右操作数位置] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 2] ＝ 32

                                                    扫描指针 ＝ 1
                                                    操作数计数 ＝ 0
                                                    状态 ＝ “继续”

                                                .如果真结束


                                            .判断结束





                                        .判断 ((右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int) 且 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int) 或 (右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数))

                                            .判断开始 (右扫空标志 ＝ 1 且 操作数计数 ≥ 2 且 (右移 (左操作数前操作数, 16) ＝ #无符号int 或 右移 (左操作数前操作数, 16) ＝ #有符号int 或 右移 (左操作数前操作数, 16) ＝ #无符号char 或 右移 (左操作数前操作数, 16) ＝ #有符号char) 且 到文本 (左操作数前运算符) ＝ “=”)

                                                状态 ＝ 二元式机器码生成 (左操作数前操作数, 左操作数, 到文本 (运算符), 右操作数)
                                                .如果真 (状态 ＝ “完成”)

                                                    子表达式 [左操作数前运算符位置] ＝ 32
                                                    子表达式 [左操作数位置] ＝ 32
                                                    子表达式 [左操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [左操作数位置 ＋ 2] ＝ 32
                                                    子表达式 [运算符位置] ＝ 32
                                                    子表达式 [右操作数位置] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 2] ＝ 32

                                                    扫描指针 ＝ 1
                                                    操作数计数 ＝ 0
                                                    状态 ＝ “继续”
                                                .如果真结束


                                            .默认
                                                状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), 左操作数, 到文本 (运算符), 右操作数)
                                                .如果真 (状态 ＝ “完成”)

                                                    .判断开始 (右移 (左操作数, 16) ≠ #常量 且 右移 (左操作数, 16) ≠ #立即数 且 右移 (右操作数, 16) ≠ #常量 且 右移 (右操作数, 16) ≠ #立即数)

                                                        .判断开始 (右移 (左操作数, 16) ＝ #有符号int 且 右移 (右操作数, 16) ＝ #有符号int)
                                                            子表达式 [左操作数位置] ＝ #有符号int
                                                        .默认
                                                            子表达式 [左操作数位置] ＝ #无符号int
                                                        .判断结束

                                                    .默认

                                                        .判断开始 (右移 (左操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #有符号int)
                                                            子表达式 [左操作数位置] ＝ #有符号int
                                                        .默认
                                                            子表达式 [左操作数位置] ＝ #无符号int
                                                        .判断结束

                                                    .判断结束


                                                    子表达式 [左操作数位置 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                                    子表达式 [左操作数位置 ＋ 2] ＝ 动态RAM分配地址

                                                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2

                                                    子表达式 [运算符位置] ＝ 32
                                                    子表达式 [右操作数位置] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 2] ＝ 32

                                                    扫描指针 ＝ 1
                                                    操作数计数 ＝ 0
                                                    状态 ＝ “继续”
                                                .如果真结束

                                            .判断结束



                                        .判断 ((右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 或 (右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 (右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数))

                                            .判断开始 (右扫空标志 ＝ 1 且 操作数计数 ≥ 2 且 (右移 (左操作数前操作数, 16) ＝ #无符号长int 或 右移 (左操作数前操作数, 16) ＝ #有符号长int 或 右移 (左操作数前操作数, 16) ＝ #无符号int 或 右移 (左操作数前操作数, 16) ＝ #有符号int 或 右移 (左操作数前操作数, 16) ＝ #无符号char 或 右移 (左操作数前操作数, 16) ＝ #有符号char) 且 到文本 (左操作数前运算符) ＝ “=”)

                                                状态 ＝ 二元式机器码生成 (左操作数前操作数, 左操作数, 到文本 (运算符), 右操作数)
                                                .如果真 (状态 ＝ “完成”)

                                                    子表达式 [左操作数前运算符位置] ＝ 32
                                                    子表达式 [左操作数位置] ＝ 32
                                                    子表达式 [左操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [左操作数位置 ＋ 2] ＝ 32
                                                    子表达式 [运算符位置] ＝ 32
                                                    子表达式 [右操作数位置] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 2] ＝ 32

                                                    扫描指针 ＝ 1
                                                    操作数计数 ＝ 0
                                                    状态 ＝ “继续”
                                                .如果真结束


                                            .默认
                                                状态 ＝ 二元式机器码生成 (#无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), 左操作数, 到文本 (运算符), 右操作数)
                                                .如果真 (状态 ＝ “完成”)

                                                    .判断开始 (右移 (左操作数, 16) ≠ #常量 且 右移 (左操作数, 16) ≠ #立即数 且 右移 (右操作数, 16) ≠ #常量 且 右移 (右操作数, 16) ≠ #立即数)

                                                        .判断开始 (右移 (左操作数, 16) ＝ #有符号长int 且 右移 (右操作数, 16) ＝ #有符号长int)
                                                            子表达式 [左操作数位置] ＝ #有符号长int
                                                        .默认
                                                            子表达式 [左操作数位置] ＝ #无符号长int
                                                        .判断结束

                                                    .默认

                                                        .判断开始 (右移 (左操作数, 16) ＝ #有符号长int 或 右移 (右操作数, 16) ＝ #有符号长int)
                                                            子表达式 [左操作数位置] ＝ #有符号长int
                                                        .默认
                                                            子表达式 [左操作数位置] ＝ #无符号长int
                                                        .判断结束

                                                    .判断结束



                                                    子表达式 [左操作数位置 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                                    子表达式 [左操作数位置 ＋ 2] ＝ 动态RAM分配地址

                                                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4

                                                    子表达式 [运算符位置] ＝ 32
                                                    子表达式 [右操作数位置] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 2] ＝ 32

                                                    扫描指针 ＝ 1
                                                    操作数计数 ＝ 0
                                                    状态 ＝ “继续”
                                                .如果真结束

                                            .判断结束




                                        .判断 (((右移 (左操作数, 16) ＝ #无符号char指针 或 右移 (左操作数, 16) ＝ #有符号char指针) 且 (右移 (右操作数, 16) ＝ #无符号char指针 或 右移 (右操作数, 16) ＝ #有符号char指针) 或 (右移 (左操作数, 16) ＝ #无符号int指针 或 右移 (左操作数, 16) ＝ #有符号int指针) 且 (右移 (右操作数, 16) ＝ #无符号int指针 或 右移 (右操作数, 16) ＝ #有符号int指针) 或 (右移 (左操作数, 16) ＝ #无符号长int指针 或 右移 (左操作数, 16) ＝ #有符号长int指针) 且 (右移 (右操作数, 16) ＝ #无符号长int指针 或 右移 (右操作数, 16) ＝ #有符号长int指针)) 且 到文本 (运算符) ＝ “-”)

                                            状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), #无符号int × 65536 ＋ 位与 (左操作数, 65535), 到文本 (运算符), #无符号int × 65536 ＋ 位与 (右操作数, 65535))

                                            .如果真 (状态 ＝ “完成”)

                                                .判断开始 (右移 (左操作数, 16) ＝ #无符号char指针 或 右移 (左操作数, 16) ＝ #有符号char指针)

                                                .判断 (右移 (左操作数, 16) ＝ #无符号int指针 或 右移 (左操作数, 16) ＝ #有符号int指针)
                                                    状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “>>”, 1)
                                                .默认
                                                    状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “>>”, 2)
                                                .判断结束

                                                .如果真 (状态 ＝ “完成”)

                                                    子表达式 [左操作数位置] ＝ #无符号int
                                                    子表达式 [左操作数位置 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                                    子表达式 [左操作数位置 ＋ 2] ＝ 动态RAM分配地址

                                                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2

                                                    子表达式 [运算符位置] ＝ 32
                                                    子表达式 [右操作数位置] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 2] ＝ 32

                                                    扫描指针 ＝ 1
                                                    操作数计数 ＝ 0
                                                    状态 ＝ “继续”

                                                .如果真结束


                                            .如果真结束




                                        .判断 ((右移 (左操作数, 16) ＝ #无符号char指针 或 右移 (左操作数, 16) ＝ #有符号char指针) 且 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC 或 右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 或 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC 或 右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char 或 右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int 或 右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #无符号char指针 或 右移 (右操作数, 16) ＝ #有符号char指针) 且 到文本 (运算符) ＝ “+”)

                                            .判断开始 (右扫空标志 ＝ 1 且 操作数计数 ≥ 2 且 (右移 (左操作数前操作数, 16) ＝ #无符号int 或 右移 (左操作数前操作数, 16) ＝ #有符号int 或 右移 (左操作数前操作数, 16) ＝ #无符号char指针 或 右移 (左操作数前操作数, 16) ＝ #有符号char指针 或 右移 (左操作数前操作数, 16) ＝ #无符号int指针 或 右移 (左操作数前操作数, 16) ＝ #有符号int指针 或 右移 (左操作数前操作数, 16) ＝ #无符号长int指针 或 右移 (左操作数前操作数, 16) ＝ #有符号长int指针) 且 到文本 (左操作数前运算符) ＝ “=”)

                                                状态 ＝ 二元式机器码生成 (#无符号char指针 × 65536 ＋ 位与 (左操作数前操作数, 65535), 左操作数, 到文本 (运算符), 右操作数)
                                                .如果真 (状态 ＝ “完成”)

                                                    子表达式 [左操作数前运算符位置] ＝ 32
                                                    子表达式 [左操作数位置] ＝ 32
                                                    子表达式 [左操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [左操作数位置 ＋ 2] ＝ 32
                                                    子表达式 [运算符位置] ＝ 32
                                                    子表达式 [右操作数位置] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 2] ＝ 32

                                                    扫描指针 ＝ 1
                                                    操作数计数 ＝ 0
                                                    状态 ＝ “继续”

                                                .如果真结束



                                            .默认
                                                状态 ＝ 二元式机器码生成 (#无符号char指针 × 65536 ＋ 位与 (动态RAM分配地址, 65535), 左操作数, 到文本 (运算符), 右操作数)
                                                .如果真 (状态 ＝ “完成”)

                                                    .判断开始 (右移 (右操作数, 16) ＝ #无符号char指针 或 右移 (右操作数, 16) ＝ #有符号char指针)
                                                        子表达式 [左操作数位置] ＝ 右移 (右操作数, 16)
                                                    .默认
                                                        子表达式 [左操作数位置] ＝ 右移 (左操作数, 16)
                                                    .判断结束

                                                    子表达式 [左操作数位置 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                                    子表达式 [左操作数位置 ＋ 2] ＝ 动态RAM分配地址

                                                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2

                                                    子表达式 [运算符位置] ＝ 32
                                                    子表达式 [右操作数位置] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 2] ＝ 32

                                                    扫描指针 ＝ 1
                                                    操作数计数 ＝ 0
                                                    状态 ＝ “继续”
                                                .如果真结束


                                            .判断结束





                                        .判断 ((右移 (左操作数, 16) ＝ #无符号int指针 或 右移 (左操作数, 16) ＝ #有符号int指针) 且 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC 或 右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 或 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC 或 右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char 或 右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int 或 右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #无符号int指针 或 右移 (右操作数, 16) ＝ #有符号int指针) 且 到文本 (运算符) ＝ “+”)

                                            .判断开始 (右扫空标志 ＝ 1 且 操作数计数 ≥ 2 且 (右移 (左操作数前操作数, 16) ＝ #无符号int 或 右移 (左操作数前操作数, 16) ＝ #有符号int 或 右移 (左操作数前操作数, 16) ＝ #无符号char指针 或 右移 (左操作数前操作数, 16) ＝ #有符号char指针 或 右移 (左操作数前操作数, 16) ＝ #无符号int指针 或 右移 (左操作数前操作数, 16) ＝ #有符号int指针 或 右移 (左操作数前操作数, 16) ＝ #无符号长int指针 或 右移 (左操作数前操作数, 16) ＝ #有符号长int指针) 且 到文本 (左操作数前运算符) ＝ “=”)

                                                状态 ＝ 二元式机器码生成 (#无符号int指针 × 65536 ＋ 位与 (左操作数前操作数, 65535), 左操作数, 到文本 (运算符), 右操作数)
                                                .如果真 (状态 ＝ “完成”)

                                                    子表达式 [左操作数前运算符位置] ＝ 32
                                                    子表达式 [左操作数位置] ＝ 32
                                                    子表达式 [左操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [左操作数位置 ＋ 2] ＝ 32
                                                    子表达式 [运算符位置] ＝ 32
                                                    子表达式 [右操作数位置] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 2] ＝ 32

                                                    扫描指针 ＝ 1
                                                    操作数计数 ＝ 0
                                                    状态 ＝ “继续”

                                                .如果真结束



                                            .默认
                                                状态 ＝ 二元式机器码生成 (#无符号int指针 × 65536 ＋ 位与 (动态RAM分配地址, 65535), 左操作数, 到文本 (运算符), 右操作数)
                                                .如果真 (状态 ＝ “完成”)

                                                    .判断开始 (右移 (右操作数, 16) ＝ #无符号int指针 或 右移 (右操作数, 16) ＝ #有符号int指针)
                                                        子表达式 [左操作数位置] ＝ 右移 (右操作数, 16)
                                                    .默认
                                                        子表达式 [左操作数位置] ＝ 右移 (左操作数, 16)
                                                    .判断结束

                                                    子表达式 [左操作数位置 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                                    子表达式 [左操作数位置 ＋ 2] ＝ 动态RAM分配地址

                                                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2

                                                    子表达式 [运算符位置] ＝ 32
                                                    子表达式 [右操作数位置] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 2] ＝ 32

                                                    扫描指针 ＝ 1
                                                    操作数计数 ＝ 0
                                                    状态 ＝ “继续”
                                                .如果真结束


                                            .判断结束



                                        .判断 ((右移 (左操作数, 16) ＝ #无符号长int指针 或 右移 (左操作数, 16) ＝ #有符号长int指针) 且 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC 或 右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 或 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC 或 右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char 或 右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int 或 右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #无符号长int指针 或 右移 (右操作数, 16) ＝ #有符号长int指针) 且 到文本 (运算符) ＝ “+”)

                                            .判断开始 (右扫空标志 ＝ 1 且 操作数计数 ≥ 2 且 (右移 (左操作数前操作数, 16) ＝ #无符号int 或 右移 (左操作数前操作数, 16) ＝ #有符号int 或 右移 (左操作数前操作数, 16) ＝ #无符号char指针 或 右移 (左操作数前操作数, 16) ＝ #有符号char指针 或 右移 (左操作数前操作数, 16) ＝ #无符号int指针 或 右移 (左操作数前操作数, 16) ＝ #有符号int指针 或 右移 (左操作数前操作数, 16) ＝ #无符号长int指针 或 右移 (左操作数前操作数, 16) ＝ #有符号长int指针) 且 到文本 (左操作数前运算符) ＝ “=”)

                                                状态 ＝ 二元式机器码生成 (#无符号长int指针 × 65536 ＋ 位与 (左操作数前操作数, 65535), 左操作数, 到文本 (运算符), 右操作数)
                                                .如果真 (状态 ＝ “完成”)

                                                    子表达式 [左操作数前运算符位置] ＝ 32
                                                    子表达式 [左操作数位置] ＝ 32
                                                    子表达式 [左操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [左操作数位置 ＋ 2] ＝ 32
                                                    子表达式 [运算符位置] ＝ 32
                                                    子表达式 [右操作数位置] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 2] ＝ 32

                                                    扫描指针 ＝ 1
                                                    操作数计数 ＝ 0
                                                    状态 ＝ “继续”

                                                .如果真结束



                                            .默认
                                                状态 ＝ 二元式机器码生成 (#无符号长int指针 × 65536 ＋ 位与 (动态RAM分配地址, 65535), 左操作数, 到文本 (运算符), 右操作数)
                                                .如果真 (状态 ＝ “完成”)

                                                    .判断开始 (右移 (右操作数, 16) ＝ #无符号长int指针 或 右移 (右操作数, 16) ＝ #有符号长int指针)
                                                        子表达式 [左操作数位置] ＝ 右移 (右操作数, 16)
                                                    .默认
                                                        子表达式 [左操作数位置] ＝ 右移 (左操作数, 16)
                                                    .判断结束

                                                    子表达式 [左操作数位置 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                                    子表达式 [左操作数位置 ＋ 2] ＝ 动态RAM分配地址

                                                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2

                                                    子表达式 [运算符位置] ＝ 32
                                                    子表达式 [右操作数位置] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 2] ＝ 32

                                                    扫描指针 ＝ 1
                                                    操作数计数 ＝ 0
                                                    状态 ＝ “继续”
                                                .如果真结束


                                            .判断结束




                                        .判断 ((右移 (左操作数, 16) ＝ #无符号char指针 或 右移 (左操作数, 16) ＝ #有符号char指针) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数) 且 (右移 (右操作数, 16) ＝ #无符号char指针 或 右移 (右操作数, 16) ＝ #有符号char指针) 且 到文本 (运算符) ＝ “+”)

                                            .判断开始 (右扫空标志 ＝ 1 且 操作数计数 ≥ 2 且 (右移 (左操作数前操作数, 16) ＝ #无符号int 或 右移 (左操作数前操作数, 16) ＝ #有符号int 或 右移 (左操作数前操作数, 16) ＝ #无符号char指针 或 右移 (左操作数前操作数, 16) ＝ #有符号char指针 或 右移 (左操作数前操作数, 16) ＝ #无符号int指针 或 右移 (左操作数前操作数, 16) ＝ #有符号int指针 或 右移 (左操作数前操作数, 16) ＝ #无符号长int指针 或 右移 (左操作数前操作数, 16) ＝ #有符号长int指针) 且 到文本 (左操作数前运算符) ＝ “=”)

                                                .判断开始 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数)
                                                    状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 位与 (左操作数前操作数, 65535), #无符号int × 65536 ＋ 位与 (左操作数, 65535), 到文本 (运算符), 右操作数)

                                                .默认
                                                    状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 位与 (左操作数前操作数, 65535), 左操作数, 到文本 (运算符), #无符号int × 65536 ＋ 位与 (右操作数, 65535))
                                                .判断结束


                                                .如果真 (状态 ＝ “完成”)

                                                    子表达式 [左操作数前运算符位置] ＝ 32
                                                    子表达式 [左操作数位置] ＝ 32
                                                    子表达式 [左操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [左操作数位置 ＋ 2] ＝ 32
                                                    子表达式 [运算符位置] ＝ 32
                                                    子表达式 [右操作数位置] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 2] ＝ 32

                                                    扫描指针 ＝ 1
                                                    操作数计数 ＝ 0
                                                    状态 ＝ “继续”

                                                .如果真结束



                                            .默认

                                                .判断开始 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数)
                                                    状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), #无符号int × 65536 ＋ 位与 (左操作数, 65535), 到文本 (运算符), 右操作数)

                                                .默认
                                                    状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), 左操作数, 到文本 (运算符), #无符号int × 65536 ＋ 位与 (右操作数, 65535))
                                                .判断结束

                                                .如果真 (状态 ＝ “完成”)

                                                    .判断开始 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数)
                                                        子表达式 [左操作数位置] ＝ 右移 (左操作数, 16)
                                                    .默认
                                                        子表达式 [左操作数位置] ＝ 右移 (右操作数, 16)
                                                    .判断结束

                                                    子表达式 [左操作数位置 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                                    子表达式 [左操作数位置 ＋ 2] ＝ 动态RAM分配地址

                                                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2

                                                    子表达式 [运算符位置] ＝ 32
                                                    子表达式 [右操作数位置] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 2] ＝ 32

                                                    扫描指针 ＝ 1
                                                    操作数计数 ＝ 0
                                                    状态 ＝ “继续”
                                                .如果真结束


                                            .判断结束




                                        .判断 ((右移 (左操作数, 16) ＝ #无符号int指针 或 右移 (左操作数, 16) ＝ #有符号int指针) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数) 且 (右移 (右操作数, 16) ＝ #无符号int指针 或 右移 (右操作数, 16) ＝ #有符号int指针) 且 到文本 (运算符) ＝ “+”)

                                            .判断开始 (右扫空标志 ＝ 1 且 操作数计数 ≥ 2 且 (右移 (左操作数前操作数, 16) ＝ #无符号int 或 右移 (左操作数前操作数, 16) ＝ #有符号int 或 右移 (左操作数前操作数, 16) ＝ #无符号char指针 或 右移 (左操作数前操作数, 16) ＝ #有符号char指针 或 右移 (左操作数前操作数, 16) ＝ #无符号int指针 或 右移 (左操作数前操作数, 16) ＝ #有符号int指针 或 右移 (左操作数前操作数, 16) ＝ #无符号长int指针 或 右移 (左操作数前操作数, 16) ＝ #有符号长int指针) 且 到文本 (左操作数前运算符) ＝ “=”)


                                                .判断开始 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数)

                                                    .判断开始 (右移 (右操作数, 16) ＝ #常量)
                                                        右操作数 ＝ 位与 (左移 (常量值 [位与 (右操作数, 65535) ＋ 1], 1), 65535)
                                                    .默认
                                                        右操作数 ＝ 位与 (左移 (立即数值 [位与 (右操作数, 65535) ＋ 1], 1), 65535)
                                                    .判断结束

                                                    状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 位与 (左操作数前操作数, 65535), #无符号int × 65536 ＋ 位与 (左操作数, 65535), 到文本 (运算符), 右操作数)

                                                .默认

                                                    .判断开始 (右移 (左操作数, 16) ＝ #常量)
                                                        左操作数 ＝ 位与 (左移 (常量值 [位与 (左操作数, 65535) ＋ 1], 1), 65535)
                                                    .默认
                                                        左操作数 ＝ 位与 (左移 (立即数值 [位与 (左操作数, 65535) ＋ 1], 1), 65535)
                                                    .判断结束

                                                    状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 位与 (左操作数前操作数, 65535), 左操作数, 到文本 (运算符), #无符号int × 65536 ＋ 位与 (右操作数, 65535))
                                                .判断结束


                                                .如果真 (状态 ＝ “完成”)

                                                    子表达式 [左操作数前运算符位置] ＝ 32
                                                    子表达式 [左操作数位置] ＝ 32
                                                    子表达式 [左操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [左操作数位置 ＋ 2] ＝ 32
                                                    子表达式 [运算符位置] ＝ 32
                                                    子表达式 [右操作数位置] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 2] ＝ 32

                                                    扫描指针 ＝ 1
                                                    操作数计数 ＝ 0
                                                    状态 ＝ “继续”

                                                .如果真结束



                                            .默认

                                                .判断开始 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数)

                                                    .判断开始 (右移 (右操作数, 16) ＝ #常量)
                                                        右操作数 ＝ 位与 (左移 (常量值 [位与 (右操作数, 65535) ＋ 1], 1), 65535)
                                                    .默认
                                                        右操作数 ＝ 位与 (左移 (立即数值 [位与 (右操作数, 65535) ＋ 1], 1), 65535)
                                                    .判断结束

                                                    状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), #无符号int × 65536 ＋ 位与 (左操作数, 65535), 到文本 (运算符), 右操作数)

                                                .默认

                                                    .判断开始 (右移 (左操作数, 16) ＝ #常量)
                                                        左操作数 ＝ 位与 (左移 (常量值 [位与 (左操作数, 65535) ＋ 1], 1), 65535)
                                                    .默认
                                                        左操作数 ＝ 位与 (左移 (立即数值 [位与 (左操作数, 65535) ＋ 1], 1), 65535)
                                                    .判断结束

                                                    状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), 左操作数, 到文本 (运算符), #无符号int × 65536 ＋ 位与 (右操作数, 65535))
                                                .判断结束

                                                .如果真 (状态 ＝ “完成”)

                                                    .判断开始 (右移 (右操作数, 16) ＝ 0)
                                                        子表达式 [左操作数位置] ＝ 右移 (左操作数, 16)
                                                    .默认
                                                        子表达式 [左操作数位置] ＝ 右移 (右操作数, 16)
                                                    .判断结束

                                                    子表达式 [左操作数位置 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                                    子表达式 [左操作数位置 ＋ 2] ＝ 动态RAM分配地址

                                                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2

                                                    子表达式 [运算符位置] ＝ 32
                                                    子表达式 [右操作数位置] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 2] ＝ 32

                                                    扫描指针 ＝ 1
                                                    操作数计数 ＝ 0
                                                    状态 ＝ “继续”
                                                .如果真结束


                                            .判断结束



                                        .判断 ((右移 (左操作数, 16) ＝ #无符号长int指针 或 右移 (左操作数, 16) ＝ #有符号长int指针) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数) 且 (右移 (右操作数, 16) ＝ #无符号长int指针 或 右移 (右操作数, 16) ＝ #有符号长int指针) 且 到文本 (运算符) ＝ “+”)

                                            .判断开始 (右扫空标志 ＝ 1 且 操作数计数 ≥ 2 且 (右移 (左操作数前操作数, 16) ＝ #无符号int 或 右移 (左操作数前操作数, 16) ＝ #有符号int 或 右移 (左操作数前操作数, 16) ＝ #无符号char指针 或 右移 (左操作数前操作数, 16) ＝ #有符号char指针 或 右移 (左操作数前操作数, 16) ＝ #无符号int指针 或 右移 (左操作数前操作数, 16) ＝ #有符号int指针 或 右移 (左操作数前操作数, 16) ＝ #无符号长int指针 或 右移 (左操作数前操作数, 16) ＝ #有符号长int指针) 且 到文本 (左操作数前运算符) ＝ “=”)


                                                .判断开始 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数)

                                                    .判断开始 (右移 (右操作数, 16) ＝ #常量)
                                                        右操作数 ＝ 位与 (左移 (常量值 [位与 (右操作数, 65535) ＋ 1], 2), 65535)
                                                    .默认
                                                        右操作数 ＝ 位与 (左移 (立即数值 [位与 (右操作数, 65535) ＋ 1], 2), 65535)
                                                    .判断结束

                                                    状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 位与 (左操作数前操作数, 65535), #无符号int × 65536 ＋ 位与 (左操作数, 65535), 到文本 (运算符), 右操作数)

                                                .默认

                                                    .判断开始 (右移 (左操作数, 16) ＝ #常量)
                                                        左操作数 ＝ 位与 (左移 (常量值 [位与 (左操作数, 65535) ＋ 1], 2), 65535)
                                                    .默认
                                                        左操作数 ＝ 位与 (左移 (立即数值 [位与 (左操作数, 65535) ＋ 1], 2), 65535)
                                                    .判断结束

                                                    状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 位与 (左操作数前操作数, 65535), 左操作数, 到文本 (运算符), #无符号int × 65536 ＋ 位与 (右操作数, 65535))
                                                .判断结束


                                                .如果真 (状态 ＝ “完成”)

                                                    子表达式 [左操作数前运算符位置] ＝ 32
                                                    子表达式 [左操作数位置] ＝ 32
                                                    子表达式 [左操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [左操作数位置 ＋ 2] ＝ 32
                                                    子表达式 [运算符位置] ＝ 32
                                                    子表达式 [右操作数位置] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 2] ＝ 32

                                                    扫描指针 ＝ 1
                                                    操作数计数 ＝ 0
                                                    状态 ＝ “继续”

                                                .如果真结束



                                            .默认

                                                .判断开始 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数)

                                                    .判断开始 (右移 (右操作数, 16) ＝ #常量)
                                                        右操作数 ＝ 位与 (左移 (常量值 [位与 (右操作数, 65535) ＋ 1], 2), 65535)
                                                    .默认
                                                        右操作数 ＝ 位与 (左移 (立即数值 [位与 (右操作数, 65535) ＋ 1], 2), 65535)
                                                    .判断结束

                                                    状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), #无符号int × 65536 ＋ 位与 (左操作数, 65535), 到文本 (运算符), 右操作数)

                                                .默认

                                                    .判断开始 (右移 (左操作数, 16) ＝ #常量)
                                                        左操作数 ＝ 位与 (左移 (常量值 [位与 (左操作数, 65535) ＋ 1], 2), 65535)
                                                    .默认
                                                        左操作数 ＝ 位与 (左移 (立即数值 [位与 (左操作数, 65535) ＋ 1], 2), 65535)
                                                    .判断结束

                                                    状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), 左操作数, 到文本 (运算符), #无符号int × 65536 ＋ 位与 (右操作数, 65535))
                                                .判断结束

                                                .如果真 (状态 ＝ “完成”)

                                                    .判断开始 (右移 (右操作数, 16) ＝ 0)
                                                        子表达式 [左操作数位置] ＝ 右移 (左操作数, 16)
                                                    .默认
                                                        子表达式 [左操作数位置] ＝ 右移 (右操作数, 16)
                                                    .判断结束

                                                    子表达式 [左操作数位置 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                                    子表达式 [左操作数位置 ＋ 2] ＝ 动态RAM分配地址

                                                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2

                                                    子表达式 [运算符位置] ＝ 32
                                                    子表达式 [右操作数位置] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 2] ＝ 32

                                                    扫描指针 ＝ 1
                                                    操作数计数 ＝ 0
                                                    状态 ＝ “继续”
                                                .如果真结束


                                            .判断结束



                                        .判断 ((右移 (左操作数, 16) ＝ #无符号char数组 或 右移 (左操作数, 16) ＝ #有符号char数组) 且 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC 或 右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 或 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC 或 右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char 或 右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int 或 右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组) 且 到文本 (运算符) ＝ “+”)

                                            .判断开始 (右扫空标志 ＝ 1 且 操作数计数 ≥ 2 且 (右移 (左操作数前操作数, 16) ＝ #无符号int 或 右移 (左操作数前操作数, 16) ＝ #有符号int 或 右移 (左操作数前操作数, 16) ＝ #无符号char指针 或 右移 (左操作数前操作数, 16) ＝ #有符号char指针 或 右移 (左操作数前操作数, 16) ＝ #无符号int指针 或 右移 (左操作数前操作数, 16) ＝ #有符号int指针 或 右移 (左操作数前操作数, 16) ＝ #无符号长int指针 或 右移 (左操作数前操作数, 16) ＝ #有符号长int指针) 且 到文本 (左操作数前运算符) ＝ “=”)

                                                状态 ＝ 二元式机器码生成 (#无符号char指针 × 65536 ＋ 位与 (左操作数前操作数, 65535), 左操作数, 到文本 (运算符), 右操作数)
                                                .如果真 (状态 ＝ “完成”)

                                                    子表达式 [左操作数前运算符位置] ＝ 32
                                                    子表达式 [左操作数位置] ＝ 32
                                                    子表达式 [左操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [左操作数位置 ＋ 2] ＝ 32
                                                    子表达式 [运算符位置] ＝ 32
                                                    子表达式 [右操作数位置] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 2] ＝ 32

                                                    扫描指针 ＝ 1
                                                    操作数计数 ＝ 0
                                                    状态 ＝ “继续”

                                                .如果真结束



                                            .默认
                                                状态 ＝ 二元式机器码生成 (#无符号char指针 × 65536 ＋ 位与 (动态RAM分配地址, 65535), 左操作数, 到文本 (运算符), 右操作数)
                                                .如果真 (状态 ＝ “完成”)

                                                    .判断开始 (右移 (左操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #无符号char数组)
                                                        子表达式 [左操作数位置] ＝ #无符号char指针
                                                    .默认
                                                        子表达式 [左操作数位置] ＝ #有符号char指针
                                                    .判断结束

                                                    子表达式 [左操作数位置 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                                    子表达式 [左操作数位置 ＋ 2] ＝ 动态RAM分配地址

                                                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2

                                                    子表达式 [运算符位置] ＝ 32
                                                    子表达式 [右操作数位置] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 2] ＝ 32

                                                    扫描指针 ＝ 1
                                                    操作数计数 ＝ 0
                                                    状态 ＝ “继续”
                                                .如果真结束


                                            .判断结束




                                        .判断 ((右移 (左操作数, 16) ＝ #无符号int数组 或 右移 (左操作数, 16) ＝ #有符号int数组) 且 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC 或 右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 或 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC 或 右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char 或 右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int 或 右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组) 且 到文本 (运算符) ＝ “+”)

                                            .判断开始 (右扫空标志 ＝ 1 且 操作数计数 ≥ 2 且 (右移 (左操作数前操作数, 16) ＝ #无符号int 或 右移 (左操作数前操作数, 16) ＝ #有符号int 或 右移 (左操作数前操作数, 16) ＝ #无符号char指针 或 右移 (左操作数前操作数, 16) ＝ #有符号char指针 或 右移 (左操作数前操作数, 16) ＝ #无符号int指针 或 右移 (左操作数前操作数, 16) ＝ #有符号int指针 或 右移 (左操作数前操作数, 16) ＝ #无符号长int指针 或 右移 (左操作数前操作数, 16) ＝ #有符号长int指针) 且 到文本 (左操作数前运算符) ＝ “=”)

                                                状态 ＝ 二元式机器码生成 (#无符号int指针 × 65536 ＋ 位与 (左操作数前操作数, 65535), 左操作数, 到文本 (运算符), 右操作数)
                                                .如果真 (状态 ＝ “完成”)

                                                    子表达式 [左操作数前运算符位置] ＝ 32
                                                    子表达式 [左操作数位置] ＝ 32
                                                    子表达式 [左操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [左操作数位置 ＋ 2] ＝ 32
                                                    子表达式 [运算符位置] ＝ 32
                                                    子表达式 [右操作数位置] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 2] ＝ 32

                                                    扫描指针 ＝ 1
                                                    操作数计数 ＝ 0
                                                    状态 ＝ “继续”

                                                .如果真结束



                                            .默认
                                                状态 ＝ 二元式机器码生成 (#无符号int指针 × 65536 ＋ 位与 (动态RAM分配地址, 65535), 左操作数, 到文本 (运算符), 右操作数)
                                                .如果真 (状态 ＝ “完成”)

                                                    .判断开始 (右移 (左操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #无符号int数组)
                                                        子表达式 [左操作数位置] ＝ #无符号int指针
                                                    .默认
                                                        子表达式 [左操作数位置] ＝ #有符号int指针
                                                    .判断结束

                                                    子表达式 [左操作数位置 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                                    子表达式 [左操作数位置 ＋ 2] ＝ 动态RAM分配地址

                                                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2

                                                    子表达式 [运算符位置] ＝ 32
                                                    子表达式 [右操作数位置] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 2] ＝ 32

                                                    扫描指针 ＝ 1
                                                    操作数计数 ＝ 0
                                                    状态 ＝ “继续”
                                                .如果真结束


                                            .判断结束




                                        .判断 ((右移 (左操作数, 16) ＝ #无符号长int数组 或 右移 (左操作数, 16) ＝ #有符号长int数组) 且 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC 或 右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 或 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC 或 右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char 或 右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int 或 右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组) 且 到文本 (运算符) ＝ “+”)

                                            .判断开始 (右扫空标志 ＝ 1 且 操作数计数 ≥ 2 且 (右移 (左操作数前操作数, 16) ＝ #无符号int 或 右移 (左操作数前操作数, 16) ＝ #有符号int 或 右移 (左操作数前操作数, 16) ＝ #无符号char指针 或 右移 (左操作数前操作数, 16) ＝ #有符号char指针 或 右移 (左操作数前操作数, 16) ＝ #无符号int指针 或 右移 (左操作数前操作数, 16) ＝ #有符号int指针 或 右移 (左操作数前操作数, 16) ＝ #无符号长int指针 或 右移 (左操作数前操作数, 16) ＝ #有符号长int指针) 且 到文本 (左操作数前运算符) ＝ “=”)

                                                状态 ＝ 二元式机器码生成 (#无符号长int指针 × 65536 ＋ 位与 (左操作数前操作数, 65535), 左操作数, 到文本 (运算符), 右操作数)
                                                .如果真 (状态 ＝ “完成”)

                                                    子表达式 [左操作数前运算符位置] ＝ 32
                                                    子表达式 [左操作数位置] ＝ 32
                                                    子表达式 [左操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [左操作数位置 ＋ 2] ＝ 32
                                                    子表达式 [运算符位置] ＝ 32
                                                    子表达式 [右操作数位置] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 2] ＝ 32

                                                    扫描指针 ＝ 1
                                                    操作数计数 ＝ 0
                                                    状态 ＝ “继续”

                                                .如果真结束



                                            .默认
                                                状态 ＝ 二元式机器码生成 (#无符号长int指针 × 65536 ＋ 位与 (动态RAM分配地址, 65535), 左操作数, 到文本 (运算符), 右操作数)
                                                .如果真 (状态 ＝ “完成”)

                                                    .判断开始 (右移 (左操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组)
                                                        子表达式 [左操作数位置] ＝ #无符号长int指针
                                                    .默认
                                                        子表达式 [左操作数位置] ＝ #有符号长int指针
                                                    .判断结束

                                                    子表达式 [左操作数位置 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                                    子表达式 [左操作数位置 ＋ 2] ＝ 动态RAM分配地址

                                                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2

                                                    子表达式 [运算符位置] ＝ 32
                                                    子表达式 [右操作数位置] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 2] ＝ 32

                                                    扫描指针 ＝ 1
                                                    操作数计数 ＝ 0
                                                    状态 ＝ “继续”
                                                .如果真结束


                                            .判断结束




                                        .判断 ((右移 (左操作数, 16) ＝ #无符号char数组 或 右移 (左操作数, 16) ＝ #有符号char数组) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数) 且 (右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组) 且 到文本 (运算符) ＝ “+”)

                                            .判断开始 (右移 (左操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #无符号char数组)
                                                子表达式 [左操作数位置] ＝ #无符号char数组
                                            .默认
                                                子表达式 [左操作数位置] ＝ #有符号char数组
                                            .判断结束

                                            .判断开始 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数)

                                                .判断开始 (右移 (右操作数, 16) ＝ #常量)
                                                    .判断开始 (到文本 (运算符) ＝ “+”)
                                                        右操作数 ＝ 左操作数 ＋ 常量值 [位与 (右操作数, 65535) ＋ 1]
                                                    .默认
                                                        右操作数 ＝ 左操作数 － 常量值 [位与 (右操作数, 65535) ＋ 1]
                                                    .判断结束

                                                .默认

                                                    .判断开始 (到文本 (运算符) ＝ “+”)
                                                        右操作数 ＝ 左操作数 ＋ 立即数值 [位与 (右操作数, 65535) ＋ 1]
                                                    .默认
                                                        右操作数 ＝ 左操作数 － 立即数值 [位与 (右操作数, 65535) ＋ 1]
                                                    .判断结束

                                                .判断结束

                                                子表达式 [左操作数位置 ＋ 1] ＝ 右移 (右操作数, 8)
                                                子表达式 [左操作数位置 ＋ 2] ＝ 右操作数

                                            .默认

                                                .判断开始 (右移 (左操作数, 16) ＝ #常量)
                                                    左操作数 ＝ 常量值 [位与 (左操作数, 65535) ＋ 1] ＋ 右操作数
                                                .默认
                                                    左操作数 ＝ 立即数值 [位与 (左操作数, 65535) ＋ 1] ＋ 右操作数
                                                .判断结束

                                                子表达式 [左操作数位置 ＋ 1] ＝ 右移 (左操作数, 8)
                                                子表达式 [左操作数位置 ＋ 2] ＝ 左操作数

                                            .判断结束


                                            子表达式 [运算符位置] ＝ 32
                                            子表达式 [右操作数位置] ＝ 32
                                            子表达式 [右操作数位置 ＋ 1] ＝ 32
                                            子表达式 [右操作数位置 ＋ 2] ＝ 32

                                            扫描指针 ＝ 1
                                            操作数计数 ＝ 0
                                            状态 ＝ “继续”



                                        .判断 ((右移 (左操作数, 16) ＝ #无符号int数组 或 右移 (左操作数, 16) ＝ #有符号int数组) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数) 且 (右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组) 且 到文本 (运算符) ＝ “+”)

                                            .判断开始 (右移 (左操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #无符号int数组)
                                                子表达式 [左操作数位置] ＝ #无符号int数组
                                            .默认
                                                子表达式 [左操作数位置] ＝ #有符号int数组
                                            .判断结束

                                            .判断开始 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数)

                                                .判断开始 (右移 (右操作数, 16) ＝ #常量)
                                                    .判断开始 (到文本 (运算符) ＝ “+”)
                                                        右操作数 ＝ 左操作数 ＋ 左移 (常量值 [位与 (右操作数, 65535) ＋ 1], 1)
                                                    .默认
                                                        右操作数 ＝ 左操作数 － 左移 (常量值 [位与 (右操作数, 65535) ＋ 1], 1)
                                                    .判断结束

                                                .默认

                                                    .判断开始 (到文本 (运算符) ＝ “+”)
                                                        右操作数 ＝ 左操作数 ＋ 左移 (立即数值 [位与 (右操作数, 65535) ＋ 1], 1)
                                                    .默认
                                                        右操作数 ＝ 左操作数 － 左移 (立即数值 [位与 (右操作数, 65535) ＋ 1], 1)
                                                    .判断结束

                                                .判断结束

                                                子表达式 [左操作数位置 ＋ 1] ＝ 右移 (右操作数, 8)
                                                子表达式 [左操作数位置 ＋ 2] ＝ 右操作数

                                            .默认

                                                .判断开始 (右移 (左操作数, 16) ＝ #常量)
                                                    左操作数 ＝ 左移 (常量值 [位与 (左操作数, 65535) ＋ 1], 1) ＋ 右操作数
                                                .默认
                                                    左操作数 ＝ 左移 (立即数值 [位与 (左操作数, 65535) ＋ 1], 1) ＋ 右操作数
                                                .判断结束

                                                子表达式 [左操作数位置 ＋ 1] ＝ 右移 (左操作数, 8)
                                                子表达式 [左操作数位置 ＋ 2] ＝ 左操作数

                                            .判断结束


                                            子表达式 [运算符位置] ＝ 32
                                            子表达式 [右操作数位置] ＝ 32
                                            子表达式 [右操作数位置 ＋ 1] ＝ 32
                                            子表达式 [右操作数位置 ＋ 2] ＝ 32

                                            扫描指针 ＝ 1
                                            操作数计数 ＝ 0
                                            状态 ＝ “继续”



                                        .判断 ((右移 (左操作数, 16) ＝ #无符号长int数组 或 右移 (左操作数, 16) ＝ #有符号长int数组) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数) 且 (右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组) 且 到文本 (运算符) ＝ “+”)

                                            .判断开始 (右移 (左操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组)
                                                子表达式 [左操作数位置] ＝ #无符号长int数组
                                            .默认
                                                子表达式 [左操作数位置] ＝ #有符号长int数组
                                            .判断结束

                                            .判断开始 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数)

                                                .判断开始 (右移 (右操作数, 16) ＝ #常量)
                                                    .判断开始 (到文本 (运算符) ＝ “+”)
                                                        右操作数 ＝ 左操作数 ＋ 左移 (常量值 [位与 (右操作数, 65535) ＋ 1], 2)
                                                    .默认
                                                        右操作数 ＝ 左操作数 － 左移 (常量值 [位与 (右操作数, 65535) ＋ 1], 2)
                                                    .判断结束

                                                .默认

                                                    .判断开始 (到文本 (运算符) ＝ “+”)
                                                        右操作数 ＝ 左操作数 ＋ 左移 (立即数值 [位与 (右操作数, 65535) ＋ 1], 2)
                                                    .默认
                                                        右操作数 ＝ 左操作数 － 左移 (立即数值 [位与 (右操作数, 65535) ＋ 1], 2)
                                                    .判断结束

                                                .判断结束

                                                子表达式 [左操作数位置 ＋ 1] ＝ 右移 (右操作数, 8)
                                                子表达式 [左操作数位置 ＋ 2] ＝ 右操作数

                                            .默认

                                                .判断开始 (右移 (左操作数, 16) ＝ #常量)
                                                    左操作数 ＝ 左移 (常量值 [位与 (左操作数, 65535) ＋ 1], 2) ＋ 右操作数
                                                .默认
                                                    左操作数 ＝ 左移 (立即数值 [位与 (左操作数, 65535) ＋ 1], 2) ＋ 右操作数
                                                .判断结束

                                                子表达式 [左操作数位置 ＋ 1] ＝ 右移 (左操作数, 8)
                                                子表达式 [左操作数位置 ＋ 2] ＝ 左操作数

                                            .判断结束


                                            子表达式 [运算符位置] ＝ 32
                                            子表达式 [右操作数位置] ＝ 32
                                            子表达式 [右操作数位置 ＋ 1] ＝ 32
                                            子表达式 [右操作数位置 ＋ 2] ＝ 32

                                            扫描指针 ＝ 1
                                            操作数计数 ＝ 0
                                            状态 ＝ “继续”



                                        .判断 ((右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数))

                                            子表达式 [左操作数位置] ＝ #立即数

                                            .判断开始 (右移 (左操作数, 16) ＝ #常量)
                                                左操作数 ＝ 常量值 [位与 (左操作数, 65535) ＋ 1]
                                            .默认
                                                左操作数 ＝ 立即数值 [位与 (左操作数, 65535) ＋ 1]
                                            .判断结束

                                            .判断开始 (右移 (右操作数, 16) ＝ #常量)
                                                右操作数 ＝ 常量值 [位与 (右操作数, 65535) ＋ 1]
                                            .默认
                                                右操作数 ＝ 立即数值 [位与 (右操作数, 65535) ＋ 1]
                                            .判断结束

                                            .判断开始 (到文本 (运算符) ＝ “+”)
                                                立即数值 [立即数总数 ＋ 1] ＝ 左操作数 ＋ 右操作数
                                            .默认
                                                立即数值 [立即数总数 ＋ 1] ＝ 左操作数 － 右操作数
                                            .判断结束

                                            子表达式 [左操作数位置 ＋ 1] ＝ 右移 (立即数总数, 8)
                                            子表达式 [左操作数位置 ＋ 2] ＝ 立即数总数

                                            立即数总数 ＝ 立即数总数 ＋ 1

                                            子表达式 [运算符位置] ＝ 32
                                            子表达式 [右操作数位置] ＝ 32
                                            子表达式 [右操作数位置 ＋ 1] ＝ 32
                                            子表达式 [右操作数位置 ＋ 2] ＝ 32

                                            扫描指针 ＝ 1
                                            操作数计数 ＝ 0
                                            状态 ＝ “继续”



                                        .默认
                                            状态 ＝ “子表达式处理_双目运算符处理_参加+-运算的操作数错误~!- =”
                                        .判断结束



                                    .如果真结束



                                .如果真结束



                            .如果真结束



                        .如果真结束



                    .如果真结束



                .判断结束



            .如果真结束



        .判断 (优先级计数 ＝ 3 且 (到文本 (到字节集 (子表达式 [扫描指针])) ＝ “<” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “>”))

            运算符 ＝ 到字节集 (子表达式 [扫描指针])
            运算符位置 ＝ 扫描指针

            扫描指针 ＝ 扫描指针 ＋ 1
            .判断循环首 (扫描指针 ≤ 取字节集长度 (子表达式) 且 子表达式 [扫描指针] ＝ 32)
                扫描指针 ＝ 扫描指针 ＋ 1
            .判断循环尾 ()

            右操作数 ＝ 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2]
            右操作数位置 ＝ 扫描指针

            扫描指针 ＝ 扫描指针 ＋ 3
            .判断循环首 (扫描指针 ≤ 取字节集长度 (子表达式) 且 子表达式 [扫描指针] ＝ 32)
                扫描指针 ＝ 扫描指针 ＋ 1
            .判断循环尾 ()

            .判断开始 (扫描指针 ≤ 取字节集长度 (子表达式))
                右扫空标志 ＝ 0
            .默认
                右扫空标志 ＝ 1
            .判断结束


            .判断开始 (累加器内容状态 ≠ “ACC” 且 右移 (左操作数, 16) ≠ #无符号ACC 且 右移 (左操作数, 16) ≠ #有符号ACC 且 右移 (右操作数, 16) ≠ #无符号ACC 且 右移 (右操作数, 16) ≠ #有符号ACC)

                状态 ＝ 二元式机器码生成 (0, #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, #ACC × 65536)
                .如果真 (状态 ＝ “完成”)

                    .判断开始 (累加器内容状态 ＝ “无符号ACC”)
                        计数4 ＝ #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                    .默认
                        计数4 ＝ #有符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                    .判断结束

                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 1

                    .判断开始 (累加器位置 ＝ “子表达式”)
                        子表达式 [表达式累加器地址 ＋ 1] ＝ 右移 (计数4, 16)
                        子表达式 [表达式累加器地址 ＋ 2] ＝ 右移 (计数4, 8)
                        子表达式 [表达式累加器地址 ＋ 3] ＝ 计数4
                    .默认
                        主表达式 [表达式累加器地址 ＋ 1] ＝ 右移 (计数4, 16)
                        主表达式 [表达式累加器地址 ＋ 2] ＝ 右移 (计数4, 8)
                        主表达式 [表达式累加器地址 ＋ 3] ＝ 计数4
                    .判断结束

                    累加器内容状态 ＝ “ACC”

                .如果真结束


            .默认
                状态 ＝ “完成”
                累加器内容状态 ＝ “ACC”
            .判断结束


            .如果真 (状态 ＝ “完成”)

                状态 ＝ “继续”

                .如果真 (右移 (左操作数, 16) ＝ #无符号char指针 或 右移 (左操作数, 16) ＝ #有符号char指针 或 右移 (左操作数, 16) ＝ #无符号int指针 或 右移 (左操作数, 16) ＝ #有符号int指针 或 右移 (左操作数, 16) ＝ #无符号长int指针 或 右移 (左操作数, 16) ＝ #有符号长int指针)
                    左操作数 ＝ #无符号int × 65536 ＋ 位与 (左操作数, 65535)
                .如果真结束

                .如果真 (右移 (右操作数, 16) ＝ #无符号char指针 或 右移 (右操作数, 16) ＝ #有符号char指针 或 右移 (右操作数, 16) ＝ #无符号int指针 或 右移 (右操作数, 16) ＝ #有符号int指针 或 右移 (右操作数, 16) ＝ #无符号长int指针 或 右移 (右操作数, 16) ＝ #有符号长int指针)
                    右操作数 ＝ #无符号int × 65536 ＋ 位与 (右操作数, 65535)
                .如果真结束


                .判断开始 (右移 (左操作数, 16) ＝ #无符号char指针指向内容 或 右移 (左操作数, 16) ＝ #有符号char指针指向内容)

                    .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC)
                        状态 ＝ 二元式机器码生成 (0, #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                        .如果真 (状态 ＝ “完成”)
                            .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC)
                                右操作数 ＝ #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                            .默认
                                右操作数 ＝ #有符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                            .判断结束
                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 1
                        .如果真结束

                    .默认
                        状态 ＝ “完成”
                    .判断结束

                    .如果真 (状态 ＝ “完成”)
                        状态 ＝ 二元式机器码生成 (0, #无符号ACC × 65536, “=”, 左操作数)
                        .如果真 (状态 ＝ “完成”)
                            .判断开始 (右移 (左操作数, 16) ＝ #无符号char指针指向内容)
                                左操作数 ＝ #无符号ACC × 65536
                            .默认
                                左操作数 ＝ #有符号ACC × 65536
                            .判断结束

                            状态 ＝ “继续”
                        .如果真结束

                    .如果真结束


                .判断 (右移 (左操作数, 16) ＝ #无符号int指针指向内容 或 右移 (左操作数, 16) ＝ #有符号int指针指向内容)

                    .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC)
                        状态 ＝ 二元式机器码生成 (0, #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                        .如果真 (状态 ＝ “完成”)
                            右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                        .如果真结束

                    .默认
                        状态 ＝ “完成”
                    .判断结束

                    .如果真 (状态 ＝ “完成”)
                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                        .如果真 (状态 ＝ “完成”)
                            .判断开始 (右移 (左操作数, 16) ＝ #无符号int指针指向内容)
                                左操作数 ＝ #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                            .默认
                                左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                            .判断结束
                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                            状态 ＝ “继续”
                        .如果真结束

                    .如果真结束


                .判断 (右移 (左操作数, 16) ＝ #无符号长int指针指向内容 或 右移 (左操作数, 16) ＝ #有符号长int指针指向内容)

                    .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC)
                        状态 ＝ 二元式机器码生成 (0, #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                        .如果真 (状态 ＝ “完成”)
                            右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                        .如果真结束

                    .默认
                        状态 ＝ “完成”
                    .判断结束

                    .如果真 (状态 ＝ “完成”)
                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                        .如果真 (状态 ＝ “完成”)
                            .判断开始 (右移 (左操作数, 16) ＝ #无符号长int指针指向内容)
                                左操作数 ＝ #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                            .默认
                                左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                            .判断结束
                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                            状态 ＝ “继续”
                        .如果真结束

                    .如果真结束


                .默认

                .判断结束


                .如果真 (状态 ＝ “继续”)

                    .判断开始 (右移 (右操作数, 16) ＝ #无符号char指针指向内容 或 右移 (右操作数, 16) ＝ #有符号char指针指向内容)

                        .判断开始 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC)
                            状态 ＝ 二元式机器码生成 (0, #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                            .如果真 (状态 ＝ “完成”)
                                .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC)
                                    左操作数 ＝ #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                .默认
                                    左操作数 ＝ #有符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                .判断结束
                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 1
                            .如果真结束

                        .默认
                            状态 ＝ “完成”
                        .判断结束

                        .如果真 (状态 ＝ “完成”)
                            状态 ＝ 二元式机器码生成 (0, #无符号ACC × 65536, “=”, 右操作数)
                            .如果真 (状态 ＝ “完成”)
                                .判断开始 (右移 (右操作数, 16) ＝ #无符号char指针指向内容)
                                    右操作数 ＝ #无符号ACC × 65536
                                .默认
                                    右操作数 ＝ #有符号ACC × 65536
                                .判断结束

                                状态 ＝ “继续”
                            .如果真结束

                        .如果真结束


                    .判断 (右移 (右操作数, 16) ＝ #无符号int指针指向内容 或 右移 (右操作数, 16) ＝ #有符号int指针指向内容)

                        .判断开始 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC)
                            状态 ＝ 二元式机器码生成 (0, #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                            .如果真 (状态 ＝ “完成”)
                                左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                            .如果真结束

                        .默认
                            状态 ＝ “完成”
                        .判断结束

                        .如果真 (状态 ＝ “完成”)
                            状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                            .如果真 (状态 ＝ “完成”)
                                .判断开始 (右移 (右操作数, 16) ＝ #无符号int指针指向内容)
                                    右操作数 ＝ #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                .默认
                                    右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                .判断结束
                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                状态 ＝ “继续”
                            .如果真结束

                        .如果真结束


                    .判断 (右移 (右操作数, 16) ＝ #无符号长int指针指向内容 或 右移 (右操作数, 16) ＝ #有符号长int指针指向内容)

                        .判断开始 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC)
                            状态 ＝ 二元式机器码生成 (0, #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                            .如果真 (状态 ＝ “完成”)
                                左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                            .如果真结束

                        .默认
                            状态 ＝ “完成”
                        .判断结束

                        .如果真 (状态 ＝ “完成”)
                            状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                            .如果真 (状态 ＝ “完成”)
                                .判断开始 (右移 (右操作数, 16) ＝ #无符号长int指针指向内容)
                                    右操作数 ＝ #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                .默认
                                    右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                .判断结束
                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                状态 ＝ “继续”
                            .如果真结束

                        .如果真结束


                    .默认

                    .判断结束



                    .如果真 (状态 ＝ “继续”)

                        .判断开始 (右移 (左操作数, 16) ＝ #常量)

                            .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC)

                                .判断开始 (右移 (常量值 [位与 (左操作数, 65535) ＋ 1], 8) ＝ 0)



                                .判断 (右移 (常量值 [位与 (左操作数, 65535) ＋ 1], 16) ＝ 0)

                                    状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                    .如果真结束


                                .默认
                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                    .如果真结束

                                .判断结束



                            .判断 (右移 (右操作数, 16) ＝ #有符号ACC)

                                .判断开始 (常量值 [位与 (左操作数, 65535) ＋ 1] ≤ 127 且 常量值 [位与 (左操作数, 65535) ＋ 1] ≥ -128)



                                .判断 (常量值 [位与 (左操作数, 65535) ＋ 1] ≤ 32767 且 常量值 [位与 (左操作数, 65535) ＋ 1] ≥ -32768)

                                    状态 ＝ 二元式机器码生成 (0, #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                    .如果真结束


                                .默认
                                    状态 ＝ 二元式机器码生成 (0, #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4

                                    .如果真结束


                                .判断结束



                            .判断 (右移 (右操作数, 16) ＝ #无符号char)

                                .判断开始 (右移 (常量值 [位与 (左操作数, 65535) ＋ 1], 8) ＝ 0)

                                .判断 (右移 (常量值 [位与 (左操作数, 65535) ＋ 1], 16) ＝ 0)
                                    状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        状态 ＝ “继续”
                                    .如果真结束

                                .默认
                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束

                                .判断结束



                            .判断 (右移 (右操作数, 16) ＝ #有符号char)

                                .判断开始 (常量值 [位与 (左操作数, 65535) ＋ 1] ≤ 127 且 常量值 [位与 (左操作数, 65535) ＋ 1] ≥ -128)

                                .判断 (常量值 [位与 (左操作数, 65535) ＋ 1] ≤ 32767 且 常量值 [位与 (左操作数, 65535) ＋ 1] ≥ -32768)
                                    状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        状态 ＝ “继续”
                                    .如果真结束

                                .默认
                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束

                                .判断结束



                            .判断 (右移 (右操作数, 16) ＝ #无符号int)

                                .判断开始 (右移 (常量值 [位与 (左操作数, 65535) ＋ 1], 16) ＝ 0)

                                .默认
                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束

                                .判断结束



                            .判断 (右移 (右操作数, 16) ＝ #有符号int)

                                .判断开始 (常量值 [位与 (左操作数, 65535) ＋ 1] ≤ 32767 且 常量值 [位与 (左操作数, 65535) ＋ 1] ≥ -32768)

                                .默认
                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束

                                .判断结束



                            .默认

                            .判断结束





                        .判断 (右移 (左操作数, 16) ＝ #立即数)

                            .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC)

                                .判断开始 (右移 (立即数值 [位与 (左操作数, 65535) ＋ 1], 8) ＝ 0)




                                .判断 (右移 (立即数值 [位与 (左操作数, 65535) ＋ 1], 16) ＝ 0)

                                    状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                    .如果真结束


                                .默认
                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                    .如果真结束

                                .判断结束



                            .判断 (右移 (右操作数, 16) ＝ #有符号ACC)

                                .判断开始 (立即数值 [位与 (左操作数, 65535) ＋ 1] ≤ 127 且 立即数值 [位与 (左操作数, 65535) ＋ 1] ≥ -128)



                                .判断 (立即数值 [位与 (左操作数, 65535) ＋ 1] ≤ 32767 且 立即数值 [位与 (左操作数, 65535) ＋ 1] ≥ -32768)

                                    状态 ＝ 二元式机器码生成 (0, #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                    .如果真结束


                                .默认
                                    状态 ＝ 二元式机器码生成 (0, #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                    .如果真结束


                                .判断结束



                            .判断 (右移 (右操作数, 16) ＝ #无符号char)

                                .判断开始 (右移 (立即数值 [位与 (左操作数, 65535) ＋ 1], 8) ＝ 0)


                                .判断 (右移 (立即数值 [位与 (左操作数, 65535) ＋ 1], 16) ＝ 0)
                                    状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        状态 ＝ “继续”
                                    .如果真结束

                                .默认
                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束

                                .判断结束



                            .判断 (右移 (右操作数, 16) ＝ #有符号char)

                                .判断开始 (立即数值 [位与 (左操作数, 65535) ＋ 1] ≤ 127 且 立即数值 [位与 (左操作数, 65535) ＋ 1] ≥ -128)

                                .判断 (立即数值 [位与 (左操作数, 65535) ＋ 1] ≤ 32767 且 立即数值 [位与 (左操作数, 65535) ＋ 1] ≥ -32768)
                                    状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        状态 ＝ “继续”
                                    .如果真结束

                                .默认
                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束

                                .判断结束



                            .判断 (右移 (右操作数, 16) ＝ #无符号int)

                                .判断开始 (右移 (立即数值 [位与 (左操作数, 65535) ＋ 1], 16) ＝ 0)

                                .默认
                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束

                                .判断结束



                            .判断 (右移 (右操作数, 16) ＝ #有符号int)

                                .判断开始 (立即数值 [位与 (左操作数, 65535) ＋ 1] ≤ 32767 且 立即数值 [位与 (左操作数, 65535) ＋ 1] ≥ -32768)

                                .默认
                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束

                                .判断结束



                            .默认

                            .判断结束

                        .默认

                        .判断结束



                        .如果真 (状态 ＝ “继续”)

                            .判断开始 (右移 (右操作数, 16) ＝ #常量)

                                .判断开始 (右移 (左操作数, 16) ＝ #无符号ACC)

                                    .判断开始 (右移 (常量值 [位与 (右操作数, 65535) ＋ 1], 8) ＝ 0)



                                    .判断 (右移 (常量值 [位与 (右操作数, 65535) ＋ 1], 16) ＝ 0)

                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        .如果真结束


                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        .如果真结束

                                    .判断结束



                                .判断 (右移 (左操作数, 16) ＝ #有符号ACC)

                                    .判断开始 (常量值 [位与 (右操作数, 65535) ＋ 1] ≤ 127 且 常量值 [位与 (右操作数, 65535) ＋ 1] ≥ -128)



                                    .判断 (常量值 [位与 (右操作数, 65535) ＋ 1] ≤ 32767 且 常量值 [位与 (右操作数, 65535) ＋ 1] ≥ -32768)

                                        状态 ＝ 二元式机器码生成 (0, #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        .如果真结束


                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        .如果真结束


                                    .判断结束



                                .判断 (右移 (左操作数, 16) ＝ #无符号char)

                                    .判断开始 (右移 (常量值 [位与 (右操作数, 65535) ＋ 1], 8) ＝ 0)

                                    .判断 (右移 (常量值 [位与 (右操作数, 65535) ＋ 1], 16) ＝ 0)
                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .判断结束



                                .判断 (右移 (左操作数, 16) ＝ #有符号char)

                                    .判断开始 (常量值 [位与 (右操作数, 65535) ＋ 1] ≤ 127 且 常量值 [位与 (右操作数, 65535) ＋ 1] ≥ -128)

                                    .判断 (常量值 [位与 (右操作数, 65535) ＋ 1] ≤ 32767 且 常量值 [位与 (右操作数, 65535) ＋ 1] ≥ -32768)
                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .判断结束



                                .判断 (右移 (左操作数, 16) ＝ #无符号int)

                                    .判断开始 (右移 (常量值 [位与 (右操作数, 65535) ＋ 1], 16) ＝ 0)

                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .判断结束



                                .判断 (右移 (左操作数, 16) ＝ #有符号int)

                                    .判断开始 (常量值 [位与 (右操作数, 65535) ＋ 1] ≤ 32767 且 常量值 [位与 (右操作数, 65535) ＋ 1] ≥ -32768)

                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .判断结束



                                .默认

                                .判断结束




                            .判断 (右移 (右操作数, 16) ＝ #立即数)

                                .判断开始 (右移 (左操作数, 16) ＝ #无符号ACC)

                                    .判断开始 (右移 (立即数值 [位与 (右操作数, 65535) ＋ 1], 8) ＝ 0)



                                    .判断 (右移 (立即数值 [位与 (右操作数, 65535) ＋ 1], 16) ＝ 0)

                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        .如果真结束


                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        .如果真结束

                                    .判断结束



                                .判断 (右移 (左操作数, 16) ＝ #有符号ACC)

                                    .判断开始 (立即数值 [位与 (右操作数, 65535) ＋ 1] ≤ 127 且 立即数值 [位与 (右操作数, 65535) ＋ 1] ≥ -128)


                                    .判断 (立即数值 [位与 (右操作数, 65535) ＋ 1] ≤ 32767 且 立即数值 [位与 (右操作数, 65535) ＋ 1] ≥ -32768)

                                        状态 ＝ 二元式机器码生成 (0, #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        .如果真结束


                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        .如果真结束


                                    .判断结束



                                .判断 (右移 (左操作数, 16) ＝ #无符号char)

                                    .判断开始 (右移 (立即数值 [位与 (右操作数, 65535) ＋ 1], 8) ＝ 0)

                                    .判断 (右移 (立即数值 [位与 (右操作数, 65535) ＋ 1], 16) ＝ 0)
                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .判断结束



                                .判断 (右移 (左操作数, 16) ＝ #有符号char)

                                    .判断开始 (立即数值 [位与 (右操作数, 65535) ＋ 1] ≤ 127 且 立即数值 [位与 (右操作数, 65535) ＋ 1] ≥ -128)

                                    .判断 (立即数值 [位与 (右操作数, 65535) ＋ 1] ≤ 32767 且 立即数值 [位与 (右操作数, 65535) ＋ 1] ≥ -32768)
                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .判断结束



                                .判断 (右移 (左操作数, 16) ＝ #无符号int)

                                    .判断开始 (右移 (立即数值 [位与 (右操作数, 65535) ＋ 1], 16) ＝ 0)

                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .判断结束



                                .判断 (右移 (左操作数, 16) ＝ #有符号int)

                                    .判断开始 (立即数值 [位与 (右操作数, 65535) ＋ 1] ≤ 32767 且 立即数值 [位与 (右操作数, 65535) ＋ 1] ≥ -32768)

                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .判断结束



                                .默认

                                .判断结束

                            .默认

                            .判断结束



                            .如果真 (状态 ＝ “继续”)

                                .判断开始 ((右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int) 且 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC))

                                    状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        状态 ＝ “继续”
                                    .如果真结束


                                .判断 ((右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char))

                                    A等于_RAM (右操作数)
                                    .判断开始 (右移 (右操作数, 16) ＝ #无符号char)
                                        右操作数 ＝ #无符号ACC × 65536
                                    .默认
                                        右操作数 ＝ #有符号ACC × 65536
                                    .判断结束

                                    状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        状态 ＝ “继续”
                                    .如果真结束



                                .判断 ((右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC))

                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束


                                .判断 ((右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char))

                                    A等于_RAM (右操作数)
                                    .判断开始 (右移 (右操作数, 16) ＝ #无符号char)
                                        右操作数 ＝ #无符号ACC × 65536
                                    .默认
                                        右操作数 ＝ #有符号ACC × 65536
                                    .判断结束

                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束



                                .判断 ((右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int))

                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束



                                .判断 ((右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int) 且 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC))

                                    状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        状态 ＝ “继续”
                                    .如果真结束


                                .判断 ((右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int) 且 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char))

                                    A等于_RAM (左操作数)
                                    .判断开始 (右移 (左操作数, 16) ＝ #无符号char)
                                        左操作数 ＝ #无符号ACC × 65536
                                    .默认
                                        左操作数 ＝ #有符号ACC × 65536
                                    .判断结束

                                    状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        状态 ＝ “继续”
                                    .如果真结束



                                .判断 ((右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC))

                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束


                                .判断 ((右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char))

                                    A等于_RAM (左操作数)
                                    .判断开始 (右移 (左操作数, 16) ＝ #无符号char)
                                        左操作数 ＝ #无符号ACC × 65536
                                    .默认
                                        左操作数 ＝ #有符号ACC × 65536
                                    .判断结束

                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束



                                .判断 ((右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int))

                                    状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                    .如果真 (状态 ＝ “完成”)
                                        左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                        动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        状态 ＝ “继续”
                                    .如果真结束




                                .默认

                                .判断结束




                                .如果真 (状态 ＝ “继续”)

                                    .判断开始 ((右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char) 且 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC) 或 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char) 或 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char) 或 (右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int) 且 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int) 或 (右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 或 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC 或 右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char 或 右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int 或 右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数 或 右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组) 或 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC 或 右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数 或 右移 (左操作数, 16) ＝ #无符号char数组 或 右移 (左操作数, 16) ＝ #有符号char数组 或 右移 (左操作数, 16) ＝ #无符号int数组 或 右移 (左操作数, 16) ＝ #有符号int数组 或 右移 (左操作数, 16) ＝ #无符号长int数组 或 右移 (左操作数, 16) ＝ #有符号长int数组))
                                        状态 ＝ 二元式机器码生成 (#待修改跳转地址 × 65536, 左操作数, 到文本 (运算符), 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            .判断开始 (右扫空标志 ＝ 1 且 操作数计数 ＝ 1)
                                                子表达式 [左操作数位置] ＝ #待修改跳转地址

                                                子表达式 [运算符位置] ＝ 32
                                                子表达式 [右操作数位置] ＝ 32
                                                子表达式 [右操作数位置 ＋ 1] ＝ 32
                                                子表达式 [右操作数位置 ＋ 2] ＝ 32

                                                扫描指针 ＝ 1
                                                操作数计数 ＝ 0
                                                状态 ＝ “继续”

                                            .默认
                                                状态 ＝ 二元式机器码生成 (0, #ACC × 65536, “=”, #待修改跳转地址 × 65536)
                                                .如果真 (状态 ＝ “完成”)
                                                    子表达式 [左操作数位置] ＝ #有符号ACC

                                                    累加器内容状态 ＝ “有符号ACC”
                                                    累加器位置 ＝ “子表达式”
                                                    表达式累加器地址 ＝ 左操作数位置 － 1

                                                    子表达式 [运算符位置] ＝ 32
                                                    子表达式 [右操作数位置] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 2] ＝ 32

                                                    扫描指针 ＝ 1
                                                    操作数计数 ＝ 0
                                                    状态 ＝ “继续”

                                                .如果真结束

                                            .判断结束

                                        .如果真结束




                                    .判断 ((右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数))

                                        子表达式 [左操作数位置] ＝ #立即数

                                        .判断开始 (右移 (左操作数, 16) ＝ #常量)
                                            左操作数 ＝ 常量值 [位与 (左操作数, 65535) ＋ 1]
                                        .默认
                                            左操作数 ＝ 立即数值 [位与 (左操作数, 65535) ＋ 1]
                                        .判断结束

                                        .判断开始 (右移 (右操作数, 16) ＝ #常量)
                                            右操作数 ＝ 常量值 [位与 (右操作数, 65535) ＋ 1]
                                        .默认
                                            右操作数 ＝ 立即数值 [位与 (右操作数, 65535) ＋ 1]
                                        .判断结束

                                        .判断开始 (到文本 (运算符) ＝ “>”)
                                            .判断开始 (左操作数 ＞ 右操作数)
                                                立即数值 [立即数总数 ＋ 1] ＝ 1
                                            .默认
                                                立即数值 [立即数总数 ＋ 1] ＝ 0
                                            .判断结束

                                        .默认

                                            .判断开始 (左操作数 ＜ 右操作数)
                                                立即数值 [立即数总数 ＋ 1] ＝ 1
                                            .默认
                                                立即数值 [立即数总数 ＋ 1] ＝ 0
                                            .判断结束

                                        .判断结束

                                        子表达式 [左操作数位置 ＋ 1] ＝ 右移 (立即数总数, 8)
                                        子表达式 [左操作数位置 ＋ 2] ＝ 立即数总数

                                        立即数总数 ＝ 立即数总数 ＋ 1

                                        子表达式 [运算符位置] ＝ 32
                                        子表达式 [右操作数位置] ＝ 32
                                        子表达式 [右操作数位置 ＋ 1] ＝ 32
                                        子表达式 [右操作数位置 ＋ 2] ＝ 32

                                        扫描指针 ＝ 1
                                        操作数计数 ＝ 0
                                        状态 ＝ “继续”



                                    .默认
                                        状态 ＝ “子表达式处理_双目运算符处理_参加><运算的操作数错误~!- =”
                                    .判断结束


                                .如果真结束






                            .如果真结束



                        .如果真结束



                    .如果真结束



                .如果真结束



            .如果真结束



        .判断 (优先级计数 ＝ 5 且 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “&” 或 优先级计数 ＝ 6 且 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “^” 或 优先级计数 ＝ 7 且 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “|”)

            运算符 ＝ 到字节集 (子表达式 [扫描指针])
            运算符位置 ＝ 扫描指针

            扫描指针 ＝ 扫描指针 ＋ 1
            .判断循环首 (扫描指针 ≤ 取字节集长度 (子表达式) 且 子表达式 [扫描指针] ＝ 32)
                扫描指针 ＝ 扫描指针 ＋ 1
            .判断循环尾 ()

            右操作数 ＝ 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2]
            右操作数位置 ＝ 扫描指针

            扫描指针 ＝ 扫描指针 ＋ 3
            .判断循环首 (扫描指针 ≤ 取字节集长度 (子表达式) 且 子表达式 [扫描指针] ＝ 32)
                扫描指针 ＝ 扫描指针 ＋ 1
            .判断循环尾 ()

            .判断开始 (扫描指针 ≤ 取字节集长度 (子表达式))
                右扫空标志 ＝ 0
            .默认
                右扫空标志 ＝ 1
            .判断结束


            .判断开始 (累加器内容状态 ≠ “ACC” 且 右移 (左操作数, 16) ≠ #无符号ACC 且 右移 (左操作数, 16) ≠ #有符号ACC 且 右移 (右操作数, 16) ≠ #无符号ACC 且 右移 (右操作数, 16) ≠ #有符号ACC)

                状态 ＝ 二元式机器码生成 (0, #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, #ACC × 65536)
                .如果真 (状态 ＝ “完成”)

                    .判断开始 (累加器内容状态 ＝ “无符号ACC”)
                        计数4 ＝ #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                    .默认
                        计数4 ＝ #有符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                    .判断结束

                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 1

                    .判断开始 (累加器位置 ＝ “子表达式”)
                        子表达式 [表达式累加器地址 ＋ 1] ＝ 右移 (计数4, 16)
                        子表达式 [表达式累加器地址 ＋ 2] ＝ 右移 (计数4, 8)
                        子表达式 [表达式累加器地址 ＋ 3] ＝ 计数4
                    .默认
                        主表达式 [表达式累加器地址 ＋ 1] ＝ 右移 (计数4, 16)
                        主表达式 [表达式累加器地址 ＋ 2] ＝ 右移 (计数4, 8)
                        主表达式 [表达式累加器地址 ＋ 3] ＝ 计数4
                    .判断结束

                    累加器内容状态 ＝ “ACC”

                .如果真结束


            .默认
                状态 ＝ “完成”
                累加器内容状态 ＝ “ACC”
            .判断结束


            .如果真 (状态 ＝ “完成”)

                状态 ＝ “继续”

                .判断开始 (右移 (左操作数, 16) ＝ #ACC 且 右移 (右操作数, 16) ＝ #R1 或 右移 (左操作数, 16) ＝ #R1 且 右移 (右操作数, 16) ＝ #ACC)

                    .判断开始 (到文本 (运算符) ＝ “&”)
                        A等于A与R1 ()
                    .判断 (到文本 (运算符) ＝ “^”)
                        A等于A异或R1 ()
                    .默认
                        A等于A或R1 ()
                    .判断结束

                    子表达式 [左操作数位置] ＝ #ACC

                    子表达式 [运算符位置] ＝ 32
                    子表达式 [右操作数位置] ＝ 32
                    子表达式 [右操作数位置 ＋ 1] ＝ 32
                    子表达式 [右操作数位置 ＋ 2] ＝ 32

                    扫描指针 ＝ 1
                    操作数计数 ＝ 0


                .默认

                    .判断开始 (右移 (左操作数, 16) ＝ #无符号char指针指向内容 或 右移 (左操作数, 16) ＝ #有符号char指针指向内容)

                        .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC)
                            状态 ＝ 二元式机器码生成 (0, #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                            .如果真 (状态 ＝ “完成”)
                                .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC)
                                    右操作数 ＝ #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                .默认
                                    右操作数 ＝ #有符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                .判断结束
                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 1
                            .如果真结束

                        .默认
                            状态 ＝ “完成”
                        .判断结束

                        .如果真 (状态 ＝ “完成”)
                            状态 ＝ 二元式机器码生成 (0, #无符号ACC × 65536, “=”, 左操作数)
                            .如果真 (状态 ＝ “完成”)
                                .判断开始 (右移 (左操作数, 16) ＝ #无符号char指针指向内容)
                                    左操作数 ＝ #无符号ACC × 65536
                                .默认
                                    左操作数 ＝ #有符号ACC × 65536
                                .判断结束

                                状态 ＝ “继续”
                            .如果真结束

                        .如果真结束


                    .判断 (右移 (左操作数, 16) ＝ #无符号int指针指向内容 或 右移 (左操作数, 16) ＝ #有符号int指针指向内容)

                        .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC)
                            状态 ＝ 二元式机器码生成 (0, #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                            .如果真 (状态 ＝ “完成”)
                                右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                            .如果真结束

                        .默认
                            状态 ＝ “完成”
                        .判断结束

                        .如果真 (状态 ＝ “完成”)
                            状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                            .如果真 (状态 ＝ “完成”)
                                .判断开始 (右移 (左操作数, 16) ＝ #无符号int指针指向内容)
                                    左操作数 ＝ #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                .默认
                                    左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                .判断结束
                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                状态 ＝ “继续”
                            .如果真结束

                        .如果真结束


                    .判断 (右移 (左操作数, 16) ＝ #无符号长int指针指向内容 或 右移 (左操作数, 16) ＝ #有符号长int指针指向内容)

                        .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC)
                            状态 ＝ 二元式机器码生成 (0, #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                            .如果真 (状态 ＝ “完成”)
                                右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                            .如果真结束

                        .默认
                            状态 ＝ “完成”
                        .判断结束

                        .如果真 (状态 ＝ “完成”)
                            状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                            .如果真 (状态 ＝ “完成”)
                                .判断开始 (右移 (左操作数, 16) ＝ #无符号长int指针指向内容)
                                    左操作数 ＝ #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                .默认
                                    左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                .判断结束
                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                状态 ＝ “继续”
                            .如果真结束

                        .如果真结束


                    .默认

                    .判断结束


                    .如果真 (状态 ＝ “继续”)

                        .判断开始 (右移 (右操作数, 16) ＝ #无符号char指针指向内容 或 右移 (右操作数, 16) ＝ #有符号char指针指向内容)

                            .判断开始 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC)
                                状态 ＝ 二元式机器码生成 (0, #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                .如果真 (状态 ＝ “完成”)
                                    .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC)
                                        左操作数 ＝ #无符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                    .默认
                                        左操作数 ＝ #有符号char × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                    .判断结束
                                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 1
                                .如果真结束

                            .默认
                                状态 ＝ “完成”
                            .判断结束

                            .如果真 (状态 ＝ “完成”)
                                状态 ＝ 二元式机器码生成 (0, #无符号ACC × 65536, “=”, 右操作数)
                                .如果真 (状态 ＝ “完成”)
                                    .判断开始 (右移 (右操作数, 16) ＝ #无符号char指针指向内容)
                                        右操作数 ＝ #无符号ACC × 65536
                                    .默认
                                        右操作数 ＝ #有符号ACC × 65536
                                    .判断结束

                                    状态 ＝ “继续”
                                .如果真结束

                            .如果真结束


                        .判断 (右移 (右操作数, 16) ＝ #无符号int指针指向内容 或 右移 (右操作数, 16) ＝ #有符号int指针指向内容)

                            .判断开始 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC)
                                状态 ＝ 二元式机器码生成 (0, #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                .如果真 (状态 ＝ “完成”)
                                    左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                .如果真结束

                            .默认
                                状态 ＝ “完成”
                            .判断结束

                            .如果真 (状态 ＝ “完成”)
                                状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                .如果真 (状态 ＝ “完成”)
                                    .判断开始 (右移 (右操作数, 16) ＝ #无符号int指针指向内容)
                                        右操作数 ＝ #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                    .默认
                                        右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                    .判断结束
                                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                    状态 ＝ “继续”
                                .如果真结束

                            .如果真结束


                        .判断 (右移 (右操作数, 16) ＝ #无符号长int指针指向内容 或 右移 (右操作数, 16) ＝ #有符号长int指针指向内容)

                            .判断开始 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC)
                                状态 ＝ 二元式机器码生成 (0, #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                .如果真 (状态 ＝ “完成”)
                                    左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                .如果真结束

                            .默认
                                状态 ＝ “完成”
                            .判断结束

                            .如果真 (状态 ＝ “完成”)
                                状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                .如果真 (状态 ＝ “完成”)
                                    .判断开始 (右移 (右操作数, 16) ＝ #无符号长int指针指向内容)
                                        右操作数 ＝ #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                    .默认
                                        右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                    .判断结束
                                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                    状态 ＝ “继续”
                                .如果真结束

                            .如果真结束


                        .默认

                        .判断结束



                        .如果真 (状态 ＝ “继续”)

                            .判断开始 (右移 (左操作数, 16) ＝ #常量)

                                .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC)

                                    .判断开始 (右移 (常量值 [位与 (左操作数, 65535) ＋ 1], 8) ＝ 0)



                                    .判断 (右移 (常量值 [位与 (左操作数, 65535) ＋ 1], 16) ＝ 0)

                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        .如果真结束


                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        .如果真结束

                                    .判断结束



                                .判断 (右移 (右操作数, 16) ＝ #有符号ACC)

                                    .判断开始 (右移 (常量值 [位与 (左操作数, 65535) ＋ 1], 8) ＝ 0)



                                    .判断 (右移 (常量值 [位与 (左操作数, 65535) ＋ 1], 16) ＝ 0)

                                        状态 ＝ 二元式机器码生成 (0, #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        .如果真结束


                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4

                                        .如果真结束


                                    .判断结束



                                .判断 (右移 (右操作数, 16) ＝ #无符号char)

                                    .判断开始 (右移 (常量值 [位与 (左操作数, 65535) ＋ 1], 8) ＝ 0)

                                    .判断 (右移 (常量值 [位与 (左操作数, 65535) ＋ 1], 16) ＝ 0)
                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .判断结束



                                .判断 (右移 (右操作数, 16) ＝ #有符号char)

                                    .判断开始 (右移 (常量值 [位与 (左操作数, 65535) ＋ 1], 8) ＝ 0)

                                    .判断 (右移 (常量值 [位与 (左操作数, 65535) ＋ 1], 16) ＝ 0)
                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .判断结束



                                .判断 (右移 (右操作数, 16) ＝ #无符号int)

                                    .判断开始 (右移 (常量值 [位与 (左操作数, 65535) ＋ 1], 16) ＝ 0)

                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .判断结束



                                .判断 (右移 (右操作数, 16) ＝ #有符号int)

                                    .判断开始 (右移 (常量值 [位与 (左操作数, 65535) ＋ 1], 16) ＝ 0)

                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .判断结束



                                .默认

                                .判断结束





                            .判断 (右移 (左操作数, 16) ＝ #立即数)

                                .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC)

                                    .判断开始 (右移 (立即数值 [位与 (左操作数, 65535) ＋ 1], 8) ＝ 0)




                                    .判断 (右移 (立即数值 [位与 (左操作数, 65535) ＋ 1], 16) ＝ 0)

                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        .如果真结束


                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        .如果真结束

                                    .判断结束



                                .判断 (右移 (右操作数, 16) ＝ #有符号ACC)

                                    .判断开始 (右移 (立即数值 [位与 (左操作数, 65535) ＋ 1], 8) ＝ 0)



                                    .判断 (右移 (立即数值 [位与 (左操作数, 65535) ＋ 1], 16) ＝ 0)

                                        状态 ＝ 二元式机器码生成 (0, #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                        .如果真结束


                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                        .如果真结束


                                    .判断结束



                                .判断 (右移 (右操作数, 16) ＝ #无符号char)

                                    .判断开始 (右移 (立即数值 [位与 (左操作数, 65535) ＋ 1], 8) ＝ 0)


                                    .判断 (右移 (立即数值 [位与 (左操作数, 65535) ＋ 1], 16) ＝ 0)
                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .判断结束



                                .判断 (右移 (右操作数, 16) ＝ #有符号char)

                                    .判断开始 (右移 (立即数值 [位与 (左操作数, 65535) ＋ 1], 8) ＝ 0)

                                    .判断 (右移 (立即数值 [位与 (左操作数, 65535) ＋ 1], 16) ＝ 0)
                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .判断结束



                                .判断 (右移 (右操作数, 16) ＝ #无符号int)

                                    .判断开始 (右移 (立即数值 [位与 (左操作数, 65535) ＋ 1], 16) ＝ 0)

                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .判断结束



                                .判断 (右移 (右操作数, 16) ＝ #有符号int)

                                    .判断开始 (右移 (立即数值 [位与 (左操作数, 65535) ＋ 1], 16) ＝ 0)

                                    .默认
                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束

                                    .判断结束



                                .默认

                                .判断结束

                            .默认

                            .判断结束




                            .如果真 (状态 ＝ “继续”)

                                .判断开始 (右移 (右操作数, 16) ＝ #常量)

                                    .判断开始 (右移 (左操作数, 16) ＝ #无符号ACC)

                                        .判断开始 (右移 (常量值 [位与 (右操作数, 65535) ＋ 1], 8) ＝ 0)



                                        .判断 (右移 (常量值 [位与 (右操作数, 65535) ＋ 1], 16) ＝ 0)

                                            状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                            .如果真 (状态 ＝ “完成”)
                                                左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                            .如果真结束


                                        .默认
                                            状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                            .如果真 (状态 ＝ “完成”)
                                                左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            .如果真结束

                                        .判断结束



                                    .判断 (右移 (左操作数, 16) ＝ #有符号ACC)

                                        .判断开始 (右移 (常量值 [位与 (右操作数, 65535) ＋ 1], 8) ＝ 0)



                                        .判断 (右移 (常量值 [位与 (右操作数, 65535) ＋ 1], 16) ＝ 0)

                                            状态 ＝ 二元式机器码生成 (0, #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                            .如果真 (状态 ＝ “完成”)
                                                左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                            .如果真结束


                                        .默认
                                            状态 ＝ 二元式机器码生成 (0, #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                            .如果真 (状态 ＝ “完成”)
                                                左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            .如果真结束


                                        .判断结束



                                    .判断 (右移 (左操作数, 16) ＝ #无符号char)

                                        .判断开始 (右移 (常量值 [位与 (右操作数, 65535) ＋ 1], 8) ＝ 0)

                                        .判断 (右移 (常量值 [位与 (右操作数, 65535) ＋ 1], 16) ＝ 0)
                                            状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                            .如果真 (状态 ＝ “完成”)
                                                左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                                状态 ＝ “继续”
                                            .如果真结束

                                        .默认
                                            状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                            .如果真 (状态 ＝ “完成”)
                                                左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                                状态 ＝ “继续”
                                            .如果真结束

                                        .判断结束



                                    .判断 (右移 (左操作数, 16) ＝ #有符号char)

                                        .判断开始 (右移 (常量值 [位与 (右操作数, 65535) ＋ 1], 8) ＝ 0)

                                        .判断 (右移 (常量值 [位与 (右操作数, 65535) ＋ 1], 16) ＝ 0)
                                            状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                            .如果真 (状态 ＝ “完成”)
                                                左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                                状态 ＝ “继续”
                                            .如果真结束

                                        .默认
                                            状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                            .如果真 (状态 ＝ “完成”)
                                                左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                                状态 ＝ “继续”
                                            .如果真结束

                                        .判断结束



                                    .判断 (右移 (左操作数, 16) ＝ #无符号int)

                                        .判断开始 (右移 (常量值 [位与 (右操作数, 65535) ＋ 1], 16) ＝ 0)

                                        .默认
                                            状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                            .如果真 (状态 ＝ “完成”)
                                                左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                                状态 ＝ “继续”
                                            .如果真结束

                                        .判断结束



                                    .判断 (右移 (左操作数, 16) ＝ #有符号int)

                                        .判断开始 (右移 (常量值 [位与 (右操作数, 65535) ＋ 1], 16) ＝ 0)

                                        .默认
                                            状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                            .如果真 (状态 ＝ “完成”)
                                                左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                                状态 ＝ “继续”
                                            .如果真结束

                                        .判断结束



                                    .默认

                                    .判断结束




                                .判断 (右移 (右操作数, 16) ＝ #立即数)

                                    .判断开始 (右移 (左操作数, 16) ＝ #无符号ACC)

                                        .判断开始 (右移 (立即数值 [位与 (右操作数, 65535) ＋ 1], 8) ＝ 0)



                                        .判断 (右移 (立即数值 [位与 (右操作数, 65535) ＋ 1], 16) ＝ 0)

                                            状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                            .如果真 (状态 ＝ “完成”)
                                                左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                            .如果真结束


                                        .默认
                                            状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                            .如果真 (状态 ＝ “完成”)
                                                左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            .如果真结束

                                        .判断结束



                                    .判断 (右移 (左操作数, 16) ＝ #有符号ACC)

                                        .判断开始 (右移 (立即数值 [位与 (右操作数, 65535) ＋ 1], 8) ＝ 0)


                                        .判断 (右移 (立即数值 [位与 (右操作数, 65535) ＋ 1], 16) ＝ 0)

                                            状态 ＝ 二元式机器码生成 (0, #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                            .如果真 (状态 ＝ “完成”)
                                                左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                            .如果真结束


                                        .默认
                                            状态 ＝ 二元式机器码生成 (0, #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                            .如果真 (状态 ＝ “完成”)
                                                左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            .如果真结束


                                        .判断结束



                                    .判断 (右移 (左操作数, 16) ＝ #无符号char)

                                        .判断开始 (右移 (立即数值 [位与 (右操作数, 65535) ＋ 1], 8) ＝ 0)

                                        .判断 (右移 (立即数值 [位与 (右操作数, 65535) ＋ 1], 16) ＝ 0)
                                            状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                            .如果真 (状态 ＝ “完成”)
                                                左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                                状态 ＝ “继续”
                                            .如果真结束

                                        .默认
                                            状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                            .如果真 (状态 ＝ “完成”)
                                                左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                                状态 ＝ “继续”
                                            .如果真结束

                                        .判断结束



                                    .判断 (右移 (左操作数, 16) ＝ #有符号char)

                                        .判断开始 (右移 (立即数值 [位与 (右操作数, 65535) ＋ 1], 8) ＝ 0)

                                        .判断 (右移 (立即数值 [位与 (右操作数, 65535) ＋ 1], 16) ＝ 0)
                                            状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                            .如果真 (状态 ＝ “完成”)
                                                左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                                状态 ＝ “继续”
                                            .如果真结束

                                        .默认
                                            状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                            .如果真 (状态 ＝ “完成”)
                                                左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                                状态 ＝ “继续”
                                            .如果真结束

                                        .判断结束



                                    .判断 (右移 (左操作数, 16) ＝ #无符号int)

                                        .判断开始 (右移 (立即数值 [位与 (右操作数, 65535) ＋ 1], 16) ＝ 0)

                                        .默认
                                            状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                            .如果真 (状态 ＝ “完成”)
                                                左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                                状态 ＝ “继续”
                                            .如果真结束

                                        .判断结束



                                    .判断 (右移 (左操作数, 16) ＝ #有符号int)

                                        .判断开始 (右移 (立即数值 [位与 (右操作数, 65535) ＋ 1], 16) ＝ 0)

                                        .默认
                                            状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                            .如果真 (状态 ＝ “完成”)
                                                左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                                动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                                状态 ＝ “继续”
                                            .如果真结束

                                        .判断结束



                                    .默认

                                    .判断结束

                                .默认

                                .判断结束



                                .如果真 (状态 ＝ “继续”)

                                    .判断开始 ((右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int) 且 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC))

                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                            状态 ＝ “继续”
                                        .如果真结束


                                    .判断 ((右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char))

                                        A等于_RAM (右操作数)
                                        .判断开始 (右移 (右操作数, 16) ＝ #无符号char)
                                            右操作数 ＝ #无符号ACC × 65536
                                        .默认
                                            右操作数 ＝ #有符号ACC × 65536
                                        .判断结束

                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                            状态 ＝ “继续”
                                        .如果真结束



                                    .判断 ((右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC))

                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束


                                    .判断 ((右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char))

                                        A等于_RAM (右操作数)
                                        .判断开始 (右移 (右操作数, 16) ＝ #无符号char)
                                            右操作数 ＝ #无符号ACC × 65536
                                        .默认
                                            右操作数 ＝ #有符号ACC × 65536
                                        .判断结束

                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束



                                    .判断 ((右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int))

                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 右操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            右操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束



                                    .判断 ((右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int) 且 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC))

                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                            状态 ＝ “继续”
                                        .如果真结束


                                    .判断 ((右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int) 且 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char))

                                        A等于_RAM (左操作数)
                                        .判断开始 (右移 (左操作数, 16) ＝ #无符号char)
                                            左操作数 ＝ #无符号ACC × 65536
                                        .默认
                                            左操作数 ＝ #有符号ACC × 65536
                                        .判断结束

                                        状态 ＝ 二元式机器码生成 (0, #无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2
                                            状态 ＝ “继续”
                                        .如果真结束



                                    .判断 ((右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC))

                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束


                                    .判断 ((右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char))

                                        A等于_RAM (左操作数)
                                        .判断开始 (右移 (左操作数, 16) ＝ #无符号char)
                                            左操作数 ＝ #无符号ACC × 65536
                                        .默认
                                            左操作数 ＝ #有符号ACC × 65536
                                        .判断结束

                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束



                                    .判断 ((右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int))

                                        状态 ＝ 二元式机器码生成 (0, #无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), “=”, 左操作数)
                                        .如果真 (状态 ＝ “完成”)
                                            左操作数 ＝ #有符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535)
                                            动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4
                                            状态 ＝ “继续”
                                        .如果真结束



                                    .默认

                                    .判断结束


                                    .如果真 (状态 ＝ “继续”)

                                        .判断开始 ((右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char) 或 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char) 且 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC) 或 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char) 或 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数) 或 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数))

                                            .判断开始 (右扫空标志 ＝ 1 且 操作数计数 ≥ 2 且 (右移 (左操作数前操作数, 16) ＝ #无符号char 或 右移 (左操作数前操作数, 16) ＝ #有符号char) 且 到文本 (左操作数前运算符) ＝ “=”)

                                                状态 ＝ 二元式机器码生成 (左操作数前操作数, 左操作数, 到文本 (运算符), 右操作数)
                                                .如果真 (状态 ＝ “完成”)

                                                    子表达式 [左操作数前运算符位置] ＝ 32
                                                    子表达式 [左操作数位置] ＝ 32
                                                    子表达式 [左操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [左操作数位置 ＋ 2] ＝ 32
                                                    子表达式 [运算符位置] ＝ 32
                                                    子表达式 [右操作数位置] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 2] ＝ 32

                                                    扫描指针 ＝ 1
                                                    操作数计数 ＝ 0
                                                    状态 ＝ “继续”
                                                .如果真结束




                                            .默认
                                                状态 ＝ 二元式机器码生成 (#ACC × 65536, 左操作数, 到文本 (运算符), 右操作数)
                                                .如果真 (状态 ＝ “完成”)

                                                    .判断开始 (右移 (左操作数, 16) ≠ #常量 且 右移 (左操作数, 16) ≠ #立即数 且 右移 (右操作数, 16) ≠ #常量 且 右移 (右操作数, 16) ≠ #立即数)

                                                        .判断开始 ((右移 (左操作数, 16) ＝ #有符号char 或 右移 (左操作数, 16) ＝ #有符号ACC) 且 (右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #有符号ACC))
                                                            子表达式 [左操作数位置] ＝ #有符号ACC
                                                            累加器内容状态 ＝ “有符号ACC”
                                                        .默认
                                                            子表达式 [左操作数位置] ＝ #无符号ACC
                                                            累加器内容状态 ＝ “无符号ACC”
                                                        .判断结束

                                                    .默认

                                                        .判断开始 (右移 (左操作数, 16) ＝ #有符号char 或 右移 (左操作数, 16) ＝ #有符号ACC 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #有符号ACC)
                                                            子表达式 [左操作数位置] ＝ #有符号ACC
                                                            累加器内容状态 ＝ “有符号ACC”
                                                        .默认
                                                            子表达式 [左操作数位置] ＝ #无符号ACC
                                                            累加器内容状态 ＝ “无符号ACC”
                                                        .判断结束

                                                    .判断结束


                                                    累加器位置 ＝ “子表达式”
                                                    表达式累加器地址 ＝ 左操作数位置 － 1

                                                    子表达式 [运算符位置] ＝ 32
                                                    子表达式 [右操作数位置] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 2] ＝ 32

                                                    扫描指针 ＝ 1
                                                    操作数计数 ＝ 0
                                                    状态 ＝ “继续”

                                                .如果真结束


                                            .判断结束





                                        .判断 ((右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int) 且 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int) 或 (右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数))

                                            .判断开始 (右扫空标志 ＝ 1 且 操作数计数 ≥ 2 且 (右移 (左操作数前操作数, 16) ＝ #无符号int 或 右移 (左操作数前操作数, 16) ＝ #有符号int 或 右移 (左操作数前操作数, 16) ＝ #无符号char 或 右移 (左操作数前操作数, 16) ＝ #有符号char) 且 到文本 (左操作数前运算符) ＝ “=”)

                                                状态 ＝ 二元式机器码生成 (左操作数前操作数, 左操作数, 到文本 (运算符), 右操作数)
                                                .如果真 (状态 ＝ “完成”)

                                                    子表达式 [左操作数前运算符位置] ＝ 32
                                                    子表达式 [左操作数位置] ＝ 32
                                                    子表达式 [左操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [左操作数位置 ＋ 2] ＝ 32
                                                    子表达式 [运算符位置] ＝ 32
                                                    子表达式 [右操作数位置] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 2] ＝ 32

                                                    扫描指针 ＝ 1
                                                    操作数计数 ＝ 0
                                                    状态 ＝ “继续”
                                                .如果真结束


                                            .默认
                                                状态 ＝ 二元式机器码生成 (#无符号int × 65536 ＋ 位与 (动态RAM分配地址, 65535), 左操作数, 到文本 (运算符), 右操作数)
                                                .如果真 (状态 ＝ “完成”)

                                                    .判断开始 (右移 (左操作数, 16) ≠ #常量 且 右移 (左操作数, 16) ≠ #立即数 且 右移 (右操作数, 16) ≠ #常量 且 右移 (右操作数, 16) ≠ #立即数)

                                                        .判断开始 (右移 (左操作数, 16) ＝ #有符号int 且 右移 (右操作数, 16) ＝ #有符号int)
                                                            子表达式 [左操作数位置] ＝ #有符号int
                                                        .默认
                                                            子表达式 [左操作数位置] ＝ #无符号int
                                                        .判断结束

                                                    .默认

                                                        .判断开始 (右移 (左操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #有符号int)
                                                            子表达式 [左操作数位置] ＝ #有符号int
                                                        .默认
                                                            子表达式 [左操作数位置] ＝ #无符号int
                                                        .判断结束

                                                    .判断结束


                                                    子表达式 [左操作数位置 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                                    子表达式 [左操作数位置 ＋ 2] ＝ 动态RAM分配地址

                                                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 2

                                                    子表达式 [运算符位置] ＝ 32
                                                    子表达式 [右操作数位置] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 2] ＝ 32

                                                    扫描指针 ＝ 1
                                                    操作数计数 ＝ 0
                                                    状态 ＝ “继续”
                                                .如果真结束

                                            .判断结束



                                        .判断 ((右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 或 (右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 (右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数))

                                            .判断开始 (右扫空标志 ＝ 1 且 操作数计数 ≥ 2 且 (右移 (左操作数前操作数, 16) ＝ #无符号长int 或 右移 (左操作数前操作数, 16) ＝ #有符号长int 或 右移 (左操作数前操作数, 16) ＝ #无符号int 或 右移 (左操作数前操作数, 16) ＝ #有符号int 或 右移 (左操作数前操作数, 16) ＝ #无符号char 或 右移 (左操作数前操作数, 16) ＝ #有符号char) 且 到文本 (左操作数前运算符) ＝ “=”)

                                                状态 ＝ 二元式机器码生成 (左操作数前操作数, 左操作数, 到文本 (运算符), 右操作数)
                                                .如果真 (状态 ＝ “完成”)

                                                    子表达式 [左操作数前运算符位置] ＝ 32
                                                    子表达式 [左操作数位置] ＝ 32
                                                    子表达式 [左操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [左操作数位置 ＋ 2] ＝ 32
                                                    子表达式 [运算符位置] ＝ 32
                                                    子表达式 [右操作数位置] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 2] ＝ 32

                                                    扫描指针 ＝ 1
                                                    操作数计数 ＝ 0
                                                    状态 ＝ “继续”
                                                .如果真结束


                                            .默认
                                                状态 ＝ 二元式机器码生成 (#无符号长int × 65536 ＋ 位与 (动态RAM分配地址, 65535), 左操作数, 到文本 (运算符), 右操作数)
                                                .如果真 (状态 ＝ “完成”)

                                                    .判断开始 (右移 (左操作数, 16) ≠ #常量 且 右移 (左操作数, 16) ≠ #立即数 且 右移 (右操作数, 16) ≠ #常量 且 右移 (右操作数, 16) ≠ #立即数)

                                                        .判断开始 (右移 (左操作数, 16) ＝ #有符号长int 且 右移 (右操作数, 16) ＝ #有符号长int)
                                                            子表达式 [左操作数位置] ＝ #有符号长int
                                                        .默认
                                                            子表达式 [左操作数位置] ＝ #无符号长int
                                                        .判断结束

                                                    .默认

                                                        .判断开始 (右移 (左操作数, 16) ＝ #有符号长int 或 右移 (右操作数, 16) ＝ #有符号长int)
                                                            子表达式 [左操作数位置] ＝ #有符号长int
                                                        .默认
                                                            子表达式 [左操作数位置] ＝ #无符号长int
                                                        .判断结束

                                                    .判断结束



                                                    子表达式 [左操作数位置 ＋ 1] ＝ 右移 (动态RAM分配地址, 8)
                                                    子表达式 [左操作数位置 ＋ 2] ＝ 动态RAM分配地址

                                                    动态RAM分配地址 ＝ 动态RAM分配地址 ＋ 4

                                                    子表达式 [运算符位置] ＝ 32
                                                    子表达式 [右操作数位置] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 1] ＝ 32
                                                    子表达式 [右操作数位置 ＋ 2] ＝ 32

                                                    扫描指针 ＝ 1
                                                    操作数计数 ＝ 0
                                                    状态 ＝ “继续”
                                                .如果真结束

                                            .判断结束






                                        .判断 ((右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数))

                                            子表达式 [左操作数位置] ＝ #立即数

                                            .判断开始 (右移 (左操作数, 16) ＝ #常量)
                                                左操作数 ＝ 常量值 [位与 (左操作数, 65535) ＋ 1]
                                            .默认
                                                左操作数 ＝ 立即数值 [位与 (左操作数, 65535) ＋ 1]
                                            .判断结束

                                            .判断开始 (右移 (右操作数, 16) ＝ #常量)
                                                右操作数 ＝ 常量值 [位与 (右操作数, 65535) ＋ 1]
                                            .默认
                                                右操作数 ＝ 立即数值 [位与 (右操作数, 65535) ＋ 1]
                                            .判断结束

                                            .判断开始 (到文本 (运算符) ＝ “&”)
                                                立即数值 [立即数总数 ＋ 1] ＝ 位与 (左操作数, 右操作数)
                                            .判断 (到文本 (运算符) ＝ “|”)
                                                立即数值 [立即数总数 ＋ 1] ＝ 位或 (左操作数, 右操作数)
                                            .默认
                                                立即数值 [立即数总数 ＋ 1] ＝ 位异或 (左操作数, 右操作数)
                                            .判断结束

                                            子表达式 [左操作数位置 ＋ 1] ＝ 右移 (立即数总数, 8)
                                            子表达式 [左操作数位置 ＋ 2] ＝ 立即数总数

                                            立即数总数 ＝ 立即数总数 ＋ 1

                                            子表达式 [运算符位置] ＝ 32
                                            子表达式 [右操作数位置] ＝ 32
                                            子表达式 [右操作数位置 ＋ 1] ＝ 32
                                            子表达式 [右操作数位置 ＋ 2] ＝ 32

                                            扫描指针 ＝ 1
                                            操作数计数 ＝ 0
                                            状态 ＝ “继续”



                                        .默认
                                            状态 ＝ “子表达式处理_双目运算符处理_参加&|^运算的操作数错误~!- =”
                                        .判断结束




                                    .如果真结束



                                .如果真结束



                            .如果真结束



                        .如果真结束



                    .如果真结束



                .判断结束



            .如果真结束



        .默认
            左操作数前运算符 ＝ 到字节集 (子表达式 [扫描指针])
            左操作数前运算符位置 ＝ 扫描指针
            扫描指针 ＝ 扫描指针 ＋ 1
        .判断结束


    .判断 (到文本 (到字节集 (子表达式 [扫描指针])) ＝ “=”)

        左操作数前运算符 ＝ 到字节集 (子表达式 [扫描指针])
        左操作数前运算符位置 ＝ 扫描指针
        扫描指针 ＝ 扫描指针 ＋ 1

    .默认
        状态 ＝ “子表达式处理_双目运算符处理_出现未识别的符号..+_+~”
    .判断结束




.循环判断尾 (状态 ＝ “继续”)


子表达式处理部件_子表达式 ＝ 子表达式


返回 (状态)








.子程序 子表达式一级提取, , , 提取出的表达式不带赋值运算符
.参数 子表达式, 字节集
.局部变量 扫描指针, 整数型
.局部变量 状态, 文本型


表达式_提取 ＝ 到字节集 (“”)
起始地址_提取 ＝ 0
运算符标志_提取 ＝ 0
赋值符标志_提取 ＝ 0

扫描指针 ＝ 1
状态 ＝ “继续”



.循环判断首 ()

    .判断开始 (扫描指针 ＞ 取字节集长度 (子表达式))

        状态 ＝ “完成”

    .判断 (扫描指针 ≤ 取字节集长度 (子表达式) － 2 且 子表达式 [扫描指针] ≥ 128 且 子表达式 [扫描指针] ≤ 255)

        表达式_提取 ＝ 表达式_提取 ＋ 到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 2])
        扫描指针 ＝ 扫描指针 ＋ 3

    .判断 (扫描指针 ≤ 取字节集长度 (子表达式) － 2 且 (到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 2])) ＝ “<<=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 2])) ＝ “>>=”))

        赋值符标志_提取 ＝ 1
        运算符标志_提取 ＝ 0
        表达式_提取 ＝ 到字节集 (“”)
        扫描指针 ＝ 扫描指针 ＋ 3
        起始地址_提取 ＝ 扫描指针 － 1

    .判断 (扫描指针 ≤ 取字节集长度 (子表达式) － 1 且 (到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “+=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “-=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “*=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “/=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “%=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “&=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “|=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “^=”))

        赋值符标志_提取 ＝ 1
        运算符标志_提取 ＝ 0
        表达式_提取 ＝ 到字节集 (“”)
        扫描指针 ＝ 扫描指针 ＋ 2
        起始地址_提取 ＝ 扫描指针 － 1

    .判断 (扫描指针 ≤ 取字节集长度 (子表达式) － 1 且 (到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “==” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “!=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “>=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “<=”))

        运算符标志_提取 ＝ 1
        表达式_提取 ＝ 表达式_提取 ＋ 到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])
        扫描指针 ＝ 扫描指针 ＋ 2


    .判断 (到文本 (到字节集 (子表达式 [扫描指针])) ＝ “+” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “-” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “*” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “/” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “%” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “&” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “|” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “~” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “^” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “>” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “<” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “!”)

        运算符标志_提取 ＝ 1
        表达式_提取 ＝ 表达式_提取 ＋ 到字节集 (子表达式 [扫描指针])
        扫描指针 ＝ 扫描指针 ＋ 1



    .判断 (到文本 (到字节集 (子表达式 [扫描指针])) ＝ “=”)

        赋值符标志_提取 ＝ 1
        运算符标志_提取 ＝ 0
        表达式_提取 ＝ 到字节集 (“”)
        扫描指针 ＝ 扫描指针 ＋ 1
        起始地址_提取 ＝ 扫描指针 － 1

    .默认
        表达式_提取 ＝ 表达式_提取 ＋ 到字节集 (子表达式 [扫描指针])
        扫描指针 ＝ 扫描指针 ＋ 1
    .判断结束


.循环判断尾 (状态 ＝ “继续”)







.子程序 子表达式二级提取, , , 提取出的表达式带1个赋值运算符
.参数 子表达式, 字节集
.局部变量 扫描指针, 整数型
.局部变量 状态, 文本型
.局部变量 段1, 字节集
.局部变量 段1起始位置, 整数型
.局部变量 段2, 字节集
.局部变量 段2起始位置, 整数型



赋值符标志_提取 ＝ 0

段1 ＝ 到字节集 (“”)
段2 ＝ 到字节集 (“”)
段1起始位置 ＝ 1
段2起始位置 ＝ 1

扫描指针 ＝ 1
状态 ＝ “继续”


.循环判断首 ()

    .判断开始 (扫描指针 ＞ 取字节集长度 (子表达式))

        表达式_提取 ＝ 段1 ＋ 段2
        起始地址_提取 ＝ 段1起始位置 － 1
        状态 ＝ “完成”


    .判断 (扫描指针 ≤ 取字节集长度 (子表达式) － 2 且 子表达式 [扫描指针] ≥ 128 且 子表达式 [扫描指针] ≤ 255)

        段2 ＝ 段2 ＋ 到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 2])
        扫描指针 ＝ 扫描指针 ＋ 3


    .判断 (扫描指针 ≤ 取字节集长度 (子表达式) － 2 且 (到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 2])) ＝ “<<=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 2])) ＝ “>>=”))

        赋值符标志_提取 ＝ 1
        赋值符_提取 ＝ 子表达式 [扫描指针] × 65536 ＋ 子表达式 [扫描指针 ＋ 1] × 256 ＋ 子表达式 [扫描指针 ＋ 2]
        段1 ＝ 段2 ＋ 到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 2])
        段1起始位置 ＝ 段2起始位置
        段2 ＝ 到字节集 (“”)
        扫描指针 ＝ 扫描指针 ＋ 3
        段2起始位置 ＝ 扫描指针


    .判断 (扫描指针 ≤ 取字节集长度 (子表达式) － 1 且 (到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “+=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “-=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “*=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “/=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “%=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “&=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “|=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “^=”))

        赋值符标志_提取 ＝ 1
        赋值符_提取 ＝ 32 × 65536 ＋ 子表达式 [扫描指针] × 256 ＋ 子表达式 [扫描指针 ＋ 1]
        段1 ＝ 段2 ＋ 到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])
        段1起始位置 ＝ 段2起始位置
        段2 ＝ 到字节集 (“”)
        扫描指针 ＝ 扫描指针 ＋ 2
        段2起始位置 ＝ 扫描指针

    .判断 (扫描指针 ≤ 取字节集长度 (子表达式) － 1 且 (到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “==” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “!=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “>=” 或 到文本 (到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])) ＝ “<=”))

        段2 ＝ 段2 ＋ 到字节集 (子表达式 [扫描指针]) ＋ 到字节集 (子表达式 [扫描指针 ＋ 1])
        扫描指针 ＝ 扫描指针 ＋ 2


    .判断 (到文本 (到字节集 (子表达式 [扫描指针])) ＝ “+” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “-” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “*” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “/” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “%” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “&” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “|” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “~” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “^” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “>” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “<” 或 到文本 (到字节集 (子表达式 [扫描指针])) ＝ “!”)

        段2 ＝ 段2 ＋ 到字节集 (子表达式 [扫描指针])
        扫描指针 ＝ 扫描指针 ＋ 1


    .判断 (到文本 (到字节集 (子表达式 [扫描指针])) ＝ “=”)

        赋值符标志_提取 ＝ 1
        赋值符_提取 ＝ 32 × 65536 ＋ 32 × 256 ＋ 子表达式 [扫描指针]
        段1 ＝ 段2 ＋ 到字节集 (子表达式 [扫描指针])
        段1起始位置 ＝ 段2起始位置
        段2 ＝ 到字节集 (“”)
        扫描指针 ＝ 扫描指针 ＋ 1
        段2起始位置 ＝ 扫描指针

    .默认
        段2 ＝ 段2 ＋ 到字节集 (子表达式 [扫描指针])
        扫描指针 ＝ 扫描指针 ＋ 1
    .判断结束


.循环判断尾 (状态 ＝ “继续”)






.子程序 操作数查询, 整数型
.参数 操作数名称, 字节集
.局部变量 扫描指针, 整数型
.局部变量 扫描控制, 整数型
.局部变量 代码, 整数型


扫描控制 ＝ 1

扫描指针 ＝ 1
.判断循环首 (扫描控制 ＝ 1 且 扫描指针 ≤ 常量总数)
    .判断开始 (操作数名称 ＝ 常量名称 [扫描指针])
        代码 ＝ #常量 × 65536 ＋ 位与 (扫描指针 － 1, 65535)
        扫描控制 ＝ 0
    .默认
        扫描指针 ＝ 扫描指针 ＋ 1
    .判断结束

.判断循环尾 ()

扫描指针 ＝ 1
.判断循环首 (扫描控制 ＝ 1 且 扫描指针 ≤ 局部变量总数)
    .判断开始 (操作数名称 ＝ 局部变量名称 [扫描指针])
        .判断开始 (局部变量类型 [扫描指针] ＝ “unsigned char”)
            代码 ＝ #无符号char × 65536 ＋ 位与 (局部变量地址 [扫描指针], 65535)
        .判断 (局部变量类型 [扫描指针] ＝ “unsigned int”)
            代码 ＝ #无符号int × 65536 ＋ 位与 (局部变量地址 [扫描指针], 65535)
        .判断 (局部变量类型 [扫描指针] ＝ “unsigned long int”)
            代码 ＝ #无符号长int × 65536 ＋ 位与 (局部变量地址 [扫描指针], 65535)
        .判断 (局部变量类型 [扫描指针] ＝ “char”)
            代码 ＝ #有符号char × 65536 ＋ 位与 (局部变量地址 [扫描指针], 65535)
        .判断 (局部变量类型 [扫描指针] ＝ “int”)
            代码 ＝ #有符号int × 65536 ＋ 位与 (局部变量地址 [扫描指针], 65535)
        .判断 (局部变量类型 [扫描指针] ＝ “long int”)
            代码 ＝ #有符号长int × 65536 ＋ 位与 (局部变量地址 [扫描指针], 65535)
        .判断 (局部变量类型 [扫描指针] ＝ “unsigned char*”)
            代码 ＝ #无符号char指针 × 65536 ＋ 位与 (局部变量地址 [扫描指针], 65535)
        .判断 (局部变量类型 [扫描指针] ＝ “unsigned int*”)
            代码 ＝ #无符号int指针 × 65536 ＋ 位与 (局部变量地址 [扫描指针], 65535)
        .判断 (局部变量类型 [扫描指针] ＝ “unsigned long int*”)
            代码 ＝ #无符号长int指针 × 65536 ＋ 位与 (局部变量地址 [扫描指针], 65535)
        .判断 (局部变量类型 [扫描指针] ＝ “char*”)
            代码 ＝ #有符号char指针 × 65536 ＋ 位与 (局部变量地址 [扫描指针], 65535)
        .判断 (局部变量类型 [扫描指针] ＝ “int*”)
            代码 ＝ #有符号int指针 × 65536 ＋ 位与 (局部变量地址 [扫描指针], 65535)
        .判断 (局部变量类型 [扫描指针] ＝ “long int*”)
            代码 ＝ #有符号长int指针 × 65536 ＋ 位与 (局部变量地址 [扫描指针], 65535)
        .判断 (局部变量类型 [扫描指针] ＝ “unsigned char[]”)
            代码 ＝ #无符号char数组 × 65536 ＋ 位与 (局部变量地址 [扫描指针], 65535)
        .判断 (局部变量类型 [扫描指针] ＝ “unsigned int[]”)
            代码 ＝ #无符号int数组 × 65536 ＋ 位与 (局部变量地址 [扫描指针], 65535)
        .判断 (局部变量类型 [扫描指针] ＝ “unsigned long int[]”)
            代码 ＝ #无符号长int数组 × 65536 ＋ 位与 (局部变量地址 [扫描指针], 65535)
        .判断 (局部变量类型 [扫描指针] ＝ “char[]”)
            代码 ＝ #有符号char数组 × 65536 ＋ 位与 (局部变量地址 [扫描指针], 65535)
        .判断 (局部变量类型 [扫描指针] ＝ “int[]”)
            代码 ＝ #有符号int数组 × 65536 ＋ 位与 (局部变量地址 [扫描指针], 65535)
        .判断 (局部变量类型 [扫描指针] ＝ “long int[]”)
            代码 ＝ #有符号长int数组 × 65536 ＋ 位与 (局部变量地址 [扫描指针], 65535)
        .默认
            代码 ＝ 0
        .判断结束
        扫描控制 ＝ 0
    .默认
        扫描指针 ＝ 扫描指针 ＋ 1
    .判断结束

.判断循环尾 ()

扫描指针 ＝ 函数参数基址 [函数总数 ＋ 1]
.判断循环首 (扫描控制 ＝ 1 且 扫描指针 ＜ 函数参数偏址 [函数总数 ＋ 1])
    .判断开始 (操作数名称 ＝ 函数参数名称 [扫描指针 ＋ 1])
        .判断开始 (函数参数类型 [扫描指针 ＋ 1] ＝ “unsigned char”)
            代码 ＝ #无符号char × 65536 ＋ 位与 (函数参数地址 [扫描指针 ＋ 1], 65535)
        .判断 (函数参数类型 [扫描指针 ＋ 1] ＝ “unsigned int”)
            代码 ＝ #无符号int × 65536 ＋ 位与 (函数参数地址 [扫描指针 ＋ 1], 65535)
        .判断 (函数参数类型 [扫描指针 ＋ 1] ＝ “unsigned long int”)
            代码 ＝ #无符号长int × 65536 ＋ 位与 (函数参数地址 [扫描指针 ＋ 1], 65535)
        .判断 (函数参数类型 [扫描指针 ＋ 1] ＝ “char”)
            代码 ＝ #有符号char × 65536 ＋ 位与 (函数参数地址 [扫描指针 ＋ 1], 65535)
        .判断 (函数参数类型 [扫描指针 ＋ 1] ＝ “int”)
            代码 ＝ #有符号int × 65536 ＋ 位与 (函数参数地址 [扫描指针 ＋ 1], 65535)
        .判断 (函数参数类型 [扫描指针 ＋ 1] ＝ “long int”)
            代码 ＝ #有符号长int × 65536 ＋ 位与 (函数参数地址 [扫描指针 ＋ 1], 65535)
        .判断 (函数参数类型 [扫描指针 ＋ 1] ＝ “unsigned char*”)
            代码 ＝ #无符号char指针 × 65536 ＋ 位与 (函数参数地址 [扫描指针 ＋ 1], 65535)
        .判断 (函数参数类型 [扫描指针 ＋ 1] ＝ “unsigned int*”)
            代码 ＝ #无符号int指针 × 65536 ＋ 位与 (函数参数地址 [扫描指针 ＋ 1], 65535)
        .判断 (函数参数类型 [扫描指针 ＋ 1] ＝ “unsigned long int*”)
            代码 ＝ #无符号长int指针 × 65536 ＋ 位与 (函数参数地址 [扫描指针 ＋ 1], 65535)
        .判断 (函数参数类型 [扫描指针 ＋ 1] ＝ “char*”)
            代码 ＝ #有符号char指针 × 65536 ＋ 位与 (函数参数地址 [扫描指针 ＋ 1], 65535)
        .判断 (函数参数类型 [扫描指针 ＋ 1] ＝ “int*”)
            代码 ＝ #有符号int指针 × 65536 ＋ 位与 (函数参数地址 [扫描指针 ＋ 1], 65535)
        .判断 (函数参数类型 [扫描指针 ＋ 1] ＝ “long int*”)
            代码 ＝ #有符号长int指针 × 65536 ＋ 位与 (函数参数地址 [扫描指针 ＋ 1], 65535)
        .判断 (函数参数类型 [扫描指针 ＋ 1] ＝ “unsigned char[]”)
            代码 ＝ #无符号char指针 × 65536 ＋ 位与 (函数参数地址 [扫描指针 ＋ 1], 65535)
        .判断 (函数参数类型 [扫描指针 ＋ 1] ＝ “unsigned int[]”)
            代码 ＝ #无符号int指针 × 65536 ＋ 位与 (函数参数地址 [扫描指针 ＋ 1], 65535)
        .判断 (函数参数类型 [扫描指针 ＋ 1] ＝ “unsigned long int[]”)
            代码 ＝ #无符号长int指针 × 65536 ＋ 位与 (函数参数地址 [扫描指针 ＋ 1], 65535)
        .判断 (函数参数类型 [扫描指针 ＋ 1] ＝ “char[]”)
            代码 ＝ #有符号char指针 × 65536 ＋ 位与 (函数参数地址 [扫描指针 ＋ 1], 65535)
        .判断 (函数参数类型 [扫描指针 ＋ 1] ＝ “int[]”)
            代码 ＝ #有符号int指针 × 65536 ＋ 位与 (函数参数地址 [扫描指针 ＋ 1], 65535)
        .判断 (函数参数类型 [扫描指针 ＋ 1] ＝ “long int[]”)
            代码 ＝ #有符号长int指针 × 65536 ＋ 位与 (函数参数地址 [扫描指针 ＋ 1], 65535)
        .默认
            代码 ＝ 0
        .判断结束
        扫描控制 ＝ 0
    .默认
        扫描指针 ＝ 扫描指针 ＋ 1
    .判断结束

.判断循环尾 ()

扫描指针 ＝ 1
.判断循环首 (扫描控制 ＝ 1 且 扫描指针 ≤ 全局变量总数)
    .判断开始 (操作数名称 ＝ 全局变量名称 [扫描指针])
        .判断开始 (全局变量类型 [扫描指针] ＝ “unsigned char”)
            代码 ＝ #无符号char × 65536 ＋ 位与 (全局变量地址 [扫描指针], 65535)
        .判断 (全局变量类型 [扫描指针] ＝ “unsigned int”)
            代码 ＝ #无符号int × 65536 ＋ 位与 (全局变量地址 [扫描指针], 65535)
        .判断 (全局变量类型 [扫描指针] ＝ “unsigned long int”)
            代码 ＝ #无符号长int × 65536 ＋ 位与 (全局变量地址 [扫描指针], 65535)
        .判断 (全局变量类型 [扫描指针] ＝ “char”)
            代码 ＝ #有符号char × 65536 ＋ 位与 (全局变量地址 [扫描指针], 65535)
        .判断 (全局变量类型 [扫描指针] ＝ “int”)
            代码 ＝ #有符号int × 65536 ＋ 位与 (全局变量地址 [扫描指针], 65535)
        .判断 (全局变量类型 [扫描指针] ＝ “long int”)
            代码 ＝ #有符号长int × 65536 ＋ 位与 (全局变量地址 [扫描指针], 65535)
        .判断 (全局变量类型 [扫描指针] ＝ “unsigned char*”)
            代码 ＝ #无符号char指针 × 65536 ＋ 位与 (全局变量地址 [扫描指针], 65535)
        .判断 (全局变量类型 [扫描指针] ＝ “unsigned int*”)
            代码 ＝ #无符号int指针 × 65536 ＋ 位与 (全局变量地址 [扫描指针], 65535)
        .判断 (全局变量类型 [扫描指针] ＝ “unsigned long int*”)
            代码 ＝ #无符号长int指针 × 65536 ＋ 位与 (全局变量地址 [扫描指针], 65535)
        .判断 (全局变量类型 [扫描指针] ＝ “char*”)
            代码 ＝ #有符号char指针 × 65536 ＋ 位与 (全局变量地址 [扫描指针], 65535)
        .判断 (全局变量类型 [扫描指针] ＝ “int*”)
            代码 ＝ #有符号int指针 × 65536 ＋ 位与 (全局变量地址 [扫描指针], 65535)
        .判断 (全局变量类型 [扫描指针] ＝ “long int*”)
            代码 ＝ #有符号长int指针 × 65536 ＋ 位与 (全局变量地址 [扫描指针], 65535)
        .判断 (全局变量类型 [扫描指针] ＝ “unsigned char[]”)
            代码 ＝ #无符号char数组 × 65536 ＋ 位与 (全局变量地址 [扫描指针], 65535)
        .判断 (全局变量类型 [扫描指针] ＝ “unsigned int[]”)
            代码 ＝ #无符号int数组 × 65536 ＋ 位与 (全局变量地址 [扫描指针], 65535)
        .判断 (全局变量类型 [扫描指针] ＝ “unsigned long int[]”)
            代码 ＝ #无符号长int数组 × 65536 ＋ 位与 (全局变量地址 [扫描指针], 65535)
        .判断 (全局变量类型 [扫描指针] ＝ “char[]”)
            代码 ＝ #有符号char数组 × 65536 ＋ 位与 (全局变量地址 [扫描指针], 65535)
        .判断 (全局变量类型 [扫描指针] ＝ “int[]”)
            代码 ＝ #有符号int数组 × 65536 ＋ 位与 (全局变量地址 [扫描指针], 65535)
        .判断 (全局变量类型 [扫描指针] ＝ “long int[]”)
            代码 ＝ #有符号长int数组 × 65536 ＋ 位与 (全局变量地址 [扫描指针], 65535)
        .默认
            代码 ＝ 0
        .判断结束
        扫描控制 ＝ 0
    .默认
        扫描指针 ＝ 扫描指针 ＋ 1
    .判断结束

.判断循环尾 ()

.如果真 (扫描控制 ＝ 1)

    .判断开始 (到文本 (操作数名称) ＝ “_ACC”)
        代码 ＝ #ACC × 65536
        扫描控制 ＝ 0
    .判断 (到文本 (操作数名称) ＝ “_R1”)
        代码 ＝ #R1 × 65536
        扫描控制 ＝ 0
    .判断 (到文本 (操作数名称) ＝ “_R2”)
        代码 ＝ #R2 × 65536
        扫描控制 ＝ 0
    .判断 (到文本 (操作数名称) ＝ “_R3”)
        代码 ＝ #R3 × 65536
        扫描控制 ＝ 0
    .判断 (到文本 (操作数名称) ＝ “_C”)
        代码 ＝ #C × 65536
        扫描控制 ＝ 0
    .判断 (到文本 (操作数名称) ＝ “_Z”)
        代码 ＝ #Z × 65536
        扫描控制 ＝ 0
    .判断 (到文本 (操作数名称) ＝ “_BIT0”)
        代码 ＝ #BIT0 × 65536
        扫描控制 ＝ 0
    .判断 (到文本 (操作数名称) ＝ “_BIT1”)
        代码 ＝ #BIT1 × 65536
        扫描控制 ＝ 0
    .判断 (到文本 (操作数名称) ＝ “_BIT2”)
        代码 ＝ #BIT2 × 65536
        扫描控制 ＝ 0
    .判断 (到文本 (操作数名称) ＝ “_BIT3”)
        代码 ＝ #BIT3 × 65536
        扫描控制 ＝ 0
    .判断 (到文本 (操作数名称) ＝ “_BIT4”)
        代码 ＝ #BIT4 × 65536
        扫描控制 ＝ 0
    .判断 (到文本 (操作数名称) ＝ “_BIT5”)
        代码 ＝ #BIT5 × 65536
        扫描控制 ＝ 0
    .判断 (到文本 (操作数名称) ＝ “_RAM”)
        代码 ＝ #RAM × 65536
        扫描控制 ＝ 0
    .判断 (到文本 (操作数名称) ＝ “_RAM”)
        代码 ＝ #RAM × 65536
        扫描控制 ＝ 0
    .判断 (到文本 (操作数名称) ＝ “_NOP”)
        代码 ＝ #NOP × 65536
        扫描控制 ＝ 0
    .判断 (到文本 (操作数名称) ＝ “_A”)
        代码 ＝ #A × 65536
        扫描控制 ＝ 0
    .默认

    .判断结束

.如果真结束


.如果真 (扫描控制 ＝ 1)
    代码 ＝ 0
.如果真结束


返回 (代码)
