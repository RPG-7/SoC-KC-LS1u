.版本 2

.程序集 符号表处理程序

.子程序 扫描变量定义, 文本型
.局部变量 状态, 文本型
.局部变量 指针保存, 整数型
.局部变量 扫描指针1, 整数型
.局部变量 扫描指针2, 整数型
.局部变量 扫描控制, 整数型
.局部变量 计数1, 整数型
.局部变量 字节集缓存, 字节集


局部变量总数 ＝ 0


.循环判断首 ()

    跳过空格换行注释 ()

    指针保存 ＝ C代码指针

    .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

        字节集缓存 ＝ 到字节集 (“”)
        .循环判断首 ()
            字节集缓存 ＝ 字节集缓存 ＋ 到字节集 (C代码 [C代码指针 ＋ 1])
            C代码指针 ＝ C代码指针 ＋ 1
        .循环判断尾 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

        .判断开始 (到文本 (字节集缓存) ＝ “unsigned”)

            跳过空格换行注释 ()

            .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

                字节集缓存 ＝ 到字节集 (“”)
                .循环判断首 ()
                    字节集缓存 ＝ 字节集缓存 ＋ 到字节集 (C代码 [C代码指针 ＋ 1])
                    C代码指针 ＝ C代码指针 ＋ 1
                .循环判断尾 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

                .判断开始 (到文本 (字节集缓存) ＝ “char”)

                    状态 ＝ 扫描变量定义部件1 (“unsigned char”)

                .判断 (到文本 (字节集缓存) ＝ “int”)

                    状态 ＝ 扫描变量定义部件1 (“unsigned int”)

                .判断 (到文本 (字节集缓存) ＝ “long”)

                    跳过空格换行注释 ()

                    .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

                        字节集缓存 ＝ 到字节集 (“”)
                        .循环判断首 ()
                            字节集缓存 ＝ 字节集缓存 ＋ 到字节集 (C代码 [C代码指针 ＋ 1])
                            C代码指针 ＝ C代码指针 ＋ 1
                        .循环判断尾 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

                        .判断开始 (到文本 (字节集缓存) ＝ “int”)

                            状态 ＝ 扫描变量定义部件1 (“unsigned long int”)

                        .默认
                            状态 ＝ “long后面符号错误”
                        .判断结束


                    .默认
                        状态 ＝ “long后面符号错误”
                    .判断结束


                .默认
                    状态 ＝ “unsigned后面符号错误”
                .判断结束


            .默认
                状态 ＝ “unsigned后面符号错误”
            .判断结束




        .判断 (到文本 (字节集缓存) ＝ “signed”)

            跳过空格换行注释 ()

            .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

                字节集缓存 ＝ 到字节集 (“”)
                .循环判断首 ()
                    字节集缓存 ＝ 字节集缓存 ＋ 到字节集 (C代码 [C代码指针 ＋ 1])
                    C代码指针 ＝ C代码指针 ＋ 1
                .循环判断尾 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

                .判断开始 (到文本 (字节集缓存) ＝ “char”)

                    状态 ＝ 扫描变量定义部件1 (“char”)

                .判断 (到文本 (字节集缓存) ＝ “int”)

                    状态 ＝ 扫描变量定义部件1 (“int”)

                .判断 (到文本 (字节集缓存) ＝ “long”)

                    跳过空格换行注释 ()

                    .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

                        字节集缓存 ＝ 到字节集 (“”)
                        .循环判断首 ()
                            字节集缓存 ＝ 字节集缓存 ＋ 到字节集 (C代码 [C代码指针 ＋ 1])
                            C代码指针 ＝ C代码指针 ＋ 1
                        .循环判断尾 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

                        .判断开始 (到文本 (字节集缓存) ＝ “int”)

                            状态 ＝ 扫描变量定义部件1 (“long int”)

                        .默认
                            状态 ＝ “long后面符号错误”
                        .判断结束


                    .默认
                        状态 ＝ “long后面符号错误”
                    .判断结束


                .默认
                    状态 ＝ “signed后面符号错误”
                .判断结束


            .默认
                状态 ＝ “signed后面符号错误”
            .判断结束



        .判断 (到文本 (字节集缓存) ＝ “char”)

            状态 ＝ 扫描变量定义部件1 (“char”)

        .判断 (到文本 (字节集缓存) ＝ “int”)

            状态 ＝ 扫描变量定义部件1 (“int”)

        .判断 (到文本 (字节集缓存) ＝ “long”)

            跳过空格换行注释 ()

            .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1]) ＋ 到字节集 (C代码 [C代码指针 ＋ 2]) ＋ 到字节集 (C代码 [C代码指针 ＋ 3]) ＋ 到字节集 (C代码 [C代码指针 ＋ 4])) ＝ “int ”)
                C代码指针 ＝ C代码指针 ＋ 4
                状态 ＝ 扫描变量定义部件1 (“long int”)
            .默认
                状态 ＝ “long后面符号错误”
            .判断结束


        .默认
            C代码指针 ＝ 指针保存
            状态 ＝ “变量扫描结束”
        .判断结束



    .判断 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “ ”)

        状态 ＝ “文本结束”


    .判断 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “@”)

        C代码指针 ＝ C代码指针 ＋ 1
        跳过空格换行注释 ()

        .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58)
            .如果真 (RAM分配地址断点状态 ＝ 0)
                RAM分配地址断点地址 ＝ RAM分配地址
            .如果真结束
            RAM分配地址 ＝ 提取数值 ()
            RAM分配地址断点状态 ＝ 1
            状态 ＝ “;”

        .默认
            .如果真 (RAM分配地址断点状态 ＝ 1)
                RAM分配地址 ＝ RAM分配地址断点地址
                RAM分配地址断点状态 ＝ 0
            .如果真结束

        .判断结束


    .默认
        状态 ＝ “变量扫描结束”
    .判断结束



.循环判断尾 (状态 ＝ “;”)


扫描控制 ＝ 1

扫描指针1 ＝ 1
.判断循环首 (扫描控制 ＝ 1 且 扫描指针1 ＜ 常量总数)
    扫描指针2 ＝ 扫描指针1 ＋ 1
    .判断循环首 (扫描控制 ＝ 1 且 扫描指针2 ≤ 常量总数)
        .判断开始 (常量名称 [扫描指针1] ＝ 常量名称 [扫描指针2])
            状态 ＝ “'” ＋ 到文本 (常量名称 [扫描指针1]) ＋ “'” ＋ “常量和常量名称重复+ +”
            扫描控制 ＝ 0
        .默认
            扫描指针2 ＝ 扫描指针2 ＋ 1
        .判断结束

    .判断循环尾 ()
    扫描指针1 ＝ 扫描指针1 ＋ 1
.判断循环尾 ()

扫描指针1 ＝ 1
.判断循环首 (扫描控制 ＝ 1 且 扫描指针1 ≤ 常量总数)

    .判断开始 (到文本 (常量名称 [扫描指针1]) ＝ “if” 或 到文本 (常量名称 [扫描指针1]) ＝ “else” 或 到文本 (常量名称 [扫描指针1]) ＝ “do” 或 到文本 (常量名称 [扫描指针1]) ＝ “while” 或 到文本 (常量名称 [扫描指针1]) ＝ “for” 或 到文本 (常量名称 [扫描指针1]) ＝ “sizeof” 或 到文本 (常量名称 [扫描指针1]) ＝ “break” 或 到文本 (常量名称 [扫描指针1]) ＝ “continue” 或 到文本 (常量名称 [扫描指针1]) ＝ “return” 或 到文本 (常量名称 [扫描指针1]) ＝ “goto” 或 到文本 (常量名称 [扫描指针1]) ＝ “rom_run” 或 到文本 (常量名称 [扫描指针1]) ＝ “_ACC” 或 到文本 (常量名称 [扫描指针1]) ＝ “_R1” 或 到文本 (常量名称 [扫描指针1]) ＝ “_R2” 或 到文本 (常量名称 [扫描指针1]) ＝ “_R3” 或 到文本 (常量名称 [扫描指针1]) ＝ “_C” 或 到文本 (常量名称 [扫描指针1]) ＝ “_Z” 或 到文本 (常量名称 [扫描指针1]) ＝ “_A” 或 到文本 (常量名称 [扫描指针1]) ＝ “_BIT0” 或 到文本 (常量名称 [扫描指针1]) ＝ “_BIT1” 或 到文本 (常量名称 [扫描指针1]) ＝ “_BIT2” 或 到文本 (常量名称 [扫描指针1]) ＝ “_BIT3” 或 到文本 (常量名称 [扫描指针1]) ＝ “_BIT4” 或 到文本 (常量名称 [扫描指针1]) ＝ “_BIT5” 或 到文本 (常量名称 [扫描指针1]) ＝ “_RAM” 或 到文本 (常量名称 [扫描指针1]) ＝ “_NOP”)
        状态 ＝ “'” ＋ 到文本 (常量名称 [扫描指针1]) ＋ “'” ＋ “常量名称和关键字重复+ +”
        扫描控制 ＝ 0
    .默认
        扫描指针1 ＝ 扫描指针1 ＋ 1
    .判断结束

.判断循环尾 ()


扫描指针1 ＝ 1
.判断循环首 (扫描控制 ＝ 1 且 扫描指针1 ＜ 局部变量总数)
    扫描指针2 ＝ 扫描指针1 ＋ 1
    .判断循环首 (扫描控制 ＝ 1 且 扫描指针2 ≤ 局部变量总数)
        .判断开始 (局部变量名称 [扫描指针1] ＝ 局部变量名称 [扫描指针2])
            状态 ＝ “变量和变量名称重复- =”
            扫描控制 ＝ 0
        .默认
            扫描指针2 ＝ 扫描指针2 ＋ 1
        .判断结束

    .判断循环尾 ()
    扫描指针1 ＝ 扫描指针1 ＋ 1
.判断循环尾 ()

扫描指针1 ＝ 1
.判断循环首 (扫描控制 ＝ 1 且 扫描指针1 ≤ 局部变量总数)
    扫描指针2 ＝ 1
    .判断循环首 (扫描控制 ＝ 1 且 扫描指针2 ≤ 常量总数)
        .判断开始 (局部变量名称 [扫描指针1] ＝ 常量名称 [扫描指针2])
            状态 ＝ “变量和常量名称重复- =”
            扫描控制 ＝ 0
        .默认
            扫描指针2 ＝ 扫描指针2 ＋ 1
        .判断结束

    .判断循环尾 ()
    扫描指针1 ＝ 扫描指针1 ＋ 1
.判断循环尾 ()

扫描指针1 ＝ 1
.判断循环首 (扫描控制 ＝ 1 且 扫描指针1 ≤ 局部变量总数)

    .判断开始 (到文本 (局部变量名称 [扫描指针1]) ＝ “if” 或 到文本 (局部变量名称 [扫描指针1]) ＝ “else” 或 到文本 (局部变量名称 [扫描指针1]) ＝ “do” 或 到文本 (局部变量名称 [扫描指针1]) ＝ “while” 或 到文本 (局部变量名称 [扫描指针1]) ＝ “for” 或 到文本 (局部变量名称 [扫描指针1]) ＝ “sizeof” 或 到文本 (局部变量名称 [扫描指针1]) ＝ “break” 或 到文本 (局部变量名称 [扫描指针1]) ＝ “continue” 或 到文本 (局部变量名称 [扫描指针1]) ＝ “return” 或 到文本 (局部变量名称 [扫描指针1]) ＝ “goto” 或 到文本 (局部变量名称 [扫描指针1]) ＝ “rom_run” 或 到文本 (局部变量名称 [扫描指针1]) ＝ “_ACC” 或 到文本 (局部变量名称 [扫描指针1]) ＝ “_R1” 或 到文本 (局部变量名称 [扫描指针1]) ＝ “_R2” 或 到文本 (局部变量名称 [扫描指针1]) ＝ “_R3” 或 到文本 (局部变量名称 [扫描指针1]) ＝ “_C” 或 到文本 (局部变量名称 [扫描指针1]) ＝ “_Z” 或 到文本 (局部变量名称 [扫描指针1]) ＝ “_A” 或 到文本 (局部变量名称 [扫描指针1]) ＝ “_BIT0” 或 到文本 (局部变量名称 [扫描指针1]) ＝ “_BIT1” 或 到文本 (局部变量名称 [扫描指针1]) ＝ “_BIT2” 或 到文本 (局部变量名称 [扫描指针1]) ＝ “_BIT3” 或 到文本 (局部变量名称 [扫描指针1]) ＝ “_BIT4” 或 到文本 (局部变量名称 [扫描指针1]) ＝ “_BIT5” 或 到文本 (局部变量名称 [扫描指针1]) ＝ “_RAM” 或 到文本 (局部变量名称 [扫描指针1]) ＝ “_NOP”)
        状态 ＝ “变量名称和关键字重复- =”
        扫描控制 ＝ 0
    .默认
        扫描指针1 ＝ 扫描指针1 ＋ 1
    .判断结束

.判断循环尾 ()



扫描指针1 ＝ 1
.判断循环首 (扫描控制 ＝ 1 且 扫描指针1 ≤ 全局变量总数)
    扫描指针2 ＝ 1
    .判断循环首 (扫描控制 ＝ 1 且 扫描指针2 ≤ 常量总数)
        .判断开始 (全局变量名称 [扫描指针1] ＝ 常量名称 [扫描指针2])
            状态 ＝ “全局变量和常量名称重复- =”
            扫描控制 ＝ 0
        .默认
            扫描指针2 ＝ 扫描指针2 ＋ 1
        .判断结束

    .判断循环尾 ()
    扫描指针1 ＝ 扫描指针1 ＋ 1
.判断循环尾 ()




.如果真 (状态 ＝ “进入函数扫描”)
    C代码指针 ＝ 指针保存
.如果真结束



返回 (状态)







.子程序 扫描函数提取RAM分配地址, 文本型
.局部变量 状态, 文本型
.局部变量 _函数名称, 字节集
.局部变量 花括号计数, 整数型
.局部变量 查询计数, 整数型
.局部变量 指针保存, 整数型


指针保存 ＝ C代码指针

.判断循环首 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ≠ “{” 且 C代码指针 ＜ 取字节集长度 (C代码) － 16)
    C代码指针 ＝ C代码指针 ＋ 1
.判断循环尾 ()


.判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “{”)

    花括号计数 ＝ 1

    状态 ＝ “继续”

    C代码指针 ＝ C代码指针 ＋ 1

    .循环判断首 ()

        跳过空格换行注释 ()

        .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)
            _函数名称 ＝ 到字节集 (“”)
            .循环判断首 ()
                _函数名称 ＝ _函数名称 ＋ 到字节集 (C代码 [C代码指针 ＋ 1])
                C代码指针 ＝ C代码指针 ＋ 1
            .循环判断尾 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

            跳过空格换行注释 ()

            .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “(”)

                C代码指针 ＝ C代码指针 ＋ 1

                .如果真 (到文本 (_函数名称) ≠ “if” 且 到文本 (_函数名称) ≠ “while” 且 到文本 (_函数名称) ≠ “for” 且 到文本 (_函数名称) ≠ “sizeof” 且 到文本 (_函数名称) ≠ “return”)

                    查询计数 ＝ 1
                    .判断循环首 (查询计数 ≤ 函数总数 且 _函数名称 ≠ 函数名称 [查询计数])
                        查询计数 ＝ 查询计数 ＋ 1
                    .判断循环尾 ()

                    .判断开始 (查询计数 ≤ 函数总数)

                        .如果真 (RAM分配地址 ＜ 函数RAM结束地址 [查询计数])
                            RAM分配地址 ＝ 函数RAM结束地址 [查询计数]
                        .如果真结束


                    .默认
                        状态 ＝ “调用了未定义的函数”
                    .判断结束

                .如果真结束



            .判断 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “{”)
                花括号计数 ＝ 花括号计数 ＋ 1
                C代码指针 ＝ C代码指针 ＋ 1
            .判断 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “}”)
                花括号计数 ＝ 花括号计数 － 1
                C代码指针 ＝ C代码指针 ＋ 1
                .如果真 (花括号计数 ＝ 0)
                    C代码指针 ＝ 指针保存
                    状态 ＝ “提取RAM分配地址结束”
                .如果真结束

            .判断 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “ ”)
                状态 ＝ “{}对数错误”
            .判断 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

            .默认
                C代码指针 ＝ C代码指针 ＋ 1
            .判断结束



        .判断 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “{”)
            花括号计数 ＝ 花括号计数 ＋ 1
            C代码指针 ＝ C代码指针 ＋ 1
        .判断 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “}”)
            花括号计数 ＝ 花括号计数 － 1
            C代码指针 ＝ C代码指针 ＋ 1
            .如果真 (花括号计数 ＝ 0)
                C代码指针 ＝ 指针保存
                状态 ＝ “提取RAM分配地址结束”
            .如果真结束

        .判断 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “ ”)
            状态 ＝ “{}对数错误”
        .默认
            C代码指针 ＝ C代码指针 ＋ 1
        .判断结束


    .循环判断尾 (状态 ＝ “继续”)



.默认
    状态 ＝ “_函数扫描错误”
.判断结束


返回 (状态)




.子程序 扫描函数定义, 文本型
.局部变量 状态, 文本型
.局部变量 字节集缓存, 字节集
.局部变量 计数1, 整数型


跳过空格换行注释 ()

.判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

    计数1 ＝ C代码指针

    字节集缓存 ＝ 到字节集 (“”)
    .循环判断首 ()
        字节集缓存 ＝ 字节集缓存 ＋ 到字节集 (C代码 [C代码指针 ＋ 1])
        C代码指针 ＝ C代码指针 ＋ 1
    .循环判断尾 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

    .判断开始 (到文本 (字节集缓存) ＝ “unsigned”)

        跳过空格换行注释 ()

        .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

            字节集缓存 ＝ 到字节集 (“”)
            .循环判断首 ()
                字节集缓存 ＝ 字节集缓存 ＋ 到字节集 (C代码 [C代码指针 ＋ 1])
                C代码指针 ＝ C代码指针 ＋ 1
            .循环判断尾 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

            .判断开始 (到文本 (字节集缓存) ＝ “char”)

                状态 ＝ 函数名称参数扫描 (“unsigned char”)

            .判断 (到文本 (字节集缓存) ＝ “int”)

                状态 ＝ 函数名称参数扫描 (“unsigned int”)

            .判断 (到文本 (字节集缓存) ＝ “long”)

                跳过空格换行注释 ()

                .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

                    字节集缓存 ＝ 到字节集 (“”)
                    .循环判断首 ()
                        字节集缓存 ＝ 字节集缓存 ＋ 到字节集 (C代码 [C代码指针 ＋ 1])
                        C代码指针 ＝ C代码指针 ＋ 1
                    .循环判断尾 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

                    .判断开始 (到文本 (字节集缓存) ＝ “int”)

                        状态 ＝ 函数名称参数扫描 (“unsigned long int”)

                    .默认
                        状态 ＝ “扫描函数定义_long后面符号错误”
                    .判断结束


                .默认
                    状态 ＝ “扫描函数定义_long后面符号错误”
                .判断结束


            .默认
                状态 ＝ “扫描函数定义_unsigned后面符号错误”
            .判断结束


        .默认
            状态 ＝ “扫描函数定义_unsigned后面符号错误”
        .判断结束




    .判断 (到文本 (字节集缓存) ＝ “signed”)

        跳过空格换行注释 ()

        .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

            字节集缓存 ＝ 到字节集 (“”)
            .循环判断首 ()
                字节集缓存 ＝ 字节集缓存 ＋ 到字节集 (C代码 [C代码指针 ＋ 1])
                C代码指针 ＝ C代码指针 ＋ 1
            .循环判断尾 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

            .判断开始 (到文本 (字节集缓存) ＝ “char”)

                状态 ＝ 函数名称参数扫描 (“char”)

            .判断 (到文本 (字节集缓存) ＝ “int”)

                状态 ＝ 函数名称参数扫描 (“int”)

            .判断 (到文本 (字节集缓存) ＝ “long”)

                跳过空格换行注释 ()

                .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

                    字节集缓存 ＝ 到字节集 (“”)
                    .循环判断首 ()
                        字节集缓存 ＝ 字节集缓存 ＋ 到字节集 (C代码 [C代码指针 ＋ 1])
                        C代码指针 ＝ C代码指针 ＋ 1
                    .循环判断尾 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

                    .判断开始 (到文本 (字节集缓存) ＝ “int”)

                        状态 ＝ 函数名称参数扫描 (“long int”)

                    .默认
                        状态 ＝ “扫描函数定义_long后面符号错误”
                    .判断结束


                .默认
                    状态 ＝ “扫描函数定义_long后面符号错误”
                .判断结束


            .默认
                状态 ＝ “扫描函数定义_signed后面符号错误”
            .判断结束


        .默认
            状态 ＝ “扫描函数定义_signed后面符号错误”
        .判断结束



    .判断 (到文本 (字节集缓存) ＝ “char”)

        状态 ＝ 函数名称参数扫描 (“char”)

    .判断 (到文本 (字节集缓存) ＝ “int”)

        状态 ＝ 函数名称参数扫描 (“int”)

    .判断 (到文本 (字节集缓存) ＝ “long”)

        跳过空格换行注释 ()

        .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

            字节集缓存 ＝ 到字节集 (“”)
            .循环判断首 ()
                字节集缓存 ＝ 字节集缓存 ＋ 到字节集 (C代码 [C代码指针 ＋ 1])
                C代码指针 ＝ C代码指针 ＋ 1
            .循环判断尾 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

            .判断开始 (到文本 (字节集缓存) ＝ “int”)

                状态 ＝ 函数名称参数扫描 (“long int”)

            .默认
                状态 ＝ “扫描函数定义_long后面符号错误”
            .判断结束


        .默认
            状态 ＝ “扫描函数定义_long后面符号错误”
        .判断结束


    .判断 (到文本 (字节集缓存) ＝ “void”)

        状态 ＝ 函数名称参数扫描 (“void”)

    .默认
        C代码指针 ＝ 计数1
        状态 ＝ 函数名称参数扫描 (“int”)
    .判断结束


.默认
    状态 ＝ “扫描函数定义_类型名称错误”
.判断结束


返回 (状态)



.子程序 函数名称参数扫描, 文本型
.参数 类型, 文本型
.局部变量 状态, 文本型
.局部变量 页数, 整数型
.局部变量 计数1, 整数型
.局部变量 字节集缓存, 字节集


跳过空格换行注释 ()

函数类型 [函数总数 ＋ 1] ＝ 类型

.如果真 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “*”)
    函数类型 [函数总数 ＋ 1] ＝ 函数类型 [函数总数 ＋ 1] ＋ “*”
    C代码指针 ＝ C代码指针 ＋ 1
.如果真结束

.如果真 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “*”)
    函数类型 [函数总数 ＋ 1] ＝ 函数类型 [函数总数 ＋ 1] ＋ “*”
    C代码指针 ＝ C代码指针 ＋ 1
.如果真结束

跳过空格换行注释 ()

函数名称 [函数总数 ＋ 1] ＝ 到字节集 (“”)

.判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

    .循环判断首 ()

        函数名称 [函数总数 ＋ 1] ＝ 函数名称 [函数总数 ＋ 1] ＋ 到字节集 (C代码 [C代码指针 ＋ 1])

        C代码指针 ＝ C代码指针 ＋ 1

    .循环判断尾 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

    跳过空格换行注释 ()

    .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “(”)

        函数参数偏址 [函数总数 ＋ 1] ＝ 函数参数基址 [函数总数 ＋ 1]

        C代码指针 ＝ C代码指针 ＋ 1

        跳过空格换行注释 ()

        .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

            计数1 ＝ C代码指针

            字节集缓存 ＝ 到字节集 (“”)
            .循环判断首 ()
                字节集缓存 ＝ 字节集缓存 ＋ 到字节集 (C代码 [C代码指针 ＋ 1])
                C代码指针 ＝ C代码指针 ＋ 1
            .循环判断尾 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

            .判断开始 (到文本 (字节集缓存) ＝ “void”)

                跳过空格换行注释 ()

                .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “)”)

                    C代码指针 ＝ C代码指针 ＋ 1
                    状态 ＝ “)”

                .默认
                    状态 ＝ “函数名称参数扫描_(void...?错误”
                .判断结束


            .默认
                C代码指针 ＝ 计数1

                .循环判断首 ()

                    跳过空格换行注释 ()

                    .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

                        计数1 ＝ C代码指针

                        字节集缓存 ＝ 到字节集 (“”)
                        .循环判断首 ()
                            字节集缓存 ＝ 字节集缓存 ＋ 到字节集 (C代码 [C代码指针 ＋ 1])
                            C代码指针 ＝ C代码指针 ＋ 1
                        .循环判断尾 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

                        .判断开始 (到文本 (字节集缓存) ＝ “unsigned”)

                            跳过空格换行注释 ()

                            .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

                                字节集缓存 ＝ 到字节集 (“”)
                                .循环判断首 ()
                                    字节集缓存 ＝ 字节集缓存 ＋ 到字节集 (C代码 [C代码指针 ＋ 1])
                                    C代码指针 ＝ C代码指针 ＋ 1
                                .循环判断尾 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

                                .判断开始 (到文本 (字节集缓存) ＝ “char”)

                                    状态 ＝ 添加函数参数 (“unsigned char”)

                                .判断 (到文本 (字节集缓存) ＝ “int”)

                                    状态 ＝ 添加函数参数 (“unsigned int”)

                                .判断 (到文本 (字节集缓存) ＝ “long”)

                                    跳过空格换行注释 ()

                                    .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

                                        字节集缓存 ＝ 到字节集 (“”)
                                        .循环判断首 ()
                                            字节集缓存 ＝ 字节集缓存 ＋ 到字节集 (C代码 [C代码指针 ＋ 1])
                                            C代码指针 ＝ C代码指针 ＋ 1
                                        .循环判断尾 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

                                        .判断开始 (到文本 (字节集缓存) ＝ “int”)

                                            状态 ＝ 添加函数参数 (“unsigned long int”)

                                        .默认
                                            状态 ＝ “函数名称参数扫描_long后面符号错误”
                                        .判断结束


                                    .默认
                                        状态 ＝ “函数名称参数扫描_long后面符号错误”
                                    .判断结束


                                .默认
                                    状态 ＝ “函数名称参数扫描_unsigned后面符号错误”
                                .判断结束


                            .默认
                                状态 ＝ “函数名称参数扫描_unsigned后面符号错误”
                            .判断结束




                        .判断 (到文本 (字节集缓存) ＝ “signed”)

                            跳过空格换行注释 ()

                            .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

                                字节集缓存 ＝ 到字节集 (“”)
                                .循环判断首 ()
                                    字节集缓存 ＝ 字节集缓存 ＋ 到字节集 (C代码 [C代码指针 ＋ 1])
                                    C代码指针 ＝ C代码指针 ＋ 1
                                .循环判断尾 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

                                .判断开始 (到文本 (字节集缓存) ＝ “char”)

                                    状态 ＝ 添加函数参数 (“char”)

                                .判断 (到文本 (字节集缓存) ＝ “int”)

                                    状态 ＝ 添加函数参数 (“int”)

                                .判断 (到文本 (字节集缓存) ＝ “long”)

                                    跳过空格换行注释 ()

                                    .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

                                        字节集缓存 ＝ 到字节集 (“”)
                                        .循环判断首 ()
                                            字节集缓存 ＝ 字节集缓存 ＋ 到字节集 (C代码 [C代码指针 ＋ 1])
                                            C代码指针 ＝ C代码指针 ＋ 1
                                        .循环判断尾 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

                                        .判断开始 (到文本 (字节集缓存) ＝ “int”)

                                            状态 ＝ 添加函数参数 (“long int”)

                                        .默认
                                            状态 ＝ “函数名称参数扫描_long后面符号错误”
                                        .判断结束


                                    .默认
                                        状态 ＝ “函数名称参数扫描_long后面符号错误”
                                    .判断结束


                                .默认
                                    状态 ＝ “函数名称参数扫描_signed后面符号错误”
                                .判断结束


                            .默认
                                状态 ＝ “函数名称参数扫描_signed后面符号错误”
                            .判断结束



                        .判断 (到文本 (字节集缓存) ＝ “char”)

                            状态 ＝ 添加函数参数 (“char”)

                        .判断 (到文本 (字节集缓存) ＝ “int”)

                            状态 ＝ 添加函数参数 (“int”)

                        .判断 (到文本 (字节集缓存) ＝ “long”)

                            跳过空格换行注释 ()

                            .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

                                字节集缓存 ＝ 到字节集 (“”)
                                .循环判断首 ()
                                    字节集缓存 ＝ 字节集缓存 ＋ 到字节集 (C代码 [C代码指针 ＋ 1])
                                    C代码指针 ＝ C代码指针 ＋ 1
                                .循环判断尾 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

                                .判断开始 (到文本 (字节集缓存) ＝ “int”)

                                    状态 ＝ 添加函数参数 (“long int”)

                                .默认
                                    状态 ＝ “函数名称参数扫描_long后面符号错误”
                                .判断结束


                            .默认
                                状态 ＝ “函数名称参数扫描_long后面符号错误”
                            .判断结束


                        .默认
                            C代码指针 ＝ 计数1
                            状态 ＝ 添加函数参数 (“int”)
                        .判断结束


                    .默认
                        状态 ＝ “函数名称参数扫描_符号错误..- -”
                    .判断结束



                .循环判断尾 (状态 ＝ “,”)

            .判断结束


        .判断 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “)”)

            C代码指针 ＝ C代码指针 ＋ 1
            状态 ＝ “)”

        .默认
            状态 ＝ “函数名称参数扫描_符号错误..- -”
        .判断结束




        .如果真 (状态 ＝ “)”)

            函数返回地址 [函数总数 ＋ 1] ＝ RAM分配地址

            函数参数基址 [函数总数 ＋ 2] ＝ 函数参数偏址 [函数总数 ＋ 1]

            跳过空格换行注释 ()

            .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

                字节集缓存 ＝ 到字节集 (“”)
                .循环判断首 ()
                    字节集缓存 ＝ 字节集缓存 ＋ 到字节集 (C代码 [C代码指针 ＋ 1])
                    C代码指针 ＝ C代码指针 ＋ 1
                .循环判断尾 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

                .判断开始 (到文本 (字节集缓存) ＝ “rom”)

                    跳过空格换行注释 ()

                    .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58)

                        页数 ＝ 提取数值 ()

                        .判断开始 (页数 ＜ 256)

                            .如果真 (页数 ＞ ROM使用页数)
                                ROM使用页数 ＝ 页数
                            .如果真结束

                            ROM_缓存 ＝ ROM_64KB页 [页数 ＋ 1]
                            ROM_缓存使用字节 ＝ ROM_64KB页使用字节 [页数 ＋ 1]
                            函数入口地址 [函数总数 ＋ 1] ＝ 页数 × 65536 ＋ 位与 (ROM_缓存使用字节, 65535)

                            跳过空格换行注释 ()

                            .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

                                计数1 ＝ C代码指针

                                字节集缓存 ＝ 到字节集 (“”)
                                .循环判断首 ()
                                    字节集缓存 ＝ 字节集缓存 ＋ 到字节集 (C代码 [C代码指针 ＋ 1])
                                    C代码指针 ＝ C代码指针 ＋ 1
                                .循环判断尾 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

                                .判断开始 (到文本 (字节集缓存) ＝ “on”)
                                    函数共享状态 [函数总数 ＋ 1] ＝ “页间共享”
                                    RAM分配地址 ＝ RAM分配地址 ＋ 3
                                .默认
                                    函数共享状态 [函数总数 ＋ 1] ＝ “页内共享”
                                    RAM分配地址 ＝ RAM分配地址 ＋ 2
                                    C代码指针 ＝ 计数1
                                .判断结束


                            .默认
                                函数共享状态 [函数总数 ＋ 1] ＝ “页内共享”
                                RAM分配地址 ＝ RAM分配地址 ＋ 2
                            .判断结束



                        .默认
                            状态 ＝ “函数名称参数扫描_rom大于255页错误....”
                        .判断结束


                    .默认
                        状态 ＝ “函数名称参数扫描_rom?错误= =”
                    .判断结束


                .默认
                    状态 ＝ “函数名称参数扫描_符号错误- =”
                .判断结束



            .默认
                ROM_缓存 ＝ ROM_64KB页 [1]
                ROM_缓存使用字节 ＝ ROM_64KB页使用字节 [1]
                函数入口地址 [函数总数 ＋ 1] ＝ 位与 (ROM_缓存使用字节, 65535)

                函数共享状态 [函数总数 ＋ 1] ＝ “页内共享”
                RAM分配地址 ＝ RAM分配地址 ＋ 2

            .判断结束


        .如果真结束


    .默认
        状态 ＝ “函数名称参数扫描_符号错误+ +”
    .判断结束


.默认
    状态 ＝ “函数名称参数扫描_符号错误+ +”
.判断结束


返回 (状态)





.子程序 添加函数参数, 文本型
.参数 类型, 文本型
.局部变量 状态, 文本型


跳过空格换行注释 ()

函数参数类型 [函数参数偏址 [函数总数 ＋ 1] ＋ 1] ＝ 类型

.如果真 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “*”)
    函数参数类型 [函数参数偏址 [函数总数 ＋ 1] ＋ 1] ＝ 函数参数类型 [函数参数偏址 [函数总数 ＋ 1] ＋ 1] ＋ “*”
    C代码指针 ＝ C代码指针 ＋ 1
.如果真结束

.如果真 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “*”)
    函数参数类型 [函数参数偏址 [函数总数 ＋ 1] ＋ 1] ＝ 函数参数类型 [函数参数偏址 [函数总数 ＋ 1] ＋ 1] ＋ “*”
    C代码指针 ＝ C代码指针 ＋ 1
.如果真结束

跳过空格换行注释 ()

函数参数名称 [函数参数偏址 [函数总数 ＋ 1] ＋ 1] ＝ 到字节集 (“”)

.判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

    .循环判断首 ()

        函数参数名称 [函数参数偏址 [函数总数 ＋ 1] ＋ 1] ＝ 函数参数名称 [函数参数偏址 [函数总数 ＋ 1] ＋ 1] ＋ 到字节集 (C代码 [C代码指针 ＋ 1])

        C代码指针 ＝ C代码指针 ＋ 1

    .循环判断尾 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

    跳过空格换行注释 ()

    .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “,” 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “)”)

        函数参数地址 [函数参数偏址 [函数总数 ＋ 1] ＋ 1] ＝ RAM分配地址

        .判断开始 (函数参数类型 [函数参数偏址 [函数总数 ＋ 1] ＋ 1] ＝ “char” 或 函数参数类型 [函数参数偏址 [函数总数 ＋ 1] ＋ 1] ＝ “unsigned char”)
            RAM分配地址 ＝ RAM分配地址 ＋ 1
        .判断 (函数参数类型 [函数参数偏址 [函数总数 ＋ 1] ＋ 1] ＝ “long int” 或 函数参数类型 [函数参数偏址 [函数总数 ＋ 1] ＋ 1] ＝ “unsigned long int”)
            RAM分配地址 ＝ RAM分配地址 ＋ 4
        .默认
            RAM分配地址 ＝ RAM分配地址 ＋ 2
        .判断结束

        函数参数偏址 [函数总数 ＋ 1] ＝ 函数参数偏址 [函数总数 ＋ 1] ＋ 1

        状态 ＝ 到文本 (到字节集 (C代码 [C代码指针 ＋ 1]))

        C代码指针 ＝ C代码指针 ＋ 1

    .判断 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “[”)

        C代码指针 ＝ C代码指针 ＋ 1

        跳过空格换行注释 ()

        .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “]”)

            C代码指针 ＝ C代码指针 ＋ 1

            跳过空格换行注释 ()

            函数参数类型 [函数参数偏址 [函数总数 ＋ 1] ＋ 1] ＝ 函数参数类型 [函数参数偏址 [函数总数 ＋ 1] ＋ 1] ＋ “[]”

            .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “,” 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “)”)

                函数参数地址 [函数参数偏址 [函数总数 ＋ 1] ＋ 1] ＝ RAM分配地址

                RAM分配地址 ＝ RAM分配地址 ＋ 2

                函数参数偏址 [函数总数 ＋ 1] ＝ 函数参数偏址 [函数总数 ＋ 1] ＋ 1

                状态 ＝ 到文本 (到字节集 (C代码 [C代码指针 ＋ 1]))

                C代码指针 ＝ C代码指针 ＋ 1

            .默认
                状态 ＝ “(..[]?错误”

            .判断结束



        .默认
            状态 ＝ “(...[?错误”
        .判断结束

    .默认
        状态 ＝ “(?,?错误”
    .判断结束


.默认
    状态 ＝ “(?,?错误”
.判断结束


返回 (状态)





.子程序 扫描变量定义部件1, 文本型
.参数 变量类型, 文本型
.局部变量 状态, 文本型
.局部变量 数值, 整数型
.局部变量 数组长度, 整数型
.局部变量 计数, 整数型

计数 ＝ 0

.循环判断首 ()

    跳过空格换行注释 ()

    局部变量类型 [局部变量总数 ＋ 1] ＝ 变量类型

    .如果真 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “*”)
        局部变量类型 [局部变量总数 ＋ 1] ＝ 局部变量类型 [局部变量总数 ＋ 1] ＋ “*”
        C代码指针 ＝ C代码指针 ＋ 1
    .如果真结束

    .如果真 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “*”)
        局部变量类型 [局部变量总数 ＋ 1] ＝ 局部变量类型 [局部变量总数 ＋ 1] ＋ “*”
        C代码指针 ＝ C代码指针 ＋ 1
    .如果真结束

    跳过空格换行注释 ()

    局部变量名称 [局部变量总数 ＋ 1] ＝ 到字节集 (“”)

    .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

        .循环判断首 ()

            局部变量名称 [局部变量总数 ＋ 1] ＝ 局部变量名称 [局部变量总数 ＋ 1] ＋ 到字节集 (C代码 [C代码指针 ＋ 1])

            C代码指针 ＝ C代码指针 ＋ 1

        .循环判断尾 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)


        跳过空格换行注释 ()

        .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “,” 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “;”)

            局部变量地址 [局部变量总数 ＋ 1] ＝ RAM分配地址

            .判断开始 (局部变量类型 [局部变量总数 ＋ 1] ＝ “char” 或 局部变量类型 [局部变量总数 ＋ 1] ＝ “unsigned char”)
                RAM分配地址 ＝ RAM分配地址 ＋ 1
            .判断 (局部变量类型 [局部变量总数 ＋ 1] ＝ “long int” 或 局部变量类型 [局部变量总数 ＋ 1] ＝ “unsigned long int”)
                RAM分配地址 ＝ RAM分配地址 ＋ 4
            .默认
                RAM分配地址 ＝ RAM分配地址 ＋ 2
            .判断结束


            局部变量总数 ＝ 局部变量总数 ＋ 1

            状态 ＝ 到文本 (到字节集 (C代码 [C代码指针 ＋ 1]))

            C代码指针 ＝ C代码指针 ＋ 1


        .判断 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “=”)

            C代码指针 ＝ C代码指针 ＋ 1

            跳过空格换行注释 ()

            .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “-”)

                C代码指针 ＝ C代码指针 ＋ 1

                跳过空格换行注释 ()

                .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “'”)

                    数值 ＝ 位取反 (提取数值 ()) ＋ 1

                    跳过空格换行注释 ()

                    .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “,” 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “;”)

                        局部变量地址 [局部变量总数 ＋ 1] ＝ RAM分配地址

                        .判断开始 (局部变量类型 [局部变量总数 ＋ 1] ＝ “char” 或 局部变量类型 [局部变量总数 ＋ 1] ＝ “unsigned char”)
                            添加内存值初始化指令 (RAM分配地址, 数值)
                            RAM分配地址 ＝ RAM分配地址 ＋ 1
                        .判断 (局部变量类型 [局部变量总数 ＋ 1] ＝ “long int” 或 局部变量类型 [局部变量总数 ＋ 1] ＝ “unsigned long int”)
                            添加内存值初始化指令 (RAM分配地址, 数值)
                            RAM分配地址 ＝ RAM分配地址 ＋ 1
                            添加内存值初始化指令 (RAM分配地址, 右移 (数值, 8))
                            RAM分配地址 ＝ RAM分配地址 ＋ 1
                            添加内存值初始化指令 (RAM分配地址, 右移 (数值, 16))
                            RAM分配地址 ＝ RAM分配地址 ＋ 1
                            添加内存值初始化指令 (RAM分配地址, 右移 (数值, 24))
                            RAM分配地址 ＝ RAM分配地址 ＋ 1
                        .默认
                            添加内存值初始化指令 (RAM分配地址, 数值)
                            RAM分配地址 ＝ RAM分配地址 ＋ 1
                            添加内存值初始化指令 (RAM分配地址, 右移 (数值, 8))
                            RAM分配地址 ＝ RAM分配地址 ＋ 1

                        .判断结束



                        局部变量总数 ＝ 局部变量总数 ＋ 1

                        状态 ＝ 到文本 (到字节集 (C代码 [C代码指针 ＋ 1]))

                        C代码指针 ＝ C代码指针 ＋ 1


                    .默认
                        状态 ＝ “缺少,或;”
                    .判断结束


                .默认
                    状态 ＝ “-后面符号错误”
                .判断结束



            .判断 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “'”)

                数值 ＝ 提取数值 ()

                跳过空格换行注释 ()

                .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “,” 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “;”)

                    局部变量地址 [局部变量总数 ＋ 1] ＝ RAM分配地址

                    .判断开始 (局部变量类型 [局部变量总数 ＋ 1] ＝ “char” 或 局部变量类型 [局部变量总数 ＋ 1] ＝ “unsigned char”)
                        添加内存值初始化指令 (RAM分配地址, 数值)
                        RAM分配地址 ＝ RAM分配地址 ＋ 1
                    .判断 (局部变量类型 [局部变量总数 ＋ 1] ＝ “long int” 或 局部变量类型 [局部变量总数 ＋ 1] ＝ “unsigned long int”)
                        添加内存值初始化指令 (RAM分配地址, 数值)
                        RAM分配地址 ＝ RAM分配地址 ＋ 1
                        添加内存值初始化指令 (RAM分配地址, 右移 (数值, 8))
                        RAM分配地址 ＝ RAM分配地址 ＋ 1
                        添加内存值初始化指令 (RAM分配地址, 右移 (数值, 16))
                        RAM分配地址 ＝ RAM分配地址 ＋ 1
                        添加内存值初始化指令 (RAM分配地址, 右移 (数值, 24))
                        RAM分配地址 ＝ RAM分配地址 ＋ 1
                    .默认
                        添加内存值初始化指令 (RAM分配地址, 数值)
                        RAM分配地址 ＝ RAM分配地址 ＋ 1
                        添加内存值初始化指令 (RAM分配地址, 右移 (数值, 8))
                        RAM分配地址 ＝ RAM分配地址 ＋ 1
                    .判断结束


                    局部变量总数 ＝ 局部变量总数 ＋ 1

                    状态 ＝ 到文本 (到字节集 (C代码 [C代码指针 ＋ 1]))

                    C代码指针 ＝ C代码指针 ＋ 1


                .默认
                    状态 ＝ “缺少,或;”

                .判断结束


            .默认
                状态 ＝ “=后面符号错误”

            .判断结束






        .判断 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “[”)

            C代码指针 ＝ C代码指针 ＋ 1

            跳过空格换行注释 ()

            局部变量类型 [局部变量总数 ＋ 1] ＝ 局部变量类型 [局部变量总数 ＋ 1] ＋ “[]”

            局部变量地址 [局部变量总数 ＋ 1] ＝ RAM分配地址

            .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “'”)

                数组长度 ＝ 提取数值 ()

                .判断开始 (数组长度 ≠ 0 且 位与 (数组长度, 4294901760) ＝ 0)

                    跳过空格换行注释 ()

                    .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “]”)

                        C代码指针 ＝ C代码指针 ＋ 1

                        跳过空格换行注释 ()

                        .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “,” 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “;”)

                            .判断开始 (局部变量类型 [局部变量总数 ＋ 1] ＝ “char[]” 或 局部变量类型 [局部变量总数 ＋ 1] ＝ “unsigned char[]”)

                            .判断 (局部变量类型 [局部变量总数 ＋ 1] ＝ “long int[]” 或 局部变量类型 [局部变量总数 ＋ 1] ＝ “unsigned long int[]”)
                                数组长度 ＝ 数组长度 × 4
                            .默认
                                数组长度 ＝ 数组长度 × 2
                            .判断结束

                            RAM分配地址 ＝ RAM分配地址 ＋ 数组长度

                            局部变量总数 ＝ 局部变量总数 ＋ 1

                            状态 ＝ 到文本 (到字节集 (C代码 [C代码指针 ＋ 1]))

                            C代码指针 ＝ C代码指针 ＋ 1


                        .判断 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “=”)

                            C代码指针 ＝ C代码指针 ＋ 1

                            跳过空格换行注释 ()

                            .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “{”)

                                C代码指针 ＝ C代码指针 ＋ 1

                                .循环判断首 ()

                                    跳过空格换行注释 ()

                                    .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “-”)

                                        C代码指针 ＝ C代码指针 ＋ 1

                                        跳过空格换行注释 ()

                                        .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “'”)

                                            数值 ＝ 位取反 (提取数值 ()) ＋ 1

                                            跳过空格换行注释 ()

                                            .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “,” 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “}”)

                                                .判断开始 (局部变量类型 [局部变量总数 ＋ 1] ＝ “char[]” 或 局部变量类型 [局部变量总数 ＋ 1] ＝ “unsigned char[]”)
                                                    添加内存值初始化指令 (RAM分配地址, 数值)
                                                    RAM分配地址 ＝ RAM分配地址 ＋ 1
                                                .判断 (局部变量类型 [局部变量总数 ＋ 1] ＝ “long int[]” 或 局部变量类型 [局部变量总数 ＋ 1] ＝ “unsigned long int[]”)
                                                    添加内存值初始化指令 (RAM分配地址, 数值)
                                                    RAM分配地址 ＝ RAM分配地址 ＋ 1
                                                    添加内存值初始化指令 (RAM分配地址, 右移 (数值, 8))
                                                    RAM分配地址 ＝ RAM分配地址 ＋ 1
                                                    添加内存值初始化指令 (RAM分配地址, 右移 (数值, 16))
                                                    RAM分配地址 ＝ RAM分配地址 ＋ 1
                                                    添加内存值初始化指令 (RAM分配地址, 右移 (数值, 24))
                                                    RAM分配地址 ＝ RAM分配地址 ＋ 1
                                                .默认
                                                    添加内存值初始化指令 (RAM分配地址, 数值)
                                                    RAM分配地址 ＝ RAM分配地址 ＋ 1
                                                    添加内存值初始化指令 (RAM分配地址, 右移 (数值, 8))
                                                    RAM分配地址 ＝ RAM分配地址 ＋ 1
                                                .判断结束


                                                状态 ＝ 到文本 (到字节集 (C代码 [C代码指针 ＋ 1]))

                                                C代码指针 ＝ C代码指针 ＋ 1


                                            .默认
                                                状态 ＝ “缺少,或}”
                                            .判断结束


                                        .默认
                                            状态 ＝ “-后面符号错误”
                                        .判断结束



                                    .判断 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “'”)

                                        数值 ＝ 提取数值 ()

                                        跳过空格换行注释 ()

                                        .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “,” 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “}”)

                                            .判断开始 (局部变量类型 [局部变量总数 ＋ 1] ＝ “char[]” 或 局部变量类型 [局部变量总数 ＋ 1] ＝ “unsigned char[]”)
                                                添加内存值初始化指令 (RAM分配地址, 数值)
                                                RAM分配地址 ＝ RAM分配地址 ＋ 1
                                            .判断 (局部变量类型 [局部变量总数 ＋ 1] ＝ “long int[]” 或 局部变量类型 [局部变量总数 ＋ 1] ＝ “unsigned long int[]”)
                                                添加内存值初始化指令 (RAM分配地址, 数值)
                                                RAM分配地址 ＝ RAM分配地址 ＋ 1
                                                添加内存值初始化指令 (RAM分配地址, 右移 (数值, 8))
                                                RAM分配地址 ＝ RAM分配地址 ＋ 1
                                                添加内存值初始化指令 (RAM分配地址, 右移 (数值, 16))
                                                RAM分配地址 ＝ RAM分配地址 ＋ 1
                                                添加内存值初始化指令 (RAM分配地址, 右移 (数值, 24))
                                                RAM分配地址 ＝ RAM分配地址 ＋ 1
                                            .默认
                                                添加内存值初始化指令 (RAM分配地址, 数值)
                                                RAM分配地址 ＝ RAM分配地址 ＋ 1
                                                添加内存值初始化指令 (RAM分配地址, 右移 (数值, 8))
                                                RAM分配地址 ＝ RAM分配地址 ＋ 1
                                            .判断结束


                                            状态 ＝ 到文本 (到字节集 (C代码 [C代码指针 ＋ 1]))

                                            C代码指针 ＝ C代码指针 ＋ 1


                                        .默认
                                            状态 ＝ “缺少,或;”

                                        .判断结束


                                    .默认
                                        状态 ＝ “{或,后面符号错误”
                                    .判断结束


                                .循环判断尾 (状态 ＝ “,”)

                                .如果真 (状态 ＝ “}”)

                                    跳过空格换行注释 ()

                                    .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “,” 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “;”)

                                        .判断开始 (局部变量类型 [局部变量总数 ＋ 1] ＝ “char[]” 或 局部变量类型 [局部变量总数 ＋ 1] ＝ “unsigned char[]”)

                                        .判断 (局部变量类型 [局部变量总数 ＋ 1] ＝ “long int[]” 或 局部变量类型 [局部变量总数 ＋ 1] ＝ “unsigned long int[]”)
                                            数组长度 ＝ 数组长度 × 4
                                        .默认
                                            数组长度 ＝ 数组长度 × 2
                                        .判断结束

                                        .判断开始 (RAM分配地址 ≤ 局部变量地址 [局部变量总数 ＋ 1] ＋ 数组长度)

                                            RAM分配地址 ＝ 局部变量地址 [局部变量总数 ＋ 1] ＋ 数组长度

                                            局部变量总数 ＝ 局部变量总数 ＋ 1

                                            状态 ＝ 到文本 (到字节集 (C代码 [C代码指针 ＋ 1]))

                                            C代码指针 ＝ C代码指针 ＋ 1


                                        .默认
                                            状态 ＝ “数组初始化数据超出范围”
                                        .判断结束


                                    .默认
                                        状态 ＝ “}后面符号错误”
                                    .判断结束


                                .如果真结束




                            .判断 (到数值 (C代码 [C代码指针 ＋ 1]) ＝ 34 且 到数值 (C代码 [C代码指针 ＋ 2]) ≠ 34)

                                C代码指针 ＝ C代码指针 ＋ 1

                                .循环判断首 ()

                                    数值 ＝ 到数值 (C代码 [C代码指针 ＋ 1])

                                    .判断开始 (局部变量类型 [局部变量总数 ＋ 1] ＝ “char[]” 或 局部变量类型 [局部变量总数 ＋ 1] ＝ “unsigned char[]”)
                                        添加内存值初始化指令 (RAM分配地址, 数值)
                                        RAM分配地址 ＝ RAM分配地址 ＋ 1
                                    .判断 (局部变量类型 [局部变量总数 ＋ 1] ＝ “long int[]” 或 局部变量类型 [局部变量总数 ＋ 1] ＝ “unsigned long int[]”)
                                        添加内存值初始化指令 (RAM分配地址, 数值)
                                        RAM分配地址 ＝ RAM分配地址 ＋ 1
                                        添加内存值初始化指令 (RAM分配地址, 右移 (数值, 8))
                                        RAM分配地址 ＝ RAM分配地址 ＋ 1
                                        添加内存值初始化指令 (RAM分配地址, 右移 (数值, 16))
                                        RAM分配地址 ＝ RAM分配地址 ＋ 1
                                        添加内存值初始化指令 (RAM分配地址, 右移 (数值, 24))
                                        RAM分配地址 ＝ RAM分配地址 ＋ 1
                                    .默认
                                        添加内存值初始化指令 (RAM分配地址, 数值)
                                        RAM分配地址 ＝ RAM分配地址 ＋ 1
                                        添加内存值初始化指令 (RAM分配地址, 右移 (数值, 8))
                                        RAM分配地址 ＝ RAM分配地址 ＋ 1
                                    .判断结束

                                    C代码指针 ＝ C代码指针 ＋ 1

                                .循环判断尾 (到数值 (C代码 [C代码指针 ＋ 1]) ≠ 34 且 C代码指针 ＜ 取字节集长度 (C代码) － 16)

                                .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＝ 34)

                                    C代码指针 ＝ C代码指针 ＋ 1

                                    跳过空格换行注释 ()

                                    .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “,” 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “;”)

                                        .判断开始 (局部变量类型 [局部变量总数 ＋ 1] ＝ “char[]” 或 局部变量类型 [局部变量总数 ＋ 1] ＝ “unsigned char[]”)

                                        .判断 (局部变量类型 [局部变量总数 ＋ 1] ＝ “long int[]” 或 局部变量类型 [局部变量总数 ＋ 1] ＝ “unsigned long int[]”)
                                            数组长度 ＝ 数组长度 × 4
                                        .默认
                                            数组长度 ＝ 数组长度 × 2
                                        .判断结束

                                        .判断开始 (RAM分配地址 ≤ 局部变量地址 [局部变量总数 ＋ 1] ＋ 数组长度)

                                            RAM分配地址 ＝ 局部变量地址 [局部变量总数 ＋ 1] ＋ 数组长度

                                            局部变量总数 ＝ 局部变量总数 ＋ 1

                                            状态 ＝ 到文本 (到字节集 (C代码 [C代码指针 ＋ 1]))

                                            C代码指针 ＝ C代码指针 ＋ 1


                                        .默认
                                            状态 ＝ “数组初始化数据超出范围”
                                        .判断结束


                                    .默认
                                        状态 ＝ “''?错误”
                                    .判断结束

                                .默认
                                    状态 ＝ “''?错误”
                                .判断结束



                            .默认
                                状态 ＝ “=?错误”
                            .判断结束



                        .默认
                            状态 ＝ “[]后面符号错误”
                        .判断结束


                    .默认
                        状态 ＝ “[]对数错误”
                    .判断结束


                .默认
                    状态 ＝ “数组长度范围定义错误”
                .判断结束



            .判断 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “]”)

                C代码指针 ＝ C代码指针 ＋ 1

                跳过空格换行注释 ()

                .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “=”)

                    C代码指针 ＝ C代码指针 ＋ 1

                    跳过空格换行注释 ()

                    .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “{”)

                        C代码指针 ＝ C代码指针 ＋ 1

                        .循环判断首 ()

                            跳过空格换行注释 ()

                            .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “-”)

                                C代码指针 ＝ C代码指针 ＋ 1

                                跳过空格换行注释 ()

                                .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “'”)

                                    数值 ＝ 位取反 (提取数值 ()) ＋ 1

                                    跳过空格换行注释 ()

                                    .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “,” 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “}”)

                                        .判断开始 (局部变量类型 [局部变量总数 ＋ 1] ＝ “char[]” 或 局部变量类型 [局部变量总数 ＋ 1] ＝ “unsigned char[]”)
                                            添加内存值初始化指令 (RAM分配地址, 数值)
                                            RAM分配地址 ＝ RAM分配地址 ＋ 1
                                        .判断 (局部变量类型 [局部变量总数 ＋ 1] ＝ “long int[]” 或 局部变量类型 [局部变量总数 ＋ 1] ＝ “unsigned long int[]”)
                                            添加内存值初始化指令 (RAM分配地址, 数值)
                                            RAM分配地址 ＝ RAM分配地址 ＋ 1
                                            添加内存值初始化指令 (RAM分配地址, 右移 (数值, 8))
                                            RAM分配地址 ＝ RAM分配地址 ＋ 1
                                            添加内存值初始化指令 (RAM分配地址, 右移 (数值, 16))
                                            RAM分配地址 ＝ RAM分配地址 ＋ 1
                                            添加内存值初始化指令 (RAM分配地址, 右移 (数值, 24))
                                            RAM分配地址 ＝ RAM分配地址 ＋ 1
                                        .默认
                                            添加内存值初始化指令 (RAM分配地址, 数值)
                                            RAM分配地址 ＝ RAM分配地址 ＋ 1
                                            添加内存值初始化指令 (RAM分配地址, 右移 (数值, 8))
                                            RAM分配地址 ＝ RAM分配地址 ＋ 1
                                        .判断结束


                                        状态 ＝ 到文本 (到字节集 (C代码 [C代码指针 ＋ 1]))

                                        C代码指针 ＝ C代码指针 ＋ 1


                                    .默认
                                        状态 ＝ “缺少,或}”
                                    .判断结束


                                .默认
                                    状态 ＝ “-后面符号错误”
                                .判断结束



                            .判断 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “'”)

                                数值 ＝ 提取数值 ()

                                跳过空格换行注释 ()

                                .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “,” 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “}”)

                                    .判断开始 (局部变量类型 [局部变量总数 ＋ 1] ＝ “char[]” 或 局部变量类型 [局部变量总数 ＋ 1] ＝ “unsigned char[]”)
                                        添加内存值初始化指令 (RAM分配地址, 数值)
                                        RAM分配地址 ＝ RAM分配地址 ＋ 1
                                    .判断 (局部变量类型 [局部变量总数 ＋ 1] ＝ “long int[]” 或 局部变量类型 [局部变量总数 ＋ 1] ＝ “unsigned long int[]”)
                                        添加内存值初始化指令 (RAM分配地址, 数值)
                                        RAM分配地址 ＝ RAM分配地址 ＋ 1
                                        添加内存值初始化指令 (RAM分配地址, 右移 (数值, 8))
                                        RAM分配地址 ＝ RAM分配地址 ＋ 1
                                        添加内存值初始化指令 (RAM分配地址, 右移 (数值, 16))
                                        RAM分配地址 ＝ RAM分配地址 ＋ 1
                                        添加内存值初始化指令 (RAM分配地址, 右移 (数值, 24))
                                        RAM分配地址 ＝ RAM分配地址 ＋ 1
                                    .默认
                                        添加内存值初始化指令 (RAM分配地址, 数值)
                                        RAM分配地址 ＝ RAM分配地址 ＋ 1
                                        添加内存值初始化指令 (RAM分配地址, 右移 (数值, 8))
                                        RAM分配地址 ＝ RAM分配地址 ＋ 1
                                    .判断结束


                                    状态 ＝ 到文本 (到字节集 (C代码 [C代码指针 ＋ 1]))

                                    C代码指针 ＝ C代码指针 ＋ 1


                                .默认
                                    状态 ＝ “缺少,或;”

                                .判断结束


                            .默认
                                状态 ＝ “{或,后面符号错误”
                            .判断结束


                        .循环判断尾 (状态 ＝ “,”)

                        .如果真 (状态 ＝ “}”)

                            跳过空格换行注释 ()

                            .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “,” 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “;”)

                                局部变量总数 ＝ 局部变量总数 ＋ 1

                                状态 ＝ 到文本 (到字节集 (C代码 [C代码指针 ＋ 1]))

                                C代码指针 ＝ C代码指针 ＋ 1


                            .默认
                                状态 ＝ “}后面符号错误”
                            .判断结束


                        .如果真结束




                    .判断 (到数值 (C代码 [C代码指针 ＋ 1]) ＝ 34 且 到数值 (C代码 [C代码指针 ＋ 2]) ≠ 34)

                        C代码指针 ＝ C代码指针 ＋ 1

                        .循环判断首 ()

                            数值 ＝ 到数值 (C代码 [C代码指针 ＋ 1])

                            .判断开始 (局部变量类型 [局部变量总数 ＋ 1] ＝ “char[]” 或 局部变量类型 [局部变量总数 ＋ 1] ＝ “unsigned char[]”)
                                添加内存值初始化指令 (RAM分配地址, 数值)
                                RAM分配地址 ＝ RAM分配地址 ＋ 1
                            .判断 (局部变量类型 [局部变量总数 ＋ 1] ＝ “long int[]” 或 局部变量类型 [局部变量总数 ＋ 1] ＝ “unsigned long int[]”)
                                添加内存值初始化指令 (RAM分配地址, 数值)
                                RAM分配地址 ＝ RAM分配地址 ＋ 1
                                添加内存值初始化指令 (RAM分配地址, 右移 (数值, 8))
                                RAM分配地址 ＝ RAM分配地址 ＋ 1
                                添加内存值初始化指令 (RAM分配地址, 右移 (数值, 16))
                                RAM分配地址 ＝ RAM分配地址 ＋ 1
                                添加内存值初始化指令 (RAM分配地址, 右移 (数值, 24))
                                RAM分配地址 ＝ RAM分配地址 ＋ 1
                            .默认
                                添加内存值初始化指令 (RAM分配地址, 数值)
                                RAM分配地址 ＝ RAM分配地址 ＋ 1
                                添加内存值初始化指令 (RAM分配地址, 右移 (数值, 8))
                                RAM分配地址 ＝ RAM分配地址 ＋ 1
                            .判断结束

                            C代码指针 ＝ C代码指针 ＋ 1

                        .循环判断尾 (到数值 (C代码 [C代码指针 ＋ 1]) ≠ 34 且 C代码指针 ＜ 取字节集长度 (C代码) － 16)

                        .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＝ 34)

                            C代码指针 ＝ C代码指针 ＋ 1

                            跳过空格换行注释 ()

                            .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “,” 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “;”)

                                局部变量总数 ＝ 局部变量总数 ＋ 1

                                状态 ＝ 到文本 (到字节集 (C代码 [C代码指针 ＋ 1]))

                                C代码指针 ＝ C代码指针 ＋ 1


                            .默认
                                状态 ＝ “''?错误”
                            .判断结束


                        .默认
                            状态 ＝ “''?错误”
                        .判断结束


                    .默认
                        状态 ＝ “=?错误”
                    .判断结束



                .默认
                    状态 ＝ “[]后面符号错误”
                .判断结束



            .默认
                状态 ＝ “[]对数错误”
            .判断结束



        .判断 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “(” 且 计数 ＝ 0)
            状态 ＝ “进入函数扫描”
        .默认
            状态 ＝ “符号错误”
        .判断结束



    .默认
        状态 ＝ “符号错误”
    .判断结束

    计数 ＝ 计数 ＋ 1

    .如果真 (位与 (RAM分配地址, 4294901760) ≠ 0)
        状态 ＝ “RAM爆缸...”
    .如果真结束


.循环判断尾 (状态 ＝ “,”)



返回 (状态)








.子程序 添加内存值初始化指令, , , ROM页生成传送指令 给8位内存单元装入8位数 ROM页装满指令自动使用下1页
.参数 addr, 整数型
.参数 x, 整数型


.如果真 (ROM_缓存使用字节 ＋ 7 ＞ 65462 且 添加内存值初始化指令跳页控制 ＝ 1)

    页间跳转 (65536 × (ROM使用页数 ＋ 1))

    ROM_64KB页 [ROM使用页数 ＋ 1] ＝ ROM_缓存
    ROM_64KB页使用字节 [ROM使用页数 ＋ 1] ＝ ROM_缓存使用字节

    ROM_缓存 ＝ 到字节集 (“”)
    ROM_缓存使用字节 ＝ 0

    ROM使用页数 ＝ ROM使用页数 ＋ 1
.如果真结束

A等于立即数 (x)
_RAM等于A (addr)




.子程序 提取数值, 整数型
.局部变量 源数, 字节集
.局部变量 源数位数, 整数型
.局部变量 十进制, 整数型


源数 ＝ 到字节集 (“”)
源数位数 ＝ 0
十进制 ＝ 0

.判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1]) ＋ 到字节集 (C代码 [C代码指针 ＋ 2])) ＝ “0x” 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1]) ＋ 到字节集 (C代码 [C代码指针 ＋ 2])) ＝ “0X”)

    C代码指针 ＝ C代码指针 ＋ 2

    .判断循环首 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 71 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 103)

        源数 ＝ 源数 ＋ 到字节集 (C代码 [C代码指针 ＋ 1])

        源数位数 ＝ 源数位数 ＋ 1

        C代码指针 ＝ C代码指针 ＋ 1

    .判断循环尾 ()

    .判断开始 (源数位数 ＞ 0 且 源数位数 ＜ 9)

        十进制 ＝ 十六进制转十进制 (到文本 (到字节集 (源数 [源数位数])))
        源数位数 ＝ 源数位数 － 1
        .如果真 (源数位数 ＞ 0)
            十进制 ＝ 十进制 ＋ 十六进制转十进制 (到文本 (到字节集 (源数 [源数位数]))) × 16
            源数位数 ＝ 源数位数 － 1
            .如果真 (源数位数 ＞ 0)
                十进制 ＝ 十进制 ＋ 十六进制转十进制 (到文本 (到字节集 (源数 [源数位数]))) × 256
                源数位数 ＝ 源数位数 － 1
                .如果真 (源数位数 ＞ 0)
                    十进制 ＝ 十进制 ＋ 十六进制转十进制 (到文本 (到字节集 (源数 [源数位数]))) × 4096
                    源数位数 ＝ 源数位数 － 1
                    .如果真 (源数位数 ＞ 0)
                        十进制 ＝ 十进制 ＋ 十六进制转十进制 (到文本 (到字节集 (源数 [源数位数]))) × 65536
                        源数位数 ＝ 源数位数 － 1
                        .如果真 (源数位数 ＞ 0)
                            十进制 ＝ 十进制 ＋ 十六进制转十进制 (到文本 (到字节集 (源数 [源数位数]))) × 1048576
                            源数位数 ＝ 源数位数 － 1
                            .如果真 (源数位数 ＞ 0)
                                十进制 ＝ 十进制 ＋ 十六进制转十进制 (到文本 (到字节集 (源数 [源数位数]))) × 16777216
                                源数位数 ＝ 源数位数 － 1
                                .如果真 (源数位数 ＞ 0)
                                    十进制 ＝ 十进制 ＋ 十六进制转十进制 (到文本 (到字节集 (源数 [源数位数]))) × 268435456
                                .如果真结束

                            .如果真结束

                        .如果真结束

                    .如果真结束

                .如果真结束

            .如果真结束

        .如果真结束


    .默认
        C代码指针 ＝ C代码指针 － (2 ＋ 源数位数)
        十进制 ＝ 0
    .判断结束

.判断 (到数值 (C代码 [C代码指针 ＋ 1]) ＝ 48 且 到数值 (C代码 [C代码指针 ＋ 2]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 2]) ＜ 56)

    C代码指针 ＝ C代码指针 ＋ 1

    .判断循环首 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 56)

        源数 ＝ 源数 ＋ 到字节集 (C代码 [C代码指针 ＋ 1])

        源数位数 ＝ 源数位数 ＋ 1

        C代码指针 ＝ C代码指针 ＋ 1

    .判断循环尾 ()

    .判断开始 (源数位数 ＜ 12)

        十进制 ＝ 到数值 (到文本 (到字节集 (源数 [源数位数])))
        源数位数 ＝ 源数位数 － 1
        .如果真 (源数位数 ＞ 0)
            十进制 ＝ 十进制 ＋ 到数值 (到文本 (到字节集 (源数 [源数位数]))) × 8
            源数位数 ＝ 源数位数 － 1
            .如果真 (源数位数 ＞ 0)
                十进制 ＝ 十进制 ＋ 到数值 (到文本 (到字节集 (源数 [源数位数]))) × 64
                源数位数 ＝ 源数位数 － 1
                .如果真 (源数位数 ＞ 0)
                    十进制 ＝ 十进制 ＋ 到数值 (到文本 (到字节集 (源数 [源数位数]))) × 512
                    源数位数 ＝ 源数位数 － 1
                    .如果真 (源数位数 ＞ 0)
                        十进制 ＝ 十进制 ＋ 到数值 (到文本 (到字节集 (源数 [源数位数]))) × 4096
                        源数位数 ＝ 源数位数 － 1
                        .如果真 (源数位数 ＞ 0)
                            十进制 ＝ 十进制 ＋ 到数值 (到文本 (到字节集 (源数 [源数位数]))) × 32768
                            源数位数 ＝ 源数位数 － 1
                            .如果真 (源数位数 ＞ 0)
                                十进制 ＝ 十进制 ＋ 到数值 (到文本 (到字节集 (源数 [源数位数]))) × 262144
                                源数位数 ＝ 源数位数 － 1
                                .如果真 (源数位数 ＞ 0)
                                    十进制 ＝ 十进制 ＋ 到数值 (到文本 (到字节集 (源数 [源数位数]))) × 2097152
                                    源数位数 ＝ 源数位数 － 1
                                    .如果真 (源数位数 ＞ 0)
                                        十进制 ＝ 十进制 ＋ 到数值 (到文本 (到字节集 (源数 [源数位数]))) × 16777216
                                        源数位数 ＝ 源数位数 － 1
                                        .如果真 (源数位数 ＞ 0)
                                            十进制 ＝ 十进制 ＋ 到数值 (到文本 (到字节集 (源数 [源数位数]))) × 134217728
                                            源数位数 ＝ 源数位数 － 1
                                            .如果真 (源数位数 ＞ 0)
                                                十进制 ＝ 十进制 ＋ 到数值 (到文本 (到字节集 (源数 [源数位数]))) × 1073741824
                                            .如果真结束

                                        .如果真结束

                                    .如果真结束

                                .如果真结束

                            .如果真结束

                        .如果真结束

                    .如果真结束

                .如果真结束

            .如果真结束

        .如果真结束

        .如果真 (十进制 ＞ 4294967295)
            C代码指针 ＝ C代码指针 － (1 ＋ 源数位数)
            十进制 ＝ 0
        .如果真结束



    .默认
        C代码指针 ＝ C代码指针 － (1 ＋ 源数位数)
        十进制 ＝ 0

    .判断结束


.判断 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 48 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58)

    .判断循环首 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58)

        源数 ＝ 源数 ＋ 到字节集 (C代码 [C代码指针 ＋ 1])

        源数位数 ＝ 源数位数 ＋ 1

        C代码指针 ＝ C代码指针 ＋ 1

    .判断循环尾 ()

    .判断开始 (到数值 (到文本 (源数)) ＜ 4294967296)

        十进制 ＝ 到数值 (到文本 (源数))

    .默认
        C代码指针 ＝ C代码指针 － 源数位数
        十进制 ＝ 0
    .判断结束


.判断 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “'” 且 到文本 (到字节集 (C代码 [C代码指针 ＋ 3])) ＝ “'”)

    十进制 ＝ 到数值 (C代码 [C代码指针 ＋ 2])

    C代码指针 ＝ C代码指针 ＋ 3

.默认
    .如果真 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “0”)

        十进制 ＝ 0

        C代码指针 ＝ C代码指针 ＋ 1

    .如果真结束

.判断结束

返回 (十进制)



.子程序 十六进制转十进制, 整数型
.参数 十六进制, 文本型
.局部变量 十进制, 整数型


.如果 (十六进制 ＝ “0”)
    十进制 ＝ 0
.否则
    .如果 (十六进制 ＝ “1”)
        十进制 ＝ 1
    .否则
        .如果 (十六进制 ＝ “2”)
            十进制 ＝ 2
        .否则
            .如果 (十六进制 ＝ “3”)
                十进制 ＝ 3
            .否则
                .如果 (十六进制 ＝ “4”)
                    十进制 ＝ 4
                .否则
                    .如果 (十六进制 ＝ “5”)
                        十进制 ＝ 5
                    .否则
                        .如果 (十六进制 ＝ “6”)
                            十进制 ＝ 6
                        .否则
                            .如果 (十六进制 ＝ “7”)
                                十进制 ＝ 7
                            .否则
                                .如果 (十六进制 ＝ “8”)
                                    十进制 ＝ 8
                                .否则
                                    .如果 (十六进制 ＝ “9”)
                                        十进制 ＝ 9
                                    .否则
                                        .如果 (十六进制 ＝ “a” 或 十六进制 ＝ “A”)
                                            十进制 ＝ 10
                                        .否则
                                            .如果 (十六进制 ＝ “b” 或 十六进制 ＝ “B”)
                                                十进制 ＝ 11
                                            .否则
                                                .如果 (十六进制 ＝ “c” 或 十六进制 ＝ “C”)
                                                    十进制 ＝ 12
                                                .否则
                                                    .如果 (十六进制 ＝ “d” 或 十六进制 ＝ “D”)
                                                        十进制 ＝ 13
                                                    .否则
                                                        .如果 (十六进制 ＝ “e” 或 十六进制 ＝ “E”)
                                                            十进制 ＝ 14
                                                        .否则
                                                            .如果真 (十六进制 ＝ “f” 或 十六进制 ＝ “F”)
                                                                十进制 ＝ 15
                                                            .如果真结束

                                                        .如果结束

                                                    .如果结束

                                                .如果结束

                                            .如果结束

                                        .如果结束

                                    .如果结束

                                .如果结束

                            .如果结束

                        .如果结束

                    .如果结束

                .如果结束

            .如果结束

        .如果结束

    .如果结束

.如果结束

返回 (十进制)




.子程序 跳过空格换行注释
.局部变量 k, 整数型


.循环判断首 ()
    .判断开始 (C代码指针 ＜ 取字节集长度 (C代码) － 16)
        .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “ ”)
            C代码指针 ＝ C代码指针 ＋ 1
            k ＝ 1
        .判断 (到数值 (C代码 [C代码指针 ＋ 1]) ＝ 13 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 10 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 9)
            C代码指针 ＝ C代码指针 ＋ 1
            k ＝ 1
        .判断 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “/” 且 到文本 (到字节集 (C代码 [C代码指针 ＋ 2])) ＝ “/”)
            C代码指针 ＝ C代码指针 ＋ 2

            .循环判断首 ()
                .判断开始 (C代码指针 ＜ 取字节集长度 (C代码) － 16)

                    .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＝ 13 且 到数值 (C代码 [C代码指针 ＋ 2]) ＝ 13 且 到数值 (C代码 [C代码指针 ＋ 3]) ＝ 10)
                        C代码指针 ＝ C代码指针 ＋ 3
                        k ＝ 1
                    .判断 (到数值 (C代码 [C代码指针 ＋ 1]) ＝ 13 且 到数值 (C代码 [C代码指针 ＋ 2]) ＝ 10)
                        C代码指针 ＝ C代码指针 ＋ 2
                        k ＝ 0
                    .默认
                        C代码指针 ＝ C代码指针 ＋ 1
                        k ＝ 1
                    .判断结束


                .默认
                    k ＝ 0
                .判断结束

            .循环判断尾 (k ＝ 1)
            k ＝ 1

        .判断 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “/” 且 到文本 (到字节集 (C代码 [C代码指针 ＋ 2])) ＝ “*”)
            C代码指针 ＝ C代码指针 ＋ 2

            .循环判断首 ()
                .判断开始 (C代码指针 ＜ 取字节集长度 (C代码) － 16)
                    .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “*” 且 到文本 (到字节集 (C代码 [C代码指针 ＋ 2])) ＝ “/”)
                        C代码指针 ＝ C代码指针 ＋ 2
                        k ＝ 0
                    .默认
                        C代码指针 ＝ C代码指针 ＋ 1
                        k ＝ 1
                    .判断结束

                .默认
                    k ＝ 0
                .判断结束

            .循环判断尾 (k ＝ 1)
            k ＝ 1

        .默认
            k ＝ 0
        .判断结束

    .默认
        k ＝ 0
    .判断结束

.循环判断尾 (k ＝ 1)

