.版本 2

.程序集 窗口程序集1

.子程序 _编辑框1_内容被改变



.子程序 __启动窗口_尺寸被改变

列表框1.左边 ＝ 2
列表框1.顶边 ＝ 16
列表框1.宽度 ＝ 128
列表框1.高度 ＝ _启动窗口.高度 － 167

编辑框1.左边 ＝ 130
编辑框1.顶边 ＝ 16
编辑框1.宽度 ＝ _启动窗口.宽度 － 16 － 130
编辑框1.高度 ＝ _启动窗口.高度 － 150

编辑框2.左边 ＝ 0
编辑框2.顶边 ＝ _启动窗口.高度 － 135
编辑框2.宽度 ＝ _启动窗口.宽度 － 16
编辑框2.高度 ＝ 96

列表框1.背景颜色 ＝ 0
列表框1.文本颜色 ＝ 654567
编辑框1.背景颜色 ＝ 0
编辑框1.文本颜色 ＝ 654567
编辑框2.背景颜色 ＝ 78434501

.子程序 _按钮3_被单击
.局部变量 状态, 文本型
.局部变量 扫描指针1, 整数型
.局部变量 扫描指针2, 整数型
.局部变量 扫描控制, 整数型


编辑框2.内容 ＝ “开始编译” ＋ #换行符

.判断开始 (列表框1.现行选中项 ≥ 0)

    写到文件 (列表框1.取项目文本 (列表框1.现行选中项), 到字节集 (编辑框1.内容))
    C代码 ＝ 读入文件 (“main.c”) ＋ 到字节集 (“                ”)

.默认
    C代码 ＝ 到字节集 (“                ”)
.判断结束


头文件处理 ()
替换命令处理 ()
C代码指针 ＝ 0


ROM使用页数 ＝ 0
.循环判断首 ()
    ROM使用页数 ＝ ROM使用页数 ＋ 1
    ROM_64KB页 [ROM使用页数] ＝ 到字节集 (“”)
    ROM_64KB页使用字节 [ROM使用页数] ＝ 0
.循环判断尾 (ROM使用页数 ≠ 256)
ROM使用页数 ＝ 0
ROM_缓存 ＝ 到字节集 (“”)
ROM_缓存使用字节 ＝ 0
RAM分配地址断点状态 ＝ 0
常量总数 ＝ 0
全局变量总数 ＝ 0
添加内存值初始化指令跳页控制 ＝ 1
RAM分配地址 ＝ #RAM起始地址

BIT0等于0 ()
BIT1等于0 ()
BIT2等于1 ()
BIT3等于1 ()
BIT4等于1 ()
BIT5等于1 ()

状态 ＝ 扫描变量定义 ()


.判断开始 (状态 ＝ “进入函数扫描” 或 状态 ＝ “变量扫描结束”)

    main函数入口指令位置 ＝ ROM使用页数 × 65536 ＋ ROM_缓存使用字节
    页间跳转 (0)
    ROM_64KB页 [ROM使用页数 ＋ 1] ＝ ROM_缓存
    ROM_64KB页使用字节 [ROM使用页数 ＋ 1] ＝ ROM_缓存使用字节

    全局变量总数 ＝ 局部变量总数
    全局变量名称 ＝ 局部变量名称
    全局变量类型 ＝ 局部变量类型
    全局变量地址 ＝ 局部变量地址
    全局变量RAM结束地址 ＝ RAM分配地址

    函数总数 ＝ 0
    函数参数基址 [1] ＝ 0
    添加内存值初始化指令跳页控制 ＝ 0


    .循环判断首 ()

        RAM分配地址 ＝ 全局变量RAM结束地址

        状态 ＝ 扫描函数提取RAM分配地址 ()

        .如果真 (状态 ＝ “提取RAM分配地址结束”)

            状态 ＝ 扫描函数定义 ()

            .如果真 (状态 ＝ “)”)

                编辑框2.加入文本 (“正在编译” ＋ 到文本 (函数名称 [函数总数 ＋ 1]) ＋ “函数...” ＋ #换行符)

                跳过空格换行注释 ()

                .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “{”)

                    C代码指针 ＝ C代码指针 ＋ 1

                    状态 ＝ 扫描变量定义 ()


                    扫描控制 ＝ 1

                    扫描指针1 ＝ 1
                    .判断循环首 (扫描控制 ＝ 1 且 扫描指针1 ＜ 函数总数 ＋ 1)
                        扫描指针2 ＝ 扫描指针1 ＋ 1
                        .判断循环首 (扫描控制 ＝ 1 且 扫描指针2 ≤ 函数总数 ＋ 1)
                            .判断开始 (函数名称 [扫描指针1] ＝ 函数名称 [扫描指针2])
                                状态 ＝ “函数和函数名称重复0_o~!”
                                扫描控制 ＝ 0
                            .默认
                                扫描指针2 ＝ 扫描指针2 ＋ 1
                            .判断结束

                        .判断循环尾 ()
                        扫描指针1 ＝ 扫描指针1 ＋ 1
                    .判断循环尾 ()

                    扫描指针1 ＝ 1
                    .判断循环首 (扫描控制 ＝ 1 且 扫描指针1 ≤ 全局变量总数)
                        .判断开始 (函数名称 [函数总数 ＋ 1] ＝ 全局变量名称 [扫描指针1])
                            状态 ＝ “函数和全局变量名称重复0_o~!”
                            扫描控制 ＝ 0
                        .默认
                            扫描指针1 ＝ 扫描指针1 ＋ 1
                        .判断结束

                    .判断循环尾 ()

                    扫描指针1 ＝ 1
                    .判断循环首 (扫描控制 ＝ 1 且 扫描指针1 ≤ 常量总数)
                        .判断开始 (函数名称 [函数总数 ＋ 1] ＝ 常量名称 [扫描指针1])
                            状态 ＝ “函数和常量名称重复0_o~!”
                            扫描控制 ＝ 0
                        .默认
                            扫描指针1 ＝ 扫描指针1 ＋ 1
                        .判断结束

                    .判断循环尾 ()

                    .如果真 (到文本 (函数名称 [函数总数 ＋ 1]) ＝ “if” 或 到文本 (函数名称 [函数总数 ＋ 1]) ＝ “else” 或 到文本 (函数名称 [函数总数 ＋ 1]) ＝ “do” 或 到文本 (函数名称 [函数总数 ＋ 1]) ＝ “while” 或 到文本 (函数名称 [函数总数 ＋ 1]) ＝ “for” 或 到文本 (函数名称 [函数总数 ＋ 1]) ＝ “sizeof” 或 到文本 (函数名称 [函数总数 ＋ 1]) ＝ “break” 或 到文本 (函数名称 [函数总数 ＋ 1]) ＝ “continue” 或 到文本 (函数名称 [函数总数 ＋ 1]) ＝ “return” 或 到文本 (函数名称 [函数总数 ＋ 1]) ＝ “goto” 或 到文本 (函数名称 [函数总数 ＋ 1]) ＝ “rom_run” 或 到文本 (函数名称 [函数总数 ＋ 1]) ＝ “_ACC” 或 到文本 (函数名称 [函数总数 ＋ 1]) ＝ “_R1” 或 到文本 (函数名称 [函数总数 ＋ 1]) ＝ “_R2” 或 到文本 (函数名称 [函数总数 ＋ 1]) ＝ “_R3” 或 到文本 (函数名称 [函数总数 ＋ 1]) ＝ “_C” 或 到文本 (函数名称 [函数总数 ＋ 1]) ＝ “_Z” 或 到文本 (函数名称 [函数总数 ＋ 1]) ＝ “_A” 或 到文本 (函数名称 [函数总数 ＋ 1]) ＝ “_BIT0” 或 到文本 (函数名称 [函数总数 ＋ 1]) ＝ “_BIT1” 或 到文本 (函数名称 [函数总数 ＋ 1]) ＝ “_BIT2” 或 到文本 (函数名称 [函数总数 ＋ 1]) ＝ “_BIT3” 或 到文本 (函数名称 [函数总数 ＋ 1]) ＝ “_BIT4” 或 到文本 (函数名称 [函数总数 ＋ 1]) ＝ “_BIT5” 或 到文本 (函数名称 [函数总数 ＋ 1]) ＝ “_RAM” 或 到文本 (函数名称 [函数总数 ＋ 1]) ＝ “_NOP”)

                        状态 ＝ “函数名称不能是关键字0_o~!”
                        扫描控制 ＝ 0

                    .如果真结束



                    扫描指针1 ＝ 函数参数基址 [函数总数 ＋ 1]
                    .判断循环首 (扫描控制 ＝ 1 且 扫描指针1 ＜ 函数参数偏址 [函数总数 ＋ 1])
                        扫描指针2 ＝ 扫描指针1 ＋ 1
                        .判断循环首 (扫描控制 ＝ 1 且 扫描指针2 ＜ 函数参数偏址 [函数总数 ＋ 1])
                            .判断开始 (函数参数名称 [扫描指针1 ＋ 1] ＝ 函数参数名称 [扫描指针2 ＋ 1])
                                状态 ＝ “函数参数和函数参数名称重复0_o~!”
                                扫描控制 ＝ 0
                            .默认
                                扫描指针2 ＝ 扫描指针2 ＋ 1
                            .判断结束

                        .判断循环尾 ()
                        扫描指针1 ＝ 扫描指针1 ＋ 1
                    .判断循环尾 ()

                    扫描指针1 ＝ 函数参数基址 [函数总数 ＋ 1]
                    .判断循环首 (扫描控制 ＝ 1 且 扫描指针1 ＜ 函数参数偏址 [函数总数 ＋ 1])
                        扫描指针2 ＝ 1
                        .判断循环首 (扫描控制 ＝ 1 且 扫描指针2 ≤ 局部变量总数)
                            .判断开始 (函数参数名称 [扫描指针1 ＋ 1] ＝ 局部变量名称 [扫描指针2])
                                状态 ＝ “函数参数和局部变量名称重复0_o~!”
                                扫描控制 ＝ 0
                            .默认
                                扫描指针2 ＝ 扫描指针2 ＋ 1
                            .判断结束

                        .判断循环尾 ()
                        扫描指针1 ＝ 扫描指针1 ＋ 1
                    .判断循环尾 ()

                    扫描指针1 ＝ 函数参数基址 [函数总数 ＋ 1]
                    .判断循环首 (扫描控制 ＝ 1 且 扫描指针1 ＜ 函数参数偏址 [函数总数 ＋ 1])
                        扫描指针2 ＝ 1
                        .判断循环首 (扫描控制 ＝ 1 且 扫描指针2 ≤ 常量总数)
                            .判断开始 (函数参数名称 [扫描指针1 ＋ 1] ＝ 常量名称 [扫描指针2])
                                状态 ＝ “函数参数和常量名称重复0_o~!”
                                扫描控制 ＝ 0
                            .默认
                                扫描指针2 ＝ 扫描指针2 ＋ 1
                            .判断结束

                        .判断循环尾 ()
                        扫描指针1 ＝ 扫描指针1 ＋ 1
                    .判断循环尾 ()

                    扫描指针1 ＝ 函数参数基址 [函数总数 ＋ 1]
                    .判断循环首 (扫描控制 ＝ 1 且 扫描指针1 ＜ 函数参数偏址 [函数总数 ＋ 1])

                        .判断开始 (到文本 (函数参数名称 [扫描指针1 ＋ 1]) ＝ “if” 或 到文本 (函数参数名称 [扫描指针1 ＋ 1]) ＝ “else” 或 到文本 (函数参数名称 [扫描指针1 ＋ 1]) ＝ “do” 或 到文本 (函数参数名称 [扫描指针1 ＋ 1]) ＝ “while” 或 到文本 (函数参数名称 [扫描指针1 ＋ 1]) ＝ “for” 或 到文本 (函数参数名称 [扫描指针1 ＋ 1]) ＝ “sizeof” 或 到文本 (函数参数名称 [扫描指针1 ＋ 1]) ＝ “break” 或 到文本 (函数参数名称 [扫描指针1 ＋ 1]) ＝ “continue” 或 到文本 (函数参数名称 [扫描指针1 ＋ 1]) ＝ “return” 或 到文本 (函数参数名称 [扫描指针1 ＋ 1]) ＝ “goto” 或 到文本 (函数参数名称 [扫描指针1 ＋ 1]) ＝ “rom_run” 或 到文本 (函数参数名称 [扫描指针1 ＋ 1]) ＝ “_ACC” 或 到文本 (函数参数名称 [扫描指针1 ＋ 1]) ＝ “_R1” 或 到文本 (函数参数名称 [扫描指针1 ＋ 1]) ＝ “_R2” 或 到文本 (函数参数名称 [扫描指针1 ＋ 1]) ＝ “_R3” 或 到文本 (函数参数名称 [扫描指针1 ＋ 1]) ＝ “_C” 或 到文本 (函数参数名称 [扫描指针1 ＋ 1]) ＝ “_Z” 或 到文本 (函数参数名称 [扫描指针1 ＋ 1]) ＝ “_A” 或 到文本 (函数参数名称 [扫描指针1 ＋ 1]) ＝ “_BIT0” 或 到文本 (函数参数名称 [扫描指针1 ＋ 1]) ＝ “_BIT1” 或 到文本 (函数参数名称 [扫描指针1 ＋ 1]) ＝ “_BIT2” 或 到文本 (函数参数名称 [扫描指针1 ＋ 1]) ＝ “_BIT3” 或 到文本 (函数参数名称 [扫描指针1 ＋ 1]) ＝ “_BIT4” 或 到文本 (函数参数名称 [扫描指针1 ＋ 1]) ＝ “_BIT5” 或 到文本 (函数参数名称 [扫描指针1 ＋ 1]) ＝ “_NOP” 或 到文本 (函数参数名称 [扫描指针1 ＋ 1]) ＝ “_RAM”)
                            状态 ＝ “函数参数名称不能是关键字0_o~!”
                            扫描控制 ＝ 0
                        .默认
                            扫描指针1 ＝ 扫描指针1 ＋ 1
                        .判断结束

                    .判断循环尾 ()



                    .判断开始 (状态 ＝ “变量扫描结束”)

                        函数RAM结束地址 [函数总数 ＋ 1] ＝ RAM分配地址

                        .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “}”)

                            函数结束处理程序 ()
                            C代码指针 ＝ C代码指针 ＋ 1
                            跳过空格换行注释 ()
                            .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “ ”)
                                状态 ＝ 编译结束处理程序 ()
                            .默认
                                状态 ＝ “}”
                            .判断结束


                        .默认
                            状态 ＝ 语句表达式处理 ()

                            .如果真 (状态 ＝ “完成”)

                                函数结束处理程序 ()
                                跳过空格换行注释 ()
                                .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “ ”)
                                    状态 ＝ 编译结束处理程序 ()
                                .默认
                                    状态 ＝ “}”
                                .判断结束

                            .如果真结束


                        .判断结束


                    .默认
                        .如果真 (状态 ＝ “进入函数扫描”)
                            状态 ＝ “(????错误”
                        .如果真结束

                    .判断结束


                .默认
                    状态 ＝ “函数定义错误”
                .判断结束

            .如果真结束

        .如果真结束


    .循环判断尾 (状态 ＝ “}”)


    编辑框2.加入文本 (状态 ＋ #换行符)

.默认
    编辑框2.加入文本 (状态 ＋ #换行符)
.判断结束








.子程序 头文件处理
.局部变量 C代码合成, 字节集
.局部变量 C代码组, 字节集, , "65536"
.局部变量 C代码组计数, 整数型
.局部变量 字节集缓存, 字节集
.局部变量 计数1, 整数型
.局部变量 计数2, 整数型
.局部变量 状态, 文本型


C代码指针 ＝ 0
C代码组计数 ＝ 0
C代码合成 ＝ 到字节集 (“”)


状态 ＝ “继续”
.循环判断首 ()

    跳过空格换行注释 ()

    .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “#”)

        计数1 ＝ C代码指针 ＋ 1

        C代码指针 ＝ C代码指针 ＋ 1
        跳过空格换行注释 ()

        .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

            字节集缓存 ＝ 到字节集 (“”)
            .循环判断首 ()
                字节集缓存 ＝ 字节集缓存 ＋ 到字节集 (C代码 [C代码指针 ＋ 1])
                C代码指针 ＝ C代码指针 ＋ 1
            .循环判断尾 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

            .判断开始 (到文本 (字节集缓存) ＝ “include”)

                跳过空格换行注释 ()

                .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “<”)

                    C代码指针 ＝ C代码指针 ＋ 1
                    跳过空格换行注释 ()

                    .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95 或 到数值 (C代码 [C代码指针 ＋ 1]) ≥ 128 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “.”)

                        字节集缓存 ＝ 到字节集 (“”)
                        .循环判断首 ()
                            字节集缓存 ＝ 字节集缓存 ＋ 到字节集 (C代码 [C代码指针 ＋ 1])
                            C代码指针 ＝ C代码指针 ＋ 1
                        .循环判断尾 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95 或 到数值 (C代码 [C代码指针 ＋ 1]) ≥ 128 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “.”)

                        跳过空格换行注释 ()

                        .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “>”)

                            C代码 ＝ 字节集替换 (C代码, 计数1, C代码指针 － 计数1 ＋ 2, )

                            C代码组 [C代码组计数 ＋ 1] ＝ C代码
                            C代码组计数 ＝ C代码组计数 ＋ 1

                            C代码 ＝ 读入文件 (到文本 (字节集缓存)) ＋ 到字节集 (“                ”)
                            C代码指针 ＝ 0


                        .默认
                            状态 ＝ “提交合并”
                        .判断结束



                    .默认
                        状态 ＝ “提交合并”
                    .判断结束



                .默认
                    状态 ＝ “提交合并”
                .判断结束



            .判断 (到文本 (字节集缓存) ＝ “define”)

                跳过空格换行注释 ()

                .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95 或 到数值 (C代码 [C代码指针 ＋ 1]) ≥ 128)

                    字节集缓存 ＝ 到字节集 (“”)
                    .循环判断首 ()
                        字节集缓存 ＝ 字节集缓存 ＋ 到字节集 (C代码 [C代码指针 ＋ 1])
                        C代码指针 ＝ C代码指针 ＋ 1
                    .循环判断尾 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95 或 到数值 (C代码 [C代码指针 ＋ 1]) ≥ 128)

                    跳过空格换行注释 ()

                    .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95 或 到数值 (C代码 [C代码指针 ＋ 1]) ≥ 128)

                        字节集缓存 ＝ 到字节集 (“”)
                        .循环判断首 ()
                            字节集缓存 ＝ 字节集缓存 ＋ 到字节集 (C代码 [C代码指针 ＋ 1])
                            C代码指针 ＝ C代码指针 ＋ 1
                        .循环判断尾 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95 或 到数值 (C代码 [C代码指针 ＋ 1]) ≥ 128)

                        .判断循环首 (计数1 ≤ C代码指针)

                            C代码合成 ＝ C代码合成 ＋ 到字节集 (C代码 [计数1])
                            C代码 [计数1] ＝ 32
                            计数1 ＝ 计数1 ＋ 1
                            .如果真 (计数1 ＞ C代码指针)
                                C代码合成 ＝ C代码合成 ＋ 到字节集 (“ ”)
                            .如果真结束

                        .判断循环尾 ()



                    .默认
                        状态 ＝ “提交合并”
                    .判断结束



                .默认
                    状态 ＝ “提交合并”
                .判断结束



            .默认
                状态 ＝ “提交合并”
            .判断结束



        .默认
            状态 ＝ “提交合并”
        .判断结束



    .默认
        状态 ＝ “提交合并”
    .判断结束



    .如果真 (状态 ＝ “提交合并”)

        C代码合成 ＝ C代码合成 ＋ C代码 ＋ 到字节集 (#换行符)

        .判断开始 (C代码组计数 ＞ 0)
            C代码 ＝ C代码组 [C代码组计数]
            C代码组计数 ＝ C代码组计数 － 1
            C代码指针 ＝ 0
            状态 ＝ “继续”
        .默认
            状态 ＝ “完成”
        .判断结束

    .如果真结束


.循环判断尾 (状态 ＝ “继续”)

C代码 ＝ C代码合成




.子程序 替换命令处理
.局部变量 字节集缓存, 字节集
.局部变量 计数1, 整数型
.局部变量 计数2, 整数型
.局部变量 计数3, 整数型
.局部变量 状态, 文本型
.局部变量 替换对象计数, 整数型
.局部变量 被替换对象_名称, 字节集, , "65536"
.局部变量 替换_名称, 字节集, , "65536"


C代码指针 ＝ 0
替换对象计数 ＝ 0

状态 ＝ “继续”

.循环判断首 ()

    跳过空格换行注释 ()

    .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “ ”)

        状态 ＝ “完成”

    .判断 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95 或 C代码 [C代码指针 ＋ 1] ≥ 128)

        计数1 ＝ C代码指针 ＋ 1

        字节集缓存 ＝ 到字节集 (“”)
        .循环判断首 ()
            字节集缓存 ＝ 字节集缓存 ＋ 到字节集 (C代码 [C代码指针 ＋ 1])
            C代码指针 ＝ C代码指针 ＋ 1
        .循环判断尾 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95 或 C代码 [C代码指针 ＋ 1] ≥ 128)

        计数2 ＝ 替换对象计数
        .判断循环首 (计数2 ≠ 0 且 字节集缓存 ≠ 被替换对象_名称 [计数2])
            计数2 ＝ 计数2 － 1
        .判断循环尾 ()

        .如果真 (计数2 ≠ 0)
            C代码 ＝ 字节集替换 (C代码, 计数1, C代码指针 － 计数1 ＋ 1, 替换_名称 [计数2])
            C代码指针 ＝ 计数1 ＋ 取字节集长度 (替换_名称 [计数2]) － 1
        .如果真结束


    .判断 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “#”)

        计数1 ＝ C代码指针 ＋ 1
        C代码指针 ＝ C代码指针 ＋ 1

        跳过空格换行注释 ()

        .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

            字节集缓存 ＝ 到字节集 (“”)
            .循环判断首 ()
                字节集缓存 ＝ 字节集缓存 ＋ 到字节集 (C代码 [C代码指针 ＋ 1])
                C代码指针 ＝ C代码指针 ＋ 1
            .循环判断尾 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

            .判断开始 (到文本 (字节集缓存) ＝ “define”)

                跳过空格换行注释 ()

                .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95 或 C代码 [C代码指针 ＋ 1] ≥ 128)

                    字节集缓存 ＝ 到字节集 (“”)
                    .循环判断首 ()
                        字节集缓存 ＝ 字节集缓存 ＋ 到字节集 (C代码 [C代码指针 ＋ 1])
                        C代码指针 ＝ C代码指针 ＋ 1
                    .循环判断尾 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95 或 C代码 [C代码指针 ＋ 1] ≥ 128)

                    被替换对象_名称 [替换对象计数 ＋ 1] ＝ 字节集缓存

                    跳过空格换行注释 ()

                    .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95 或 C代码 [C代码指针 ＋ 1] ≥ 128)

                        字节集缓存 ＝ 到字节集 (“”)
                        .循环判断首 ()
                            字节集缓存 ＝ 字节集缓存 ＋ 到字节集 (C代码 [C代码指针 ＋ 1])
                            C代码指针 ＝ C代码指针 ＋ 1
                        .循环判断尾 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95 或 C代码 [C代码指针 ＋ 1] ≥ 128)

                        替换_名称 [替换对象计数 ＋ 1] ＝ 字节集缓存
                        替换对象计数 ＝ 替换对象计数 ＋ 1

                        C代码 ＝ 字节集替换 (C代码, 计数1, C代码指针 － 计数1 ＋ 1, )
                        C代码指针 ＝ 计数1 － 1


                    .默认

                    .判断结束



                .默认

                .判断结束



            .默认

            .判断结束



        .默认

        .判断结束




    .默认
        C代码指针 ＝ C代码指针 ＋ 1
    .判断结束


.循环判断尾 (状态 ＝ “继续”)






.子程序 函数结束处理程序


.如果真 (到文本 (函数名称 [函数总数 ＋ 1]) ≠ “main” 且 函数类型 [函数总数 ＋ 1] ＝ “void”)

    .判断开始 (函数共享状态 [函数总数 ＋ 1] ＝ “页内共享”)
        函数页内返回 (函数返回地址 [函数总数 ＋ 1])
    .默认
        函数页间返回 (函数返回地址 [函数总数 ＋ 1])
    .判断结束

.如果真结束


ROM_64KB页 [右移 (函数入口地址 [函数总数 ＋ 1], 16) ＋ 1] ＝ ROM_缓存
ROM_64KB页使用字节 [右移 (函数入口地址 [函数总数 ＋ 1], 16) ＋ 1] ＝ ROM_缓存使用字节

编辑框2.内容 ＝ 文本替换 (编辑框2.内容, 取文本长度 (编辑框2.内容) － 1, 2, )
编辑框2.加入文本 (“OK” ＋ #换行符)

函数总数 ＝ 函数总数 ＋ 1





.子程序 编译结束处理程序, 文本型
.局部变量 状态, 文本型
.局部变量 计数, 整数型
.局部变量 输出ROM数据, 字节集


.判断开始 (到文本 (函数名称 [函数总数]) ＝ “main”)

    状态 ＝ “编译结束”

    编辑框2.加入文本 (“正在修改主函数入口跳转指令指向地址” ＋ 到文本 (函数入口地址 [函数总数]) ＋ #换行符)

    ROM_缓存 ＝ ROM_64KB页 [右移 (main函数入口指令位置, 16) ＋ 1]

    ROM_缓存 [位与 (main函数入口指令位置, 65535) ＋ 2] ＝ 右移 (函数入口地址 [函数总数], 16)
    ROM_缓存 [位与 (main函数入口指令位置, 65535) ＋ 9] ＝ 右移 (函数入口地址 [函数总数], 8)
    ROM_缓存 [位与 (main函数入口指令位置, 65535) ＋ 16] ＝ 函数入口地址 [函数总数]

    ROM_64KB页 [右移 (main函数入口指令位置, 16) ＋ 1] ＝ ROM_缓存



    输出ROM数据 ＝ 到字节集 (“”)
    计数 ＝ 0
    .循环判断首 ()

        ROM_缓存 ＝ ROM_64KB页 [计数 ＋ 1]
        ROM_缓存使用字节 ＝ ROM_64KB页使用字节 [计数 ＋ 1]

        编辑框2.加入文本 (“ROM第” ＋ 到文本 (计数) ＋ “页使用” ＋ 到文本 (ROM_缓存使用字节) ＋ “字节” ＋ “ ” ＋ “剩余” ＋ 到文本 (65488 － ROM_缓存使用字节) ＋ “字节” ＋ “ ” ＋ “ROM页间跳转中转指令使用48字节” ＋ #换行符)

        .判断开始 (ROM_缓存使用字节 ≤ 65488)

            .判断循环首 (ROM_缓存使用字节 ＋ 256 ≤ 65488)
                ROM_缓存 ＝ ROM_缓存 ＋ 到字节集 (“                                                                                                                                                                                                                                                                ”)
                ROM_缓存使用字节 ＝ ROM_缓存使用字节 ＋ 256
            .判断循环尾 ()

            .判断循环首 (ROM_缓存使用字节 ≠ 65488)
                NOP ()
            .判断循环尾 ()

            A等于_RAM (#页间跳转地址_CS)
            _RAM等于A (#ROM页寄存器)
            A等于_RAM (#页间跳转地址_L)
            R2等于_RAM (#页间跳转地址_H)
            R3等于A ()
            JMP_R2R3 ()

            A等于立即数 (0)
            A等于A加R1 ()
            _RAM等于A (#RAM缓存1)
            A等于_RAM (#ROM组切换寄存器)
            R1等于立即数 (#ROM组切换寄存器_切换位)
            A等于A异或R1 ()
            R1等于_RAM (#RAM缓存1)
            _RAM等于A (#ROM组切换寄存器)

            输出ROM数据 ＝ 输出ROM数据 ＋ ROM_缓存

            计数 ＝ 计数 ＋ 1

        .默认
            状态 ＝ “ROM爆缸...”
            计数 ＝ 256
        .判断结束


    .循环判断尾 (计数 ≤ ROM使用页数)


    .如果真 (状态 ＝ “编译结束”)

        .判断开始 (位与 (函数RAM结束地址 [函数总数], 4294901760) ＝ 0 且 函数RAM结束地址 [函数总数] ≤ 65288)
            编辑框2.加入文本 (“RAM使用” ＋ 到文本 (函数RAM结束地址 [函数总数]) ＋ “字节” ＋ “ ” ＋ “剩余” ＋ 到文本 (65280 － 函数RAM结束地址 [函数总数]) ＋ “字节” ＋ “ ” ＋ “系统I/O使用256字节” ＋ #换行符)
        .默认
            状态 ＝ “RAM爆缸...”
        .判断结束

    .如果真结束


    .如果真 (状态 ＝ “编译结束”)
        写到文件 (“CPU.bin”, 输出ROM数据)
    .如果真结束



.默认
    状态 ＝ “main函数什么情况0_o?!)”
.判断结束


返回 (状态)








.子程序 _按钮1_被单击
.局部变量 C代码组, 字节集, , "65536"
.局部变量 C代码组计数, 整数型
.局部变量 字节集缓存, 字节集
.局部变量 计数1, 整数型
.局部变量 计数2, 整数型
.局部变量 状态, 文本型


列表框1.清空 ()

列表框1.加入项目 (“main.c”, )
列表框1.现行选中项 ＝ 0
C代码 ＝ 读入文件 (“main.c”) ＋ 到字节集 (“                ”)
编辑框1.内容 ＝ 到文本 (读入文件 (“main.c”))

C代码指针 ＝ 0
C代码组计数 ＝ 0

状态 ＝ “继续”
.循环判断首 ()

    跳过空格换行注释 ()

    .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “#”)

        计数1 ＝ C代码指针 ＋ 1

        C代码指针 ＝ C代码指针 ＋ 1
        跳过空格换行注释 ()

        .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

            字节集缓存 ＝ 到字节集 (“”)
            .循环判断首 ()
                字节集缓存 ＝ 字节集缓存 ＋ 到字节集 (C代码 [C代码指针 ＋ 1])
                C代码指针 ＝ C代码指针 ＋ 1
            .循环判断尾 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95)

            .判断开始 (到文本 (字节集缓存) ＝ “include”)

                跳过空格换行注释 ()

                .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “<”)

                    C代码指针 ＝ C代码指针 ＋ 1
                    跳过空格换行注释 ()

                    .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95 或 到数值 (C代码 [C代码指针 ＋ 1]) ≥ 128 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “.”)

                        字节集缓存 ＝ 到字节集 (“”)
                        .循环判断首 ()
                            字节集缓存 ＝ 字节集缓存 ＋ 到字节集 (C代码 [C代码指针 ＋ 1])
                            C代码指针 ＝ C代码指针 ＋ 1
                        .循环判断尾 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95 或 到数值 (C代码 [C代码指针 ＋ 1]) ≥ 128 或 到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “.”)

                        跳过空格换行注释 ()

                        .判断开始 (到文本 (到字节集 (C代码 [C代码指针 ＋ 1])) ＝ “>”)

                            C代码 ＝ 字节集替换 (C代码, 计数1, C代码指针 － 计数1 ＋ 2, )

                            C代码组 [C代码组计数 ＋ 1] ＝ C代码
                            C代码组计数 ＝ C代码组计数 ＋ 1

                            C代码 ＝ 读入文件 (到文本 (字节集缓存)) ＋ 到字节集 (“                ”)
                            列表框1.加入项目 (到文本 (字节集缓存), )
                            C代码指针 ＝ 0


                        .默认
                            状态 ＝ “提交合并”
                        .判断结束



                    .默认
                        状态 ＝ “提交合并”
                    .判断结束



                .默认
                    状态 ＝ “提交合并”
                .判断结束



            .判断 (到文本 (字节集缓存) ＝ “define”)

                跳过空格换行注释 ()

                .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95 或 到数值 (C代码 [C代码指针 ＋ 1]) ≥ 128)

                    字节集缓存 ＝ 到字节集 (“”)
                    .循环判断首 ()
                        字节集缓存 ＝ 字节集缓存 ＋ 到字节集 (C代码 [C代码指针 ＋ 1])
                        C代码指针 ＝ C代码指针 ＋ 1
                    .循环判断尾 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95 或 到数值 (C代码 [C代码指针 ＋ 1]) ≥ 128)

                    跳过空格换行注释 ()

                    .判断开始 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95 或 到数值 (C代码 [C代码指针 ＋ 1]) ≥ 128)

                        字节集缓存 ＝ 到字节集 (“”)
                        .循环判断首 ()
                            字节集缓存 ＝ 字节集缓存 ＋ 到字节集 (C代码 [C代码指针 ＋ 1])
                            C代码指针 ＝ C代码指针 ＋ 1
                        .循环判断尾 (到数值 (C代码 [C代码指针 ＋ 1]) ＞ 47 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 58 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 64 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 91 或 到数值 (C代码 [C代码指针 ＋ 1]) ＞ 96 且 到数值 (C代码 [C代码指针 ＋ 1]) ＜ 123 或 到数值 (C代码 [C代码指针 ＋ 1]) ＝ 95 或 到数值 (C代码 [C代码指针 ＋ 1]) ≥ 128)

                        .判断循环首 (计数1 ≤ C代码指针)

                            C代码 [计数1] ＝ 32
                            计数1 ＝ 计数1 ＋ 1

                        .判断循环尾 ()



                    .默认
                        状态 ＝ “提交合并”
                    .判断结束



                .默认
                    状态 ＝ “提交合并”
                .判断结束



            .默认
                状态 ＝ “提交合并”
            .判断结束



        .默认
            状态 ＝ “提交合并”
        .判断结束



    .默认
        状态 ＝ “提交合并”
    .判断结束



    .如果真 (状态 ＝ “提交合并”)

        .判断开始 (C代码组计数 ＞ 0)
            C代码 ＝ C代码组 [C代码组计数]
            C代码组计数 ＝ C代码组计数 － 1
            C代码指针 ＝ 0
            状态 ＝ “继续”
        .默认
            状态 ＝ “完成”
        .判断结束

    .如果真结束


.循环判断尾 (状态 ＝ “继续”)




.子程序 _按钮2_被单击


.如果真 (列表框1.现行选中项 ≥ 0)
    写到文件 (列表框1.取项目文本 (列表框1.现行选中项), 到字节集 (编辑框1.内容))
.如果真结束



.子程序 _列表框1_列表项被选择


.如果真 (列表框1.现行选中项 ≥ 0)
    编辑框1.内容 ＝ 到文本 (读入文件 (列表框1.取项目文本 (列表框1.现行选中项)))
.如果真结束


