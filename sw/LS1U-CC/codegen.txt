.版本 2

.程序集 二元式机器码生成处理程序

.子程序 二元式机器码生成, 文本型
.参数 目的操作数, 整数型
.参数 左操作数, 整数型
.参数 运算符, 文本型
.参数 右操作数, 整数型
.局部变量 状态, 文本型
.局部变量 立即数1, 整数型
.局部变量 立即数2, 整数型
.局部变量 计数1, 整数型
.局部变量 字节集缓存, 字节集



.判断开始 (运算符 ＝ “+”)

    .判断开始 (右移 (左操作数, 16) ＝ #立即数)
        立即数1 ＝ 立即数值 [位与 (左操作数, 65535) ＋ 1]
    .判断 (右移 (左操作数, 16) ＝ #常量)
        立即数1 ＝ 常量值 [位与 (左操作数, 65535) ＋ 1]
    .判断 (右移 (左操作数, 16) ＝ #无符号char数组 或 右移 (左操作数, 16) ＝ #有符号char数组 或 右移 (左操作数, 16) ＝ #无符号int数组 或 右移 (左操作数, 16) ＝ #有符号int数组 或 右移 (左操作数, 16) ＝ #无符号长int数组 或 右移 (左操作数, 16) ＝ #有符号长int数组)
        立即数1 ＝ 位与 (左操作数, 65535)
    .判断 (右移 (左操作数, 16) ＝ 0)
        立即数1 ＝ 位与 (左操作数, 65535)
        左操作数 ＝ #立即数 × 65536
    .默认

    .判断结束


    .判断开始 (右移 (右操作数, 16) ＝ #立即数)
        立即数2 ＝ 立即数值 [位与 (右操作数, 65535) ＋ 1]
    .判断 (右移 (右操作数, 16) ＝ #常量)
        立即数2 ＝ 常量值 [位与 (右操作数, 65535) ＋ 1]
    .判断 (右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组)
        立即数2 ＝ 位与 (右操作数, 65535)
    .判断 (右移 (右操作数, 16) ＝ 0)
        立即数2 ＝ 位与 (右操作数, 65535)
        右操作数 ＝ #立即数 × 65536
    .默认

    .判断结束




    .判断开始 ((右移 (目的操作数, 16) ＝ #ACC 或 右移 (目的操作数, 16) ＝ #无符号ACC 或 右移 (目的操作数, 16) ＝ #有符号ACC) 且 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char))

        A等于_RAM (左操作数)

        .判断开始 (位与 (左操作数, 65535) ＝ 位与 (右操作数, 65535))
            R1等于RAM ()
        .默认
            R1等于_RAM (右操作数)
        .判断结束

        A等于A加R1 ()

        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #无符号int 或 右移 (目的操作数, 16) ＝ #有符号int) 且 ((右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int) 且 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int) 或 (右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int)))

        .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535) 且 位与 (目的操作数, 65535) ＝ 位与 (右操作数, 65535))

            A等于_RAM (左操作数)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (左操作数 ＋ 1)
            R1等于RAM ()
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            A等于A加R1 ()
            _RAM等于A (左操作数 ＋ 1)

        .判断 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535))

            A等于_RAM (右操作数)
            R1等于_RAM (左操作数)
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (右操作数 ＋ 1)
            R1等于_RAM (左操作数 ＋ 1)

            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()

            A等于A加R1 ()
            _RAM等于A (目的操作数 ＋ 1)

        .判断 (位与 (目的操作数, 65535) ＝ 位与 (右操作数, 65535))

            A等于_RAM (左操作数)
            R1等于_RAM (右操作数)
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (左操作数 ＋ 1)
            R1等于_RAM (右操作数 ＋ 1)

            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()

            A等于A加R1 ()
            _RAM等于A (目的操作数 ＋ 1)


        .判断 (位与 (左操作数, 65535) ＝ 位与 (右操作数, 65535))

            A等于_RAM (左操作数)
            R1等于RAM ()
            A等于A加R1 ()
            _RAM等于A (目的操作数)

            A等于_RAM (左操作数 ＋ 1)
            R1等于RAM ()

            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()

            A等于A加R1 ()
            _RAM等于A (目的操作数 ＋ 1)


        .默认
            A等于_RAM (左操作数)
            R1等于_RAM (右操作数)
            A等于A加R1 ()
            _RAM等于A (目的操作数)

            A等于_RAM (左操作数 ＋ 1)
            R1等于_RAM (右操作数 ＋ 1)

            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()

            A等于A加R1 ()
            _RAM等于A (目的操作数 ＋ 1)

        .判断结束



        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #无符号长int 或 右移 (目的操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int))

        .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535) 且 位与 (目的操作数, 65535) ＝ 位与 (右操作数, 65535))

            A等于_RAM (左操作数 ＋ 3)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()


            A等于_RAM (左操作数 ＋ 2)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 3)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (左操作数 ＋ 1)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 2)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (左操作数)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 1)
            A等于A加1 ()
            RAM等于A ()


        .判断 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535))

            A等于_RAM (右操作数 ＋ 3)
            R1等于_RAM (左操作数 ＋ 3)
            A等于A加R1 ()
            RAM等于A ()


            A等于_RAM (右操作数 ＋ 2)
            R1等于_RAM (左操作数 ＋ 2)
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 3)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (右操作数 ＋ 1)
            R1等于_RAM (左操作数 ＋ 1)
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 24)
            A等于_RAM (目的操作数 ＋ 2)
            A等于A加1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 3)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (右操作数)
            R1等于_RAM (左操作数)
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 36)
            A等于_RAM (目的操作数 ＋ 1)
            A等于A加1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 24)
            A等于_RAM (目的操作数 ＋ 2)
            A等于A加1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 3)
            A等于A加1 ()
            RAM等于A ()


        .判断 (位与 (目的操作数, 65535) ＝ 位与 (右操作数, 65535))

            A等于_RAM (左操作数 ＋ 3)
            R1等于_RAM (右操作数 ＋ 3)
            A等于A加R1 ()
            RAM等于A ()


            A等于_RAM (左操作数 ＋ 2)
            R1等于_RAM (右操作数 ＋ 2)
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 3)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (左操作数 ＋ 1)
            R1等于_RAM (右操作数 ＋ 1)
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 24)
            A等于_RAM (目的操作数 ＋ 2)
            A等于A加1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 3)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (左操作数)
            R1等于_RAM (右操作数)
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 36)
            A等于_RAM (目的操作数 ＋ 1)
            A等于A加1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 24)
            A等于_RAM (目的操作数 ＋ 2)
            A等于A加1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 3)
            A等于A加1 ()
            RAM等于A ()




        .判断 (位与 (左操作数, 65535) ＝ 位与 (右操作数, 65535))

            A等于_RAM (左操作数 ＋ 3)
            R1等于RAM ()
            A等于A加R1 ()
            _RAM等于A (目的操作数 ＋ 3)


            A等于_RAM (左操作数 ＋ 2)
            R1等于RAM ()
            A等于A加R1 ()
            _RAM等于A (目的操作数 ＋ 2)

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 3)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (左操作数 ＋ 1)
            R1等于RAM ()
            A等于A加R1 ()
            _RAM等于A (目的操作数 ＋ 1)

            JNC (ROM_缓存使用字节 ＋ 24)
            A等于_RAM (目的操作数 ＋ 2)
            A等于A加1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 3)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (左操作数)
            R1等于RAM ()
            A等于A加R1 ()
            _RAM等于A (目的操作数)

            JNC (ROM_缓存使用字节 ＋ 36)
            A等于_RAM (目的操作数 ＋ 1)
            A等于A加1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 24)
            A等于_RAM (目的操作数 ＋ 2)
            A等于A加1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 3)
            A等于A加1 ()
            RAM等于A ()


        .默认
            A等于_RAM (左操作数 ＋ 3)
            R1等于_RAM (右操作数 ＋ 3)
            A等于A加R1 ()
            _RAM等于A (目的操作数 ＋ 3)


            A等于_RAM (左操作数 ＋ 2)
            R1等于_RAM (右操作数 ＋ 2)
            A等于A加R1 ()
            _RAM等于A (目的操作数 ＋ 2)

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 3)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (左操作数 ＋ 1)
            R1等于_RAM (右操作数 ＋ 1)
            A等于A加R1 ()
            _RAM等于A (目的操作数 ＋ 1)

            JNC (ROM_缓存使用字节 ＋ 24)
            A等于_RAM (目的操作数 ＋ 2)
            A等于A加1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 3)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (左操作数)
            R1等于_RAM (右操作数)
            A等于A加R1 ()
            _RAM等于A (目的操作数)

            JNC (ROM_缓存使用字节 ＋ 36)
            A等于_RAM (目的操作数 ＋ 1)
            A等于A加1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 24)
            A等于_RAM (目的操作数 ＋ 2)
            A等于A加1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 3)
            A等于A加1 ()
            RAM等于A ()


        .判断结束




        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #ACC 或 右移 (目的操作数, 16) ＝ #无符号ACC 或 右移 (目的操作数, 16) ＝ #有符号ACC) 且 ((右移 (左操作数, 16) ＝ #ACC 或 右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC) 且 右移 (右操作数, 16) ＝ #R1 或 (右移 (右操作数, 16) ＝ #ACC 或 右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC) 且 右移 (左操作数, 16) ＝ #R1))

        A等于A加R1 ()
        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char) 且 ((右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char) 或 (右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int) 且 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int) 或 (右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int)))

        .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535) 且 位与 (目的操作数, 65535) ＝ 位与 (右操作数, 65535))

            A等于_RAM (左操作数)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

        .判断 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535))

            A等于_RAM (右操作数)
            R1等于_RAM (左操作数)
            A等于A加R1 ()
            RAM等于A ()

        .判断 (位与 (目的操作数, 65535) ＝ 位与 (右操作数, 65535))

            A等于_RAM (左操作数)
            R1等于_RAM (右操作数)
            A等于A加R1 ()
            RAM等于A ()

        .判断 (位与 (左操作数, 65535) ＝ 位与 (右操作数, 65535))

            A等于_RAM (左操作数)
            R1等于RAM ()
            A等于A加R1 ()
            _RAM等于A (目的操作数)

        .默认
            A等于_RAM (左操作数)
            R1等于_RAM (右操作数)
            A等于A加R1 ()
            _RAM等于A (目的操作数)
        .判断结束


        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #ACC 或 右移 (目的操作数, 16) ＝ #无符号ACC 或 右移 (目的操作数, 16) ＝ #有符号ACC) 且 ((右移 (左操作数, 16) ＝ #ACC 或 右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char) 或 (右移 (右操作数, 16) ＝ #ACC 或 右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC) 且 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char)))

        .判断开始 (右移 (左操作数, 16) ＝ #ACC 或 右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC)
            R1等于_RAM (右操作数)
            A等于A加R1 ()

        .默认
            R1等于_RAM (左操作数)
            A等于A加R1 ()
        .判断结束

        状态 ＝ “完成”

    .判断 ((右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char) 且 ((右移 (左操作数, 16) ＝ #ACC 或 右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char) 或 (右移 (右操作数, 16) ＝ #ACC 或 右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC) 且 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char)))

        .判断开始 (右移 (左操作数, 16) ＝ #ACC 或 右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC)

            .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (右操作数, 65535))

                R1等于_RAM (右操作数)
                A等于A加R1 ()
                RAM等于A ()

            .默认
                R1等于_RAM (右操作数)
                A等于A加R1 ()
                _RAM等于A (目的操作数)
            .判断结束


        .默认

            .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535))

                R1等于_RAM (左操作数)
                A等于A加R1 ()
                RAM等于A ()

            .默认
                R1等于_RAM (左操作数)
                A等于A加R1 ()
                _RAM等于A (目的操作数)
            .判断结束

        .判断结束


        状态 ＝ “完成”



    .判断 ((右移 (目的操作数, 16) ＝ #ACC 或 右移 (目的操作数, 16) ＝ #无符号ACC 或 右移 (目的操作数, 16) ＝ #有符号ACC) 且 ((右移 (左操作数, 16) ＝ #ACC 或 右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 (右移 (右操作数, 16) ＝ #ACC 或 右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)))

        .判断开始 (右移 (左操作数, 16) ＝ #ACC 或 右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC)
            .判断开始 (立即数2 ＝ 1)
                A等于A加1 ()
            .默认
                R1等于立即数 (立即数2)
                A等于A加R1 ()
            .判断结束

        .默认

            .判断开始 (立即数1 ＝ 1)
                A等于A加1 ()
            .默认
                R1等于立即数 (立即数1)
                A等于A加R1 ()
            .判断结束

        .判断结束


        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char) 且 ((右移 (左操作数, 16) ＝ #ACC 或 右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 (右移 (右操作数, 16) ＝ #ACC 或 右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)))

        .判断开始 (右移 (左操作数, 16) ＝ #ACC 或 右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC)
            .判断开始 (立即数2 ＝ 1)
                A等于A加1 ()
            .默认
                R1等于立即数 (立即数2)
                A等于A加R1 ()
            .判断结束

        .默认

            .判断开始 (立即数1 ＝ 1)
                A等于A加1 ()
            .默认
                R1等于立即数 (立即数1)
                A等于A加R1 ()
            .判断结束

        .判断结束

        _RAM等于A (目的操作数)

        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #ACC 或 右移 (目的操作数, 16) ＝ #无符号ACC 或 右移 (目的操作数, 16) ＝ #有符号ACC) 且 ((右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)))

        .判断开始 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char)

            .判断开始 (立即数2 ＝ 1)
                A等于_RAM (左操作数)
                A等于A加1 ()

            .默认
                A等于_RAM (左操作数)
                R1等于立即数 (立即数2)
                A等于A加R1 ()
            .判断结束


        .默认

            .判断开始 (立即数1 ＝ 1)
                A等于_RAM (右操作数)
                A等于A加1 ()

            .默认
                A等于_RAM (右操作数)
                R1等于立即数 (立即数1)
                A等于A加R1 ()
            .判断结束

        .判断结束


        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char) 且 ((右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char 或 右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int 或 右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)))

        .判断开始 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char 或 右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int 或 右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int)

            .判断开始 (立即数2 ＝ 1)
                A等于_RAM (左操作数)
                A等于A加1 ()

            .默认
                A等于_RAM (左操作数)
                R1等于立即数 (立即数2)
                A等于A加R1 ()
            .判断结束

            .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535))
                RAM等于A ()
            .默认
                _RAM等于A (目的操作数)
            .判断结束


        .默认

            .判断开始 (立即数1 ＝ 1)
                A等于_RAM (右操作数)
                A等于A加1 ()

            .默认
                A等于_RAM (右操作数)
                R1等于立即数 (立即数1)
                A等于A加R1 ()
            .判断结束

            .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (右操作数, 65535))
                RAM等于A ()
            .默认
                _RAM等于A (目的操作数)
            .判断结束

        .判断结束



        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #无符号int 或 右移 (目的操作数, 16) ＝ #有符号int) 且 ((右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int 或 右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)))

        .判断开始 (右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int 或 右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int)

            .判断开始 (立即数2 ＝ 1)

                .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535))

                    A等于_RAM (左操作数)
                    A等于A加1 ()
                    RAM等于A ()

                    JNC (ROM_缓存使用字节 ＋ 12)
                    A等于_RAM (目的操作数 ＋ 1)
                    A等于A加1 ()
                    RAM等于A ()

                .默认
                    A等于_RAM (左操作数)
                    A等于A加1 ()
                    _RAM等于A (目的操作数)

                    A等于_RAM (左操作数 ＋ 1)
                    JNC (ROM_缓存使用字节 ＋ 6)
                    A等于A加1 ()
                    _RAM等于A (目的操作数 ＋ 1)

                .判断结束



            .默认

                .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535))

                    A等于_RAM (左操作数)
                    R1等于立即数 (立即数2)
                    A等于A加R1 ()
                    RAM等于A ()

                    A等于_RAM (左操作数 ＋ 1)
                    R1等于立即数 (右移 (立即数2, 8))
                    JNC (ROM_缓存使用字节 ＋ 6)
                    A等于A加1 ()
                    A等于A加R1 ()
                    _RAM等于A (左操作数 ＋ 1)

                .默认
                    A等于_RAM (左操作数)
                    R1等于立即数 (立即数2)
                    A等于A加R1 ()
                    _RAM等于A (目的操作数)

                    A等于_RAM (左操作数 ＋ 1)
                    R1等于立即数 (右移 (立即数2, 8))
                    JNC (ROM_缓存使用字节 ＋ 6)
                    A等于A加1 ()
                    A等于A加R1 ()
                    _RAM等于A (目的操作数 ＋ 1)

                .判断结束


            .判断结束


        .默认

            .判断开始 (立即数1 ＝ 1)

                .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (右操作数, 65535))

                    A等于_RAM (右操作数)
                    A等于A加1 ()
                    RAM等于A ()

                    JNC (ROM_缓存使用字节 ＋ 12)
                    A等于_RAM (目的操作数 ＋ 1)
                    A等于A加1 ()
                    RAM等于A ()

                .默认
                    A等于_RAM (右操作数)
                    A等于A加1 ()
                    _RAM等于A (目的操作数)

                    A等于_RAM (右操作数 ＋ 1)
                    JNC (ROM_缓存使用字节 ＋ 6)
                    A等于A加1 ()
                    _RAM等于A (目的操作数 ＋ 1)
                .判断结束


            .默认

                .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (右操作数, 65535))

                    A等于_RAM (右操作数)
                    R1等于立即数 (立即数1)
                    A等于A加R1 ()
                    RAM等于A ()

                    A等于_RAM (右操作数 ＋ 1)
                    R1等于立即数 (右移 (立即数1, 8))
                    JNC (ROM_缓存使用字节 ＋ 6)
                    A等于A加1 ()
                    A等于A加R1 ()
                    _RAM等于A (右操作数 ＋ 1)

                .默认
                    A等于_RAM (右操作数)
                    R1等于立即数 (立即数1)
                    A等于A加R1 ()
                    _RAM等于A (目的操作数)

                    A等于_RAM (右操作数 ＋ 1)
                    R1等于立即数 (右移 (立即数1, 8))
                    JNC (ROM_缓存使用字节 ＋ 6)
                    A等于A加1 ()
                    A等于A加R1 ()
                    _RAM等于A (目的操作数 ＋ 1)
                .判断结束


            .判断结束



        .判断结束


        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #无符号长int 或 右移 (目的操作数, 16) ＝ #有符号长int) 且 ((右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 (右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)))

        .判断开始 (右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int)

            .判断开始 (立即数2 ＝ 1)

                .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535))

                    A等于_RAM (左操作数)
                    A等于A加1 ()
                    RAM等于A ()

                    JNC (ROM_缓存使用字节 ＋ 36)
                    A等于_RAM (目的操作数 ＋ 1)
                    A等于A加1 ()
                    RAM等于A ()

                    JNC (ROM_缓存使用字节 ＋ 24)
                    A等于_RAM (目的操作数 ＋ 2)
                    A等于A加1 ()
                    RAM等于A ()

                    JNC (ROM_缓存使用字节 ＋ 12)
                    A等于_RAM (目的操作数 ＋ 3)
                    A等于A加1 ()
                    RAM等于A ()



                .默认
                    A等于_RAM (左操作数)
                    A等于A加1 ()
                    _RAM等于A (目的操作数)

                    A等于_RAM (左操作数 ＋ 1)
                    JNC (ROM_缓存使用字节 ＋ 6)
                    A等于A加1 ()
                    _RAM等于A (目的操作数 ＋ 1)

                    A等于_RAM (左操作数 ＋ 2)
                    JNC (ROM_缓存使用字节 ＋ 6)
                    A等于A加1 ()
                    _RAM等于A (目的操作数 ＋ 2)

                    A等于_RAM (左操作数 ＋ 3)
                    JNC (ROM_缓存使用字节 ＋ 6)
                    A等于A加1 ()
                    _RAM等于A (目的操作数 ＋ 3)

                .判断结束



            .默认

                .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535))

                    A等于_RAM (左操作数 ＋ 3)
                    R1等于立即数 (右移 (立即数2, 24))
                    A等于A加R1 ()
                    RAM等于A ()


                    A等于_RAM (左操作数 ＋ 2)
                    R1等于立即数 (右移 (立即数2, 16))
                    A等于A加R1 ()
                    RAM等于A ()

                    JNC (ROM_缓存使用字节 ＋ 12)
                    A等于_RAM (目的操作数 ＋ 3)
                    A等于A加1 ()
                    RAM等于A ()


                    A等于_RAM (左操作数 ＋ 1)
                    R1等于立即数 (右移 (立即数2, 8))
                    A等于A加R1 ()
                    RAM等于A ()

                    JNC (ROM_缓存使用字节 ＋ 24)
                    A等于_RAM (目的操作数 ＋ 2)
                    A等于A加1 ()
                    RAM等于A ()
                    JNC (ROM_缓存使用字节 ＋ 12)
                    A等于_RAM (目的操作数 ＋ 3)
                    A等于A加1 ()
                    RAM等于A ()


                    A等于_RAM (左操作数)
                    R1等于立即数 (立即数2)
                    A等于A加R1 ()
                    RAM等于A ()

                    JNC (ROM_缓存使用字节 ＋ 36)
                    A等于_RAM (目的操作数 ＋ 1)
                    A等于A加1 ()
                    RAM等于A ()
                    JNC (ROM_缓存使用字节 ＋ 24)
                    A等于_RAM (目的操作数 ＋ 2)
                    A等于A加1 ()
                    RAM等于A ()
                    JNC (ROM_缓存使用字节 ＋ 12)
                    A等于_RAM (目的操作数 ＋ 3)
                    A等于A加1 ()
                    RAM等于A ()


                .默认
                    A等于_RAM (左操作数 ＋ 3)
                    R1等于立即数 (右移 (立即数2, 24))
                    A等于A加R1 ()
                    _RAM等于A (目的操作数 ＋ 3)


                    A等于_RAM (左操作数 ＋ 2)
                    R1等于立即数 (右移 (立即数2, 16))
                    A等于A加R1 ()
                    _RAM等于A (目的操作数 ＋ 2)

                    JNC (ROM_缓存使用字节 ＋ 12)
                    A等于_RAM (目的操作数 ＋ 3)
                    A等于A加1 ()
                    RAM等于A ()


                    A等于_RAM (左操作数 ＋ 1)
                    R1等于立即数 (右移 (立即数2, 8))
                    A等于A加R1 ()
                    _RAM等于A (目的操作数 ＋ 1)

                    JNC (ROM_缓存使用字节 ＋ 24)
                    A等于_RAM (目的操作数 ＋ 2)
                    A等于A加1 ()
                    RAM等于A ()
                    JNC (ROM_缓存使用字节 ＋ 12)
                    A等于_RAM (目的操作数 ＋ 3)
                    A等于A加1 ()
                    RAM等于A ()


                    A等于_RAM (左操作数)
                    R1等于立即数 (立即数2)
                    A等于A加R1 ()
                    _RAM等于A (目的操作数)

                    JNC (ROM_缓存使用字节 ＋ 36)
                    A等于_RAM (目的操作数 ＋ 1)
                    A等于A加1 ()
                    RAM等于A ()
                    JNC (ROM_缓存使用字节 ＋ 24)
                    A等于_RAM (目的操作数 ＋ 2)
                    A等于A加1 ()
                    RAM等于A ()
                    JNC (ROM_缓存使用字节 ＋ 12)
                    A等于_RAM (目的操作数 ＋ 3)
                    A等于A加1 ()
                    RAM等于A ()

                .判断结束


            .判断结束




        .默认


            .判断开始 (立即数1 ＝ 1)

                .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (右操作数, 65535))

                    A等于_RAM (右操作数)
                    A等于A加1 ()
                    RAM等于A ()

                    JNC (ROM_缓存使用字节 ＋ 36)
                    A等于_RAM (目的操作数 ＋ 1)
                    A等于A加1 ()
                    RAM等于A ()

                    JNC (ROM_缓存使用字节 ＋ 24)
                    A等于_RAM (目的操作数 ＋ 2)
                    A等于A加1 ()
                    RAM等于A ()

                    JNC (ROM_缓存使用字节 ＋ 12)
                    A等于_RAM (目的操作数 ＋ 3)
                    A等于A加1 ()
                    RAM等于A ()



                .默认
                    A等于_RAM (右操作数)
                    A等于A加1 ()
                    _RAM等于A (目的操作数)

                    A等于_RAM (右操作数 ＋ 1)
                    JNC (ROM_缓存使用字节 ＋ 6)
                    A等于A加1 ()
                    _RAM等于A (目的操作数 ＋ 1)

                    A等于_RAM (右操作数 ＋ 2)
                    JNC (ROM_缓存使用字节 ＋ 6)
                    A等于A加1 ()
                    _RAM等于A (目的操作数 ＋ 2)

                    A等于_RAM (右操作数 ＋ 3)
                    JNC (ROM_缓存使用字节 ＋ 6)
                    A等于A加1 ()
                    _RAM等于A (目的操作数 ＋ 3)

                .判断结束



            .默认

                .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (右操作数, 65535))

                    A等于_RAM (右操作数 ＋ 3)
                    R1等于立即数 (右移 (立即数1, 24))
                    A等于A加R1 ()
                    RAM等于A ()


                    A等于_RAM (右操作数 ＋ 2)
                    R1等于立即数 (右移 (立即数1, 16))
                    A等于A加R1 ()
                    RAM等于A ()

                    JNC (ROM_缓存使用字节 ＋ 12)
                    A等于_RAM (目的操作数 ＋ 3)
                    A等于A加1 ()
                    RAM等于A ()


                    A等于_RAM (右操作数 ＋ 1)
                    R1等于立即数 (右移 (立即数1, 8))
                    A等于A加R1 ()
                    RAM等于A ()

                    JNC (ROM_缓存使用字节 ＋ 24)
                    A等于_RAM (目的操作数 ＋ 2)
                    A等于A加1 ()
                    RAM等于A ()
                    JNC (ROM_缓存使用字节 ＋ 12)
                    A等于_RAM (目的操作数 ＋ 3)
                    A等于A加1 ()
                    RAM等于A ()


                    A等于_RAM (右操作数)
                    R1等于立即数 (立即数1)
                    A等于A加R1 ()
                    RAM等于A ()

                    JNC (ROM_缓存使用字节 ＋ 36)
                    A等于_RAM (目的操作数 ＋ 1)
                    A等于A加1 ()
                    RAM等于A ()
                    JNC (ROM_缓存使用字节 ＋ 24)
                    A等于_RAM (目的操作数 ＋ 2)
                    A等于A加1 ()
                    RAM等于A ()
                    JNC (ROM_缓存使用字节 ＋ 12)
                    A等于_RAM (目的操作数 ＋ 3)
                    A等于A加1 ()
                    RAM等于A ()



                .默认
                    A等于_RAM (右操作数 ＋ 3)
                    R1等于立即数 (右移 (立即数1, 24))
                    A等于A加R1 ()
                    _RAM等于A (目的操作数 ＋ 3)


                    A等于_RAM (右操作数 ＋ 2)
                    R1等于立即数 (右移 (立即数1, 16))
                    A等于A加R1 ()
                    _RAM等于A (目的操作数 ＋ 2)

                    JNC (ROM_缓存使用字节 ＋ 12)
                    A等于_RAM (目的操作数 ＋ 3)
                    A等于A加1 ()
                    RAM等于A ()


                    A等于_RAM (右操作数 ＋ 1)
                    R1等于立即数 (右移 (立即数1, 8))
                    A等于A加R1 ()
                    _RAM等于A (目的操作数 ＋ 1)

                    JNC (ROM_缓存使用字节 ＋ 24)
                    A等于_RAM (目的操作数 ＋ 2)
                    A等于A加1 ()
                    RAM等于A ()
                    JNC (ROM_缓存使用字节 ＋ 12)
                    A等于_RAM (目的操作数 ＋ 3)
                    A等于A加1 ()
                    RAM等于A ()


                    A等于_RAM (右操作数)
                    R1等于立即数 (立即数1)
                    A等于A加R1 ()
                    _RAM等于A (目的操作数)

                    JNC (ROM_缓存使用字节 ＋ 36)
                    A等于_RAM (目的操作数 ＋ 1)
                    A等于A加1 ()
                    RAM等于A ()
                    JNC (ROM_缓存使用字节 ＋ 24)
                    A等于_RAM (目的操作数 ＋ 2)
                    A等于A加1 ()
                    RAM等于A ()
                    JNC (ROM_缓存使用字节 ＋ 12)
                    A等于_RAM (目的操作数 ＋ 3)
                    A等于A加1 ()
                    RAM等于A ()


                .判断结束


            .判断结束



        .判断结束



        状态 ＝ “完成”



    .判断 ((右移 (目的操作数, 16) ＝ #无符号char指针 或 右移 (目的操作数, 16) ＝ #有符号char指针) 且 ((右移 (左操作数, 16) ＝ #无符号char数组 或 右移 (左操作数, 16) ＝ #有符号char数组) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC 或 右移 (右操作数, 16) ＝ #ACC) 或 (右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组) 且 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char 或 右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC 或 右移 (左操作数, 16) ＝ #ACC)))

        .如果真 (右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组)
            计数1 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 计数1
        .如果真结束

        .判断开始 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char)

            A等于立即数 (立即数1)
            R1等于_RAM (右操作数)
            A等于A加R1 ()
            _RAM等于A (目的操作数)

            A等于立即数 (右移 (立即数1, 8))
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            _RAM等于A (目的操作数 ＋ 1)

        .默认
            R1等于立即数 (立即数1)
            A等于A加R1 ()
            _RAM等于A (目的操作数)

            A等于立即数 (右移 (立即数1, 8))
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            _RAM等于A (目的操作数 ＋ 1)

        .判断结束


        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #无符号char指针 或 右移 (目的操作数, 16) ＝ #有符号char指针) 且 ((右移 (左操作数, 16) ＝ #无符号char数组 或 右移 (左操作数, 16) ＝ #有符号char数组) 且 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 或 (右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组) 且 (右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int 或 右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int)))

        .如果真 (右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组)
            计数1 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 计数1
        .如果真结束

        A等于_RAM (右操作数)
        R1等于立即数 (立即数1)
        A等于A加R1 ()
        _RAM等于A (目的操作数)

        A等于_RAM (右操作数 ＋ 1)
        R1等于立即数 (右移 (立即数1, 8))
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        A等于A加R1 ()
        _RAM等于A (目的操作数 ＋ 1)

        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #无符号int指针 或 右移 (目的操作数, 16) ＝ #有符号int指针) 且 ((右移 (左操作数, 16) ＝ #无符号int数组 或 右移 (左操作数, 16) ＝ #有符号int数组) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC 或 右移 (右操作数, 16) ＝ #ACC) 或 (右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组) 且 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char 或 右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC 或 右移 (左操作数, 16) ＝ #ACC)))

        .如果真 (右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组)
            计数1 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 计数1
        .如果真结束

        .判断开始 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char)

            A等于_RAM (右操作数)
            R1等于RAM ()
            A等于A加R1 ()
            R1等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于立即数 (1)
            JMP (ROM_缓存使用字节 ＋ 7)
            A等于立即数 (0)

            _RAM等于A (目的操作数 ＋ 1)

            A等于立即数 (立即数1)
            A等于A加R1 ()
            _RAM等于A (目的操作数)

            A等于立即数 (右移 (立即数1, 8))
            R1等于_RAM (目的操作数 ＋ 1)
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            A等于A加R1 ()
            _RAM等于A (目的操作数 ＋ 1)


        .默认
            R1等于A ()
            A等于A加R1 ()
            R1等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于立即数 (1)
            JMP (ROM_缓存使用字节 ＋ 7)
            A等于立即数 (0)

            _RAM等于A (目的操作数 ＋ 1)

            A等于立即数 (立即数1)
            A等于A加R1 ()
            _RAM等于A (目的操作数)

            A等于立即数 (右移 (立即数1, 8))
            R1等于_RAM (目的操作数 ＋ 1)
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            A等于A加R1 ()
            _RAM等于A (目的操作数 ＋ 1)

        .判断结束


        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #无符号int指针 或 右移 (目的操作数, 16) ＝ #有符号int指针) 且 ((右移 (左操作数, 16) ＝ #无符号int数组 或 右移 (左操作数, 16) ＝ #有符号int数组) 且 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 或 (右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组) 且 (右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int 或 右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int)))

        .如果真 (右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组)
            计数1 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 计数1
        .如果真结束

        A等于_RAM (右操作数 ＋ 1)
        R1等于RAM ()
        A等于A加R1 ()
        _RAM等于A (目的操作数 ＋ 1)

        A等于_RAM (右操作数)
        R1等于RAM ()
        A等于A加R1 ()
        R1等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数 ＋ 1)
        A等于A加1 ()
        RAM等于A ()

        A等于立即数 (立即数1)
        A等于A加R1 ()
        _RAM等于A (目的操作数)

        A等于立即数 (右移 (立即数1, 8))
        R1等于_RAM (目的操作数 ＋ 1)
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        A等于A加R1 ()
        _RAM等于A (目的操作数 ＋ 1)


        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #无符号长int指针 或 右移 (目的操作数, 16) ＝ #有符号长int指针) 且 ((右移 (左操作数, 16) ＝ #无符号长int数组 或 右移 (左操作数, 16) ＝ #有符号长int数组) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC 或 右移 (右操作数, 16) ＝ #ACC) 或 (右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组) 且 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char 或 右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC 或 右移 (左操作数, 16) ＝ #ACC)))

        .如果真 (右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组)
            计数1 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 计数1
        .如果真结束


        .判断开始 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char)

            A等于_RAM (右操作数)
            R1等于RAM ()
            A等于A加R1 ()
            R1等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于立即数 (2)
            JMP (ROM_缓存使用字节 ＋ 7)
            A等于立即数 (0)

            _RAM等于A (目的操作数 ＋ 1)

            A等于立即数 (0)
            A等于A加R1 ()
            A等于A加R1 ()
            R1等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 1)
            A等于A加1 ()
            RAM等于A ()

            A等于立即数 (立即数1)
            A等于A加R1 ()
            _RAM等于A (目的操作数)

            A等于立即数 (右移 (立即数1, 8))
            R1等于_RAM (目的操作数 ＋ 1)
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            A等于A加R1 ()
            _RAM等于A (目的操作数 ＋ 1)

        .默认
            R1等于A ()
            A等于A加R1 ()
            R1等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于立即数 (2)
            JMP (ROM_缓存使用字节 ＋ 7)
            A等于立即数 (0)

            _RAM等于A (目的操作数 ＋ 1)

            A等于立即数 (0)
            A等于A加R1 ()
            A等于A加R1 ()
            R1等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 1)
            A等于A加1 ()
            RAM等于A ()

            A等于立即数 (立即数1)
            A等于A加R1 ()
            _RAM等于A (目的操作数)

            A等于立即数 (右移 (立即数1, 8))
            R1等于_RAM (目的操作数 ＋ 1)
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            A等于A加R1 ()
            _RAM等于A (目的操作数 ＋ 1)

        .判断结束



        状态 ＝ “完成”



    .判断 ((右移 (目的操作数, 16) ＝ #无符号长int指针 或 右移 (目的操作数, 16) ＝ #有符号长int指针) 且 ((右移 (左操作数, 16) ＝ #无符号长int数组 或 右移 (左操作数, 16) ＝ #有符号长int数组) 且 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 或 (右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组) 且 (右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int 或 右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int)))

        .如果真 (右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组)
            计数1 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 计数1
        .如果真结束


        A等于_RAM (右操作数 ＋ 1)
        R1等于RAM ()
        A等于A加R1 ()
        R1等于A ()
        A等于A加R1 ()
        _RAM等于A (目的操作数 ＋ 1)

        A等于_RAM (右操作数)
        R1等于RAM ()
        A等于A加R1 ()
        R1等于A ()

        JNC (ROM_缓存使用字节 ＋ 13)
        A等于_RAM (目的操作数 ＋ 1)
        A等于A加1 ()
        A等于A加1 ()
        RAM等于A ()

        A等于立即数 (0)
        A等于A加R1 ()
        A等于A加R1 ()
        R1等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数 ＋ 1)
        A等于A加1 ()
        RAM等于A ()


        A等于立即数 (立即数1)
        A等于A加R1 ()
        _RAM等于A (目的操作数)

        A等于立即数 (右移 (立即数1, 8))
        R1等于_RAM (目的操作数 ＋ 1)
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        A等于A加R1 ()
        _RAM等于A (目的操作数 ＋ 1)


        状态 ＝ “完成”



    .判断 ((右移 (目的操作数, 16) ＝ #无符号char指针 或 右移 (目的操作数, 16) ＝ #有符号char指针) 且 ((右移 (左操作数, 16) ＝ #无符号char指针 或 右移 (左操作数, 16) ＝ #有符号char指针) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC 或 右移 (右操作数, 16) ＝ #ACC) 或 (右移 (右操作数, 16) ＝ #无符号char指针 或 右移 (右操作数, 16) ＝ #有符号char指针) 且 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char 或 右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC 或 右移 (左操作数, 16) ＝ #ACC)))

        .如果真 (右移 (右操作数, 16) ＝ #无符号char指针 或 右移 (右操作数, 16) ＝ #有符号char指针)
            计数1 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 计数1
        .如果真结束

        .判断开始 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char)

            .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535))

                R1等于_RAM (右操作数)
                A等于_RAM (左操作数)
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (左操作数 ＋ 1)
                A等于A加1 ()
                RAM等于A ()


            .默认
                A等于_RAM (左操作数)
                R1等于_RAM (右操作数)
                A等于A加R1 ()
                _RAM等于A (目的操作数)

                A等于_RAM (左操作数 ＋ 1)
                JNC (ROM_缓存使用字节 ＋ 6)
                A等于A加1 ()
                _RAM等于A (目的操作数 ＋ 1)
            .判断结束



        .默认

            .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535))

                R1等于_RAM (左操作数)
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (左操作数 ＋ 1)
                A等于A加1 ()
                RAM等于A ()


            .默认
                R1等于_RAM (左操作数)
                A等于A加R1 ()
                _RAM等于A (目的操作数)

                A等于_RAM (左操作数 ＋ 1)
                JNC (ROM_缓存使用字节 ＋ 6)
                A等于A加1 ()
                _RAM等于A (目的操作数 ＋ 1)

            .判断结束


        .判断结束


        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #无符号char指针 或 右移 (目的操作数, 16) ＝ #有符号char指针) 且 ((右移 (左操作数, 16) ＝ #无符号char指针 或 右移 (左操作数, 16) ＝ #有符号char指针) 且 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 或 (右移 (右操作数, 16) ＝ #无符号char指针 或 右移 (右操作数, 16) ＝ #有符号char指针) 且 (右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int 或 右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int)))

        .如果真 (右移 (右操作数, 16) ＝ #无符号char指针 或 右移 (右操作数, 16) ＝ #有符号char指针)
            计数1 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 计数1
        .如果真结束

        .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535))

            R1等于_RAM (右操作数)
            A等于_RAM (左操作数)
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (左操作数 ＋ 1)
            R1等于_RAM (右操作数 ＋ 1)
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            A等于A加R1 ()
            _RAM等于A (目的操作数 ＋ 1)


        .默认
            A等于_RAM (左操作数)
            R1等于_RAM (右操作数)
            A等于A加R1 ()
            _RAM等于A (目的操作数)

            A等于_RAM (左操作数 ＋ 1)
            R1等于_RAM (右操作数 ＋ 1)
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            A等于A加R1 ()
            _RAM等于A (目的操作数 ＋ 1)

        .判断结束


        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #无符号int指针 或 右移 (目的操作数, 16) ＝ #有符号int指针) 且 ((右移 (左操作数, 16) ＝ #无符号int指针 或 右移 (左操作数, 16) ＝ #有符号int指针) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC 或 右移 (右操作数, 16) ＝ #ACC) 或 (右移 (右操作数, 16) ＝ #无符号int指针 或 右移 (右操作数, 16) ＝ #有符号int指针) 且 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char 或 右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC 或 右移 (左操作数, 16) ＝ #ACC)))

        .如果真 (右移 (右操作数, 16) ＝ #无符号int指针 或 右移 (右操作数, 16) ＝ #有符号int指针)
            计数1 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 计数1
        .如果真结束

        .判断开始 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char)

            .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535))

                A等于_RAM (右操作数)
                R1等于RAM ()
                A等于A加R1 ()
                R1等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于立即数 (1)
                JMP (ROM_缓存使用字节 ＋ 7)
                A等于立即数 (0)

                _RAM等于A (#RAM缓存1)

                A等于_RAM (左操作数)
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (左操作数 ＋ 1)
                R1等于_RAM (#RAM缓存1)
                JNC (ROM_缓存使用字节 ＋ 6)
                A等于A加1 ()
                A等于A加R1 ()
                _RAM等于A (目的操作数 ＋ 1)


            .默认
                A等于_RAM (右操作数)
                R1等于RAM ()
                A等于A加R1 ()
                R1等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于立即数 (1)
                JMP (ROM_缓存使用字节 ＋ 7)
                A等于立即数 (0)

                _RAM等于A (目的操作数 ＋ 1)

                A等于_RAM (左操作数)
                A等于A加R1 ()
                _RAM等于A (目的操作数)

                A等于_RAM (左操作数 ＋ 1)
                R1等于_RAM (目的操作数 ＋ 1)
                JNC (ROM_缓存使用字节 ＋ 6)
                A等于A加1 ()
                A等于A加R1 ()
                _RAM等于A (目的操作数 ＋ 1)

            .判断结束



        .默认

            .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535))

                R1等于A ()
                A等于A加R1 ()
                R1等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于立即数 (1)
                JMP (ROM_缓存使用字节 ＋ 7)
                A等于立即数 (0)

                _RAM等于A (#RAM缓存1)

                A等于_RAM (左操作数)
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (左操作数 ＋ 1)
                R1等于_RAM (#RAM缓存1)
                JNC (ROM_缓存使用字节 ＋ 6)
                A等于A加1 ()
                A等于A加R1 ()
                _RAM等于A (目的操作数 ＋ 1)


            .默认
                R1等于A ()
                A等于A加R1 ()
                R1等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于立即数 (1)
                JMP (ROM_缓存使用字节 ＋ 7)
                A等于立即数 (0)

                _RAM等于A (目的操作数 ＋ 1)

                A等于_RAM (左操作数)
                A等于A加R1 ()
                _RAM等于A (目的操作数)

                A等于_RAM (左操作数 ＋ 1)
                R1等于_RAM (目的操作数 ＋ 1)
                JNC (ROM_缓存使用字节 ＋ 6)
                A等于A加1 ()
                A等于A加R1 ()
                _RAM等于A (目的操作数 ＋ 1)

            .判断结束




        .判断结束


        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #无符号int指针 或 右移 (目的操作数, 16) ＝ #有符号int指针) 且 ((右移 (左操作数, 16) ＝ #无符号int指针 或 右移 (左操作数, 16) ＝ #有符号int指针) 且 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 或 (右移 (右操作数, 16) ＝ #无符号int指针 或 右移 (右操作数, 16) ＝ #有符号int指针) 且 (右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int 或 右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int)))

        .如果真 (右移 (右操作数, 16) ＝ #无符号int指针 或 右移 (右操作数, 16) ＝ #有符号int指针)
            计数1 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 计数1
        .如果真结束

        .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535))

            A等于_RAM (右操作数 ＋ 1)
            R1等于RAM ()
            A等于A加R1 ()
            _RAM等于A (#RAM缓存1)

            A等于_RAM (右操作数)
            R1等于RAM ()
            A等于A加R1 ()
            R1等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存1)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (左操作数)
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (左操作数 ＋ 1)
            R1等于_RAM (#RAM缓存1)
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            A等于A加R1 ()
            _RAM等于A (目的操作数 ＋ 1)



        .默认
            A等于_RAM (右操作数 ＋ 1)
            R1等于RAM ()
            A等于A加R1 ()
            _RAM等于A (目的操作数 ＋ 1)

            A等于_RAM (右操作数)
            R1等于RAM ()
            A等于A加R1 ()
            R1等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 1)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (左操作数)
            A等于A加R1 ()
            _RAM等于A (目的操作数)

            A等于_RAM (左操作数 ＋ 1)
            R1等于_RAM (目的操作数 ＋ 1)
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            A等于A加R1 ()
            _RAM等于A (目的操作数 ＋ 1)

        .判断结束





        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #无符号长int指针 或 右移 (目的操作数, 16) ＝ #有符号长int指针) 且 ((右移 (左操作数, 16) ＝ #无符号长int指针 或 右移 (左操作数, 16) ＝ #有符号长int指针) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC 或 右移 (右操作数, 16) ＝ #ACC) 或 (右移 (右操作数, 16) ＝ #无符号长int指针 或 右移 (右操作数, 16) ＝ #有符号长int指针) 且 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char 或 右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC 或 右移 (左操作数, 16) ＝ #ACC)))

        .如果真 (右移 (右操作数, 16) ＝ #无符号长int指针 或 右移 (右操作数, 16) ＝ #有符号长int指针)
            计数1 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 计数1
        .如果真结束


        .判断开始 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char)

            .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535))

                A等于_RAM (右操作数)
                R1等于RAM ()
                A等于A加R1 ()
                R1等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于立即数 (2)
                JMP (ROM_缓存使用字节 ＋ 7)
                A等于立即数 (0)

                _RAM等于A (#RAM缓存1)

                A等于立即数 (0)
                A等于A加R1 ()
                A等于A加R1 ()
                R1等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (#RAM缓存1)
                A等于A加1 ()
                RAM等于A ()

                A等于_RAM (左操作数)
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (左操作数 ＋ 1)
                R1等于_RAM (#RAM缓存1)
                JNC (ROM_缓存使用字节 ＋ 6)
                A等于A加1 ()
                A等于A加R1 ()
                _RAM等于A (目的操作数 ＋ 1)


            .默认
                A等于_RAM (右操作数)
                R1等于RAM ()
                A等于A加R1 ()
                R1等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于立即数 (2)
                JMP (ROM_缓存使用字节 ＋ 7)
                A等于立即数 (0)

                _RAM等于A (目的操作数 ＋ 1)

                A等于立即数 (0)
                A等于A加R1 ()
                A等于A加R1 ()
                R1等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (目的操作数 ＋ 1)
                A等于A加1 ()
                RAM等于A ()

                A等于_RAM (左操作数)
                A等于A加R1 ()
                _RAM等于A (目的操作数)

                A等于_RAM (左操作数 ＋ 1)
                R1等于_RAM (目的操作数 ＋ 1)
                JNC (ROM_缓存使用字节 ＋ 6)
                A等于A加1 ()
                A等于A加R1 ()
                _RAM等于A (目的操作数 ＋ 1)

            .判断结束




        .默认

            .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535))

                R1等于A ()
                A等于A加R1 ()
                R1等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于立即数 (2)
                JMP (ROM_缓存使用字节 ＋ 7)
                A等于立即数 (0)

                _RAM等于A (#RAM缓存1)

                A等于立即数 (0)
                A等于A加R1 ()
                A等于A加R1 ()
                R1等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (#RAM缓存1)
                A等于A加1 ()
                RAM等于A ()

                A等于_RAM (左操作数)
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (左操作数 ＋ 1)
                R1等于_RAM (#RAM缓存1)
                JNC (ROM_缓存使用字节 ＋ 6)
                A等于A加1 ()
                A等于A加R1 ()
                _RAM等于A (目的操作数 ＋ 1)


            .默认
                R1等于A ()
                A等于A加R1 ()
                R1等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于立即数 (2)
                JMP (ROM_缓存使用字节 ＋ 7)
                A等于立即数 (0)

                _RAM等于A (目的操作数 ＋ 1)

                A等于立即数 (0)
                A等于A加R1 ()
                A等于A加R1 ()
                R1等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (目的操作数 ＋ 1)
                A等于A加1 ()
                RAM等于A ()

                A等于_RAM (左操作数)
                A等于A加R1 ()
                _RAM等于A (目的操作数)

                A等于_RAM (左操作数 ＋ 1)
                R1等于_RAM (目的操作数 ＋ 1)
                JNC (ROM_缓存使用字节 ＋ 6)
                A等于A加1 ()
                A等于A加R1 ()
                _RAM等于A (目的操作数 ＋ 1)

            .判断结束




        .判断结束



        状态 ＝ “完成”



    .判断 ((右移 (目的操作数, 16) ＝ #无符号长int指针 或 右移 (目的操作数, 16) ＝ #有符号长int指针) 且 ((右移 (左操作数, 16) ＝ #无符号长int指针 或 右移 (左操作数, 16) ＝ #有符号长int指针) 且 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 或 (右移 (右操作数, 16) ＝ #无符号长int指针 或 右移 (右操作数, 16) ＝ #有符号长int指针) 且 (右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int 或 右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int)))

        .如果真 (右移 (右操作数, 16) ＝ #无符号长int指针 或 右移 (右操作数, 16) ＝ #有符号长int指针)
            计数1 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 计数1
        .如果真结束


        .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535))

            A等于_RAM (右操作数 ＋ 1)
            R1等于RAM ()
            A等于A加R1 ()
            R1等于A ()
            A等于A加R1 ()
            _RAM等于A (#RAM缓存1)

            A等于_RAM (右操作数)
            R1等于RAM ()
            A等于A加R1 ()
            R1等于A ()

            JNC (ROM_缓存使用字节 ＋ 13)
            A等于_RAM (#RAM缓存1)
            A等于A加1 ()
            A等于A加1 ()
            RAM等于A ()

            A等于立即数 (0)
            A等于A加R1 ()
            A等于A加R1 ()
            R1等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存1)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (左操作数)
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (左操作数 ＋ 1)
            R1等于_RAM (#RAM缓存1)
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            A等于A加R1 ()
            _RAM等于A (目的操作数 ＋ 1)



        .默认
            A等于_RAM (右操作数 ＋ 1)
            R1等于RAM ()
            A等于A加R1 ()
            R1等于A ()
            A等于A加R1 ()
            _RAM等于A (目的操作数 ＋ 1)

            A等于_RAM (右操作数)
            R1等于RAM ()
            A等于A加R1 ()
            R1等于A ()

            JNC (ROM_缓存使用字节 ＋ 13)
            A等于_RAM (目的操作数 ＋ 1)
            A等于A加1 ()
            A等于A加1 ()
            RAM等于A ()

            A等于立即数 (0)
            A等于A加R1 ()
            A等于A加R1 ()
            R1等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 1)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (左操作数)
            A等于A加R1 ()
            _RAM等于A (目的操作数)

            A等于_RAM (左操作数 ＋ 1)
            R1等于_RAM (目的操作数 ＋ 1)
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            A等于A加R1 ()
            _RAM等于A (目的操作数 ＋ 1)

        .判断结束



        状态 ＝ “完成”



    .默认
        状态 ＝ “二元式机器码生成_+_运算类型错误或不存在...~!- -”
    .判断结束




.判断 (运算符 ＝ “-”)

    .判断开始 (右移 (左操作数, 16) ＝ #立即数)
        立即数1 ＝ 立即数值 [位与 (左操作数, 65535) ＋ 1]
    .判断 (右移 (左操作数, 16) ＝ #常量)
        立即数1 ＝ 常量值 [位与 (左操作数, 65535) ＋ 1]
    .判断 (右移 (左操作数, 16) ＝ #无符号char数组 或 右移 (左操作数, 16) ＝ #有符号char数组 或 右移 (左操作数, 16) ＝ #无符号int数组 或 右移 (左操作数, 16) ＝ #有符号int数组 或 右移 (左操作数, 16) ＝ #无符号长int数组 或 右移 (左操作数, 16) ＝ #有符号长int数组)
        立即数1 ＝ 位与 (左操作数, 65535)
    .判断 (右移 (左操作数, 16) ＝ 0)
        立即数1 ＝ 位与 (左操作数, 65535)
        左操作数 ＝ #立即数 × 65536
    .默认

    .判断结束


    .判断开始 (右移 (右操作数, 16) ＝ #立即数)
        立即数2 ＝ 立即数值 [位与 (右操作数, 65535) ＋ 1]
    .判断 (右移 (右操作数, 16) ＝ #常量)
        立即数2 ＝ 常量值 [位与 (右操作数, 65535) ＋ 1]
    .判断 (右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组)
        立即数2 ＝ 位与 (右操作数, 65535)
    .判断 (右移 (右操作数, 16) ＝ 0)
        立即数2 ＝ 位与 (右操作数, 65535)
        右操作数 ＝ #立即数 × 65536
    .默认

    .判断结束




    .判断开始 ((右移 (目的操作数, 16) ＝ #ACC 或 右移 (目的操作数, 16) ＝ #无符号ACC 或 右移 (目的操作数, 16) ＝ #有符号ACC) 且 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char))

        .判断开始 (位与 (左操作数, 65535) ＝ 位与 (右操作数, 65535))

            A等于立即数 (0)

        .默认
            A等于_RAM (左操作数)
            R1等于_RAM (右操作数)
            A等于A减R1 ()
        .判断结束


        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #无符号int 或 右移 (目的操作数, 16) ＝ #有符号int) 且 (右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int) 且 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int))

        .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535) 且 位与 (目的操作数, 65535) ＝ 位与 (右操作数, 65535))

            A等于立即数 (0)
            _RAM等于A (目的操作数)
            _RAM等于A (目的操作数 ＋ 1)

        .判断 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535))

            R1等于_RAM (右操作数)
            A等于_RAM (左操作数)
            A等于A减R1 ()
            RAM等于A ()

            A等于_RAM (左操作数 ＋ 1)
            R1等于_RAM (右操作数 ＋ 1)

            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A减1 ()

            A等于A减R1 ()
            _RAM等于A (目的操作数 ＋ 1)


        .判断 (位与 (目的操作数, 65535) ＝ 位与 (右操作数, 65535))

            A等于_RAM (左操作数)
            R1等于_RAM (右操作数)
            A等于A减R1 ()
            RAM等于A ()

            A等于_RAM (左操作数 ＋ 1)
            R1等于_RAM (右操作数 ＋ 1)

            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A减1 ()

            A等于A减R1 ()
            _RAM等于A (目的操作数 ＋ 1)


        .判断 (位与 (左操作数, 65535) ＝ 位与 (右操作数, 65535))

            A等于立即数 (0)
            _RAM等于A (目的操作数)
            _RAM等于A (目的操作数 ＋ 1)


        .默认
            A等于_RAM (左操作数)
            R1等于_RAM (右操作数)
            A等于A减R1 ()
            _RAM等于A (目的操作数)
            A等于_RAM (左操作数 ＋ 1)
            R1等于_RAM (右操作数 ＋ 1)

            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A减1 ()

            A等于A减R1 ()
            _RAM等于A (目的操作数 ＋ 1)

        .判断结束







        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #无符号长int 或 右移 (目的操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int))

        .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535) 且 位与 (目的操作数, 65535) ＝ 位与 (右操作数, 65535))

            A等于立即数 (0)
            _RAM等于A (目的操作数)
            _RAM等于A (目的操作数 ＋ 1)
            _RAM等于A (目的操作数 ＋ 2)
            _RAM等于A (目的操作数 ＋ 3)


        .判断 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535))

            R1等于_RAM (右操作数 ＋ 3)
            A等于_RAM (左操作数 ＋ 3)
            A等于A减R1 ()
            RAM等于A ()


            R1等于_RAM (右操作数 ＋ 2)
            A等于_RAM (左操作数 ＋ 2)
            A等于A减R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 3)
            A等于A减1 ()
            RAM等于A ()


            R1等于_RAM (右操作数 ＋ 1)
            A等于_RAM (左操作数 ＋ 1)
            A等于A减R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 24)
            A等于_RAM (目的操作数 ＋ 2)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 3)
            A等于A减1 ()
            RAM等于A ()


            R1等于_RAM (右操作数)
            A等于_RAM (左操作数)
            A等于A减R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 36)
            A等于_RAM (目的操作数 ＋ 1)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 24)
            A等于_RAM (目的操作数 ＋ 2)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 3)
            A等于A减1 ()
            RAM等于A ()


        .判断 (位与 (目的操作数, 65535) ＝ 位与 (右操作数, 65535))

            A等于_RAM (左操作数 ＋ 3)
            R1等于_RAM (右操作数 ＋ 3)
            A等于A减R1 ()
            RAM等于A ()


            A等于_RAM (左操作数 ＋ 2)
            R1等于_RAM (右操作数 ＋ 2)
            A等于A减R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 3)
            A等于A减1 ()
            RAM等于A ()


            A等于_RAM (左操作数 ＋ 1)
            R1等于_RAM (右操作数 ＋ 1)
            A等于A减R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 24)
            A等于_RAM (目的操作数 ＋ 2)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 3)
            A等于A减1 ()
            RAM等于A ()


            A等于_RAM (左操作数)
            R1等于_RAM (右操作数)
            A等于A减R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 36)
            A等于_RAM (目的操作数 ＋ 1)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 24)
            A等于_RAM (目的操作数 ＋ 2)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 3)
            A等于A减1 ()
            RAM等于A ()


        .判断 (位与 (左操作数, 65535) ＝ 位与 (右操作数, 65535))

            A等于立即数 (0)
            _RAM等于A (目的操作数)
            _RAM等于A (目的操作数 ＋ 1)
            _RAM等于A (目的操作数 ＋ 2)
            _RAM等于A (目的操作数 ＋ 3)


        .默认
            A等于_RAM (左操作数 ＋ 3)
            R1等于_RAM (右操作数 ＋ 3)
            A等于A减R1 ()
            _RAM等于A (目的操作数 ＋ 3)


            A等于_RAM (左操作数 ＋ 2)
            R1等于_RAM (右操作数 ＋ 2)
            A等于A减R1 ()
            _RAM等于A (目的操作数 ＋ 2)

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 3)
            A等于A减1 ()
            RAM等于A ()


            A等于_RAM (左操作数 ＋ 1)
            R1等于_RAM (右操作数 ＋ 1)
            A等于A减R1 ()
            _RAM等于A (目的操作数 ＋ 1)

            JNC (ROM_缓存使用字节 ＋ 24)
            A等于_RAM (目的操作数 ＋ 2)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 3)
            A等于A减1 ()
            RAM等于A ()


            A等于_RAM (左操作数)
            R1等于_RAM (右操作数)
            A等于A减R1 ()
            _RAM等于A (目的操作数)

            JNC (ROM_缓存使用字节 ＋ 36)
            A等于_RAM (目的操作数 ＋ 1)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 24)
            A等于_RAM (目的操作数 ＋ 2)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 3)
            A等于A减1 ()
            RAM等于A ()

        .判断结束




        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #ACC 或 右移 (目的操作数, 16) ＝ #无符号ACC 或 右移 (目的操作数, 16) ＝ #有符号ACC) 且 (右移 (左操作数, 16) ＝ #ACC 或 右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC) 且 右移 (右操作数, 16) ＝ #R1)

        A等于A减R1 ()
        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char) 且 ((右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char) 或 (右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int) 且 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int) 或 (右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int)))

        .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535) 且 位与 (目的操作数, 65535) ＝ 位与 (右操作数, 65535))

            A等于立即数 (0)
            _RAM等于A (目的操作数)

        .判断 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535))

            R1等于_RAM (右操作数)
            A等于_RAM (左操作数)
            A等于A减R1 ()
            RAM等于A ()

        .判断 (位与 (目的操作数, 65535) ＝ 位与 (右操作数, 65535))

            A等于_RAM (左操作数)
            R1等于_RAM (右操作数)
            A等于A减R1 ()
            RAM等于A ()

        .判断 (位与 (左操作数, 65535) ＝ 位与 (右操作数, 65535))

            A等于立即数 (0)
            _RAM等于A (目的操作数)

        .默认
            A等于_RAM (左操作数)
            R1等于_RAM (右操作数)
            A等于A减R1 ()
            _RAM等于A (目的操作数)
        .判断结束


        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #ACC 或 右移 (目的操作数, 16) ＝ #无符号ACC 或 右移 (目的操作数, 16) ＝ #有符号ACC) 且 ((右移 (左操作数, 16) ＝ #ACC 或 右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char) 或 (右移 (右操作数, 16) ＝ #ACC 或 右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC) 且 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char)))

        .判断开始 (右移 (左操作数, 16) ＝ #ACC 或 右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC)
            R1等于_RAM (右操作数)
            A等于A减R1 ()

        .默认
            R1等于A ()
            A等于_RAM (左操作数)
            A等于A减R1 ()
        .判断结束

        状态 ＝ “完成”

    .判断 ((右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char) 且 ((右移 (左操作数, 16) ＝ #ACC 或 右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char) 或 (右移 (右操作数, 16) ＝ #ACC 或 右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC) 且 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char)))

        .判断开始 (右移 (左操作数, 16) ＝ #ACC 或 右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC)

            .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (右操作数, 65535))

                R1等于_RAM (右操作数)
                A等于A减R1 ()
                RAM等于A ()

            .默认
                R1等于_RAM (右操作数)
                A等于A减R1 ()
                _RAM等于A (目的操作数)
            .判断结束


        .默认
            R1等于A ()
            .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535))

                A等于_RAM (左操作数)
                A等于A减R1 ()
                RAM等于A ()

            .默认
                A等于_RAM (左操作数)
                A等于A减R1 ()
                _RAM等于A (目的操作数)
            .判断结束

        .判断结束


        状态 ＝ “完成”



    .判断 ((右移 (目的操作数, 16) ＝ #ACC 或 右移 (目的操作数, 16) ＝ #无符号ACC 或 右移 (目的操作数, 16) ＝ #有符号ACC) 且 ((右移 (左操作数, 16) ＝ #ACC 或 右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 (右移 (右操作数, 16) ＝ #ACC 或 右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)))

        .判断开始 (右移 (左操作数, 16) ＝ #ACC 或 右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC)
            .判断开始 (立即数2 ＝ 1)
                A等于A减1 ()
            .默认
                R1等于立即数 (立即数2)
                A等于A减R1 ()
            .判断结束

        .默认
            R1等于A ()
            A等于立即数 (立即数1)
            A等于A减R1 ()
        .判断结束


        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char) 且 ((右移 (左操作数, 16) ＝ #ACC 或 右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 (右移 (右操作数, 16) ＝ #ACC 或 右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)))

        .判断开始 (右移 (左操作数, 16) ＝ #ACC 或 右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC)
            .判断开始 (立即数2 ＝ 1)
                A等于A减1 ()
            .默认
                R1等于立即数 (立即数2)
                A等于A减R1 ()
            .判断结束

        .默认
            R1等于A ()
            A等于立即数 (立即数1)
            A等于A减R1 ()
        .判断结束

        _RAM等于A (目的操作数)

        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #ACC 或 右移 (目的操作数, 16) ＝ #无符号ACC 或 右移 (目的操作数, 16) ＝ #有符号ACC) 且 ((右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)))

        .判断开始 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char)

            .判断开始 (立即数2 ＝ 1)
                A等于_RAM (左操作数)
                A等于A减1 ()

            .默认
                A等于_RAM (左操作数)
                R1等于立即数 (立即数2)
                A等于A减R1 ()
            .判断结束

        .默认
            A等于立即数 (立即数1)
            R1等于_RAM (右操作数)
            A等于A减R1 ()
        .判断结束


        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char) 且 ((右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char 或 右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int 或 右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)))

        .判断开始 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char 或 右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int 或 右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int)

            .判断开始 (立即数2 ＝ 1)
                A等于_RAM (左操作数)
                A等于A减1 ()

            .默认
                A等于_RAM (左操作数)
                R1等于立即数 (立即数2)
                A等于A减R1 ()
            .判断结束

            .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535))
                RAM等于A ()
            .默认
                _RAM等于A (目的操作数)
            .判断结束


        .默认
            A等于立即数 (立即数1)
            R1等于_RAM (右操作数)
            A等于A减R1 ()

            .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (右操作数, 65535))
                RAM等于A ()
            .默认
                _RAM等于A (目的操作数)
            .判断结束

        .判断结束


        状态 ＝ “完成”



    .判断 ((右移 (目的操作数, 16) ＝ #无符号int 或 右移 (目的操作数, 16) ＝ #有符号int) 且 ((右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int 或 右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)))

        .判断开始 (右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int 或 右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int)

            .判断开始 (立即数2 ＝ 1)

                .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535))

                    A等于_RAM (左操作数)
                    A等于A减1 ()
                    RAM等于A ()

                    JNC (ROM_缓存使用字节 ＋ 12)
                    A等于_RAM (目的操作数 ＋ 1)
                    A等于A减1 ()
                    RAM等于A ()

                .默认
                    A等于_RAM (左操作数)
                    A等于A减1 ()
                    _RAM等于A (目的操作数)

                    A等于_RAM (左操作数 ＋ 1)
                    JNC (ROM_缓存使用字节 ＋ 6)
                    A等于A减1 ()
                    _RAM等于A (目的操作数 ＋ 1)

                .判断结束



            .默认

                .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535))

                    A等于_RAM (左操作数)
                    R1等于立即数 (立即数2)
                    A等于A减R1 ()
                    RAM等于A ()

                    A等于_RAM (左操作数 ＋ 1)
                    R1等于立即数 (右移 (立即数2, 8))
                    JNC (ROM_缓存使用字节 ＋ 6)
                    A等于A减1 ()
                    A等于A减R1 ()
                    _RAM等于A (左操作数 ＋ 1)

                .默认
                    A等于_RAM (左操作数)
                    R1等于立即数 (立即数2)
                    A等于A减R1 ()
                    _RAM等于A (目的操作数)

                    A等于_RAM (左操作数 ＋ 1)
                    R1等于立即数 (右移 (立即数2, 8))
                    JNC (ROM_缓存使用字节 ＋ 6)
                    A等于A减1 ()
                    A等于A减R1 ()
                    _RAM等于A (目的操作数 ＋ 1)

                .判断结束


            .判断结束


        .默认


            .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (右操作数, 65535))

                A等于立即数 (立即数1)
                R1等于_RAM (右操作数)
                A等于A减R1 ()
                RAM等于A ()

                A等于立即数 (右移 (立即数1, 8))
                R1等于_RAM (右操作数 ＋ 1)
                JNC (ROM_缓存使用字节 ＋ 6)
                A等于A减1 ()
                A等于A减R1 ()
                _RAM等于A (右操作数 ＋ 1)


            .默认
                A等于立即数 (立即数1)
                R1等于_RAM (右操作数)
                A等于A减R1 ()
                _RAM等于A (目的操作数)

                A等于立即数 (右移 (立即数1, 8))
                R1等于_RAM (右操作数 ＋ 1)
                JNC (ROM_缓存使用字节 ＋ 6)
                A等于A减1 ()
                A等于A减R1 ()
                _RAM等于A (目的操作数 ＋ 1)

            .判断结束



        .判断结束


        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #无符号长int 或 右移 (目的操作数, 16) ＝ #有符号长int) 且 ((右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 (右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)))

        .判断开始 (右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int)

            .判断开始 (立即数2 ＝ 1)

                .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535))

                    A等于_RAM (左操作数)
                    A等于A减1 ()
                    RAM等于A ()

                    JNC (ROM_缓存使用字节 ＋ 36)
                    A等于_RAM (目的操作数 ＋ 1)
                    A等于A减1 ()
                    RAM等于A ()

                    JNC (ROM_缓存使用字节 ＋ 24)
                    A等于_RAM (目的操作数 ＋ 2)
                    A等于A减1 ()
                    RAM等于A ()

                    JNC (ROM_缓存使用字节 ＋ 12)
                    A等于_RAM (目的操作数 ＋ 3)
                    A等于A减1 ()
                    RAM等于A ()



                .默认
                    A等于_RAM (左操作数)
                    A等于A减1 ()
                    _RAM等于A (目的操作数)

                    A等于_RAM (左操作数 ＋ 1)
                    JNC (ROM_缓存使用字节 ＋ 6)
                    A等于A减1 ()
                    _RAM等于A (目的操作数 ＋ 1)

                    A等于_RAM (左操作数 ＋ 2)
                    JNC (ROM_缓存使用字节 ＋ 6)
                    A等于A减1 ()
                    _RAM等于A (目的操作数 ＋ 2)

                    A等于_RAM (左操作数 ＋ 3)
                    JNC (ROM_缓存使用字节 ＋ 6)
                    A等于A减1 ()
                    _RAM等于A (目的操作数 ＋ 3)

                .判断结束



            .默认

                .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535))

                    A等于_RAM (左操作数 ＋ 3)
                    R1等于立即数 (右移 (立即数2, 24))
                    A等于A减R1 ()
                    RAM等于A ()


                    A等于_RAM (左操作数 ＋ 2)
                    R1等于立即数 (右移 (立即数2, 16))
                    A等于A减R1 ()
                    RAM等于A ()

                    JNC (ROM_缓存使用字节 ＋ 12)
                    A等于_RAM (目的操作数 ＋ 3)
                    A等于A减1 ()
                    RAM等于A ()


                    A等于_RAM (左操作数 ＋ 1)
                    R1等于立即数 (右移 (立即数2, 8))
                    A等于A减R1 ()
                    RAM等于A ()

                    JNC (ROM_缓存使用字节 ＋ 24)
                    A等于_RAM (目的操作数 ＋ 2)
                    A等于A减1 ()
                    RAM等于A ()
                    JNC (ROM_缓存使用字节 ＋ 12)
                    A等于_RAM (目的操作数 ＋ 3)
                    A等于A减1 ()
                    RAM等于A ()


                    A等于_RAM (左操作数)
                    R1等于立即数 (立即数2)
                    A等于A减R1 ()
                    RAM等于A ()

                    JNC (ROM_缓存使用字节 ＋ 36)
                    A等于_RAM (目的操作数 ＋ 1)
                    A等于A减1 ()
                    RAM等于A ()
                    JNC (ROM_缓存使用字节 ＋ 24)
                    A等于_RAM (目的操作数 ＋ 2)
                    A等于A减1 ()
                    RAM等于A ()
                    JNC (ROM_缓存使用字节 ＋ 12)
                    A等于_RAM (目的操作数 ＋ 3)
                    A等于A减1 ()
                    RAM等于A ()


                .默认
                    A等于_RAM (左操作数 ＋ 3)
                    R1等于立即数 (右移 (立即数2, 24))
                    A等于A减R1 ()
                    _RAM等于A (目的操作数 ＋ 3)


                    A等于_RAM (左操作数 ＋ 2)
                    R1等于立即数 (右移 (立即数2, 16))
                    A等于A减R1 ()
                    _RAM等于A (目的操作数 ＋ 2)

                    JNC (ROM_缓存使用字节 ＋ 12)
                    A等于_RAM (目的操作数 ＋ 3)
                    A等于A减1 ()
                    RAM等于A ()


                    A等于_RAM (左操作数 ＋ 1)
                    R1等于立即数 (右移 (立即数2, 8))
                    A等于A减R1 ()
                    _RAM等于A (目的操作数 ＋ 1)

                    JNC (ROM_缓存使用字节 ＋ 24)
                    A等于_RAM (目的操作数 ＋ 2)
                    A等于A减1 ()
                    RAM等于A ()
                    JNC (ROM_缓存使用字节 ＋ 12)
                    A等于_RAM (目的操作数 ＋ 3)
                    A等于A减1 ()
                    RAM等于A ()


                    A等于_RAM (左操作数)
                    R1等于立即数 (立即数2)
                    A等于A减R1 ()
                    _RAM等于A (目的操作数)

                    JNC (ROM_缓存使用字节 ＋ 36)
                    A等于_RAM (目的操作数 ＋ 1)
                    A等于A减1 ()
                    RAM等于A ()
                    JNC (ROM_缓存使用字节 ＋ 24)
                    A等于_RAM (目的操作数 ＋ 2)
                    A等于A减1 ()
                    RAM等于A ()
                    JNC (ROM_缓存使用字节 ＋ 12)
                    A等于_RAM (目的操作数 ＋ 3)
                    A等于A减1 ()
                    RAM等于A ()

                .判断结束


            .判断结束




        .默认


            .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (右操作数, 65535))

                A等于立即数 (右移 (立即数1, 24))
                R1等于_RAM (右操作数 ＋ 3)
                A等于A减R1 ()
                RAM等于A ()


                A等于立即数 (右移 (立即数1, 16))
                R1等于_RAM (右操作数 ＋ 2)
                A等于A减R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (目的操作数 ＋ 3)
                A等于A减1 ()
                RAM等于A ()


                A等于立即数 (右移 (立即数1, 8))
                R1等于_RAM (右操作数 ＋ 1)
                A等于A减R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 24)
                A等于_RAM (目的操作数 ＋ 2)
                A等于A减1 ()
                RAM等于A ()
                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (目的操作数 ＋ 3)
                A等于A减1 ()
                RAM等于A ()


                A等于立即数 (立即数1)
                R1等于_RAM (右操作数)
                A等于A减R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 36)
                A等于_RAM (目的操作数 ＋ 1)
                A等于A减1 ()
                RAM等于A ()
                JNC (ROM_缓存使用字节 ＋ 24)
                A等于_RAM (目的操作数 ＋ 2)
                A等于A减1 ()
                RAM等于A ()
                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (目的操作数 ＋ 3)
                A等于A减1 ()
                RAM等于A ()



            .默认
                A等于立即数 (右移 (立即数1, 24))
                R1等于_RAM (右操作数 ＋ 3)
                A等于A减R1 ()
                _RAM等于A (目的操作数 ＋ 3)


                A等于立即数 (右移 (立即数1, 16))
                R1等于_RAM (右操作数 ＋ 2)
                A等于A减R1 ()
                _RAM等于A (目的操作数 ＋ 2)

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (目的操作数 ＋ 3)
                A等于A减1 ()
                RAM等于A ()


                A等于立即数 (右移 (立即数1, 8))
                R1等于_RAM (右操作数 ＋ 1)
                A等于A减R1 ()
                _RAM等于A (目的操作数 ＋ 1)

                JNC (ROM_缓存使用字节 ＋ 24)
                A等于_RAM (目的操作数 ＋ 2)
                A等于A减1 ()
                RAM等于A ()
                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (目的操作数 ＋ 3)
                A等于A减1 ()
                RAM等于A ()


                A等于立即数 (立即数1)
                R1等于_RAM (右操作数)
                A等于A减R1 ()
                _RAM等于A (目的操作数)

                JNC (ROM_缓存使用字节 ＋ 36)
                A等于_RAM (目的操作数 ＋ 1)
                A等于A减1 ()
                RAM等于A ()
                JNC (ROM_缓存使用字节 ＋ 24)
                A等于_RAM (目的操作数 ＋ 2)
                A等于A减1 ()
                RAM等于A ()
                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (目的操作数 ＋ 3)
                A等于A减1 ()
                RAM等于A ()


            .判断结束





        .判断结束



        状态 ＝ “完成”



    .判断 ((右移 (目的操作数, 16) ＝ #无符号char指针 或 右移 (目的操作数, 16) ＝ #有符号char指针) 且 (右移 (左操作数, 16) ＝ #无符号char数组 或 右移 (左操作数, 16) ＝ #有符号char数组) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC 或 右移 (右操作数, 16) ＝ #ACC))


        .判断开始 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char)

            A等于立即数 (立即数1)
            R1等于_RAM (右操作数)
            A等于A减R1 ()
            _RAM等于A (目的操作数)

            A等于立即数 (右移 (立即数1, 8))
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A减1 ()
            _RAM等于A (目的操作数 ＋ 1)

        .默认
            R1等于A ()
            A等于立即数 (立即数1)
            A等于A减R1 ()
            _RAM等于A (目的操作数)

            A等于立即数 (右移 (立即数1, 8))
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A减1 ()
            _RAM等于A (目的操作数 ＋ 1)

        .判断结束


        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #无符号char指针 或 右移 (目的操作数, 16) ＝ #有符号char指针) 且 (右移 (左操作数, 16) ＝ #无符号char数组 或 右移 (左操作数, 16) ＝ #有符号char数组) 且 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int))

        A等于立即数 (立即数1)
        R1等于_RAM (右操作数)
        A等于A减R1 ()
        _RAM等于A (目的操作数)

        A等于立即数 (右移 (立即数1, 8))
        R1等于_RAM (右操作数 ＋ 1)
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A减1 ()
        A等于A减R1 ()
        _RAM等于A (目的操作数 ＋ 1)

        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #无符号int指针 或 右移 (目的操作数, 16) ＝ #有符号int指针) 且 (右移 (左操作数, 16) ＝ #无符号int数组 或 右移 (左操作数, 16) ＝ #有符号int数组) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC 或 右移 (右操作数, 16) ＝ #ACC))

        .判断开始 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char)

            A等于_RAM (右操作数)
            R1等于RAM ()
            A等于A加R1 ()
            R1等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于立即数 (1)
            JMP (ROM_缓存使用字节 ＋ 7)
            A等于立即数 (0)

            _RAM等于A (目的操作数 ＋ 1)

            A等于立即数 (立即数1)
            A等于A减R1 ()
            _RAM等于A (目的操作数)

            A等于立即数 (右移 (立即数1, 8))
            R1等于_RAM (目的操作数 ＋ 1)
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A减1 ()
            A等于A减R1 ()
            _RAM等于A (目的操作数 ＋ 1)


        .默认
            R1等于A ()
            A等于A加R1 ()
            R1等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于立即数 (1)
            JMP (ROM_缓存使用字节 ＋ 7)
            A等于立即数 (0)

            _RAM等于A (目的操作数 ＋ 1)

            A等于立即数 (立即数1)
            A等于A减R1 ()
            _RAM等于A (目的操作数)

            A等于立即数 (右移 (立即数1, 8))
            R1等于_RAM (目的操作数 ＋ 1)
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A减1 ()
            A等于A减R1 ()
            _RAM等于A (目的操作数 ＋ 1)

        .判断结束


        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #无符号int指针 或 右移 (目的操作数, 16) ＝ #有符号int指针) 且 (右移 (左操作数, 16) ＝ #无符号int数组 或 右移 (左操作数, 16) ＝ #有符号int数组) 且 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int))

        A等于_RAM (右操作数 ＋ 1)
        R1等于RAM ()
        A等于A加R1 ()
        _RAM等于A (目的操作数 ＋ 1)

        A等于_RAM (右操作数)
        R1等于RAM ()
        A等于A加R1 ()
        R1等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数 ＋ 1)
        A等于A加1 ()
        RAM等于A ()

        A等于立即数 (立即数1)
        A等于A减R1 ()
        _RAM等于A (目的操作数)

        A等于立即数 (右移 (立即数1, 8))
        R1等于_RAM (目的操作数 ＋ 1)
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A减1 ()
        A等于A减R1 ()
        _RAM等于A (目的操作数 ＋ 1)


        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #无符号长int指针 或 右移 (目的操作数, 16) ＝ #有符号长int指针) 且 (右移 (左操作数, 16) ＝ #无符号长int数组 或 右移 (左操作数, 16) ＝ #有符号长int数组) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC 或 右移 (右操作数, 16) ＝ #ACC))

        .判断开始 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char)

            A等于_RAM (右操作数)
            R1等于RAM ()
            A等于A加R1 ()
            R1等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于立即数 (2)
            JMP (ROM_缓存使用字节 ＋ 7)
            A等于立即数 (0)

            _RAM等于A (目的操作数 ＋ 1)

            A等于立即数 (0)
            A等于A加R1 ()
            A等于A加R1 ()
            R1等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 1)
            A等于A加1 ()
            RAM等于A ()

            A等于立即数 (立即数1)
            A等于A减R1 ()
            _RAM等于A (目的操作数)

            A等于立即数 (右移 (立即数1, 8))
            R1等于_RAM (目的操作数 ＋ 1)
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A减1 ()
            A等于A减R1 ()
            _RAM等于A (目的操作数 ＋ 1)


        .默认
            R1等于A ()
            A等于A加R1 ()
            R1等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于立即数 (2)
            JMP (ROM_缓存使用字节 ＋ 7)
            A等于立即数 (0)

            _RAM等于A (目的操作数 ＋ 1)

            A等于立即数 (0)
            A等于A加R1 ()
            A等于A加R1 ()
            R1等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 1)
            A等于A加1 ()
            RAM等于A ()

            A等于立即数 (立即数1)
            A等于A减R1 ()
            _RAM等于A (目的操作数)

            A等于立即数 (右移 (立即数1, 8))
            R1等于_RAM (目的操作数 ＋ 1)
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A减1 ()
            A等于A减R1 ()
            _RAM等于A (目的操作数 ＋ 1)

        .判断结束



        状态 ＝ “完成”



    .判断 ((右移 (目的操作数, 16) ＝ #无符号长int指针 或 右移 (目的操作数, 16) ＝ #有符号长int指针) 且 (右移 (左操作数, 16) ＝ #无符号长int数组 或 右移 (左操作数, 16) ＝ #有符号长int数组) 且 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int))

        A等于_RAM (右操作数 ＋ 1)
        R1等于RAM ()
        A等于A加R1 ()
        R1等于A ()
        A等于A加R1 ()
        _RAM等于A (目的操作数 ＋ 1)

        A等于_RAM (右操作数)
        R1等于RAM ()
        A等于A加R1 ()
        R1等于A ()

        JNC (ROM_缓存使用字节 ＋ 13)
        A等于_RAM (目的操作数 ＋ 1)
        A等于A加1 ()
        A等于A加1 ()
        RAM等于A ()

        A等于立即数 (0)
        A等于A加R1 ()
        A等于A加R1 ()
        R1等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数 ＋ 1)
        A等于A加1 ()
        RAM等于A ()


        A等于立即数 (立即数1)
        A等于A减R1 ()
        _RAM等于A (目的操作数)

        A等于立即数 (右移 (立即数1, 8))
        R1等于_RAM (目的操作数 ＋ 1)
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A减1 ()
        A等于A减R1 ()
        _RAM等于A (目的操作数 ＋ 1)


        状态 ＝ “完成”



    .判断 ((右移 (目的操作数, 16) ＝ #无符号char指针 或 右移 (目的操作数, 16) ＝ #有符号char指针) 且 (右移 (左操作数, 16) ＝ #无符号char指针 或 右移 (左操作数, 16) ＝ #有符号char指针) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC 或 右移 (右操作数, 16) ＝ #ACC))

        .判断开始 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char)

            .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535))

                R1等于_RAM (右操作数)
                A等于_RAM (左操作数)
                A等于A减R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (左操作数 ＋ 1)
                A等于A减1 ()
                RAM等于A ()


            .默认
                A等于_RAM (左操作数)
                R1等于_RAM (右操作数)
                A等于A减R1 ()
                _RAM等于A (目的操作数)

                A等于_RAM (左操作数 ＋ 1)
                JNC (ROM_缓存使用字节 ＋ 6)
                A等于A减1 ()
                _RAM等于A (目的操作数 ＋ 1)
            .判断结束



        .默认

            .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535))

                R1等于A ()
                A等于_RAM (左操作数)
                A等于A减R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (左操作数 ＋ 1)
                A等于A减1 ()
                RAM等于A ()


            .默认
                R1等于A ()
                A等于_RAM (左操作数)
                A等于A减R1 ()
                _RAM等于A (目的操作数)

                A等于_RAM (左操作数 ＋ 1)
                JNC (ROM_缓存使用字节 ＋ 6)
                A等于A减1 ()
                _RAM等于A (目的操作数 ＋ 1)

            .判断结束


        .判断结束


        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #无符号char指针 或 右移 (目的操作数, 16) ＝ #有符号char指针) 且 (右移 (左操作数, 16) ＝ #无符号char指针 或 右移 (左操作数, 16) ＝ #有符号char指针) 且 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int))

        .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535))

            R1等于_RAM (右操作数)
            A等于_RAM (左操作数)
            A等于A减R1 ()
            RAM等于A ()

            A等于_RAM (左操作数 ＋ 1)
            R1等于_RAM (右操作数 ＋ 1)
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A减1 ()
            A等于A减R1 ()
            _RAM等于A (目的操作数 ＋ 1)


        .默认
            A等于_RAM (左操作数)
            R1等于_RAM (右操作数)
            A等于A减R1 ()
            _RAM等于A (目的操作数)

            A等于_RAM (左操作数 ＋ 1)
            R1等于_RAM (右操作数 ＋ 1)
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A减1 ()
            A等于A减R1 ()
            _RAM等于A (目的操作数 ＋ 1)

        .判断结束


        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #无符号int指针 或 右移 (目的操作数, 16) ＝ #有符号int指针) 且 (右移 (左操作数, 16) ＝ #无符号int指针 或 右移 (左操作数, 16) ＝ #有符号int指针) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC 或 右移 (右操作数, 16) ＝ #ACC))

        .判断开始 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char)

            .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535))

                A等于_RAM (右操作数)
                R1等于RAM ()
                A等于A加R1 ()
                R1等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于立即数 (1)
                JMP (ROM_缓存使用字节 ＋ 7)
                A等于立即数 (0)

                _RAM等于A (#RAM缓存1)

                A等于_RAM (左操作数)
                A等于A减R1 ()
                RAM等于A ()

                A等于_RAM (左操作数 ＋ 1)
                R1等于_RAM (#RAM缓存1)
                JNC (ROM_缓存使用字节 ＋ 6)
                A等于A减1 ()
                A等于A减R1 ()
                _RAM等于A (目的操作数 ＋ 1)


            .默认
                A等于_RAM (右操作数)
                R1等于RAM ()
                A等于A加R1 ()
                R1等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于立即数 (1)
                JMP (ROM_缓存使用字节 ＋ 7)
                A等于立即数 (0)

                _RAM等于A (目的操作数 ＋ 1)

                A等于_RAM (左操作数)
                A等于A减R1 ()
                _RAM等于A (目的操作数)

                A等于_RAM (左操作数 ＋ 1)
                R1等于_RAM (目的操作数 ＋ 1)
                JNC (ROM_缓存使用字节 ＋ 6)
                A等于A减1 ()
                A等于A减R1 ()
                _RAM等于A (目的操作数 ＋ 1)

            .判断结束



        .默认

            .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535))

                R1等于A ()
                A等于A加R1 ()
                R1等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于立即数 (1)
                JMP (ROM_缓存使用字节 ＋ 7)
                A等于立即数 (0)

                _RAM等于A (#RAM缓存1)

                A等于_RAM (左操作数)
                A等于A减R1 ()
                RAM等于A ()

                A等于_RAM (左操作数 ＋ 1)
                R1等于_RAM (#RAM缓存1)
                JNC (ROM_缓存使用字节 ＋ 6)
                A等于A减1 ()
                A等于A减R1 ()
                _RAM等于A (目的操作数 ＋ 1)


            .默认
                R1等于A ()
                A等于A加R1 ()
                R1等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于立即数 (1)
                JMP (ROM_缓存使用字节 ＋ 7)
                A等于立即数 (0)

                _RAM等于A (目的操作数 ＋ 1)

                A等于_RAM (左操作数)
                A等于A减R1 ()
                _RAM等于A (目的操作数)

                A等于_RAM (左操作数 ＋ 1)
                R1等于_RAM (目的操作数 ＋ 1)
                JNC (ROM_缓存使用字节 ＋ 6)
                A等于A减1 ()
                A等于A减R1 ()
                _RAM等于A (目的操作数 ＋ 1)

            .判断结束




        .判断结束


        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #无符号int指针 或 右移 (目的操作数, 16) ＝ #有符号int指针) 且 (右移 (左操作数, 16) ＝ #无符号int指针 或 右移 (左操作数, 16) ＝ #有符号int指针) 且 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int))

        .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535))

            A等于_RAM (右操作数 ＋ 1)
            R1等于RAM ()
            A等于A加R1 ()
            _RAM等于A (#RAM缓存1)

            A等于_RAM (右操作数)
            R1等于RAM ()
            A等于A加R1 ()
            R1等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存1)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (左操作数)
            A等于A减R1 ()
            RAM等于A ()

            A等于_RAM (左操作数 ＋ 1)
            R1等于_RAM (#RAM缓存1)
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A减1 ()
            A等于A减R1 ()
            _RAM等于A (目的操作数 ＋ 1)



        .默认
            A等于_RAM (右操作数 ＋ 1)
            R1等于RAM ()
            A等于A加R1 ()
            _RAM等于A (目的操作数 ＋ 1)

            A等于_RAM (右操作数)
            R1等于RAM ()
            A等于A加R1 ()
            R1等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 1)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (左操作数)
            A等于A减R1 ()
            _RAM等于A (目的操作数)

            A等于_RAM (左操作数 ＋ 1)
            R1等于_RAM (目的操作数 ＋ 1)
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A减1 ()
            A等于A减R1 ()
            _RAM等于A (目的操作数 ＋ 1)

        .判断结束





        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #无符号长int指针 或 右移 (目的操作数, 16) ＝ #有符号长int指针) 且 (右移 (左操作数, 16) ＝ #无符号长int指针 或 右移 (左操作数, 16) ＝ #有符号长int指针) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC 或 右移 (右操作数, 16) ＝ #ACC))

        .判断开始 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char)

            .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535))

                A等于_RAM (右操作数)
                R1等于RAM ()
                A等于A加R1 ()
                R1等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于立即数 (2)
                JMP (ROM_缓存使用字节 ＋ 7)
                A等于立即数 (0)

                _RAM等于A (#RAM缓存1)

                A等于立即数 (0)
                A等于A加R1 ()
                A等于A加R1 ()
                R1等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (#RAM缓存1)
                A等于A加1 ()
                RAM等于A ()

                A等于_RAM (左操作数)
                A等于A减R1 ()
                RAM等于A ()

                A等于_RAM (左操作数 ＋ 1)
                R1等于_RAM (#RAM缓存1)
                JNC (ROM_缓存使用字节 ＋ 6)
                A等于A减1 ()
                A等于A减R1 ()
                _RAM等于A (目的操作数 ＋ 1)


            .默认
                A等于_RAM (右操作数)
                R1等于RAM ()
                A等于A加R1 ()
                R1等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于立即数 (2)
                JMP (ROM_缓存使用字节 ＋ 7)
                A等于立即数 (0)

                _RAM等于A (目的操作数 ＋ 1)

                A等于立即数 (0)
                A等于A加R1 ()
                A等于A加R1 ()
                R1等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (目的操作数 ＋ 1)
                A等于A加1 ()
                RAM等于A ()

                A等于_RAM (左操作数)
                A等于A减R1 ()
                _RAM等于A (目的操作数)

                A等于_RAM (左操作数 ＋ 1)
                R1等于_RAM (目的操作数 ＋ 1)
                JNC (ROM_缓存使用字节 ＋ 6)
                A等于A减1 ()
                A等于A减R1 ()
                _RAM等于A (目的操作数 ＋ 1)

            .判断结束




        .默认

            .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535))

                R1等于A ()
                A等于A加R1 ()
                R1等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于立即数 (2)
                JMP (ROM_缓存使用字节 ＋ 7)
                A等于立即数 (0)

                _RAM等于A (#RAM缓存1)

                A等于立即数 (0)
                A等于A加R1 ()
                A等于A加R1 ()
                R1等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (#RAM缓存1)
                A等于A加1 ()
                RAM等于A ()

                A等于_RAM (左操作数)
                A等于A减R1 ()
                RAM等于A ()

                A等于_RAM (左操作数 ＋ 1)
                R1等于_RAM (#RAM缓存1)
                JNC (ROM_缓存使用字节 ＋ 6)
                A等于A减1 ()
                A等于A减R1 ()
                _RAM等于A (目的操作数 ＋ 1)


            .默认
                R1等于A ()
                A等于A加R1 ()
                R1等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于立即数 (2)
                JMP (ROM_缓存使用字节 ＋ 7)
                A等于立即数 (0)

                _RAM等于A (目的操作数 ＋ 1)

                A等于立即数 (0)
                A等于A加R1 ()
                A等于A加R1 ()
                R1等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (目的操作数 ＋ 1)
                A等于A加1 ()
                RAM等于A ()

                A等于_RAM (左操作数)
                A等于A减R1 ()
                _RAM等于A (目的操作数)

                A等于_RAM (左操作数 ＋ 1)
                R1等于_RAM (目的操作数 ＋ 1)
                JNC (ROM_缓存使用字节 ＋ 6)
                A等于A减1 ()
                A等于A减R1 ()
                _RAM等于A (目的操作数 ＋ 1)

            .判断结束




        .判断结束



        状态 ＝ “完成”



    .判断 ((右移 (目的操作数, 16) ＝ #无符号长int指针 或 右移 (目的操作数, 16) ＝ #有符号长int指针) 且 (右移 (左操作数, 16) ＝ #无符号长int指针 或 右移 (左操作数, 16) ＝ #有符号长int指针) 且 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int))

        .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535))

            A等于_RAM (右操作数 ＋ 1)
            R1等于RAM ()
            A等于A加R1 ()
            R1等于A ()
            A等于A加R1 ()
            _RAM等于A (#RAM缓存1)

            A等于_RAM (右操作数)
            R1等于RAM ()
            A等于A加R1 ()
            R1等于A ()

            JNC (ROM_缓存使用字节 ＋ 13)
            A等于_RAM (#RAM缓存1)
            A等于A加1 ()
            A等于A加1 ()
            RAM等于A ()

            A等于立即数 (0)
            A等于A加R1 ()
            A等于A加R1 ()
            R1等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存1)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (左操作数)
            A等于A减R1 ()
            RAM等于A ()

            A等于_RAM (左操作数 ＋ 1)
            R1等于_RAM (#RAM缓存1)
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A减1 ()
            A等于A减R1 ()
            _RAM等于A (目的操作数 ＋ 1)



        .默认
            A等于_RAM (右操作数 ＋ 1)
            R1等于RAM ()
            A等于A加R1 ()
            R1等于A ()
            A等于A加R1 ()
            _RAM等于A (目的操作数 ＋ 1)

            A等于_RAM (右操作数)
            R1等于RAM ()
            A等于A加R1 ()
            R1等于A ()

            JNC (ROM_缓存使用字节 ＋ 13)
            A等于_RAM (目的操作数 ＋ 1)
            A等于A加1 ()
            A等于A加1 ()
            RAM等于A ()

            A等于立即数 (0)
            A等于A加R1 ()
            A等于A加R1 ()
            R1等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 1)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (左操作数)
            A等于A减R1 ()
            _RAM等于A (目的操作数)

            A等于_RAM (左操作数 ＋ 1)
            R1等于_RAM (目的操作数 ＋ 1)
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A减1 ()
            A等于A减R1 ()
            _RAM等于A (目的操作数 ＋ 1)

        .判断结束



        状态 ＝ “完成”


    .默认
        状态 ＝ “二元式机器码生成_-_运算类型错误或不存在...~!- -”
    .判断结束






.判断 (运算符 ＝ “*”)

    .判断开始 (右移 (左操作数, 16) ＝ #立即数)
        立即数1 ＝ 立即数值 [位与 (左操作数, 65535) ＋ 1]
    .判断 (右移 (左操作数, 16) ＝ #常量)
        立即数1 ＝ 常量值 [位与 (左操作数, 65535) ＋ 1]
    .判断 (右移 (左操作数, 16) ＝ #无符号char数组 或 右移 (左操作数, 16) ＝ #有符号char数组 或 右移 (左操作数, 16) ＝ #无符号int数组 或 右移 (左操作数, 16) ＝ #有符号int数组 或 右移 (左操作数, 16) ＝ #无符号长int数组 或 右移 (左操作数, 16) ＝ #有符号长int数组)
        立即数1 ＝ 位与 (左操作数, 65535)
    .判断 (右移 (左操作数, 16) ＝ 0)
        立即数1 ＝ 位与 (左操作数, 65535)
        左操作数 ＝ #立即数 × 65536
    .默认

    .判断结束


    .判断开始 (右移 (右操作数, 16) ＝ #立即数)
        立即数2 ＝ 立即数值 [位与 (右操作数, 65535) ＋ 1]
    .判断 (右移 (右操作数, 16) ＝ #常量)
        立即数2 ＝ 常量值 [位与 (右操作数, 65535) ＋ 1]
    .判断 (右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组)
        立即数2 ＝ 位与 (右操作数, 65535)
    .判断 (右移 (右操作数, 16) ＝ 0)
        立即数2 ＝ 位与 (右操作数, 65535)
        右操作数 ＝ #立即数 × 65536
    .默认

    .判断结束





    .判断开始 ((右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char 或 右移 (目的操作数, 16) ＝ #无符号ACC 或 右移 (目的操作数, 16) ＝ #有符号ACC 或 右移 (目的操作数, 16) ＝ #ACC) 且 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char))

        A等于_RAM (左操作数)
        _RAM等于A (#乘法器_H)
        A等于_RAM (右操作数)
        _RAM等于A (#乘法器_L)
        A等于RAM ()
        .如果真 (右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char)
            _RAM等于A (目的操作数)
        .如果真结束


        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #无符号int 或 右移 (目的操作数, 16) ＝ #有符号int) 且 (右移 (左操作数, 16) ＝ #无符号int 且 右移 (右操作数, 16) ＝ #有符号int 或 右移 (左操作数, 16) ＝ #有符号int 且 右移 (右操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #无符号int 且 右移 (右操作数, 16) ＝ #无符号int))

        .判断开始 (位与 (目的操作数, 65535) ≠ 位与 (左操作数, 65535) 且 位与 (目的操作数, 65535) ≠ 位与 (右操作数, 65535))

            A等于_RAM (左操作数)
            _RAM等于A (#乘法器_L)
            A等于_RAM (右操作数)
            _RAM等于A (#乘法器_H)

            R1等于RAM ()
            A等于_RAM (#乘法器_L)
            _RAM等于A (目的操作数)


            A等于_RAM (左操作数 ＋ 1)
            _RAM等于A (#乘法器_H)
            A等于_RAM (右操作数)
            _RAM等于A (#乘法器_L)

            A等于RAM ()
            A等于A加R1 ()
            R1等于A ()

            A等于_RAM (左操作数)
            _RAM等于A (#乘法器_H)
            A等于_RAM (右操作数 ＋ 1)
            _RAM等于A (#乘法器_L)

            A等于RAM ()
            A等于A加R1 ()
            _RAM等于A (目的操作数 ＋ 1)


        .默认
            A等于_RAM (左操作数)
            _RAM等于A (#乘法器_L)
            A等于_RAM (右操作数)
            _RAM等于A (#乘法器_H)

            R1等于RAM ()
            A等于_RAM (#乘法器_L)
            _RAM等于A (#RAM缓存1)


            A等于_RAM (左操作数 ＋ 1)
            _RAM等于A (#乘法器_H)
            A等于_RAM (右操作数)
            _RAM等于A (#乘法器_L)

            A等于RAM ()
            A等于A加R1 ()
            R1等于A ()

            A等于_RAM (左操作数)
            _RAM等于A (#乘法器_H)
            A等于_RAM (右操作数 ＋ 1)
            _RAM等于A (#乘法器_L)

            A等于RAM ()
            A等于A加R1 ()
            _RAM等于A (目的操作数 ＋ 1)
            A等于_RAM (#RAM缓存1)
            _RAM等于A (目的操作数)

        .判断结束



        状态 ＝ “完成”




    .判断 ((右移 (目的操作数, 16) ＝ #无符号长int 或 右移 (目的操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #无符号长int 且 右移 (右操作数, 16) ＝ #有符号长int 或 右移 (左操作数, 16) ＝ #有符号长int 且 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #无符号长int 且 右移 (右操作数, 16) ＝ #无符号长int))

        .判断开始 (位与 (目的操作数, 65535) ≠ 位与 (左操作数, 65535) 且 位与 (目的操作数, 65535) ≠ 位与 (右操作数, 65535))

            A等于_RAM (左操作数)
            _RAM等于A (#乘法器_L)
            A等于_RAM (右操作数)
            _RAM等于A (#乘法器_H)

            A等于RAM ()
            _RAM等于A (目的操作数 ＋ 1)
            A等于_RAM (#乘法器_L)
            _RAM等于A (目的操作数)


            A等于_RAM (左操作数 ＋ 1)
            _RAM等于A (#乘法器_L)
            A等于_RAM (右操作数 ＋ 1)
            _RAM等于A (#乘法器_H)

            A等于RAM ()
            _RAM等于A (目的操作数 ＋ 3)
            A等于_RAM (#乘法器_L)
            _RAM等于A (目的操作数 ＋ 2)



            A等于_RAM (左操作数 ＋ 1)
            _RAM等于A (#乘法器_L)
            A等于_RAM (右操作数)
            _RAM等于A (#乘法器_H)

            A等于RAM ()
            R1等于_RAM (目的操作数 ＋ 2)
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 3)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#乘法器_L)
            R1等于_RAM (目的操作数 ＋ 1)
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 24)
            A等于_RAM (目的操作数 ＋ 2)
            A等于A加1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 3)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (左操作数)
            _RAM等于A (#乘法器_L)
            A等于_RAM (右操作数 ＋ 1)
            _RAM等于A (#乘法器_H)

            A等于RAM ()
            R1等于_RAM (目的操作数 ＋ 2)
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 3)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#乘法器_L)
            R1等于_RAM (目的操作数 ＋ 1)
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 24)
            A等于_RAM (目的操作数 ＋ 2)
            A等于A加1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 3)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (左操作数)
            _RAM等于A (#乘法器_L)
            A等于_RAM (右操作数 ＋ 2)
            _RAM等于A (#乘法器_H)

            A等于RAM ()
            R1等于_RAM (目的操作数 ＋ 3)
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (#乘法器_L)
            R1等于_RAM (目的操作数 ＋ 2)
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 3)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (左操作数 ＋ 2)
            _RAM等于A (#乘法器_L)
            A等于_RAM (右操作数)
            _RAM等于A (#乘法器_H)

            A等于RAM ()
            R1等于_RAM (目的操作数 ＋ 3)
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (#乘法器_L)
            R1等于_RAM (目的操作数 ＋ 2)
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 3)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (左操作数)
            _RAM等于A (#乘法器_H)
            A等于_RAM (右操作数 ＋ 3)
            _RAM等于A (#乘法器_L)

            A等于RAM ()
            R1等于_RAM (目的操作数 ＋ 3)
            A等于A加R1 ()
            RAM等于A ()


            A等于_RAM (左操作数 ＋ 1)
            _RAM等于A (#乘法器_H)
            A等于_RAM (右操作数 ＋ 2)
            _RAM等于A (#乘法器_L)

            A等于RAM ()
            R1等于_RAM (目的操作数 ＋ 3)
            A等于A加R1 ()
            RAM等于A ()


            A等于_RAM (左操作数 ＋ 2)
            _RAM等于A (#乘法器_H)
            A等于_RAM (右操作数 ＋ 1)
            _RAM等于A (#乘法器_L)

            A等于RAM ()
            R1等于_RAM (目的操作数 ＋ 3)
            A等于A加R1 ()
            RAM等于A ()


            A等于_RAM (左操作数 ＋ 3)
            _RAM等于A (#乘法器_H)
            A等于_RAM (右操作数)
            _RAM等于A (#乘法器_L)

            A等于RAM ()
            R1等于_RAM (目的操作数 ＋ 3)
            A等于A加R1 ()
            RAM等于A ()



        .默认
            A等于_RAM (左操作数)
            _RAM等于A (#乘法器_L)
            A等于_RAM (右操作数)
            _RAM等于A (#乘法器_H)

            A等于RAM ()
            _RAM等于A (#RAM缓存1 ＋ 1)
            A等于_RAM (#乘法器_L)
            _RAM等于A (#RAM缓存1)


            A等于_RAM (左操作数 ＋ 1)
            _RAM等于A (#乘法器_L)
            A等于_RAM (右操作数 ＋ 1)
            _RAM等于A (#乘法器_H)

            A等于RAM ()
            _RAM等于A (#RAM缓存1 ＋ 3)
            A等于_RAM (#乘法器_L)
            _RAM等于A (#RAM缓存1 ＋ 2)



            A等于_RAM (左操作数 ＋ 1)
            _RAM等于A (#乘法器_L)
            A等于_RAM (右操作数)
            _RAM等于A (#乘法器_H)

            A等于RAM ()
            R1等于_RAM (#RAM缓存1 ＋ 2)
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存1 ＋ 3)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#乘法器_L)
            R1等于_RAM (#RAM缓存1 ＋ 1)
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 24)
            A等于_RAM (#RAM缓存1 ＋ 2)
            A等于A加1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存1 ＋ 3)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (左操作数)
            _RAM等于A (#乘法器_L)
            A等于_RAM (右操作数 ＋ 1)
            _RAM等于A (#乘法器_H)

            A等于RAM ()
            R1等于_RAM (#RAM缓存1 ＋ 2)
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存1 ＋ 3)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#乘法器_L)
            R1等于_RAM (#RAM缓存1 ＋ 1)
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 24)
            A等于_RAM (#RAM缓存1 ＋ 2)
            A等于A加1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存1 ＋ 3)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (左操作数)
            _RAM等于A (#乘法器_L)
            A等于_RAM (右操作数 ＋ 2)
            _RAM等于A (#乘法器_H)

            A等于RAM ()
            R1等于_RAM (#RAM缓存1 ＋ 3)
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (#乘法器_L)
            R1等于_RAM (#RAM缓存1 ＋ 2)
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存1 ＋ 3)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (左操作数 ＋ 2)
            _RAM等于A (#乘法器_L)
            A等于_RAM (右操作数)
            _RAM等于A (#乘法器_H)

            A等于RAM ()
            R1等于_RAM (#RAM缓存1 ＋ 3)
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (#乘法器_L)
            R1等于_RAM (#RAM缓存1 ＋ 2)
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存1 ＋ 3)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (左操作数)
            _RAM等于A (#乘法器_H)
            A等于_RAM (右操作数 ＋ 3)
            _RAM等于A (#乘法器_L)

            A等于RAM ()
            R1等于_RAM (#RAM缓存1 ＋ 3)
            A等于A加R1 ()
            RAM等于A ()


            A等于_RAM (左操作数 ＋ 1)
            _RAM等于A (#乘法器_H)
            A等于_RAM (右操作数 ＋ 2)
            _RAM等于A (#乘法器_L)

            A等于RAM ()
            R1等于_RAM (#RAM缓存1 ＋ 3)
            A等于A加R1 ()
            RAM等于A ()


            A等于_RAM (左操作数 ＋ 2)
            _RAM等于A (#乘法器_H)
            A等于_RAM (右操作数 ＋ 1)
            _RAM等于A (#乘法器_L)

            A等于RAM ()
            R1等于_RAM (#RAM缓存1 ＋ 3)
            A等于A加R1 ()
            RAM等于A ()


            A等于_RAM (左操作数 ＋ 3)
            _RAM等于A (#乘法器_H)
            A等于_RAM (右操作数)
            _RAM等于A (#乘法器_L)

            A等于RAM ()
            R1等于_RAM (#RAM缓存1 ＋ 3)
            A等于A加R1 ()
            _RAM等于A (目的操作数 ＋ 3)


            A等于_RAM (#RAM缓存1)
            _RAM等于A (目的操作数)
            A等于_RAM (#RAM缓存1 ＋ 1)
            _RAM等于A (目的操作数 ＋ 1)
            A等于_RAM (#RAM缓存1 ＋ 2)
            _RAM等于A (目的操作数 ＋ 2)


        .判断结束



        状态 ＝ “完成”





    .判断 ((右移 (目的操作数, 16) ＝ #无符号int 或 右移 (目的操作数, 16) ＝ #有符号int) 且 右移 (左操作数, 16) ＝ #有符号int 且 右移 (右操作数, 16) ＝ #有符号int)

        A等于立即数 (0)
        _RAM等于A (#RAM缓存5)


        A等于_RAM (左操作数 ＋ 1)
        R1等于RAM ()
        A等于A加R1 ()

        JNC (ROM_缓存使用字节 ＋ 46)
        A等于_RAM (左操作数)
        A取反 ()
        A等于A加1 ()
        _RAM等于A (#RAM缓存2)
        A等于_RAM (左操作数 ＋ 1)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (#RAM缓存1)
        A等于_RAM (#RAM缓存5)
        A取反 ()
        RAM等于A ()
        JMP (ROM_缓存使用字节 ＋ 21)
        A等于A减R1 ()
        _RAM等于A (#RAM缓存1)
        A等于_RAM (左操作数)
        _RAM等于A (#RAM缓存2)


        A等于_RAM (右操作数 ＋ 1)
        R1等于RAM ()
        A等于A加R1 ()

        JNC (ROM_缓存使用字节 ＋ 46)
        A等于_RAM (右操作数)
        A取反 ()
        A等于A加1 ()
        _RAM等于A (#RAM缓存4)
        A等于_RAM (右操作数 ＋ 1)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (#RAM缓存3)
        A等于_RAM (#RAM缓存5)
        A取反 ()
        RAM等于A ()
        JMP (ROM_缓存使用字节 ＋ 21)
        A等于A减R1 ()
        _RAM等于A (#RAM缓存3)
        A等于_RAM (右操作数)
        _RAM等于A (#RAM缓存4)






        A等于_RAM (#RAM缓存2)
        _RAM等于A (#乘法器_L)
        A等于_RAM (#RAM缓存4)
        _RAM等于A (#乘法器_H)

        R1等于RAM ()
        A等于_RAM (#乘法器_L)
        _RAM等于A (目的操作数)


        A等于_RAM (#RAM缓存1)
        _RAM等于A (#乘法器_H)
        A等于_RAM (#RAM缓存4)
        _RAM等于A (#乘法器_L)

        A等于RAM ()
        A等于A加R1 ()
        R1等于A ()

        A等于_RAM (#RAM缓存2)
        _RAM等于A (#乘法器_H)
        A等于_RAM (#RAM缓存3)
        _RAM等于A (#乘法器_L)

        A等于RAM ()
        A等于A加R1 ()
        _RAM等于A (目的操作数 ＋ 1)






        A等于_RAM (#RAM缓存5)
        A等于A加1 ()

        JNC (ROM_缓存使用字节 ＋ 30)

        A等于_RAM (目的操作数)
        A取反 ()
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (目的操作数 ＋ 1)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (目的操作数 ＋ 1)


        状态 ＝ “完成”



    .判断 ((右移 (目的操作数, 16) ＝ #无符号长int 或 右移 (目的操作数, 16) ＝ #有符号长int) 且 右移 (左操作数, 16) ＝ #有符号长int 且 右移 (右操作数, 16) ＝ #有符号长int)

        A等于立即数 (0)
        _RAM等于A (#RAM缓存9)


        A等于_RAM (左操作数 ＋ 3)
        R1等于RAM ()
        A等于A加R1 ()

        JNC (ROM_缓存使用字节 ＋ 80)

        A等于_RAM (左操作数)
        A取反 ()
        A等于A加1 ()
        _RAM等于A (#RAM缓存4)

        A等于_RAM (左操作数 ＋ 1)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (#RAM缓存3)

        A等于_RAM (左操作数 ＋ 2)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (#RAM缓存2)

        A等于_RAM (左操作数 ＋ 3)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (#RAM缓存1)

        A等于_RAM (#RAM缓存9)
        A取反 ()
        RAM等于A ()

        JMP (ROM_缓存使用字节 ＋ 41)
        A等于A减R1 ()
        _RAM等于A (#RAM缓存1)
        A等于_RAM (左操作数 ＋ 2)
        _RAM等于A (#RAM缓存2)
        A等于_RAM (左操作数 ＋ 1)
        _RAM等于A (#RAM缓存3)
        A等于_RAM (左操作数)
        _RAM等于A (#RAM缓存4)




        A等于_RAM (右操作数 ＋ 3)
        R1等于RAM ()
        A等于A加R1 ()

        JNC (ROM_缓存使用字节 ＋ 80)

        A等于_RAM (右操作数)
        A取反 ()
        A等于A加1 ()
        _RAM等于A (#RAM缓存8)

        A等于_RAM (右操作数 ＋ 1)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (#RAM缓存7)

        A等于_RAM (右操作数 ＋ 2)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (#RAM缓存6)

        A等于_RAM (右操作数 ＋ 3)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (#RAM缓存5)

        A等于_RAM (#RAM缓存9)
        A取反 ()
        RAM等于A ()

        JMP (ROM_缓存使用字节 ＋ 41)
        A等于A减R1 ()
        _RAM等于A (#RAM缓存5)
        A等于_RAM (右操作数 ＋ 2)
        _RAM等于A (#RAM缓存6)
        A等于_RAM (右操作数 ＋ 1)
        _RAM等于A (#RAM缓存7)
        A等于_RAM (右操作数)
        _RAM等于A (#RAM缓存8)








        A等于_RAM (#RAM缓存4)
        _RAM等于A (#乘法器_L)
        A等于_RAM (#RAM缓存8)
        _RAM等于A (#乘法器_H)

        A等于RAM ()
        _RAM等于A (目的操作数 ＋ 1)
        A等于_RAM (#乘法器_L)
        _RAM等于A (目的操作数)


        A等于_RAM (#RAM缓存3)
        _RAM等于A (#乘法器_L)
        A等于_RAM (#RAM缓存7)
        _RAM等于A (#乘法器_H)

        A等于RAM ()
        _RAM等于A (目的操作数 ＋ 3)
        A等于_RAM (#乘法器_L)
        _RAM等于A (目的操作数 ＋ 2)



        A等于_RAM (#RAM缓存3)
        _RAM等于A (#乘法器_L)
        A等于_RAM (#RAM缓存8)
        _RAM等于A (#乘法器_H)

        A等于RAM ()
        R1等于_RAM (目的操作数 ＋ 2)
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数 ＋ 3)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#乘法器_L)
        R1等于_RAM (目的操作数 ＋ 1)
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 24)
        A等于_RAM (目的操作数 ＋ 2)
        A等于A加1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数 ＋ 3)
        A等于A加1 ()
        RAM等于A ()


        A等于_RAM (#RAM缓存4)
        _RAM等于A (#乘法器_L)
        A等于_RAM (#RAM缓存7)
        _RAM等于A (#乘法器_H)

        A等于RAM ()
        R1等于_RAM (目的操作数 ＋ 2)
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数 ＋ 3)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#乘法器_L)
        R1等于_RAM (目的操作数 ＋ 1)
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 24)
        A等于_RAM (目的操作数 ＋ 2)
        A等于A加1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数 ＋ 3)
        A等于A加1 ()
        RAM等于A ()


        A等于_RAM (#RAM缓存4)
        _RAM等于A (#乘法器_L)
        A等于_RAM (#RAM缓存6)
        _RAM等于A (#乘法器_H)

        A等于RAM ()
        R1等于_RAM (目的操作数 ＋ 3)
        A等于A加R1 ()
        RAM等于A ()

        A等于_RAM (#乘法器_L)
        R1等于_RAM (目的操作数 ＋ 2)
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数 ＋ 3)
        A等于A加1 ()
        RAM等于A ()


        A等于_RAM (#RAM缓存2)
        _RAM等于A (#乘法器_L)
        A等于_RAM (#RAM缓存8)
        _RAM等于A (#乘法器_H)

        A等于RAM ()
        R1等于_RAM (目的操作数 ＋ 3)
        A等于A加R1 ()
        RAM等于A ()

        A等于_RAM (#乘法器_L)
        R1等于_RAM (目的操作数 ＋ 2)
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数 ＋ 3)
        A等于A加1 ()
        RAM等于A ()


        A等于_RAM (#RAM缓存4)
        _RAM等于A (#乘法器_H)
        A等于_RAM (#RAM缓存5)
        _RAM等于A (#乘法器_L)

        A等于RAM ()
        R1等于_RAM (目的操作数 ＋ 3)
        A等于A加R1 ()
        RAM等于A ()


        A等于_RAM (#RAM缓存3)
        _RAM等于A (#乘法器_H)
        A等于_RAM (#RAM缓存6)
        _RAM等于A (#乘法器_L)

        A等于RAM ()
        R1等于_RAM (目的操作数 ＋ 3)
        A等于A加R1 ()
        RAM等于A ()


        A等于_RAM (#RAM缓存2)
        _RAM等于A (#乘法器_H)
        A等于_RAM (#RAM缓存7)
        _RAM等于A (#乘法器_L)

        A等于RAM ()
        R1等于_RAM (目的操作数 ＋ 3)
        A等于A加R1 ()
        RAM等于A ()


        A等于_RAM (#RAM缓存1)
        _RAM等于A (#乘法器_H)
        A等于_RAM (#RAM缓存8)
        _RAM等于A (#乘法器_L)

        A等于RAM ()
        R1等于_RAM (目的操作数 ＋ 3)
        A等于A加R1 ()
        RAM等于A ()






        A等于_RAM (#RAM缓存9)
        A等于A加1 ()

        JNC (ROM_缓存使用字节 ＋ 64)

        A等于_RAM (目的操作数)
        A取反 ()
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (目的操作数 ＋ 1)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (目的操作数 ＋ 1)

        A等于_RAM (目的操作数 ＋ 2)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (目的操作数 ＋ 2)

        A等于_RAM (目的操作数 ＋ 3)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (目的操作数 ＋ 3)


        状态 ＝ “完成”






    .判断 ((右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char 或 右移 (目的操作数, 16) ＝ #无符号ACC 或 右移 (目的操作数, 16) ＝ #有符号ACC 或 右移 (目的操作数, 16) ＝ #ACC) 且 ((右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char) 或 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC) 且 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char)))

        .如果真 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char)
            计数1 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 计数1
        .如果真结束


        _RAM等于A (#乘法器_H)
        A等于_RAM (右操作数)
        _RAM等于A (#乘法器_L)
        A等于RAM ()
        .如果真 (右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char)
            _RAM等于A (目的操作数)
        .如果真结束


        状态 ＝ “完成”



    .判断 ((右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char 或 右移 (目的操作数, 16) ＝ #无符号ACC 或 右移 (目的操作数, 16) ＝ #有符号ACC 或 右移 (目的操作数, 16) ＝ #ACC) 且 ((右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)))

        .如果真 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)
            计数1 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 计数1
            立即数2 ＝ 立即数1
        .如果真结束


        _RAM等于A (#乘法器_H)
        A等于立即数 (立即数2)
        _RAM等于A (#乘法器_L)
        A等于RAM ()
        .如果真 (右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char)
            _RAM等于A (目的操作数)
        .如果真结束


        状态 ＝ “完成”



    .判断 ((右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char 或 右移 (目的操作数, 16) ＝ #无符号ACC 或 右移 (目的操作数, 16) ＝ #有符号ACC 或 右移 (目的操作数, 16) ＝ #ACC) 且 ((右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)))

        .如果真 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)
            计数1 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 计数1
            立即数2 ＝ 立即数1
        .如果真结束


        A等于_RAM (左操作数)
        _RAM等于A (#乘法器_H)
        A等于立即数 (立即数2)
        _RAM等于A (#乘法器_L)
        A等于RAM ()
        .如果真 (右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char)
            _RAM等于A (目的操作数)
        .如果真结束


        状态 ＝ “完成”



    .判断 ((右移 (目的操作数, 16) ＝ #无符号int 或 右移 (目的操作数, 16) ＝ #有符号int) 且 (右移 (左操作数, 16) ＝ #无符号int 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 右移 (右操作数, 16) ＝ #无符号int 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)))

        .如果真 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)
            计数1 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 计数1
            立即数2 ＝ 立即数1
        .如果真结束


        .判断开始 (位与 (目的操作数, 65535) ≠ 位与 (左操作数, 65535))

            A等于_RAM (左操作数)
            _RAM等于A (#乘法器_L)
            A等于立即数 (立即数2)
            _RAM等于A (#乘法器_H)

            R1等于RAM ()
            A等于_RAM (#乘法器_L)
            _RAM等于A (目的操作数)


            A等于_RAM (左操作数 ＋ 1)
            _RAM等于A (#乘法器_H)
            A等于立即数 (立即数2)
            _RAM等于A (#乘法器_L)

            A等于RAM ()
            A等于A加R1 ()
            R1等于A ()

            A等于_RAM (左操作数)
            _RAM等于A (#乘法器_H)
            A等于立即数 (右移 (立即数2, 8))
            _RAM等于A (#乘法器_L)

            A等于RAM ()
            A等于A加R1 ()
            _RAM等于A (目的操作数 ＋ 1)


        .默认
            A等于_RAM (左操作数)
            _RAM等于A (#乘法器_L)
            A等于立即数 (立即数2)
            _RAM等于A (#乘法器_H)

            R1等于RAM ()
            A等于_RAM (#乘法器_L)
            _RAM等于A (#RAM缓存1)


            A等于_RAM (左操作数 ＋ 1)
            _RAM等于A (#乘法器_H)
            A等于立即数 (立即数2)
            _RAM等于A (#乘法器_L)

            A等于RAM ()
            A等于A加R1 ()
            R1等于A ()

            A等于_RAM (左操作数)
            _RAM等于A (#乘法器_H)
            A等于立即数 (右移 (立即数2, 8))
            _RAM等于A (#乘法器_L)

            A等于RAM ()
            A等于A加R1 ()
            _RAM等于A (目的操作数 ＋ 1)
            A等于_RAM (#RAM缓存1)
            _RAM等于A (目的操作数)

        .判断结束


        状态 ＝ “完成”




    .判断 ((右移 (目的操作数, 16) ＝ #无符号长int 或 右移 (目的操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #无符号长int 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 右移 (右操作数, 16) ＝ #无符号长int 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)))

        .如果真 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)
            计数1 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 计数1
            立即数2 ＝ 立即数1
        .如果真结束


        .判断开始 (位与 (目的操作数, 65535) ≠ 位与 (左操作数, 65535))

            A等于_RAM (左操作数)
            _RAM等于A (#乘法器_L)
            A等于立即数 (立即数2)
            _RAM等于A (#乘法器_H)

            A等于RAM ()
            _RAM等于A (目的操作数 ＋ 1)
            A等于_RAM (#乘法器_L)
            _RAM等于A (目的操作数)


            A等于_RAM (左操作数 ＋ 1)
            _RAM等于A (#乘法器_L)
            A等于立即数 (右移 (立即数2, 8))
            _RAM等于A (#乘法器_H)

            A等于RAM ()
            _RAM等于A (目的操作数 ＋ 3)
            A等于_RAM (#乘法器_L)
            _RAM等于A (目的操作数 ＋ 2)



            A等于_RAM (左操作数 ＋ 1)
            _RAM等于A (#乘法器_L)
            A等于立即数 (立即数2)
            _RAM等于A (#乘法器_H)

            A等于RAM ()
            R1等于_RAM (目的操作数 ＋ 2)
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 3)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#乘法器_L)
            R1等于_RAM (目的操作数 ＋ 1)
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 24)
            A等于_RAM (目的操作数 ＋ 2)
            A等于A加1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 3)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (左操作数)
            _RAM等于A (#乘法器_L)
            A等于立即数 (右移 (立即数2, 8))
            _RAM等于A (#乘法器_H)

            A等于RAM ()
            R1等于_RAM (目的操作数 ＋ 2)
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 3)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#乘法器_L)
            R1等于_RAM (目的操作数 ＋ 1)
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 24)
            A等于_RAM (目的操作数 ＋ 2)
            A等于A加1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 3)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (左操作数)
            _RAM等于A (#乘法器_L)
            A等于立即数 (右移 (立即数2, 16))
            _RAM等于A (#乘法器_H)

            A等于RAM ()
            R1等于_RAM (目的操作数 ＋ 3)
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (#乘法器_L)
            R1等于_RAM (目的操作数 ＋ 2)
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 3)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (左操作数 ＋ 2)
            _RAM等于A (#乘法器_L)
            A等于立即数 (立即数2)
            _RAM等于A (#乘法器_H)

            A等于RAM ()
            R1等于_RAM (目的操作数 ＋ 3)
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (#乘法器_L)
            R1等于_RAM (目的操作数 ＋ 2)
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 3)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (左操作数)
            _RAM等于A (#乘法器_H)
            A等于立即数 (右移 (立即数2, 24))
            _RAM等于A (#乘法器_L)

            A等于RAM ()
            R1等于_RAM (目的操作数 ＋ 3)
            A等于A加R1 ()
            RAM等于A ()


            A等于_RAM (左操作数 ＋ 1)
            _RAM等于A (#乘法器_H)
            A等于立即数 (右移 (立即数2, 16))
            _RAM等于A (#乘法器_L)

            A等于RAM ()
            R1等于_RAM (目的操作数 ＋ 3)
            A等于A加R1 ()
            RAM等于A ()


            A等于_RAM (左操作数 ＋ 2)
            _RAM等于A (#乘法器_H)
            A等于立即数 (右移 (立即数2, 8))
            _RAM等于A (#乘法器_L)

            A等于RAM ()
            R1等于_RAM (目的操作数 ＋ 3)
            A等于A加R1 ()
            RAM等于A ()


            A等于_RAM (左操作数 ＋ 3)
            _RAM等于A (#乘法器_H)
            A等于立即数 (立即数2)
            _RAM等于A (#乘法器_L)

            A等于RAM ()
            R1等于_RAM (目的操作数 ＋ 3)
            A等于A加R1 ()
            RAM等于A ()



        .默认
            A等于_RAM (左操作数)
            _RAM等于A (#乘法器_L)
            A等于立即数 (立即数2)
            _RAM等于A (#乘法器_H)

            A等于RAM ()
            _RAM等于A (#RAM缓存1 ＋ 1)
            A等于_RAM (#乘法器_L)
            _RAM等于A (#RAM缓存1)


            A等于_RAM (左操作数 ＋ 1)
            _RAM等于A (#乘法器_L)
            A等于立即数 (右移 (立即数2, 8))
            _RAM等于A (#乘法器_H)

            A等于RAM ()
            _RAM等于A (#RAM缓存1 ＋ 3)
            A等于_RAM (#乘法器_L)
            _RAM等于A (#RAM缓存1 ＋ 2)



            A等于_RAM (左操作数 ＋ 1)
            _RAM等于A (#乘法器_L)
            A等于立即数 (立即数2)
            _RAM等于A (#乘法器_H)

            A等于RAM ()
            R1等于_RAM (#RAM缓存1 ＋ 2)
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存1 ＋ 3)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#乘法器_L)
            R1等于_RAM (#RAM缓存1 ＋ 1)
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 24)
            A等于_RAM (#RAM缓存1 ＋ 2)
            A等于A加1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存1 ＋ 3)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (左操作数)
            _RAM等于A (#乘法器_L)
            A等于立即数 (右移 (立即数2, 8))
            _RAM等于A (#乘法器_H)

            A等于RAM ()
            R1等于_RAM (#RAM缓存1 ＋ 2)
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存1 ＋ 3)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#乘法器_L)
            R1等于_RAM (#RAM缓存1 ＋ 1)
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 24)
            A等于_RAM (#RAM缓存1 ＋ 2)
            A等于A加1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存1 ＋ 3)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (左操作数)
            _RAM等于A (#乘法器_L)
            A等于立即数 (右移 (立即数2, 16))
            _RAM等于A (#乘法器_H)

            A等于RAM ()
            R1等于_RAM (#RAM缓存1 ＋ 3)
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (#乘法器_L)
            R1等于_RAM (#RAM缓存1 ＋ 2)
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存1 ＋ 3)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (左操作数 ＋ 2)
            _RAM等于A (#乘法器_L)
            A等于立即数 (立即数2)
            _RAM等于A (#乘法器_H)

            A等于RAM ()
            R1等于_RAM (#RAM缓存1 ＋ 3)
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (#乘法器_L)
            R1等于_RAM (#RAM缓存1 ＋ 2)
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存1 ＋ 3)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (左操作数)
            _RAM等于A (#乘法器_H)
            A等于立即数 (右移 (立即数2, 24))
            _RAM等于A (#乘法器_L)

            A等于RAM ()
            R1等于_RAM (#RAM缓存1 ＋ 3)
            A等于A加R1 ()
            RAM等于A ()


            A等于_RAM (左操作数 ＋ 1)
            _RAM等于A (#乘法器_H)
            A等于立即数 (右移 (立即数2, 16))
            _RAM等于A (#乘法器_L)

            A等于RAM ()
            R1等于_RAM (#RAM缓存1 ＋ 3)
            A等于A加R1 ()
            RAM等于A ()


            A等于_RAM (左操作数 ＋ 2)
            _RAM等于A (#乘法器_H)
            A等于立即数 (右移 (立即数2, 8))
            _RAM等于A (#乘法器_L)

            A等于RAM ()
            R1等于_RAM (#RAM缓存1 ＋ 3)
            A等于A加R1 ()
            RAM等于A ()


            A等于_RAM (左操作数 ＋ 3)
            _RAM等于A (#乘法器_H)
            A等于立即数 (立即数2)
            _RAM等于A (#乘法器_L)

            A等于RAM ()
            R1等于_RAM (#RAM缓存1 ＋ 3)
            A等于A加R1 ()
            _RAM等于A (目的操作数 ＋ 3)


            A等于_RAM (#RAM缓存1)
            _RAM等于A (目的操作数)
            A等于_RAM (#RAM缓存1 ＋ 1)
            _RAM等于A (目的操作数 ＋ 1)
            A等于_RAM (#RAM缓存1 ＋ 2)
            _RAM等于A (目的操作数 ＋ 2)


        .判断结束


        状态 ＝ “完成”




    .判断 ((右移 (目的操作数, 16) ＝ #无符号int 或 右移 (目的操作数, 16) ＝ #有符号int) 且 (右移 (左操作数, 16) ＝ #有符号int 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 右移 (右操作数, 16) ＝ #有符号int 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)))

        .如果真 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)
            计数1 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 计数1
            立即数2 ＝ 立即数1
        .如果真结束


        .判断开始 (位与 (立即数2, 32768) ＝ 0)
            A等于立即数 (0)
        .默认
            A等于立即数 (255)
            立即数2 ＝ 位取反 (立即数2) ＋ 1
        .判断结束


        _RAM等于A (#RAM缓存5)


        A等于_RAM (左操作数 ＋ 1)
        R1等于RAM ()
        A等于A加R1 ()

        JNC (ROM_缓存使用字节 ＋ 46)
        A等于_RAM (左操作数)
        A取反 ()
        A等于A加1 ()
        _RAM等于A (#RAM缓存2)
        A等于_RAM (左操作数 ＋ 1)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (#RAM缓存1)
        A等于_RAM (#RAM缓存5)
        A取反 ()
        RAM等于A ()
        JMP (ROM_缓存使用字节 ＋ 21)
        A等于A减R1 ()
        _RAM等于A (#RAM缓存1)
        A等于_RAM (左操作数)
        _RAM等于A (#RAM缓存2)





        A等于_RAM (#RAM缓存2)
        _RAM等于A (#乘法器_L)
        A等于立即数 (立即数2)
        _RAM等于A (#乘法器_H)

        R1等于RAM ()
        A等于_RAM (#乘法器_L)
        _RAM等于A (目的操作数)


        A等于_RAM (#RAM缓存1)
        _RAM等于A (#乘法器_H)
        A等于立即数 (立即数2)
        _RAM等于A (#乘法器_L)

        A等于RAM ()
        A等于A加R1 ()
        R1等于A ()

        A等于_RAM (#RAM缓存2)
        _RAM等于A (#乘法器_H)
        A等于立即数 (右移 (立即数2, 8))
        _RAM等于A (#乘法器_L)

        A等于RAM ()
        A等于A加R1 ()
        _RAM等于A (目的操作数 ＋ 1)




        A等于_RAM (#RAM缓存5)
        A等于A加1 ()

        JNC (ROM_缓存使用字节 ＋ 30)

        A等于_RAM (目的操作数)
        A取反 ()
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (目的操作数 ＋ 1)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (目的操作数 ＋ 1)


        状态 ＝ “完成”





    .判断 ((右移 (目的操作数, 16) ＝ #无符号长int 或 右移 (目的操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #有符号长int 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 右移 (右操作数, 16) ＝ #有符号长int 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)))

        .如果真 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)
            计数1 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 计数1
            立即数2 ＝ 立即数1
        .如果真结束


        .判断开始 (位与 (立即数2, 2147483648) ＝ 0)
            A等于立即数 (0)
        .默认
            A等于立即数 (255)
            立即数2 ＝ 位取反 (立即数2) ＋ 1
        .判断结束


        _RAM等于A (#RAM缓存9)


        A等于_RAM (左操作数 ＋ 3)
        R1等于RAM ()
        A等于A加R1 ()

        JNC (ROM_缓存使用字节 ＋ 80)

        A等于_RAM (左操作数)
        A取反 ()
        A等于A加1 ()
        _RAM等于A (#RAM缓存4)

        A等于_RAM (左操作数 ＋ 1)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (#RAM缓存3)

        A等于_RAM (左操作数 ＋ 2)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (#RAM缓存2)

        A等于_RAM (左操作数 ＋ 3)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (#RAM缓存1)

        A等于_RAM (#RAM缓存9)
        A取反 ()
        RAM等于A ()

        JMP (ROM_缓存使用字节 ＋ 41)
        A等于A减R1 ()
        _RAM等于A (#RAM缓存1)
        A等于_RAM (左操作数 ＋ 2)
        _RAM等于A (#RAM缓存2)
        A等于_RAM (左操作数 ＋ 1)
        _RAM等于A (#RAM缓存3)
        A等于_RAM (左操作数)
        _RAM等于A (#RAM缓存4)








        A等于_RAM (#RAM缓存4)
        _RAM等于A (#乘法器_L)
        A等于立即数 (立即数2)
        _RAM等于A (#乘法器_H)

        A等于RAM ()
        _RAM等于A (目的操作数 ＋ 1)
        A等于_RAM (#乘法器_L)
        _RAM等于A (目的操作数)


        A等于_RAM (#RAM缓存3)
        _RAM等于A (#乘法器_L)
        A等于立即数 (右移 (立即数2, 8))
        _RAM等于A (#乘法器_H)

        A等于RAM ()
        _RAM等于A (目的操作数 ＋ 3)
        A等于_RAM (#乘法器_L)
        _RAM等于A (目的操作数 ＋ 2)



        A等于_RAM (#RAM缓存3)
        _RAM等于A (#乘法器_L)
        A等于立即数 (立即数2)
        _RAM等于A (#乘法器_H)

        A等于RAM ()
        R1等于_RAM (目的操作数 ＋ 2)
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数 ＋ 3)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#乘法器_L)
        R1等于_RAM (目的操作数 ＋ 1)
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 24)
        A等于_RAM (目的操作数 ＋ 2)
        A等于A加1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数 ＋ 3)
        A等于A加1 ()
        RAM等于A ()


        A等于_RAM (#RAM缓存4)
        _RAM等于A (#乘法器_L)
        A等于立即数 (右移 (立即数2, 8))
        _RAM等于A (#乘法器_H)

        A等于RAM ()
        R1等于_RAM (目的操作数 ＋ 2)
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数 ＋ 3)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#乘法器_L)
        R1等于_RAM (目的操作数 ＋ 1)
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 24)
        A等于_RAM (目的操作数 ＋ 2)
        A等于A加1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数 ＋ 3)
        A等于A加1 ()
        RAM等于A ()


        A等于_RAM (#RAM缓存4)
        _RAM等于A (#乘法器_L)
        A等于立即数 (右移 (立即数2, 16))
        _RAM等于A (#乘法器_H)

        A等于RAM ()
        R1等于_RAM (目的操作数 ＋ 3)
        A等于A加R1 ()
        RAM等于A ()

        A等于_RAM (#乘法器_L)
        R1等于_RAM (目的操作数 ＋ 2)
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数 ＋ 3)
        A等于A加1 ()
        RAM等于A ()


        A等于_RAM (#RAM缓存2)
        _RAM等于A (#乘法器_L)
        A等于立即数 (立即数2)
        _RAM等于A (#乘法器_H)

        A等于RAM ()
        R1等于_RAM (目的操作数 ＋ 3)
        A等于A加R1 ()
        RAM等于A ()

        A等于_RAM (#乘法器_L)
        R1等于_RAM (目的操作数 ＋ 2)
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数 ＋ 3)
        A等于A加1 ()
        RAM等于A ()


        A等于_RAM (#RAM缓存4)
        _RAM等于A (#乘法器_H)
        A等于立即数 (右移 (立即数2, 24))
        _RAM等于A (#乘法器_L)

        A等于RAM ()
        R1等于_RAM (目的操作数 ＋ 3)
        A等于A加R1 ()
        RAM等于A ()


        A等于_RAM (#RAM缓存3)
        _RAM等于A (#乘法器_H)
        A等于立即数 (右移 (立即数2, 16))
        _RAM等于A (#乘法器_L)

        A等于RAM ()
        R1等于_RAM (目的操作数 ＋ 3)
        A等于A加R1 ()
        RAM等于A ()


        A等于_RAM (#RAM缓存2)
        _RAM等于A (#乘法器_H)
        A等于立即数 (右移 (立即数2, 8))
        _RAM等于A (#乘法器_L)

        A等于RAM ()
        R1等于_RAM (目的操作数 ＋ 3)
        A等于A加R1 ()
        RAM等于A ()


        A等于_RAM (#RAM缓存1)
        _RAM等于A (#乘法器_H)
        A等于立即数 (立即数2)
        _RAM等于A (#乘法器_L)

        A等于RAM ()
        R1等于_RAM (目的操作数 ＋ 3)
        A等于A加R1 ()
        RAM等于A ()






        A等于_RAM (#RAM缓存9)
        A等于A加1 ()

        JNC (ROM_缓存使用字节 ＋ 64)

        A等于_RAM (目的操作数)
        A取反 ()
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (目的操作数 ＋ 1)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (目的操作数 ＋ 1)

        A等于_RAM (目的操作数 ＋ 2)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (目的操作数 ＋ 2)

        A等于_RAM (目的操作数 ＋ 3)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (目的操作数 ＋ 3)


        状态 ＝ “完成”



    .默认
        状态 ＝ “二元式机器码生成_*_运算类型错误或不存在...~!- -”
    .判断结束





.判断 (运算符 ＝ “/”)

    .判断开始 (右移 (左操作数, 16) ＝ #立即数)
        立即数1 ＝ 立即数值 [位与 (左操作数, 65535) ＋ 1]
    .判断 (右移 (左操作数, 16) ＝ #常量)
        立即数1 ＝ 常量值 [位与 (左操作数, 65535) ＋ 1]
    .判断 (右移 (左操作数, 16) ＝ #无符号char数组 或 右移 (左操作数, 16) ＝ #有符号char数组 或 右移 (左操作数, 16) ＝ #无符号int数组 或 右移 (左操作数, 16) ＝ #有符号int数组 或 右移 (左操作数, 16) ＝ #无符号长int数组 或 右移 (左操作数, 16) ＝ #有符号长int数组)
        立即数1 ＝ 位与 (左操作数, 65535)
    .判断 (右移 (左操作数, 16) ＝ 0)
        立即数1 ＝ 位与 (左操作数, 65535)
        左操作数 ＝ #立即数 × 65536
    .默认

    .判断结束


    .判断开始 (右移 (右操作数, 16) ＝ #立即数)
        立即数2 ＝ 立即数值 [位与 (右操作数, 65535) ＋ 1]
    .判断 (右移 (右操作数, 16) ＝ #常量)
        立即数2 ＝ 常量值 [位与 (右操作数, 65535) ＋ 1]
    .判断 (右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组)
        立即数2 ＝ 位与 (右操作数, 65535)
    .判断 (右移 (右操作数, 16) ＝ 0)
        立即数2 ＝ 位与 (右操作数, 65535)
        右操作数 ＝ #立即数 × 65536
    .默认

    .判断结束




    .判断开始 ((右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char 或 右移 (目的操作数, 16) ＝ #无符号ACC 或 右移 (目的操作数, 16) ＝ #有符号ACC 或 右移 (目的操作数, 16) ＝ #ACC) 且 (右移 (左操作数, 16) ＝ #无符号char 且 右移 (右操作数, 16) ＝ #有符号char 或 右移 (左操作数, 16) ＝ #有符号char 且 右移 (右操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #无符号char 且 右移 (右操作数, 16) ＝ #无符号char))

        .判断开始 (右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char)

            A等于_RAM (左操作数)
            _RAM等于A (#RAM缓存2)
            A等于_RAM (右操作数)
            _RAM等于A (#RAM缓存3)

            A等于立即数 (0)
            _RAM等于A (#RAM缓存1)
            _RAM等于A (目的操作数)
            A等于立即数 (8)
            _RAM等于A (#RAM缓存4)


            A等于_RAM (#RAM缓存1)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存2)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存1)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (目的操作数)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()


            A等于_RAM (#RAM缓存1)
            R1等于_RAM (#RAM缓存3)
            A等于A减R1 ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 17)
            _RAM等于A (#RAM缓存1)
            A等于_RAM (目的操作数)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存4)
            A等于A减1 ()
            RAM等于A ()

            JNZ (ROM_缓存使用字节 － 76)


        .默认
            A等于_RAM (左操作数)
            _RAM等于A (#RAM缓存2)
            A等于_RAM (右操作数)
            _RAM等于A (#RAM缓存3)

            A等于立即数 (0)
            _RAM等于A (#RAM缓存1)
            _RAM等于A (#RAM缓存5)
            A等于立即数 (8)
            _RAM等于A (#RAM缓存4)


            A等于_RAM (#RAM缓存1)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存2)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存1)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (#RAM缓存5)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()


            A等于_RAM (#RAM缓存1)
            R1等于_RAM (#RAM缓存3)
            A等于A减R1 ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 17)
            _RAM等于A (#RAM缓存1)
            A等于_RAM (#RAM缓存5)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存4)
            A等于A减1 ()
            RAM等于A ()

            JNZ (ROM_缓存使用字节 － 76)

            A等于_RAM (#RAM缓存5)


        .判断结束




        状态 ＝ “完成”




    .判断 ((右移 (目的操作数, 16) ＝ #无符号int 或 右移 (目的操作数, 16) ＝ #有符号int) 且 (右移 (左操作数, 16) ＝ #无符号int 且 右移 (右操作数, 16) ＝ #有符号int 或 右移 (左操作数, 16) ＝ #有符号int 且 右移 (右操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #无符号int 且 右移 (右操作数, 16) ＝ #无符号int))

        A等于立即数 (0)
        _RAM等于A (#RAM缓存1)
        _RAM等于A (#RAM缓存2)
        _RAM等于A (目的操作数 ＋ 1)
        _RAM等于A (目的操作数)

        A等于_RAM (左操作数 ＋ 1)
        _RAM等于A (#RAM缓存3)
        A等于_RAM (左操作数)
        _RAM等于A (#RAM缓存4)

        A等于_RAM (右操作数 ＋ 1)
        _RAM等于A (#RAM缓存5)
        A等于_RAM (右操作数)
        _RAM等于A (#RAM缓存6)

        A等于立即数 (16)
        _RAM等于A (#RAM缓存9)




        A等于_RAM (#RAM缓存1)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存2)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (#RAM缓存1)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存3)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (#RAM缓存2)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存4)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (#RAM缓存3)
        A等于A加1 ()
        RAM等于A ()


        A等于_RAM (目的操作数 ＋ 1)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        A等于_RAM (目的操作数)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数 ＋ 1)
        A等于A加1 ()
        RAM等于A ()


        A等于_RAM (#RAM缓存1)
        R1等于_RAM (#RAM缓存5)
        A等于A减R1 ()
        JNC (ROM_缓存使用字节 ＋ 10)
        JMP (ROM_缓存使用字节 ＋ 75)
        _RAM等于A (#RAM缓存7)

        A等于_RAM (#RAM缓存2)
        R1等于_RAM (#RAM缓存6)
        A等于A减R1 ()
        _RAM等于A (#RAM缓存8)
        JNC (ROM_缓存使用字节 ＋ 22)
        A等于_RAM (#RAM缓存7)
        A等于A减1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 10)
        JMP (ROM_缓存使用字节 ＋ 32)

        A等于_RAM (#RAM缓存7)
        _RAM等于A (#RAM缓存1)
        A等于_RAM (#RAM缓存8)
        _RAM等于A (#RAM缓存2)

        A等于_RAM (目的操作数)
        A等于A加1 ()
        RAM等于A ()


        A等于_RAM (#RAM缓存9)
        A等于A减1 ()
        RAM等于A ()

        JNZ (ROM_缓存使用字节 － 194)


        状态 ＝ “完成”





    .判断 ((右移 (目的操作数, 16) ＝ #无符号长int 或 右移 (目的操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #无符号长int 且 右移 (右操作数, 16) ＝ #有符号长int 或 右移 (左操作数, 16) ＝ #有符号长int 且 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #无符号长int 且 右移 (右操作数, 16) ＝ #无符号长int))

        A等于立即数 (0)
        _RAM等于A (#RAM缓存1)
        _RAM等于A (#RAM缓存2)
        _RAM等于A (#RAM缓存3)
        _RAM等于A (#RAM缓存4)
        _RAM等于A (目的操作数 ＋ 3)
        _RAM等于A (目的操作数 ＋ 2)
        _RAM等于A (目的操作数 ＋ 1)
        _RAM等于A (目的操作数)

        A等于_RAM (左操作数 ＋ 3)
        _RAM等于A (#RAM缓存5)
        A等于_RAM (左操作数 ＋ 2)
        _RAM等于A (#RAM缓存6)
        A等于_RAM (左操作数 ＋ 1)
        _RAM等于A (#RAM缓存7)
        A等于_RAM (左操作数)
        _RAM等于A (#RAM缓存8)

        A等于_RAM (右操作数 ＋ 3)
        _RAM等于A (#RAM缓存9)
        A等于_RAM (右操作数 ＋ 2)
        _RAM等于A (#RAM缓存10)
        A等于_RAM (右操作数 ＋ 1)
        _RAM等于A (#RAM缓存11)
        A等于_RAM (右操作数)
        _RAM等于A (#RAM缓存12)

        A等于立即数 (32)
        _RAM等于A (#RAM缓存17)




        A等于_RAM (#RAM缓存1)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存2)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (#RAM缓存1)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存3)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (#RAM缓存2)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存4)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (#RAM缓存3)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存5)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (#RAM缓存4)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存6)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (#RAM缓存5)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存7)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (#RAM缓存6)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存8)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (#RAM缓存7)
        A等于A加1 ()
        RAM等于A ()



        A等于_RAM (目的操作数 ＋ 3)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        A等于_RAM (目的操作数 ＋ 2)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数 ＋ 3)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (目的操作数 ＋ 1)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数 ＋ 2)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (目的操作数)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数 ＋ 1)
        A等于A加1 ()
        RAM等于A ()



        A等于_RAM (#RAM缓存1)
        R1等于_RAM (#RAM缓存9)
        A等于A减R1 ()
        JNC (ROM_缓存使用字节 ＋ 10)
        JMP (ROM_缓存使用字节 ＋ 207)
        _RAM等于A (#RAM缓存13)

        A等于_RAM (#RAM缓存2)
        R1等于_RAM (#RAM缓存10)
        A等于A减R1 ()
        _RAM等于A (#RAM缓存14)
        JNC (ROM_缓存使用字节 ＋ 22)
        A等于_RAM (#RAM缓存13)
        A等于A减1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 10)
        JMP (ROM_缓存使用字节 ＋ 164)

        A等于_RAM (#RAM缓存3)
        R1等于_RAM (#RAM缓存11)
        A等于A减R1 ()
        _RAM等于A (#RAM缓存15)
        JNC (ROM_缓存使用字节 ＋ 34)
        A等于_RAM (#RAM缓存14)
        A等于A减1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 22)
        A等于_RAM (#RAM缓存13)
        A等于A减1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 10)
        JMP (ROM_缓存使用字节 ＋ 114)

        A等于_RAM (#RAM缓存4)
        R1等于_RAM (#RAM缓存12)
        A等于A减R1 ()
        _RAM等于A (#RAM缓存16)
        JNC (ROM_缓存使用字节 ＋ 46)
        A等于_RAM (#RAM缓存15)
        A等于A减1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 34)
        A等于_RAM (#RAM缓存14)
        A等于A减1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 22)
        A等于_RAM (#RAM缓存13)
        A等于A减1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 10)
        JMP (ROM_缓存使用字节 ＋ 52)


        A等于_RAM (#RAM缓存13)
        _RAM等于A (#RAM缓存1)
        A等于_RAM (#RAM缓存14)
        _RAM等于A (#RAM缓存2)
        A等于_RAM (#RAM缓存15)
        _RAM等于A (#RAM缓存3)
        A等于_RAM (#RAM缓存16)
        _RAM等于A (#RAM缓存4)

        A等于_RAM (目的操作数)
        A等于A加1 ()
        RAM等于A ()


        A等于_RAM (#RAM缓存17)
        A等于A减1 ()
        RAM等于A ()

        JNZ (ROM_缓存使用字节 － 446)

        状态 ＝ “完成”



    .判断 ((右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char 或 右移 (目的操作数, 16) ＝ #无符号ACC 或 右移 (目的操作数, 16) ＝ #有符号ACC 或 右移 (目的操作数, 16) ＝ #ACC) 且 右移 (左操作数, 16) ＝ #有符号char 且 右移 (右操作数, 16) ＝ #有符号char)

        .判断开始 (右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char)

            A等于立即数 (0)
            _RAM等于A (#RAM缓存1)
            _RAM等于A (目的操作数)
            _RAM等于A (#RAM缓存5)

            A等于立即数 (8)
            _RAM等于A (#RAM缓存4)


            A等于_RAM (左操作数)
            R1等于RAM ()
            A等于A加R1 ()

            JNC (ROM_缓存使用字节 ＋ 25)
            A等于A减R1 ()
            A取反 ()
            A等于A加1 ()
            _RAM等于A (#RAM缓存2)
            A等于_RAM (#RAM缓存5)
            A取反 ()
            RAM等于A ()
            JMP (ROM_缓存使用字节 ＋ 11)
            A等于A减R1 ()
            _RAM等于A (#RAM缓存2)

            A等于_RAM (右操作数)
            R1等于RAM ()
            A等于A加R1 ()

            JNC (ROM_缓存使用字节 ＋ 25)
            A等于A减R1 ()
            A取反 ()
            A等于A加1 ()
            _RAM等于A (#RAM缓存3)
            A等于_RAM (#RAM缓存5)
            A取反 ()
            RAM等于A ()
            JMP (ROM_缓存使用字节 ＋ 11)
            A等于A减R1 ()
            _RAM等于A (#RAM缓存3)




            A等于_RAM (#RAM缓存1)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存2)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存1)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (目的操作数)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()


            A等于_RAM (#RAM缓存1)
            R1等于_RAM (#RAM缓存3)
            A等于A减R1 ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 17)
            _RAM等于A (#RAM缓存1)
            A等于_RAM (目的操作数)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存4)
            A等于A减1 ()
            RAM等于A ()

            JNZ (ROM_缓存使用字节 － 76)




            A等于_RAM (#RAM缓存5)
            A等于A加1 ()
            JNC (ROM_缓存使用字节 ＋ 13)
            A等于_RAM (目的操作数)
            A取反 ()
            A等于A加1 ()
            RAM等于A ()


        .默认
            A等于立即数 (0)
            _RAM等于A (#RAM缓存1)
            _RAM等于A (#RAM缓存6)
            _RAM等于A (#RAM缓存5)

            A等于立即数 (8)
            _RAM等于A (#RAM缓存4)


            A等于_RAM (左操作数)
            R1等于RAM ()
            A等于A加R1 ()

            JNC (ROM_缓存使用字节 ＋ 25)
            A等于A减R1 ()
            A取反 ()
            A等于A加1 ()
            _RAM等于A (#RAM缓存2)
            A等于_RAM (#RAM缓存5)
            A取反 ()
            RAM等于A ()
            JMP (ROM_缓存使用字节 ＋ 11)
            A等于A减R1 ()
            _RAM等于A (#RAM缓存2)

            A等于_RAM (右操作数)
            R1等于RAM ()
            A等于A加R1 ()

            JNC (ROM_缓存使用字节 ＋ 25)
            A等于A减R1 ()
            A取反 ()
            A等于A加1 ()
            _RAM等于A (#RAM缓存3)
            A等于_RAM (#RAM缓存5)
            A取反 ()
            RAM等于A ()
            JMP (ROM_缓存使用字节 ＋ 11)
            A等于A减R1 ()
            _RAM等于A (#RAM缓存3)




            A等于_RAM (#RAM缓存1)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存2)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存1)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (#RAM缓存6)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()


            A等于_RAM (#RAM缓存1)
            R1等于_RAM (#RAM缓存3)
            A等于A减R1 ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 17)
            _RAM等于A (#RAM缓存1)
            A等于_RAM (#RAM缓存6)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存4)
            A等于A减1 ()
            RAM等于A ()

            JNZ (ROM_缓存使用字节 － 76)


            A等于_RAM (#RAM缓存5)
            A等于A加1 ()
            A等于_RAM (#RAM缓存6)
            JNC (ROM_缓存使用字节 ＋ 7)
            A取反 ()
            A等于A加1 ()

        .判断结束





        状态 ＝ “完成”



    .判断 ((右移 (目的操作数, 16) ＝ #无符号int 或 右移 (目的操作数, 16) ＝ #有符号int) 且 右移 (左操作数, 16) ＝ #有符号int 且 右移 (右操作数, 16) ＝ #有符号int)

        A等于立即数 (0)
        _RAM等于A (#RAM缓存1)
        _RAM等于A (#RAM缓存2)
        _RAM等于A (目的操作数 ＋ 1)
        _RAM等于A (目的操作数)
        _RAM等于A (#RAM缓存10)

        A等于立即数 (16)
        _RAM等于A (#RAM缓存9)




        A等于_RAM (左操作数 ＋ 1)
        R1等于RAM ()
        A等于A加R1 ()
        JNC (ROM_缓存使用字节 ＋ 46)
        A等于_RAM (左操作数)
        A取反 ()
        A等于A加1 ()
        _RAM等于A (#RAM缓存4)
        A等于_RAM (左操作数 ＋ 1)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (#RAM缓存3)
        A等于_RAM (#RAM缓存10)
        A取反 ()
        RAM等于A ()
        JMP (ROM_缓存使用字节 ＋ 21)
        A等于A减R1 ()
        _RAM等于A (#RAM缓存3)
        A等于_RAM (左操作数)
        _RAM等于A (#RAM缓存4)


        A等于_RAM (右操作数 ＋ 1)
        R1等于RAM ()
        A等于A加R1 ()
        JNC (ROM_缓存使用字节 ＋ 46)
        A等于_RAM (右操作数)
        A取反 ()
        A等于A加1 ()
        _RAM等于A (#RAM缓存6)
        A等于_RAM (右操作数 ＋ 1)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (#RAM缓存5)
        A等于_RAM (#RAM缓存10)
        A取反 ()
        RAM等于A ()
        JMP (ROM_缓存使用字节 ＋ 21)
        A等于A减R1 ()
        _RAM等于A (#RAM缓存5)
        A等于_RAM (右操作数)
        _RAM等于A (#RAM缓存6)





        A等于_RAM (#RAM缓存1)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存2)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (#RAM缓存1)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存3)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (#RAM缓存2)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存4)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (#RAM缓存3)
        A等于A加1 ()
        RAM等于A ()


        A等于_RAM (目的操作数 ＋ 1)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        A等于_RAM (目的操作数)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数 ＋ 1)
        A等于A加1 ()
        RAM等于A ()


        A等于_RAM (#RAM缓存1)
        R1等于_RAM (#RAM缓存5)
        A等于A减R1 ()
        JNC (ROM_缓存使用字节 ＋ 10)
        JMP (ROM_缓存使用字节 ＋ 75)
        _RAM等于A (#RAM缓存7)

        A等于_RAM (#RAM缓存2)
        R1等于_RAM (#RAM缓存6)
        A等于A减R1 ()
        _RAM等于A (#RAM缓存8)
        JNC (ROM_缓存使用字节 ＋ 22)
        A等于_RAM (#RAM缓存7)
        A等于A减1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 10)
        JMP (ROM_缓存使用字节 ＋ 32)

        A等于_RAM (#RAM缓存7)
        _RAM等于A (#RAM缓存1)
        A等于_RAM (#RAM缓存8)
        _RAM等于A (#RAM缓存2)

        A等于_RAM (目的操作数)
        A等于A加1 ()
        RAM等于A ()


        A等于_RAM (#RAM缓存9)
        A等于A减1 ()
        RAM等于A ()

        JNZ (ROM_缓存使用字节 － 194)




        A等于_RAM (32)
        A等于A加1 ()

        JNC (ROM_缓存使用字节 ＋ 30)

        A等于_RAM (目的操作数)
        A取反 ()
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (目的操作数 ＋ 1)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (目的操作数 ＋ 1)



        状态 ＝ “完成”






    .判断 ((右移 (目的操作数, 16) ＝ #无符号长int 或 右移 (目的操作数, 16) ＝ #有符号长int) 且 右移 (左操作数, 16) ＝ #有符号长int 且 右移 (右操作数, 16) ＝ #有符号长int)

        A等于立即数 (0)
        _RAM等于A (#RAM缓存1)
        _RAM等于A (#RAM缓存2)
        _RAM等于A (#RAM缓存3)
        _RAM等于A (#RAM缓存4)
        _RAM等于A (目的操作数 ＋ 3)
        _RAM等于A (目的操作数 ＋ 2)
        _RAM等于A (目的操作数 ＋ 1)
        _RAM等于A (目的操作数)
        _RAM等于A (#RAM缓存18)

        A等于立即数 (32)
        _RAM等于A (#RAM缓存17)



        A等于_RAM (左操作数 ＋ 3)
        R1等于RAM ()
        A等于A加R1 ()
        JNC (ROM_缓存使用字节 ＋ 80)
        A等于_RAM (左操作数)
        A取反 ()
        A等于A加1 ()
        _RAM等于A (#RAM缓存8)
        A等于_RAM (左操作数 ＋ 1)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (#RAM缓存7)
        A等于_RAM (左操作数 ＋ 2)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (#RAM缓存6)
        A等于_RAM (左操作数 ＋ 3)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (#RAM缓存5)
        A等于_RAM (#RAM缓存18)
        A取反 ()
        RAM等于A ()
        JMP (ROM_缓存使用字节 ＋ 41)
        A等于A减R1 ()
        _RAM等于A (#RAM缓存5)
        A等于_RAM (左操作数 ＋ 2)
        _RAM等于A (#RAM缓存6)
        A等于_RAM (左操作数 ＋ 1)
        _RAM等于A (#RAM缓存7)
        A等于_RAM (左操作数)
        _RAM等于A (#RAM缓存8)


        A等于_RAM (右操作数 ＋ 3)
        R1等于RAM ()
        A等于A加R1 ()
        JNC (ROM_缓存使用字节 ＋ 80)
        A等于_RAM (右操作数)
        A取反 ()
        A等于A加1 ()
        _RAM等于A (#RAM缓存12)
        A等于_RAM (右操作数 ＋ 1)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (#RAM缓存11)
        A等于_RAM (右操作数 ＋ 2)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (#RAM缓存10)
        A等于_RAM (右操作数 ＋ 3)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (#RAM缓存9)
        A等于_RAM (#RAM缓存18)
        A取反 ()
        RAM等于A ()
        JMP (ROM_缓存使用字节 ＋ 41)
        A等于A减R1 ()
        _RAM等于A (#RAM缓存9)
        A等于_RAM (右操作数 ＋ 2)
        _RAM等于A (#RAM缓存10)
        A等于_RAM (右操作数 ＋ 1)
        _RAM等于A (#RAM缓存11)
        A等于_RAM (右操作数)
        _RAM等于A (#RAM缓存12)






        A等于_RAM (#RAM缓存1)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存2)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (#RAM缓存1)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存3)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (#RAM缓存2)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存4)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (#RAM缓存3)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存5)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (#RAM缓存4)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存6)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (#RAM缓存5)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存7)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (#RAM缓存6)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存8)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (#RAM缓存7)
        A等于A加1 ()
        RAM等于A ()



        A等于_RAM (目的操作数 ＋ 3)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        A等于_RAM (目的操作数 ＋ 2)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数 ＋ 3)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (目的操作数 ＋ 1)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数 ＋ 2)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (目的操作数)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数 ＋ 1)
        A等于A加1 ()
        RAM等于A ()



        A等于_RAM (#RAM缓存1)
        R1等于_RAM (#RAM缓存9)
        A等于A减R1 ()
        JNC (ROM_缓存使用字节 ＋ 10)
        JMP (ROM_缓存使用字节 ＋ 207)
        _RAM等于A (#RAM缓存13)

        A等于_RAM (#RAM缓存2)
        R1等于_RAM (#RAM缓存10)
        A等于A减R1 ()
        _RAM等于A (#RAM缓存14)
        JNC (ROM_缓存使用字节 ＋ 22)
        A等于_RAM (#RAM缓存13)
        A等于A减1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 10)
        JMP (ROM_缓存使用字节 ＋ 164)

        A等于_RAM (#RAM缓存3)
        R1等于_RAM (#RAM缓存11)
        A等于A减R1 ()
        _RAM等于A (#RAM缓存15)
        JNC (ROM_缓存使用字节 ＋ 34)
        A等于_RAM (#RAM缓存14)
        A等于A减1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 22)
        A等于_RAM (#RAM缓存13)
        A等于A减1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 10)
        JMP (ROM_缓存使用字节 ＋ 114)

        A等于_RAM (#RAM缓存4)
        R1等于_RAM (#RAM缓存12)
        A等于A减R1 ()
        _RAM等于A (#RAM缓存16)
        JNC (ROM_缓存使用字节 ＋ 46)
        A等于_RAM (#RAM缓存15)
        A等于A减1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 34)
        A等于_RAM (#RAM缓存14)
        A等于A减1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 22)
        A等于_RAM (#RAM缓存13)
        A等于A减1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 10)
        JMP (ROM_缓存使用字节 ＋ 52)


        A等于_RAM (#RAM缓存13)
        _RAM等于A (#RAM缓存1)
        A等于_RAM (#RAM缓存14)
        _RAM等于A (#RAM缓存2)
        A等于_RAM (#RAM缓存15)
        _RAM等于A (#RAM缓存3)
        A等于_RAM (#RAM缓存16)
        _RAM等于A (#RAM缓存4)

        A等于_RAM (目的操作数)
        A等于A加1 ()
        RAM等于A ()


        A等于_RAM (#RAM缓存17)
        A等于A减1 ()
        RAM等于A ()

        JNZ (ROM_缓存使用字节 － 446)





        A等于_RAM (#RAM缓存18)
        A等于A加1 ()

        JNC (ROM_缓存使用字节 ＋ 64)

        A等于_RAM (目的操作数)
        A取反 ()
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (目的操作数 ＋ 1)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (目的操作数 ＋ 1)

        A等于_RAM (目的操作数 ＋ 2)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (目的操作数 ＋ 2)

        A等于_RAM (目的操作数 ＋ 3)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (目的操作数 ＋ 3)




        状态 ＝ “完成”




    .判断 ((右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char 或 右移 (目的操作数, 16) ＝ #无符号ACC 或 右移 (目的操作数, 16) ＝ #有符号ACC 或 右移 (目的操作数, 16) ＝ #ACC) 且 (右移 (左操作数, 16) ＝ #无符号ACC 且 右移 (右操作数, 16) ＝ #有符号char 或 右移 (左操作数, 16) ＝ #有符号ACC 且 右移 (右操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #无符号ACC 且 右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #无符号ACC 且 右移 (左操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #有符号ACC 且 右移 (左操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #无符号ACC 且 右移 (左操作数, 16) ＝ #无符号char))

        .判断开始 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC)

            _RAM等于A (#RAM缓存2)
            A等于_RAM (右操作数)
            _RAM等于A (#RAM缓存3)

        .默认
            _RAM等于A (#RAM缓存3)
            A等于_RAM (左操作数)
            _RAM等于A (#RAM缓存2)

        .判断结束


        .判断开始 (右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char)

            A等于立即数 (0)
            _RAM等于A (#RAM缓存1)
            _RAM等于A (目的操作数)
            A等于立即数 (8)
            _RAM等于A (#RAM缓存4)


            A等于_RAM (#RAM缓存1)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存2)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存1)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (目的操作数)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()


            A等于_RAM (#RAM缓存1)
            R1等于_RAM (#RAM缓存3)
            A等于A减R1 ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 17)
            _RAM等于A (#RAM缓存1)
            A等于_RAM (目的操作数)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存4)
            A等于A减1 ()
            RAM等于A ()

            JNZ (ROM_缓存使用字节 － 76)


        .默认
            A等于立即数 (0)
            _RAM等于A (#RAM缓存1)
            _RAM等于A (#RAM缓存5)
            A等于立即数 (8)
            _RAM等于A (#RAM缓存4)


            A等于_RAM (#RAM缓存1)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存2)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存1)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (#RAM缓存5)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()


            A等于_RAM (#RAM缓存1)
            R1等于_RAM (#RAM缓存3)
            A等于A减R1 ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 17)
            _RAM等于A (#RAM缓存1)
            A等于_RAM (#RAM缓存5)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存4)
            A等于A减1 ()
            RAM等于A ()

            JNZ (ROM_缓存使用字节 － 76)

            A等于_RAM (#RAM缓存5)


        .判断结束



        状态 ＝ “完成”




    .判断 ((右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char 或 右移 (目的操作数, 16) ＝ #无符号ACC 或 右移 (目的操作数, 16) ＝ #有符号ACC 或 右移 (目的操作数, 16) ＝ #ACC) 且 (右移 (左操作数, 16) ＝ #有符号ACC 且 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #有符号ACC 且 右移 (左操作数, 16) ＝ #有符号char))

        _RAM等于A (#RAM缓存7)

        .判断开始 (右移 (左操作数, 16) ＝ #有符号ACC)

            .判断开始 (右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char)

                A等于立即数 (0)
                _RAM等于A (#RAM缓存1)
                _RAM等于A (目的操作数)
                _RAM等于A (#RAM缓存5)

                A等于立即数 (8)
                _RAM等于A (#RAM缓存4)


                A等于_RAM (#RAM缓存7)
                R1等于RAM ()
                A等于A加R1 ()

                JNC (ROM_缓存使用字节 ＋ 25)
                A等于A减R1 ()
                A取反 ()
                A等于A加1 ()
                _RAM等于A (#RAM缓存2)
                A等于_RAM (#RAM缓存5)
                A取反 ()
                RAM等于A ()
                JMP (ROM_缓存使用字节 ＋ 11)
                A等于A减R1 ()
                _RAM等于A (#RAM缓存2)

                A等于_RAM (右操作数)
                R1等于RAM ()
                A等于A加R1 ()

                JNC (ROM_缓存使用字节 ＋ 25)
                A等于A减R1 ()
                A取反 ()
                A等于A加1 ()
                _RAM等于A (#RAM缓存3)
                A等于_RAM (#RAM缓存5)
                A取反 ()
                RAM等于A ()
                JMP (ROM_缓存使用字节 ＋ 11)
                A等于A减R1 ()
                _RAM等于A (#RAM缓存3)




                A等于_RAM (#RAM缓存1)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存2)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (#RAM缓存1)
                A等于A加1 ()
                RAM等于A ()


                A等于_RAM (目的操作数)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()


                A等于_RAM (#RAM缓存1)
                R1等于_RAM (#RAM缓存3)
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 17)
                _RAM等于A (#RAM缓存1)
                A等于_RAM (目的操作数)
                A等于A加1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存4)
                A等于A减1 ()
                RAM等于A ()

                JNZ (ROM_缓存使用字节 － 76)


                A等于_RAM (#RAM缓存5)
                A等于A加1 ()
                JNC (ROM_缓存使用字节 ＋ 13)
                A等于_RAM (目的操作数)
                A取反 ()
                A等于A加1 ()
                RAM等于A ()


            .默认
                A等于立即数 (0)
                _RAM等于A (#RAM缓存1)
                _RAM等于A (#RAM缓存6)
                _RAM等于A (#RAM缓存5)

                A等于立即数 (8)
                _RAM等于A (#RAM缓存4)


                A等于_RAM (#RAM缓存7)
                R1等于RAM ()
                A等于A加R1 ()

                JNC (ROM_缓存使用字节 ＋ 25)
                A等于A减R1 ()
                A取反 ()
                A等于A加1 ()
                _RAM等于A (#RAM缓存2)
                A等于_RAM (#RAM缓存5)
                A取反 ()
                RAM等于A ()
                JMP (ROM_缓存使用字节 ＋ 11)
                A等于A减R1 ()
                _RAM等于A (#RAM缓存2)

                A等于_RAM (右操作数)
                R1等于RAM ()
                A等于A加R1 ()

                JNC (ROM_缓存使用字节 ＋ 25)
                A等于A减R1 ()
                A取反 ()
                A等于A加1 ()
                _RAM等于A (#RAM缓存3)
                A等于_RAM (#RAM缓存5)
                A取反 ()
                RAM等于A ()
                JMP (ROM_缓存使用字节 ＋ 11)
                A等于A减R1 ()
                _RAM等于A (#RAM缓存3)




                A等于_RAM (#RAM缓存1)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存2)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (#RAM缓存1)
                A等于A加1 ()
                RAM等于A ()


                A等于_RAM (#RAM缓存6)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()


                A等于_RAM (#RAM缓存1)
                R1等于_RAM (#RAM缓存3)
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 17)
                _RAM等于A (#RAM缓存1)
                A等于_RAM (#RAM缓存6)
                A等于A加1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存4)
                A等于A减1 ()
                RAM等于A ()

                JNZ (ROM_缓存使用字节 － 76)


                A等于_RAM (#RAM缓存5)
                A等于A加1 ()
                A等于_RAM (#RAM缓存6)
                JNC (ROM_缓存使用字节 ＋ 7)
                A取反 ()
                A等于A加1 ()

            .判断结束



        .默认

            .判断开始 (右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char)

                A等于立即数 (0)
                _RAM等于A (#RAM缓存1)
                _RAM等于A (目的操作数)
                _RAM等于A (#RAM缓存5)

                A等于立即数 (8)
                _RAM等于A (#RAM缓存4)


                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A加R1 ()

                JNC (ROM_缓存使用字节 ＋ 25)
                A等于A减R1 ()
                A取反 ()
                A等于A加1 ()
                _RAM等于A (#RAM缓存2)
                A等于_RAM (#RAM缓存5)
                A取反 ()
                RAM等于A ()
                JMP (ROM_缓存使用字节 ＋ 11)
                A等于A减R1 ()
                _RAM等于A (#RAM缓存2)

                A等于_RAM (#RAM缓存7)
                R1等于RAM ()
                A等于A加R1 ()

                JNC (ROM_缓存使用字节 ＋ 25)
                A等于A减R1 ()
                A取反 ()
                A等于A加1 ()
                _RAM等于A (#RAM缓存3)
                A等于_RAM (#RAM缓存5)
                A取反 ()
                RAM等于A ()
                JMP (ROM_缓存使用字节 ＋ 11)
                A等于A减R1 ()
                _RAM等于A (#RAM缓存3)




                A等于_RAM (#RAM缓存1)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存2)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (#RAM缓存1)
                A等于A加1 ()
                RAM等于A ()


                A等于_RAM (目的操作数)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()


                A等于_RAM (#RAM缓存1)
                R1等于_RAM (#RAM缓存3)
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 17)
                _RAM等于A (#RAM缓存1)
                A等于_RAM (目的操作数)
                A等于A加1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存4)
                A等于A减1 ()
                RAM等于A ()

                JNZ (ROM_缓存使用字节 － 76)


                A等于_RAM (#RAM缓存5)
                A等于A加1 ()
                JNC (ROM_缓存使用字节 ＋ 13)
                A等于_RAM (目的操作数)
                A取反 ()
                A等于A加1 ()
                RAM等于A ()


            .默认
                A等于立即数 (0)
                _RAM等于A (#RAM缓存1)
                _RAM等于A (#RAM缓存6)
                _RAM等于A (#RAM缓存5)

                A等于立即数 (8)
                _RAM等于A (#RAM缓存4)


                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A加R1 ()

                JNC (ROM_缓存使用字节 ＋ 25)
                A等于A减R1 ()
                A取反 ()
                A等于A加1 ()
                _RAM等于A (#RAM缓存2)
                A等于_RAM (#RAM缓存5)
                A取反 ()
                RAM等于A ()
                JMP (ROM_缓存使用字节 ＋ 11)
                A等于A减R1 ()
                _RAM等于A (#RAM缓存2)

                A等于_RAM (#RAM缓存7)
                R1等于RAM ()
                A等于A加R1 ()

                JNC (ROM_缓存使用字节 ＋ 25)
                A等于A减R1 ()
                A取反 ()
                A等于A加1 ()
                _RAM等于A (#RAM缓存3)
                A等于_RAM (#RAM缓存5)
                A取反 ()
                RAM等于A ()
                JMP (ROM_缓存使用字节 ＋ 11)
                A等于A减R1 ()
                _RAM等于A (#RAM缓存3)




                A等于_RAM (#RAM缓存1)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存2)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (#RAM缓存1)
                A等于A加1 ()
                RAM等于A ()


                A等于_RAM (#RAM缓存6)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()


                A等于_RAM (#RAM缓存1)
                R1等于_RAM (#RAM缓存3)
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 17)
                _RAM等于A (#RAM缓存1)
                A等于_RAM (#RAM缓存6)
                A等于A加1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存4)
                A等于A减1 ()
                RAM等于A ()

                JNZ (ROM_缓存使用字节 － 76)


                A等于_RAM (#RAM缓存5)
                A等于A加1 ()
                A等于_RAM (#RAM缓存6)
                JNC (ROM_缓存使用字节 ＋ 7)
                A取反 ()
                A等于A加1 ()

            .判断结束


        .判断结束



        状态 ＝ “完成”




    .判断 ((右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char 或 右移 (目的操作数, 16) ＝ #无符号ACC 或 右移 (目的操作数, 16) ＝ #有符号ACC 或 右移 (目的操作数, 16) ＝ #ACC) 且 (右移 (左操作数, 16) ＝ #无符号ACC 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 右移 (右操作数, 16) ＝ #无符号ACC 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)))

        .判断开始 (右移 (左操作数, 16) ＝ #无符号ACC)

            _RAM等于A (#RAM缓存2)
            A等于立即数 (立即数2)
            _RAM等于A (#RAM缓存3)

        .默认
            _RAM等于A (#RAM缓存3)
            A等于立即数 (立即数1)
            _RAM等于A (#RAM缓存2)

        .判断结束


        .判断开始 (右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char)

            A等于立即数 (0)
            _RAM等于A (#RAM缓存1)
            _RAM等于A (目的操作数)
            A等于立即数 (8)
            _RAM等于A (#RAM缓存4)


            A等于_RAM (#RAM缓存1)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存2)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存1)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (目的操作数)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()


            A等于_RAM (#RAM缓存1)
            R1等于_RAM (#RAM缓存3)
            A等于A减R1 ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 17)
            _RAM等于A (#RAM缓存1)
            A等于_RAM (目的操作数)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存4)
            A等于A减1 ()
            RAM等于A ()

            JNZ (ROM_缓存使用字节 － 76)


        .默认
            A等于立即数 (0)
            _RAM等于A (#RAM缓存1)
            _RAM等于A (#RAM缓存5)
            A等于立即数 (8)
            _RAM等于A (#RAM缓存4)


            A等于_RAM (#RAM缓存1)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存2)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存1)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (#RAM缓存5)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()


            A等于_RAM (#RAM缓存1)
            R1等于_RAM (#RAM缓存3)
            A等于A减R1 ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 17)
            _RAM等于A (#RAM缓存1)
            A等于_RAM (#RAM缓存5)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存4)
            A等于A减1 ()
            RAM等于A ()

            JNZ (ROM_缓存使用字节 － 76)

            A等于_RAM (#RAM缓存5)


        .判断结束



        状态 ＝ “完成”



    .判断 ((右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char 或 右移 (目的操作数, 16) ＝ #无符号ACC 或 右移 (目的操作数, 16) ＝ #有符号ACC 或 右移 (目的操作数, 16) ＝ #ACC) 且 (右移 (左操作数, 16) ＝ #无符号char 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 右移 (右操作数, 16) ＝ #无符号char 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)))

        .判断开始 (右移 (左操作数, 16) ＝ #无符号char)

            A等于_RAM (左操作数)
            _RAM等于A (#RAM缓存2)
            A等于立即数 (立即数2)
            _RAM等于A (#RAM缓存3)

        .默认
            A等于_RAM (右操作数)
            _RAM等于A (#RAM缓存3)
            A等于立即数 (立即数1)
            _RAM等于A (#RAM缓存2)

        .判断结束


        .判断开始 (右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char)

            A等于立即数 (0)
            _RAM等于A (#RAM缓存1)
            _RAM等于A (目的操作数)
            A等于立即数 (8)
            _RAM等于A (#RAM缓存4)


            A等于_RAM (#RAM缓存1)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存2)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存1)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (目的操作数)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()


            A等于_RAM (#RAM缓存1)
            R1等于_RAM (#RAM缓存3)
            A等于A减R1 ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 17)
            _RAM等于A (#RAM缓存1)
            A等于_RAM (目的操作数)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存4)
            A等于A减1 ()
            RAM等于A ()

            JNZ (ROM_缓存使用字节 － 76)


        .默认
            A等于立即数 (0)
            _RAM等于A (#RAM缓存1)
            _RAM等于A (#RAM缓存5)
            A等于立即数 (8)
            _RAM等于A (#RAM缓存4)


            A等于_RAM (#RAM缓存1)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存2)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存1)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (#RAM缓存5)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()


            A等于_RAM (#RAM缓存1)
            R1等于_RAM (#RAM缓存3)
            A等于A减R1 ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 17)
            _RAM等于A (#RAM缓存1)
            A等于_RAM (#RAM缓存5)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存4)
            A等于A减1 ()
            RAM等于A ()

            JNZ (ROM_缓存使用字节 － 76)

            A等于_RAM (#RAM缓存5)


        .判断结束




        状态 ＝ “完成”




    .判断 ((右移 (目的操作数, 16) ＝ #无符号int 或 右移 (目的操作数, 16) ＝ #有符号int) 且 (右移 (左操作数, 16) ＝ #无符号int 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 右移 (右操作数, 16) ＝ #无符号int 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)))

        .判断开始 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数)

            A等于_RAM (左操作数 ＋ 1)
            _RAM等于A (#RAM缓存3)
            A等于_RAM (左操作数)
            _RAM等于A (#RAM缓存4)

            A等于立即数 (右移 (立即数2, 8))
            _RAM等于A (#RAM缓存5)
            A等于立即数 (立即数2)
            _RAM等于A (#RAM缓存6)

        .默认
            A等于_RAM (右操作数 ＋ 1)
            _RAM等于A (#RAM缓存5)
            A等于_RAM (右操作数)
            _RAM等于A (#RAM缓存6)

            A等于立即数 (右移 (立即数1, 8))
            _RAM等于A (#RAM缓存3)
            A等于立即数 (立即数1)
            _RAM等于A (#RAM缓存4)

        .判断结束

        A等于立即数 (0)
        _RAM等于A (#RAM缓存1)
        _RAM等于A (#RAM缓存2)
        _RAM等于A (目的操作数 ＋ 1)
        _RAM等于A (目的操作数)

        A等于立即数 (16)
        _RAM等于A (#RAM缓存9)




        A等于_RAM (#RAM缓存1)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存2)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (#RAM缓存1)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存3)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (#RAM缓存2)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存4)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (#RAM缓存3)
        A等于A加1 ()
        RAM等于A ()


        A等于_RAM (目的操作数 ＋ 1)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        A等于_RAM (目的操作数)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数 ＋ 1)
        A等于A加1 ()
        RAM等于A ()


        A等于_RAM (#RAM缓存1)
        R1等于_RAM (#RAM缓存5)
        A等于A减R1 ()
        JNC (ROM_缓存使用字节 ＋ 10)
        JMP (ROM_缓存使用字节 ＋ 75)
        _RAM等于A (#RAM缓存7)

        A等于_RAM (#RAM缓存2)
        R1等于_RAM (#RAM缓存6)
        A等于A减R1 ()
        _RAM等于A (#RAM缓存8)
        JNC (ROM_缓存使用字节 ＋ 22)
        A等于_RAM (#RAM缓存7)
        A等于A减1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 10)
        JMP (ROM_缓存使用字节 ＋ 32)

        A等于_RAM (#RAM缓存7)
        _RAM等于A (#RAM缓存1)
        A等于_RAM (#RAM缓存8)
        _RAM等于A (#RAM缓存2)

        A等于_RAM (目的操作数)
        A等于A加1 ()
        RAM等于A ()


        A等于_RAM (#RAM缓存9)
        A等于A减1 ()
        RAM等于A ()

        JNZ (ROM_缓存使用字节 － 194)


        状态 ＝ “完成”



    .判断 ((右移 (目的操作数, 16) ＝ #无符号长int 或 右移 (目的操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #无符号长int 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 右移 (右操作数, 16) ＝ #无符号长int 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)))

        .判断开始 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数)

            A等于_RAM (左操作数 ＋ 3)
            _RAM等于A (#RAM缓存5)
            A等于_RAM (左操作数 ＋ 2)
            _RAM等于A (#RAM缓存6)
            A等于_RAM (左操作数 ＋ 1)
            _RAM等于A (#RAM缓存7)
            A等于_RAM (左操作数)
            _RAM等于A (#RAM缓存8)

            A等于立即数 (右移 (立即数2, 24))
            _RAM等于A (#RAM缓存9)
            A等于立即数 (右移 (立即数2, 16))
            _RAM等于A (#RAM缓存10)
            A等于立即数 (右移 (立即数2, 8))
            _RAM等于A (#RAM缓存11)
            A等于立即数 (立即数2)
            _RAM等于A (#RAM缓存12)

        .默认
            A等于立即数 (右移 (立即数1, 24))
            _RAM等于A (#RAM缓存5)
            A等于立即数 (右移 (立即数1, 16))
            _RAM等于A (#RAM缓存6)
            A等于立即数 (右移 (立即数1, 8))
            _RAM等于A (#RAM缓存7)
            A等于立即数 (立即数1)
            _RAM等于A (#RAM缓存8)

            A等于_RAM (右操作数 ＋ 3)
            _RAM等于A (#RAM缓存9)
            A等于_RAM (右操作数 ＋ 2)
            _RAM等于A (#RAM缓存10)
            A等于_RAM (右操作数 ＋ 1)
            _RAM等于A (#RAM缓存11)
            A等于_RAM (右操作数)
            _RAM等于A (#RAM缓存12)

        .判断结束

        A等于立即数 (0)
        _RAM等于A (#RAM缓存1)
        _RAM等于A (#RAM缓存2)
        _RAM等于A (#RAM缓存3)
        _RAM等于A (#RAM缓存4)
        _RAM等于A (目的操作数 ＋ 3)
        _RAM等于A (目的操作数 ＋ 2)
        _RAM等于A (目的操作数 ＋ 1)
        _RAM等于A (目的操作数)

        A等于立即数 (32)
        _RAM等于A (#RAM缓存17)




        A等于_RAM (#RAM缓存1)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存2)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (#RAM缓存1)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存3)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (#RAM缓存2)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存4)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (#RAM缓存3)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存5)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (#RAM缓存4)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存6)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (#RAM缓存5)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存7)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (#RAM缓存6)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存8)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (#RAM缓存7)
        A等于A加1 ()
        RAM等于A ()



        A等于_RAM (目的操作数 ＋ 3)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        A等于_RAM (目的操作数 ＋ 2)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数 ＋ 3)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (目的操作数 ＋ 1)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数 ＋ 2)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (目的操作数)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数 ＋ 1)
        A等于A加1 ()
        RAM等于A ()



        A等于_RAM (#RAM缓存1)
        R1等于_RAM (#RAM缓存9)
        A等于A减R1 ()
        JNC (ROM_缓存使用字节 ＋ 10)
        JMP (ROM_缓存使用字节 ＋ 207)
        _RAM等于A (#RAM缓存13)

        A等于_RAM (#RAM缓存2)
        R1等于_RAM (#RAM缓存10)
        A等于A减R1 ()
        _RAM等于A (#RAM缓存14)
        JNC (ROM_缓存使用字节 ＋ 22)
        A等于_RAM (#RAM缓存13)
        A等于A减1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 10)
        JMP (ROM_缓存使用字节 ＋ 164)

        A等于_RAM (#RAM缓存3)
        R1等于_RAM (#RAM缓存11)
        A等于A减R1 ()
        _RAM等于A (#RAM缓存15)
        JNC (ROM_缓存使用字节 ＋ 34)
        A等于_RAM (#RAM缓存14)
        A等于A减1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 22)
        A等于_RAM (#RAM缓存13)
        A等于A减1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 10)
        JMP (ROM_缓存使用字节 ＋ 114)

        A等于_RAM (#RAM缓存4)
        R1等于_RAM (#RAM缓存12)
        A等于A减R1 ()
        _RAM等于A (#RAM缓存16)
        JNC (ROM_缓存使用字节 ＋ 46)
        A等于_RAM (#RAM缓存15)
        A等于A减1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 34)
        A等于_RAM (#RAM缓存14)
        A等于A减1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 22)
        A等于_RAM (#RAM缓存13)
        A等于A减1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 10)
        JMP (ROM_缓存使用字节 ＋ 52)


        A等于_RAM (#RAM缓存13)
        _RAM等于A (#RAM缓存1)
        A等于_RAM (#RAM缓存14)
        _RAM等于A (#RAM缓存2)
        A等于_RAM (#RAM缓存15)
        _RAM等于A (#RAM缓存3)
        A等于_RAM (#RAM缓存16)
        _RAM等于A (#RAM缓存4)

        A等于_RAM (目的操作数)
        A等于A加1 ()
        RAM等于A ()


        A等于_RAM (#RAM缓存17)
        A等于A减1 ()
        RAM等于A ()

        JNZ (ROM_缓存使用字节 － 446)

        状态 ＝ “完成”



    .判断 ((右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char 或 右移 (目的操作数, 16) ＝ #无符号ACC 或 右移 (目的操作数, 16) ＝ #有符号ACC 或 右移 (目的操作数, 16) ＝ #ACC) 且 (右移 (左操作数, 16) ＝ #有符号ACC 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 右移 (右操作数, 16) ＝ #有符号ACC 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)))

        _RAM等于A (#RAM缓存7)

        .判断开始 (右移 (左操作数, 16) ＝ #有符号ACC)

            .判断开始 (右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char)

                A等于立即数 (0)
                _RAM等于A (#RAM缓存1)
                _RAM等于A (目的操作数)
                .如果真 (位与 (立即数2, 128) ＝ 1)
                    A等于立即数 (255)
                    立即数2 ＝ 位取反 (立即数2) ＋ 1
                .如果真结束
                _RAM等于A (#RAM缓存5)

                A等于_RAM (立即数2)
                _RAM等于A (#RAM缓存3)

                A等于立即数 (8)
                _RAM等于A (#RAM缓存4)


                A等于_RAM (#RAM缓存7)
                R1等于RAM ()
                A等于A加R1 ()

                JNC (ROM_缓存使用字节 ＋ 25)
                A等于A减R1 ()
                A取反 ()
                A等于A加1 ()
                _RAM等于A (#RAM缓存2)
                A等于_RAM (#RAM缓存5)
                A取反 ()
                RAM等于A ()
                JMP (ROM_缓存使用字节 ＋ 11)
                A等于A减R1 ()
                _RAM等于A (#RAM缓存2)




                A等于_RAM (#RAM缓存1)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存2)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (#RAM缓存1)
                A等于A加1 ()
                RAM等于A ()


                A等于_RAM (目的操作数)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()


                A等于_RAM (#RAM缓存1)
                R1等于_RAM (#RAM缓存3)
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 17)
                _RAM等于A (#RAM缓存1)
                A等于_RAM (目的操作数)
                A等于A加1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存4)
                A等于A减1 ()
                RAM等于A ()

                JNZ (ROM_缓存使用字节 － 76)


                A等于_RAM (#RAM缓存5)
                A等于A加1 ()
                JNC (ROM_缓存使用字节 ＋ 13)
                A等于_RAM (目的操作数)
                A取反 ()
                A等于A加1 ()
                RAM等于A ()


            .默认
                A等于立即数 (0)
                _RAM等于A (#RAM缓存1)
                _RAM等于A (#RAM缓存6)
                .如果真 (位与 (立即数2, 128) ＝ 1)
                    A等于立即数 (255)
                    立即数2 ＝ 位取反 (立即数2) ＋ 1
                .如果真结束
                _RAM等于A (#RAM缓存5)

                A等于_RAM (立即数2)
                _RAM等于A (#RAM缓存3)

                A等于立即数 (8)
                _RAM等于A (#RAM缓存4)


                A等于_RAM (#RAM缓存7)
                R1等于RAM ()
                A等于A加R1 ()

                JNC (ROM_缓存使用字节 ＋ 25)
                A等于A减R1 ()
                A取反 ()
                A等于A加1 ()
                _RAM等于A (#RAM缓存2)
                A等于_RAM (#RAM缓存5)
                A取反 ()
                RAM等于A ()
                JMP (ROM_缓存使用字节 ＋ 11)
                A等于A减R1 ()
                _RAM等于A (#RAM缓存2)





                A等于_RAM (#RAM缓存1)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存2)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (#RAM缓存1)
                A等于A加1 ()
                RAM等于A ()


                A等于_RAM (#RAM缓存6)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()


                A等于_RAM (#RAM缓存1)
                R1等于_RAM (#RAM缓存3)
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 17)
                _RAM等于A (#RAM缓存1)
                A等于_RAM (#RAM缓存6)
                A等于A加1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存4)
                A等于A减1 ()
                RAM等于A ()

                JNZ (ROM_缓存使用字节 － 76)


                A等于_RAM (#RAM缓存5)
                A等于A加1 ()
                A等于_RAM (#RAM缓存6)
                JNC (ROM_缓存使用字节 ＋ 7)
                A取反 ()
                A等于A加1 ()

            .判断结束



        .默认

            .判断开始 (右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char)

                A等于立即数 (0)
                _RAM等于A (#RAM缓存1)
                _RAM等于A (目的操作数)
                .如果真 (位与 (立即数1, 128) ＝ 1)
                    A等于立即数 (255)
                    立即数1 ＝ 位取反 (立即数1) ＋ 1
                .如果真结束
                _RAM等于A (#RAM缓存5)

                A等于_RAM (立即数1)
                _RAM等于A (#RAM缓存2)

                A等于立即数 (8)
                _RAM等于A (#RAM缓存4)



                A等于_RAM (#RAM缓存7)
                R1等于RAM ()
                A等于A加R1 ()

                JNC (ROM_缓存使用字节 ＋ 25)
                A等于A减R1 ()
                A取反 ()
                A等于A加1 ()
                _RAM等于A (#RAM缓存3)
                A等于_RAM (#RAM缓存5)
                A取反 ()
                RAM等于A ()
                JMP (ROM_缓存使用字节 ＋ 11)
                A等于A减R1 ()
                _RAM等于A (#RAM缓存3)




                A等于_RAM (#RAM缓存1)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存2)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (#RAM缓存1)
                A等于A加1 ()
                RAM等于A ()


                A等于_RAM (目的操作数)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()


                A等于_RAM (#RAM缓存1)
                R1等于_RAM (#RAM缓存3)
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 17)
                _RAM等于A (#RAM缓存1)
                A等于_RAM (目的操作数)
                A等于A加1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存4)
                A等于A减1 ()
                RAM等于A ()

                JNZ (ROM_缓存使用字节 － 76)


                A等于_RAM (#RAM缓存5)
                A等于A加1 ()
                JNC (ROM_缓存使用字节 ＋ 13)
                A等于_RAM (目的操作数)
                A取反 ()
                A等于A加1 ()
                RAM等于A ()


            .默认
                A等于立即数 (0)
                _RAM等于A (#RAM缓存1)
                _RAM等于A (#RAM缓存6)
                .如果真 (位与 (立即数1, 128) ＝ 1)
                    A等于立即数 (255)
                    立即数1 ＝ 位取反 (立即数1) ＋ 1
                .如果真结束
                _RAM等于A (#RAM缓存5)

                A等于_RAM (立即数1)
                _RAM等于A (#RAM缓存2)

                A等于立即数 (8)
                _RAM等于A (#RAM缓存4)



                A等于_RAM (#RAM缓存7)
                R1等于RAM ()
                A等于A加R1 ()

                JNC (ROM_缓存使用字节 ＋ 25)
                A等于A减R1 ()
                A取反 ()
                A等于A加1 ()
                _RAM等于A (#RAM缓存3)
                A等于_RAM (#RAM缓存5)
                A取反 ()
                RAM等于A ()
                JMP (ROM_缓存使用字节 ＋ 11)
                A等于A减R1 ()
                _RAM等于A (#RAM缓存3)




                A等于_RAM (#RAM缓存1)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存2)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (#RAM缓存1)
                A等于A加1 ()
                RAM等于A ()


                A等于_RAM (#RAM缓存6)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()


                A等于_RAM (#RAM缓存1)
                R1等于_RAM (#RAM缓存3)
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 17)
                _RAM等于A (#RAM缓存1)
                A等于_RAM (#RAM缓存6)
                A等于A加1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存4)
                A等于A减1 ()
                RAM等于A ()

                JNZ (ROM_缓存使用字节 － 76)


                A等于_RAM (#RAM缓存5)
                A等于A加1 ()
                A等于_RAM (#RAM缓存6)
                JNC (ROM_缓存使用字节 ＋ 7)
                A取反 ()
                A等于A加1 ()

            .判断结束


        .判断结束


        状态 ＝ “完成”





    .判断 ((右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char 或 右移 (目的操作数, 16) ＝ #无符号ACC 或 右移 (目的操作数, 16) ＝ #有符号ACC 或 右移 (目的操作数, 16) ＝ #ACC) 且 (右移 (左操作数, 16) ＝ #有符号char 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 右移 (右操作数, 16) ＝ #有符号char 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)))

        .判断开始 (右移 (左操作数, 16) ＝ #有符号char)

            .判断开始 (右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char)

                A等于立即数 (0)
                _RAM等于A (#RAM缓存1)
                _RAM等于A (目的操作数)
                .如果真 (位与 (立即数2, 128) ＝ 1)
                    A等于立即数 (255)
                    立即数2 ＝ 位取反 (立即数2) ＋ 1
                .如果真结束
                _RAM等于A (#RAM缓存5)

                A等于_RAM (立即数2)
                _RAM等于A (#RAM缓存3)

                A等于立即数 (8)
                _RAM等于A (#RAM缓存4)


                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A加R1 ()

                JNC (ROM_缓存使用字节 ＋ 25)
                A等于A减R1 ()
                A取反 ()
                A等于A加1 ()
                _RAM等于A (#RAM缓存2)
                A等于_RAM (#RAM缓存5)
                A取反 ()
                RAM等于A ()
                JMP (ROM_缓存使用字节 ＋ 11)
                A等于A减R1 ()
                _RAM等于A (#RAM缓存2)




                A等于_RAM (#RAM缓存1)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存2)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (#RAM缓存1)
                A等于A加1 ()
                RAM等于A ()


                A等于_RAM (目的操作数)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()


                A等于_RAM (#RAM缓存1)
                R1等于_RAM (#RAM缓存3)
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 17)
                _RAM等于A (#RAM缓存1)
                A等于_RAM (目的操作数)
                A等于A加1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存4)
                A等于A减1 ()
                RAM等于A ()

                JNZ (ROM_缓存使用字节 － 76)


                A等于_RAM (#RAM缓存5)
                A等于A加1 ()
                JNC (ROM_缓存使用字节 ＋ 13)
                A等于_RAM (目的操作数)
                A取反 ()
                A等于A加1 ()
                RAM等于A ()


            .默认
                A等于立即数 (0)
                _RAM等于A (#RAM缓存1)
                _RAM等于A (#RAM缓存6)
                .如果真 (位与 (立即数2, 128) ＝ 1)
                    A等于立即数 (255)
                    立即数2 ＝ 位取反 (立即数2) ＋ 1
                .如果真结束
                _RAM等于A (#RAM缓存5)

                A等于_RAM (立即数2)
                _RAM等于A (#RAM缓存3)

                A等于立即数 (8)
                _RAM等于A (#RAM缓存4)


                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A加R1 ()

                JNC (ROM_缓存使用字节 ＋ 25)
                A等于A减R1 ()
                A取反 ()
                A等于A加1 ()
                _RAM等于A (#RAM缓存2)
                A等于_RAM (#RAM缓存5)
                A取反 ()
                RAM等于A ()
                JMP (ROM_缓存使用字节 ＋ 11)
                A等于A减R1 ()
                _RAM等于A (#RAM缓存2)





                A等于_RAM (#RAM缓存1)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存2)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (#RAM缓存1)
                A等于A加1 ()
                RAM等于A ()


                A等于_RAM (#RAM缓存6)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()


                A等于_RAM (#RAM缓存1)
                R1等于_RAM (#RAM缓存3)
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 17)
                _RAM等于A (#RAM缓存1)
                A等于_RAM (#RAM缓存6)
                A等于A加1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存4)
                A等于A减1 ()
                RAM等于A ()

                JNZ (ROM_缓存使用字节 － 76)


                A等于_RAM (#RAM缓存5)
                A等于A加1 ()
                A等于_RAM (#RAM缓存6)
                JNC (ROM_缓存使用字节 ＋ 7)
                A取反 ()
                A等于A加1 ()

            .判断结束



        .默认

            .判断开始 (右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char)

                A等于立即数 (0)
                _RAM等于A (#RAM缓存1)
                _RAM等于A (目的操作数)
                .如果真 (位与 (立即数1, 128) ＝ 1)
                    A等于立即数 (255)
                    立即数1 ＝ 位取反 (立即数1) ＋ 1
                .如果真结束
                _RAM等于A (#RAM缓存5)

                A等于_RAM (立即数1)
                _RAM等于A (#RAM缓存2)

                A等于立即数 (8)
                _RAM等于A (#RAM缓存4)



                A等于_RAM (右操作数)
                R1等于RAM ()
                A等于A加R1 ()

                JNC (ROM_缓存使用字节 ＋ 25)
                A等于A减R1 ()
                A取反 ()
                A等于A加1 ()
                _RAM等于A (#RAM缓存3)
                A等于_RAM (#RAM缓存5)
                A取反 ()
                RAM等于A ()
                JMP (ROM_缓存使用字节 ＋ 11)
                A等于A减R1 ()
                _RAM等于A (#RAM缓存3)




                A等于_RAM (#RAM缓存1)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存2)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (#RAM缓存1)
                A等于A加1 ()
                RAM等于A ()


                A等于_RAM (目的操作数)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()


                A等于_RAM (#RAM缓存1)
                R1等于_RAM (#RAM缓存3)
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 17)
                _RAM等于A (#RAM缓存1)
                A等于_RAM (目的操作数)
                A等于A加1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存4)
                A等于A减1 ()
                RAM等于A ()

                JNZ (ROM_缓存使用字节 － 76)


                A等于_RAM (#RAM缓存5)
                A等于A加1 ()
                JNC (ROM_缓存使用字节 ＋ 13)
                A等于_RAM (目的操作数)
                A取反 ()
                A等于A加1 ()
                RAM等于A ()


            .默认
                A等于立即数 (0)
                _RAM等于A (#RAM缓存1)
                _RAM等于A (#RAM缓存6)
                .如果真 (位与 (立即数1, 128) ＝ 1)
                    A等于立即数 (255)
                    立即数1 ＝ 位取反 (立即数1) ＋ 1
                .如果真结束
                _RAM等于A (#RAM缓存5)

                A等于_RAM (立即数1)
                _RAM等于A (#RAM缓存2)

                A等于立即数 (8)
                _RAM等于A (#RAM缓存4)



                A等于_RAM (右操作数)
                R1等于RAM ()
                A等于A加R1 ()

                JNC (ROM_缓存使用字节 ＋ 25)
                A等于A减R1 ()
                A取反 ()
                A等于A加1 ()
                _RAM等于A (#RAM缓存3)
                A等于_RAM (#RAM缓存5)
                A取反 ()
                RAM等于A ()
                JMP (ROM_缓存使用字节 ＋ 11)
                A等于A减R1 ()
                _RAM等于A (#RAM缓存3)




                A等于_RAM (#RAM缓存1)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存2)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (#RAM缓存1)
                A等于A加1 ()
                RAM等于A ()


                A等于_RAM (#RAM缓存6)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()


                A等于_RAM (#RAM缓存1)
                R1等于_RAM (#RAM缓存3)
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 17)
                _RAM等于A (#RAM缓存1)
                A等于_RAM (#RAM缓存6)
                A等于A加1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存4)
                A等于A减1 ()
                RAM等于A ()

                JNZ (ROM_缓存使用字节 － 76)


                A等于_RAM (#RAM缓存5)
                A等于A加1 ()
                A等于_RAM (#RAM缓存6)
                JNC (ROM_缓存使用字节 ＋ 7)
                A取反 ()
                A等于A加1 ()

            .判断结束


        .判断结束


        状态 ＝ “完成”



    .判断 ((右移 (目的操作数, 16) ＝ #无符号int 或 右移 (目的操作数, 16) ＝ #有符号int) 且 (右移 (左操作数, 16) ＝ #有符号int 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 右移 (右操作数, 16) ＝ #有符号int 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)))

        .判断开始 (右移 (左操作数, 16) ＝ #有符号int)

            A等于立即数 (0)
            _RAM等于A (#RAM缓存1)
            _RAM等于A (#RAM缓存2)
            _RAM等于A (目的操作数 ＋ 1)
            _RAM等于A (目的操作数)
            .如果真 (位与 (立即数2, 32768) ＝ 1)
                A等于立即数 (255)
                立即数2 ＝ 位取反 (立即数2) ＋ 1
            .如果真结束
            _RAM等于A (#RAM缓存10)

            A等于立即数 (右移 (立即数2, 8))
            _RAM等于A (#RAM缓存5)
            A等于立即数 (立即数2)
            _RAM等于A (#RAM缓存6)

            A等于立即数 (16)
            _RAM等于A (#RAM缓存9)




            A等于_RAM (左操作数 ＋ 1)
            R1等于RAM ()
            A等于A加R1 ()
            JNC (ROM_缓存使用字节 ＋ 46)
            A等于_RAM (左操作数)
            A取反 ()
            A等于A加1 ()
            _RAM等于A (#RAM缓存4)
            A等于_RAM (左操作数 ＋ 1)
            A取反 ()
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            _RAM等于A (#RAM缓存3)
            A等于_RAM (#RAM缓存10)
            A取反 ()
            RAM等于A ()
            JMP (ROM_缓存使用字节 ＋ 21)
            A等于A减R1 ()
            _RAM等于A (#RAM缓存3)
            A等于_RAM (左操作数)
            _RAM等于A (#RAM缓存4)







            A等于_RAM (#RAM缓存1)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存2)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存1)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存3)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存2)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存4)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存3)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (目的操作数 ＋ 1)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (目的操作数)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 1)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (#RAM缓存1)
            R1等于_RAM (#RAM缓存5)
            A等于A减R1 ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 75)
            _RAM等于A (#RAM缓存7)

            A等于_RAM (#RAM缓存2)
            R1等于_RAM (#RAM缓存6)
            A等于A减R1 ()
            _RAM等于A (#RAM缓存8)
            JNC (ROM_缓存使用字节 ＋ 22)
            A等于_RAM (#RAM缓存7)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 32)

            A等于_RAM (#RAM缓存7)
            _RAM等于A (#RAM缓存1)
            A等于_RAM (#RAM缓存8)
            _RAM等于A (#RAM缓存2)

            A等于_RAM (目的操作数)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (#RAM缓存9)
            A等于A减1 ()
            RAM等于A ()

            JNZ (ROM_缓存使用字节 － 194)




            A等于_RAM (32)
            A等于A加1 ()

            JNC (ROM_缓存使用字节 ＋ 30)

            A等于_RAM (目的操作数)
            A取反 ()
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (目的操作数 ＋ 1)
            A取反 ()
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            _RAM等于A (目的操作数 ＋ 1)


        .默认
            A等于立即数 (0)
            _RAM等于A (#RAM缓存1)
            _RAM等于A (#RAM缓存2)
            _RAM等于A (目的操作数 ＋ 1)
            _RAM等于A (目的操作数)
            .如果真 (位与 (立即数1, 32768) ＝ 1)
                A等于立即数 (255)
                立即数1 ＝ 位取反 (立即数1) ＋ 1
            .如果真结束
            _RAM等于A (#RAM缓存10)

            A等于立即数 (右移 (立即数1, 8))
            _RAM等于A (#RAM缓存3)
            A等于立即数 (立即数1)
            _RAM等于A (#RAM缓存4)


            A等于立即数 (16)
            _RAM等于A (#RAM缓存9)




            A等于_RAM (右操作数 ＋ 1)
            R1等于RAM ()
            A等于A加R1 ()
            JNC (ROM_缓存使用字节 ＋ 46)
            A等于_RAM (右操作数)
            A取反 ()
            A等于A加1 ()
            _RAM等于A (#RAM缓存6)
            A等于_RAM (右操作数 ＋ 1)
            A取反 ()
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            _RAM等于A (#RAM缓存5)
            A等于_RAM (#RAM缓存10)
            A取反 ()
            RAM等于A ()
            JMP (ROM_缓存使用字节 ＋ 21)
            A等于A减R1 ()
            _RAM等于A (#RAM缓存5)
            A等于_RAM (右操作数)
            _RAM等于A (#RAM缓存6)





            A等于_RAM (#RAM缓存1)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存2)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存1)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存3)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存2)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存4)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存3)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (目的操作数 ＋ 1)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (目的操作数)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 1)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (#RAM缓存1)
            R1等于_RAM (#RAM缓存5)
            A等于A减R1 ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 75)
            _RAM等于A (#RAM缓存7)

            A等于_RAM (#RAM缓存2)
            R1等于_RAM (#RAM缓存6)
            A等于A减R1 ()
            _RAM等于A (#RAM缓存8)
            JNC (ROM_缓存使用字节 ＋ 22)
            A等于_RAM (#RAM缓存7)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 32)

            A等于_RAM (#RAM缓存7)
            _RAM等于A (#RAM缓存1)
            A等于_RAM (#RAM缓存8)
            _RAM等于A (#RAM缓存2)

            A等于_RAM (目的操作数)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (#RAM缓存9)
            A等于A减1 ()
            RAM等于A ()

            JNZ (ROM_缓存使用字节 － 194)




            A等于_RAM (32)
            A等于A加1 ()

            JNC (ROM_缓存使用字节 ＋ 30)

            A等于_RAM (目的操作数)
            A取反 ()
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (目的操作数 ＋ 1)
            A取反 ()
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            _RAM等于A (目的操作数 ＋ 1)


        .判断结束



        状态 ＝ “完成”





    .判断 ((右移 (目的操作数, 16) ＝ #无符号长int 或 右移 (目的操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #有符号长int 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 右移 (右操作数, 16) ＝ #有符号长int 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)))

        .判断开始 (右移 (左操作数, 16) ＝ #有符号长int)

            A等于立即数 (0)
            _RAM等于A (#RAM缓存1)
            _RAM等于A (#RAM缓存2)
            _RAM等于A (#RAM缓存3)
            _RAM等于A (#RAM缓存4)
            _RAM等于A (目的操作数 ＋ 3)
            _RAM等于A (目的操作数 ＋ 2)
            _RAM等于A (目的操作数 ＋ 1)
            _RAM等于A (目的操作数)
            .如果真 (位与 (立即数2, 2147483648) ＝ 1)
                A等于立即数 (255)
                立即数2 ＝ 位取反 (立即数2) ＋ 1
            .如果真结束
            _RAM等于A (#RAM缓存18)

            A等于立即数 (右移 (立即数2, 24))
            _RAM等于A (#RAM缓存9)
            A等于立即数 (右移 (立即数2, 16))
            _RAM等于A (#RAM缓存10)
            A等于立即数 (右移 (立即数2, 8))
            _RAM等于A (#RAM缓存11)
            A等于立即数 (立即数2)
            _RAM等于A (#RAM缓存12)

            A等于立即数 (32)
            _RAM等于A (#RAM缓存17)



            A等于_RAM (左操作数 ＋ 3)
            R1等于RAM ()
            A等于A加R1 ()
            JNC (ROM_缓存使用字节 ＋ 80)
            A等于_RAM (左操作数)
            A取反 ()
            A等于A加1 ()
            _RAM等于A (#RAM缓存8)
            A等于_RAM (左操作数 ＋ 1)
            A取反 ()
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            _RAM等于A (#RAM缓存7)
            A等于_RAM (左操作数 ＋ 2)
            A取反 ()
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            _RAM等于A (#RAM缓存6)
            A等于_RAM (左操作数 ＋ 3)
            A取反 ()
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            _RAM等于A (#RAM缓存5)
            A等于_RAM (#RAM缓存18)
            A取反 ()
            RAM等于A ()
            JMP (ROM_缓存使用字节 ＋ 41)
            A等于A减R1 ()
            _RAM等于A (#RAM缓存5)
            A等于_RAM (左操作数 ＋ 2)
            _RAM等于A (#RAM缓存6)
            A等于_RAM (左操作数 ＋ 1)
            _RAM等于A (#RAM缓存7)
            A等于_RAM (左操作数)
            _RAM等于A (#RAM缓存8)






            A等于_RAM (#RAM缓存1)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存2)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存1)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存3)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存2)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存4)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存3)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存5)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存4)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存6)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存5)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存7)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存6)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存8)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存7)
            A等于A加1 ()
            RAM等于A ()



            A等于_RAM (目的操作数 ＋ 3)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (目的操作数 ＋ 2)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 3)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (目的操作数 ＋ 1)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 2)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (目的操作数)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 1)
            A等于A加1 ()
            RAM等于A ()



            A等于_RAM (#RAM缓存1)
            R1等于_RAM (#RAM缓存9)
            A等于A减R1 ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 207)
            _RAM等于A (#RAM缓存13)

            A等于_RAM (#RAM缓存2)
            R1等于_RAM (#RAM缓存10)
            A等于A减R1 ()
            _RAM等于A (#RAM缓存14)
            JNC (ROM_缓存使用字节 ＋ 22)
            A等于_RAM (#RAM缓存13)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 164)

            A等于_RAM (#RAM缓存3)
            R1等于_RAM (#RAM缓存11)
            A等于A减R1 ()
            _RAM等于A (#RAM缓存15)
            JNC (ROM_缓存使用字节 ＋ 34)
            A等于_RAM (#RAM缓存14)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 22)
            A等于_RAM (#RAM缓存13)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 114)

            A等于_RAM (#RAM缓存4)
            R1等于_RAM (#RAM缓存12)
            A等于A减R1 ()
            _RAM等于A (#RAM缓存16)
            JNC (ROM_缓存使用字节 ＋ 46)
            A等于_RAM (#RAM缓存15)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 34)
            A等于_RAM (#RAM缓存14)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 22)
            A等于_RAM (#RAM缓存13)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 52)


            A等于_RAM (#RAM缓存13)
            _RAM等于A (#RAM缓存1)
            A等于_RAM (#RAM缓存14)
            _RAM等于A (#RAM缓存2)
            A等于_RAM (#RAM缓存15)
            _RAM等于A (#RAM缓存3)
            A等于_RAM (#RAM缓存16)
            _RAM等于A (#RAM缓存4)

            A等于_RAM (目的操作数)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (#RAM缓存17)
            A等于A减1 ()
            RAM等于A ()

            JNZ (ROM_缓存使用字节 － 446)





            A等于_RAM (#RAM缓存18)
            A等于A加1 ()

            JNC (ROM_缓存使用字节 ＋ 64)

            A等于_RAM (目的操作数)
            A取反 ()
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (目的操作数 ＋ 1)
            A取反 ()
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            _RAM等于A (目的操作数 ＋ 1)

            A等于_RAM (目的操作数 ＋ 2)
            A取反 ()
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            _RAM等于A (目的操作数 ＋ 2)

            A等于_RAM (目的操作数 ＋ 3)
            A取反 ()
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            _RAM等于A (目的操作数 ＋ 3)




        .默认

            A等于立即数 (0)
            _RAM等于A (#RAM缓存1)
            _RAM等于A (#RAM缓存2)
            _RAM等于A (#RAM缓存3)
            _RAM等于A (#RAM缓存4)
            _RAM等于A (目的操作数 ＋ 3)
            _RAM等于A (目的操作数 ＋ 2)
            _RAM等于A (目的操作数 ＋ 1)
            _RAM等于A (目的操作数)
            .如果真 (位与 (立即数1, 2147483648) ＝ 1)
                A等于立即数 (255)
                立即数1 ＝ 位取反 (立即数1) ＋ 1
            .如果真结束
            _RAM等于A (#RAM缓存18)

            A等于立即数 (右移 (立即数1, 24))
            _RAM等于A (#RAM缓存5)
            A等于立即数 (右移 (立即数1, 16))
            _RAM等于A (#RAM缓存6)
            A等于立即数 (右移 (立即数1, 8))
            _RAM等于A (#RAM缓存7)
            A等于立即数 (立即数1)
            _RAM等于A (#RAM缓存8)


            A等于立即数 (32)
            _RAM等于A (#RAM缓存17)





            A等于_RAM (右操作数 ＋ 3)
            R1等于RAM ()
            A等于A加R1 ()
            JNC (ROM_缓存使用字节 ＋ 80)
            A等于_RAM (右操作数)
            A取反 ()
            A等于A加1 ()
            _RAM等于A (#RAM缓存12)
            A等于_RAM (右操作数 ＋ 1)
            A取反 ()
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            _RAM等于A (#RAM缓存11)
            A等于_RAM (右操作数 ＋ 2)
            A取反 ()
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            _RAM等于A (#RAM缓存10)
            A等于_RAM (右操作数 ＋ 3)
            A取反 ()
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            _RAM等于A (#RAM缓存9)
            A等于_RAM (#RAM缓存18)
            A取反 ()
            RAM等于A ()
            JMP (ROM_缓存使用字节 ＋ 41)
            A等于A减R1 ()
            _RAM等于A (#RAM缓存9)
            A等于_RAM (右操作数 ＋ 2)
            _RAM等于A (#RAM缓存10)
            A等于_RAM (右操作数 ＋ 1)
            _RAM等于A (#RAM缓存11)
            A等于_RAM (右操作数)
            _RAM等于A (#RAM缓存12)






            A等于_RAM (#RAM缓存1)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存2)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存1)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存3)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存2)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存4)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存3)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存5)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存4)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存6)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存5)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存7)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存6)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存8)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存7)
            A等于A加1 ()
            RAM等于A ()



            A等于_RAM (目的操作数 ＋ 3)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (目的操作数 ＋ 2)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 3)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (目的操作数 ＋ 1)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 2)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (目的操作数)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 1)
            A等于A加1 ()
            RAM等于A ()



            A等于_RAM (#RAM缓存1)
            R1等于_RAM (#RAM缓存9)
            A等于A减R1 ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 207)
            _RAM等于A (#RAM缓存13)

            A等于_RAM (#RAM缓存2)
            R1等于_RAM (#RAM缓存10)
            A等于A减R1 ()
            _RAM等于A (#RAM缓存14)
            JNC (ROM_缓存使用字节 ＋ 22)
            A等于_RAM (#RAM缓存13)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 164)

            A等于_RAM (#RAM缓存3)
            R1等于_RAM (#RAM缓存11)
            A等于A减R1 ()
            _RAM等于A (#RAM缓存15)
            JNC (ROM_缓存使用字节 ＋ 34)
            A等于_RAM (#RAM缓存14)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 22)
            A等于_RAM (#RAM缓存13)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 114)

            A等于_RAM (#RAM缓存4)
            R1等于_RAM (#RAM缓存12)
            A等于A减R1 ()
            _RAM等于A (#RAM缓存16)
            JNC (ROM_缓存使用字节 ＋ 46)
            A等于_RAM (#RAM缓存15)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 34)
            A等于_RAM (#RAM缓存14)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 22)
            A等于_RAM (#RAM缓存13)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 52)


            A等于_RAM (#RAM缓存13)
            _RAM等于A (#RAM缓存1)
            A等于_RAM (#RAM缓存14)
            _RAM等于A (#RAM缓存2)
            A等于_RAM (#RAM缓存15)
            _RAM等于A (#RAM缓存3)
            A等于_RAM (#RAM缓存16)
            _RAM等于A (#RAM缓存4)

            A等于_RAM (目的操作数)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (#RAM缓存17)
            A等于A减1 ()
            RAM等于A ()

            JNZ (ROM_缓存使用字节 － 446)





            A等于_RAM (#RAM缓存18)
            A等于A加1 ()

            JNC (ROM_缓存使用字节 ＋ 64)

            A等于_RAM (目的操作数)
            A取反 ()
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (目的操作数 ＋ 1)
            A取反 ()
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            _RAM等于A (目的操作数 ＋ 1)

            A等于_RAM (目的操作数 ＋ 2)
            A取反 ()
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            _RAM等于A (目的操作数 ＋ 2)

            A等于_RAM (目的操作数 ＋ 3)
            A取反 ()
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            _RAM等于A (目的操作数 ＋ 3)

        .判断结束


        状态 ＝ “完成”


    .默认
        状态 ＝ “二元式机器码生成_/_运算类型错误或不存在...~!- -”
    .判断结束





.判断 (运算符 ＝ “%”)

    .判断开始 (右移 (左操作数, 16) ＝ #立即数)
        立即数1 ＝ 立即数值 [位与 (左操作数, 65535) ＋ 1]
    .判断 (右移 (左操作数, 16) ＝ #常量)
        立即数1 ＝ 常量值 [位与 (左操作数, 65535) ＋ 1]
    .判断 (右移 (左操作数, 16) ＝ #无符号char数组 或 右移 (左操作数, 16) ＝ #有符号char数组 或 右移 (左操作数, 16) ＝ #无符号int数组 或 右移 (左操作数, 16) ＝ #有符号int数组 或 右移 (左操作数, 16) ＝ #无符号长int数组 或 右移 (左操作数, 16) ＝ #有符号长int数组)
        立即数1 ＝ 位与 (左操作数, 65535)
    .判断 (右移 (左操作数, 16) ＝ 0)
        立即数1 ＝ 位与 (左操作数, 65535)
        左操作数 ＝ #立即数 × 65536
    .默认

    .判断结束


    .判断开始 (右移 (右操作数, 16) ＝ #立即数)
        立即数2 ＝ 立即数值 [位与 (右操作数, 65535) ＋ 1]
    .判断 (右移 (右操作数, 16) ＝ #常量)
        立即数2 ＝ 常量值 [位与 (右操作数, 65535) ＋ 1]
    .判断 (右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组)
        立即数2 ＝ 位与 (右操作数, 65535)
    .判断 (右移 (右操作数, 16) ＝ 0)
        立即数2 ＝ 位与 (右操作数, 65535)
        右操作数 ＝ #立即数 × 65536
    .默认

    .判断结束






    .判断开始 ((右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char 或 右移 (目的操作数, 16) ＝ #无符号ACC 或 右移 (目的操作数, 16) ＝ #有符号ACC 或 右移 (目的操作数, 16) ＝ #ACC) 且 (右移 (左操作数, 16) ＝ #无符号char 且 右移 (右操作数, 16) ＝ #有符号char 或 右移 (左操作数, 16) ＝ #有符号char 且 右移 (右操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #无符号char 且 右移 (右操作数, 16) ＝ #无符号char))

        .判断开始 (右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char)

            A等于_RAM (左操作数)
            _RAM等于A (#RAM缓存2)
            A等于_RAM (右操作数)
            _RAM等于A (#RAM缓存3)

            A等于立即数 (0)
            _RAM等于A (目的操作数)
            A等于立即数 (8)
            _RAM等于A (#RAM缓存4)


            A等于_RAM (目的操作数)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存2)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (目的操作数)
            R1等于_RAM (#RAM缓存3)
            A等于A减R1 ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 10)
            _RAM等于A (目的操作数)

            A等于_RAM (#RAM缓存4)
            A等于A减1 ()
            RAM等于A ()

            JNZ (ROM_缓存使用字节 － 61)


        .默认
            A等于_RAM (左操作数)
            _RAM等于A (#RAM缓存2)
            A等于_RAM (右操作数)
            _RAM等于A (#RAM缓存3)

            A等于立即数 (0)
            _RAM等于A (#RAM缓存1)
            A等于立即数 (8)
            _RAM等于A (#RAM缓存4)


            A等于_RAM (#RAM缓存1)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存2)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存1)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (#RAM缓存1)
            R1等于_RAM (#RAM缓存3)
            A等于A减R1 ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 10)
            _RAM等于A (#RAM缓存1)

            A等于_RAM (#RAM缓存4)
            A等于A减1 ()
            RAM等于A ()

            JNZ (ROM_缓存使用字节 － 61)

            A等于_RAM (#RAM缓存1)

        .判断结束




        状态 ＝ “完成”




    .判断 ((右移 (目的操作数, 16) ＝ #无符号int 或 右移 (目的操作数, 16) ＝ #有符号int) 且 (右移 (左操作数, 16) ＝ #无符号int 且 右移 (右操作数, 16) ＝ #有符号int 或 右移 (左操作数, 16) ＝ #有符号int 且 右移 (右操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #无符号int 且 右移 (右操作数, 16) ＝ #无符号int))

        A等于立即数 (0)
        _RAM等于A (目的操作数 ＋ 1)
        _RAM等于A (目的操作数)

        A等于_RAM (左操作数 ＋ 1)
        _RAM等于A (#RAM缓存3)
        A等于_RAM (左操作数)
        _RAM等于A (#RAM缓存4)

        A等于_RAM (右操作数 ＋ 1)
        _RAM等于A (#RAM缓存5)
        A等于_RAM (右操作数)
        _RAM等于A (#RAM缓存6)

        A等于立即数 (16)
        _RAM等于A (#RAM缓存9)




        A等于_RAM (目的操作数 ＋ 1)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        A等于_RAM (目的操作数)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数 ＋ 1)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存3)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存4)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (#RAM缓存3)
        A等于A加1 ()
        RAM等于A ()



        A等于_RAM (目的操作数 ＋ 1)
        R1等于_RAM (#RAM缓存5)
        A等于A减R1 ()
        JNC (ROM_缓存使用字节 ＋ 10)
        JMP (ROM_缓存使用字节 ＋ 68)
        _RAM等于A (#RAM缓存7)

        A等于_RAM (目的操作数)
        R1等于_RAM (#RAM缓存6)
        A等于A减R1 ()
        _RAM等于A (#RAM缓存8)
        JNC (ROM_缓存使用字节 ＋ 22)
        A等于_RAM (#RAM缓存7)
        A等于A减1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 10)
        JMP (ROM_缓存使用字节 ＋ 25)

        A等于_RAM (#RAM缓存7)
        _RAM等于A (目的操作数 ＋ 1)
        A等于_RAM (#RAM缓存8)
        _RAM等于A (目的操作数)


        A等于_RAM (#RAM缓存9)
        A等于A减1 ()
        RAM等于A ()

        JNZ (ROM_缓存使用字节 － 159)


        状态 ＝ “完成”





    .判断 ((右移 (目的操作数, 16) ＝ #无符号长int 或 右移 (目的操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #无符号长int 且 右移 (右操作数, 16) ＝ #有符号长int 或 右移 (左操作数, 16) ＝ #有符号长int 且 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #无符号长int 且 右移 (右操作数, 16) ＝ #无符号长int))

        A等于立即数 (0)
        _RAM等于A (目的操作数 ＋ 3)
        _RAM等于A (目的操作数 ＋ 2)
        _RAM等于A (目的操作数 ＋ 1)
        _RAM等于A (目的操作数)

        A等于_RAM (左操作数 ＋ 3)
        _RAM等于A (#RAM缓存5)
        A等于_RAM (左操作数 ＋ 2)
        _RAM等于A (#RAM缓存6)
        A等于_RAM (左操作数 ＋ 1)
        _RAM等于A (#RAM缓存7)
        A等于_RAM (左操作数)
        _RAM等于A (#RAM缓存8)

        A等于_RAM (右操作数 ＋ 3)
        _RAM等于A (#RAM缓存9)
        A等于_RAM (右操作数 ＋ 2)
        _RAM等于A (#RAM缓存10)
        A等于_RAM (右操作数 ＋ 1)
        _RAM等于A (#RAM缓存11)
        A等于_RAM (右操作数)
        _RAM等于A (#RAM缓存12)

        A等于立即数 (32)
        _RAM等于A (#RAM缓存17)




        A等于_RAM (目的操作数 ＋ 3)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        A等于_RAM (目的操作数 ＋ 2)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数 ＋ 3)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (目的操作数 ＋ 1)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数 ＋ 2)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (目的操作数)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数 ＋ 1)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存5)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存6)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (#RAM缓存5)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存7)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (#RAM缓存6)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存8)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (#RAM缓存7)
        A等于A加1 ()
        RAM等于A ()



        A等于_RAM (目的操作数 ＋ 3)
        R1等于_RAM (#RAM缓存9)
        A等于A减R1 ()
        JNC (ROM_缓存使用字节 ＋ 10)
        JMP (ROM_缓存使用字节 ＋ 200)
        _RAM等于A (#RAM缓存13)

        A等于_RAM (目的操作数 ＋ 2)
        R1等于_RAM (#RAM缓存10)
        A等于A减R1 ()
        _RAM等于A (#RAM缓存14)
        JNC (ROM_缓存使用字节 ＋ 22)
        A等于_RAM (#RAM缓存13)
        A等于A减1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 10)
        JMP (ROM_缓存使用字节 ＋ 157)

        A等于_RAM (目的操作数 ＋ 1)
        R1等于_RAM (#RAM缓存11)
        A等于A减R1 ()
        _RAM等于A (#RAM缓存15)
        JNC (ROM_缓存使用字节 ＋ 34)
        A等于_RAM (#RAM缓存14)
        A等于A减1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 22)
        A等于_RAM (#RAM缓存13)
        A等于A减1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 10)
        JMP (ROM_缓存使用字节 ＋ 107)

        A等于_RAM (目的操作数)
        R1等于_RAM (#RAM缓存12)
        A等于A减R1 ()
        _RAM等于A (#RAM缓存16)
        JNC (ROM_缓存使用字节 ＋ 46)
        A等于_RAM (#RAM缓存15)
        A等于A减1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 34)
        A等于_RAM (#RAM缓存14)
        A等于A减1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 22)
        A等于_RAM (#RAM缓存13)
        A等于A减1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 10)
        JMP (ROM_缓存使用字节 ＋ 45)


        A等于_RAM (#RAM缓存13)
        _RAM等于A (目的操作数 ＋ 3)
        A等于_RAM (#RAM缓存14)
        _RAM等于A (目的操作数 ＋ 2)
        A等于_RAM (#RAM缓存15)
        _RAM等于A (目的操作数 ＋ 1)
        A等于_RAM (#RAM缓存16)
        _RAM等于A (目的操作数)


        A等于_RAM (#RAM缓存17)
        A等于A减1 ()
        RAM等于A ()

        JNZ (ROM_缓存使用字节 － 371)

        状态 ＝ “完成”



    .判断 ((右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char 或 右移 (目的操作数, 16) ＝ #无符号ACC 或 右移 (目的操作数, 16) ＝ #有符号ACC 或 右移 (目的操作数, 16) ＝ #ACC) 且 右移 (左操作数, 16) ＝ #有符号char 且 右移 (右操作数, 16) ＝ #有符号char)

        .判断开始 (右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char)

            A等于立即数 (0)
            _RAM等于A (目的操作数)
            _RAM等于A (#RAM缓存5)

            A等于立即数 (8)
            _RAM等于A (#RAM缓存4)


            A等于_RAM (左操作数)
            R1等于RAM ()
            A等于A加R1 ()

            JNC (ROM_缓存使用字节 ＋ 25)
            A等于A减R1 ()
            A取反 ()
            A等于A加1 ()
            _RAM等于A (#RAM缓存2)
            A等于_RAM (#RAM缓存5)
            A取反 ()
            RAM等于A ()
            JMP (ROM_缓存使用字节 ＋ 11)
            A等于A减R1 ()
            _RAM等于A (#RAM缓存2)

            A等于_RAM (右操作数)
            R1等于RAM ()
            A等于A加R1 ()

            JNC (ROM_缓存使用字节 ＋ 18)
            A等于A减R1 ()
            A取反 ()
            A等于A加1 ()
            _RAM等于A (#RAM缓存3)
            JMP (ROM_缓存使用字节 ＋ 11)
            A等于A减R1 ()
            _RAM等于A (#RAM缓存3)




            A等于_RAM (目的操作数)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存2)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (目的操作数)
            R1等于_RAM (#RAM缓存3)
            A等于A减R1 ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 10)
            _RAM等于A (目的操作数)

            A等于_RAM (#RAM缓存4)
            A等于A减1 ()
            RAM等于A ()

            JNZ (ROM_缓存使用字节 － 61)




            A等于_RAM (#RAM缓存5)
            A等于A加1 ()
            JNC (ROM_缓存使用字节 ＋ 13)
            A等于_RAM (目的操作数)
            A取反 ()
            A等于A加1 ()
            RAM等于A ()


        .默认
            A等于立即数 (0)
            _RAM等于A (#RAM缓存1)
            _RAM等于A (#RAM缓存5)

            A等于立即数 (8)
            _RAM等于A (#RAM缓存4)


            A等于_RAM (左操作数)
            R1等于RAM ()
            A等于A加R1 ()

            JNC (ROM_缓存使用字节 ＋ 25)
            A等于A减R1 ()
            A取反 ()
            A等于A加1 ()
            _RAM等于A (#RAM缓存2)
            A等于_RAM (#RAM缓存5)
            A取反 ()
            RAM等于A ()
            JMP (ROM_缓存使用字节 ＋ 11)
            A等于A减R1 ()
            _RAM等于A (#RAM缓存2)

            A等于_RAM (右操作数)
            R1等于RAM ()
            A等于A加R1 ()

            JNC (ROM_缓存使用字节 ＋ 18)
            A等于A减R1 ()
            A取反 ()
            A等于A加1 ()
            _RAM等于A (#RAM缓存3)
            JMP (ROM_缓存使用字节 ＋ 11)
            A等于A减R1 ()
            _RAM等于A (#RAM缓存3)




            A等于_RAM (#RAM缓存1)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存2)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存1)
            A等于A加1 ()
            RAM等于A ()


            A等于_RAM (#RAM缓存1)
            R1等于_RAM (#RAM缓存3)
            A等于A减R1 ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 10)
            _RAM等于A (#RAM缓存1)

            A等于_RAM (#RAM缓存4)
            A等于A减1 ()
            RAM等于A ()

            JNZ (ROM_缓存使用字节 － 61)




            A等于_RAM (#RAM缓存5)
            A等于A加1 ()
            A等于_RAM (#RAM缓存1)
            JNC (ROM_缓存使用字节 ＋ 7)
            A取反 ()
            A等于A加1 ()

        .判断结束





        状态 ＝ “完成”



    .判断 ((右移 (目的操作数, 16) ＝ #无符号int 或 右移 (目的操作数, 16) ＝ #有符号int) 且 右移 (左操作数, 16) ＝ #有符号int 且 右移 (右操作数, 16) ＝ #有符号int)

        A等于立即数 (0)
        _RAM等于A (目的操作数 ＋ 1)
        _RAM等于A (目的操作数)
        _RAM等于A (#RAM缓存10)

        A等于立即数 (16)
        _RAM等于A (#RAM缓存9)




        A等于_RAM (左操作数 ＋ 1)
        R1等于RAM ()
        A等于A加R1 ()
        JNC (ROM_缓存使用字节 ＋ 46)
        A等于_RAM (左操作数)
        A取反 ()
        A等于A加1 ()
        _RAM等于A (#RAM缓存4)
        A等于_RAM (左操作数 ＋ 1)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (#RAM缓存3)
        A等于_RAM (#RAM缓存10)
        A取反 ()
        RAM等于A ()
        JMP (ROM_缓存使用字节 ＋ 21)
        A等于A减R1 ()
        _RAM等于A (#RAM缓存3)
        A等于_RAM (左操作数)
        _RAM等于A (#RAM缓存4)


        A等于_RAM (右操作数 ＋ 1)
        R1等于RAM ()
        A等于A加R1 ()
        JNC (ROM_缓存使用字节 ＋ 39)
        A等于_RAM (右操作数)
        A取反 ()
        A等于A加1 ()
        _RAM等于A (#RAM缓存6)
        A等于_RAM (右操作数 ＋ 1)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (#RAM缓存5)
        JMP (ROM_缓存使用字节 ＋ 21)
        A等于A减R1 ()
        _RAM等于A (#RAM缓存5)
        A等于_RAM (右操作数)
        _RAM等于A (#RAM缓存6)




        A等于_RAM (目的操作数 ＋ 1)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        A等于_RAM (目的操作数)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数 ＋ 1)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存3)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存4)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (#RAM缓存3)
        A等于A加1 ()
        RAM等于A ()



        A等于_RAM (目的操作数 ＋ 1)
        R1等于_RAM (#RAM缓存5)
        A等于A减R1 ()
        JNC (ROM_缓存使用字节 ＋ 10)
        JMP (ROM_缓存使用字节 ＋ 68)
        _RAM等于A (#RAM缓存7)

        A等于_RAM (目的操作数)
        R1等于_RAM (#RAM缓存6)
        A等于A减R1 ()
        _RAM等于A (#RAM缓存8)
        JNC (ROM_缓存使用字节 ＋ 22)
        A等于_RAM (#RAM缓存7)
        A等于A减1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 10)
        JMP (ROM_缓存使用字节 ＋ 25)

        A等于_RAM (#RAM缓存7)
        _RAM等于A (目的操作数 ＋ 1)
        A等于_RAM (#RAM缓存8)
        _RAM等于A (目的操作数)


        A等于_RAM (#RAM缓存9)
        A等于A减1 ()
        RAM等于A ()

        JNZ (ROM_缓存使用字节 － 159)





        A等于_RAM (#RAM缓存10)
        A等于A加1 ()

        JNC (ROM_缓存使用字节 ＋ 30)

        A等于_RAM (目的操作数)
        A取反 ()
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (目的操作数 ＋ 1)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (目的操作数 ＋ 1)



        状态 ＝ “完成”






    .判断 ((右移 (目的操作数, 16) ＝ #无符号长int 或 右移 (目的操作数, 16) ＝ #有符号长int) 且 右移 (左操作数, 16) ＝ #有符号长int 且 右移 (右操作数, 16) ＝ #有符号长int)

        A等于立即数 (0)
        _RAM等于A (目的操作数 ＋ 3)
        _RAM等于A (目的操作数 ＋ 2)
        _RAM等于A (目的操作数 ＋ 1)
        _RAM等于A (目的操作数)
        _RAM等于A (#RAM缓存18)

        A等于立即数 (32)
        _RAM等于A (#RAM缓存17)



        A等于_RAM (左操作数 ＋ 3)
        R1等于RAM ()
        A等于A加R1 ()
        JNC (ROM_缓存使用字节 ＋ 80)
        A等于_RAM (左操作数)
        A取反 ()
        A等于A加1 ()
        _RAM等于A (#RAM缓存8)
        A等于_RAM (左操作数 ＋ 1)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (#RAM缓存7)
        A等于_RAM (左操作数 ＋ 2)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (#RAM缓存6)
        A等于_RAM (左操作数 ＋ 3)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (#RAM缓存5)
        A等于_RAM (#RAM缓存18)
        A取反 ()
        RAM等于A ()
        JMP (ROM_缓存使用字节 ＋ 41)
        A等于A减R1 ()
        _RAM等于A (#RAM缓存5)
        A等于_RAM (左操作数 ＋ 2)
        _RAM等于A (#RAM缓存6)
        A等于_RAM (左操作数 ＋ 1)
        _RAM等于A (#RAM缓存7)
        A等于_RAM (左操作数)
        _RAM等于A (#RAM缓存8)


        A等于_RAM (右操作数 ＋ 3)
        R1等于RAM ()
        A等于A加R1 ()
        JNC (ROM_缓存使用字节 ＋ 73)
        A等于_RAM (右操作数)
        A取反 ()
        A等于A加1 ()
        _RAM等于A (#RAM缓存12)
        A等于_RAM (右操作数 ＋ 1)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (#RAM缓存11)
        A等于_RAM (右操作数 ＋ 2)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (#RAM缓存10)
        A等于_RAM (右操作数 ＋ 3)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (#RAM缓存9)
        JMP (ROM_缓存使用字节 ＋ 41)
        A等于A减R1 ()
        _RAM等于A (#RAM缓存9)
        A等于_RAM (右操作数 ＋ 2)
        _RAM等于A (#RAM缓存10)
        A等于_RAM (右操作数 ＋ 1)
        _RAM等于A (#RAM缓存11)
        A等于_RAM (右操作数)
        _RAM等于A (#RAM缓存12)





        A等于_RAM (目的操作数 ＋ 3)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        A等于_RAM (目的操作数 ＋ 2)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数 ＋ 3)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (目的操作数 ＋ 1)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数 ＋ 2)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (目的操作数)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数 ＋ 1)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存5)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存6)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (#RAM缓存5)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存7)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (#RAM缓存6)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存8)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (#RAM缓存7)
        A等于A加1 ()
        RAM等于A ()



        A等于_RAM (目的操作数 ＋ 3)
        R1等于_RAM (#RAM缓存9)
        A等于A减R1 ()
        JNC (ROM_缓存使用字节 ＋ 10)
        JMP (ROM_缓存使用字节 ＋ 200)
        _RAM等于A (#RAM缓存13)

        A等于_RAM (目的操作数 ＋ 2)
        R1等于_RAM (#RAM缓存10)
        A等于A减R1 ()
        _RAM等于A (#RAM缓存14)
        JNC (ROM_缓存使用字节 ＋ 22)
        A等于_RAM (#RAM缓存13)
        A等于A减1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 10)
        JMP (ROM_缓存使用字节 ＋ 157)

        A等于_RAM (目的操作数 ＋ 1)
        R1等于_RAM (#RAM缓存11)
        A等于A减R1 ()
        _RAM等于A (#RAM缓存15)
        JNC (ROM_缓存使用字节 ＋ 34)
        A等于_RAM (#RAM缓存14)
        A等于A减1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 22)
        A等于_RAM (#RAM缓存13)
        A等于A减1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 10)
        JMP (ROM_缓存使用字节 ＋ 107)

        A等于_RAM (目的操作数)
        R1等于_RAM (#RAM缓存12)
        A等于A减R1 ()
        _RAM等于A (#RAM缓存16)
        JNC (ROM_缓存使用字节 ＋ 46)
        A等于_RAM (#RAM缓存15)
        A等于A减1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 34)
        A等于_RAM (#RAM缓存14)
        A等于A减1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 22)
        A等于_RAM (#RAM缓存13)
        A等于A减1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 10)
        JMP (ROM_缓存使用字节 ＋ 45)


        A等于_RAM (#RAM缓存13)
        _RAM等于A (目的操作数 ＋ 3)
        A等于_RAM (#RAM缓存14)
        _RAM等于A (目的操作数 ＋ 2)
        A等于_RAM (#RAM缓存15)
        _RAM等于A (目的操作数 ＋ 1)
        A等于_RAM (#RAM缓存16)
        _RAM等于A (目的操作数)


        A等于_RAM (#RAM缓存17)
        A等于A减1 ()
        RAM等于A ()

        JNZ (ROM_缓存使用字节 － 371)







        A等于_RAM (#RAM缓存18)
        A等于A加1 ()

        JNC (ROM_缓存使用字节 ＋ 64)

        A等于_RAM (目的操作数)
        A取反 ()
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (目的操作数 ＋ 1)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (目的操作数 ＋ 1)

        A等于_RAM (目的操作数 ＋ 2)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (目的操作数 ＋ 2)

        A等于_RAM (目的操作数 ＋ 3)
        A取反 ()
        JNC (ROM_缓存使用字节 ＋ 6)
        A等于A加1 ()
        _RAM等于A (目的操作数 ＋ 3)




        状态 ＝ “完成”




    .判断 ((右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char 或 右移 (目的操作数, 16) ＝ #无符号ACC 或 右移 (目的操作数, 16) ＝ #有符号ACC 或 右移 (目的操作数, 16) ＝ #ACC) 且 (右移 (左操作数, 16) ＝ #无符号ACC 且 右移 (右操作数, 16) ＝ #有符号char 或 右移 (左操作数, 16) ＝ #有符号ACC 且 右移 (右操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #无符号ACC 且 右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #无符号ACC 且 右移 (左操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #有符号ACC 且 右移 (左操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #无符号ACC 且 右移 (左操作数, 16) ＝ #无符号char))


        .判断开始 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC)

            .判断开始 (右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char)

                _RAM等于A (#RAM缓存2)
                A等于_RAM (右操作数)
                _RAM等于A (#RAM缓存3)

                A等于立即数 (0)
                _RAM等于A (目的操作数)
                A等于立即数 (8)
                _RAM等于A (#RAM缓存4)


                A等于_RAM (目的操作数)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存2)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (目的操作数)
                A等于A加1 ()
                RAM等于A ()


                A等于_RAM (目的操作数)
                R1等于_RAM (#RAM缓存3)
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 10)
                _RAM等于A (目的操作数)

                A等于_RAM (#RAM缓存4)
                A等于A减1 ()
                RAM等于A ()

                JNZ (ROM_缓存使用字节 － 61)


            .默认
                _RAM等于A (#RAM缓存2)
                A等于_RAM (右操作数)
                _RAM等于A (#RAM缓存3)

                A等于立即数 (0)
                _RAM等于A (#RAM缓存1)
                A等于立即数 (8)
                _RAM等于A (#RAM缓存4)


                A等于_RAM (#RAM缓存1)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存2)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (#RAM缓存1)
                A等于A加1 ()
                RAM等于A ()


                A等于_RAM (#RAM缓存1)
                R1等于_RAM (#RAM缓存3)
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 10)
                _RAM等于A (#RAM缓存1)

                A等于_RAM (#RAM缓存4)
                A等于A减1 ()
                RAM等于A ()

                JNZ (ROM_缓存使用字节 － 61)

                A等于_RAM (#RAM缓存1)

            .判断结束



        .默认

            .判断开始 (右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char)

                _RAM等于A (#RAM缓存3)
                A等于_RAM (左操作数)
                _RAM等于A (#RAM缓存2)

                A等于立即数 (0)
                _RAM等于A (目的操作数)
                A等于立即数 (8)
                _RAM等于A (#RAM缓存4)


                A等于_RAM (目的操作数)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存2)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (目的操作数)
                A等于A加1 ()
                RAM等于A ()


                A等于_RAM (目的操作数)
                R1等于_RAM (#RAM缓存3)
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 10)
                _RAM等于A (目的操作数)

                A等于_RAM (#RAM缓存4)
                A等于A减1 ()
                RAM等于A ()

                JNZ (ROM_缓存使用字节 － 61)


            .默认
                _RAM等于A (#RAM缓存3)
                A等于_RAM (左操作数)
                _RAM等于A (#RAM缓存2)

                A等于立即数 (0)
                _RAM等于A (#RAM缓存1)
                A等于立即数 (8)
                _RAM等于A (#RAM缓存4)


                A等于_RAM (#RAM缓存1)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存2)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (#RAM缓存1)
                A等于A加1 ()
                RAM等于A ()


                A等于_RAM (#RAM缓存1)
                R1等于_RAM (#RAM缓存3)
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 10)
                _RAM等于A (#RAM缓存1)

                A等于_RAM (#RAM缓存4)
                A等于A减1 ()
                RAM等于A ()

                JNZ (ROM_缓存使用字节 － 61)

                A等于_RAM (#RAM缓存1)

            .判断结束


        .判断结束



        状态 ＝ “完成”




    .判断 ((右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char 或 右移 (目的操作数, 16) ＝ #无符号ACC 或 右移 (目的操作数, 16) ＝ #有符号ACC 或 右移 (目的操作数, 16) ＝ #ACC) 且 (右移 (左操作数, 16) ＝ #有符号ACC 且 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #有符号ACC 且 右移 (左操作数, 16) ＝ #有符号char))

        _RAM等于A (#RAM缓存6)

        .判断开始 (右移 (左操作数, 16) ＝ #有符号ACC)

            .判断开始 (右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char)

                A等于立即数 (0)
                _RAM等于A (目的操作数)
                _RAM等于A (#RAM缓存5)

                A等于立即数 (8)
                _RAM等于A (#RAM缓存4)


                A等于_RAM (#RAM缓存6)
                R1等于RAM ()
                A等于A加R1 ()

                JNC (ROM_缓存使用字节 ＋ 25)
                A等于A减R1 ()
                A取反 ()
                A等于A加1 ()
                _RAM等于A (#RAM缓存2)
                A等于_RAM (#RAM缓存5)
                A取反 ()
                RAM等于A ()
                JMP (ROM_缓存使用字节 ＋ 11)
                A等于A减R1 ()
                _RAM等于A (#RAM缓存2)

                A等于_RAM (右操作数)
                R1等于RAM ()
                A等于A加R1 ()

                JNC (ROM_缓存使用字节 ＋ 18)
                A等于A减R1 ()
                A取反 ()
                A等于A加1 ()
                _RAM等于A (#RAM缓存3)
                JMP (ROM_缓存使用字节 ＋ 11)
                A等于A减R1 ()
                _RAM等于A (#RAM缓存3)




                A等于_RAM (目的操作数)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存2)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (目的操作数)
                A等于A加1 ()
                RAM等于A ()


                A等于_RAM (目的操作数)
                R1等于_RAM (#RAM缓存3)
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 10)
                _RAM等于A (目的操作数)

                A等于_RAM (#RAM缓存4)
                A等于A减1 ()
                RAM等于A ()

                JNZ (ROM_缓存使用字节 － 61)




                A等于_RAM (#RAM缓存5)
                A等于A加1 ()
                JNC (ROM_缓存使用字节 ＋ 13)
                A等于_RAM (目的操作数)
                A取反 ()
                A等于A加1 ()
                RAM等于A ()


            .默认
                A等于立即数 (0)
                _RAM等于A (#RAM缓存1)
                _RAM等于A (#RAM缓存5)

                A等于立即数 (8)
                _RAM等于A (#RAM缓存4)


                A等于_RAM (#RAM缓存6)
                R1等于RAM ()
                A等于A加R1 ()

                JNC (ROM_缓存使用字节 ＋ 25)
                A等于A减R1 ()
                A取反 ()
                A等于A加1 ()
                _RAM等于A (#RAM缓存2)
                A等于_RAM (#RAM缓存5)
                A取反 ()
                RAM等于A ()
                JMP (ROM_缓存使用字节 ＋ 11)
                A等于A减R1 ()
                _RAM等于A (#RAM缓存2)

                A等于_RAM (右操作数)
                R1等于RAM ()
                A等于A加R1 ()

                JNC (ROM_缓存使用字节 ＋ 18)
                A等于A减R1 ()
                A取反 ()
                A等于A加1 ()
                _RAM等于A (#RAM缓存3)
                JMP (ROM_缓存使用字节 ＋ 11)
                A等于A减R1 ()
                _RAM等于A (#RAM缓存3)




                A等于_RAM (#RAM缓存1)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存2)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (#RAM缓存1)
                A等于A加1 ()
                RAM等于A ()


                A等于_RAM (#RAM缓存1)
                R1等于_RAM (#RAM缓存3)
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 10)
                _RAM等于A (#RAM缓存1)

                A等于_RAM (#RAM缓存4)
                A等于A减1 ()
                RAM等于A ()

                JNZ (ROM_缓存使用字节 － 61)




                A等于_RAM (#RAM缓存5)
                A等于A加1 ()
                A等于_RAM (#RAM缓存1)
                JNC (ROM_缓存使用字节 ＋ 7)
                A取反 ()
                A等于A加1 ()

            .判断结束


        .默认

            .判断开始 (右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char)

                A等于立即数 (0)
                _RAM等于A (目的操作数)
                _RAM等于A (#RAM缓存5)

                A等于立即数 (8)
                _RAM等于A (#RAM缓存4)


                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A加R1 ()

                JNC (ROM_缓存使用字节 ＋ 25)
                A等于A减R1 ()
                A取反 ()
                A等于A加1 ()
                _RAM等于A (#RAM缓存2)
                A等于_RAM (#RAM缓存5)
                A取反 ()
                RAM等于A ()
                JMP (ROM_缓存使用字节 ＋ 11)
                A等于A减R1 ()
                _RAM等于A (#RAM缓存2)

                A等于_RAM (#RAM缓存6)
                R1等于RAM ()
                A等于A加R1 ()

                JNC (ROM_缓存使用字节 ＋ 18)
                A等于A减R1 ()
                A取反 ()
                A等于A加1 ()
                _RAM等于A (#RAM缓存3)
                JMP (ROM_缓存使用字节 ＋ 11)
                A等于A减R1 ()
                _RAM等于A (#RAM缓存3)




                A等于_RAM (目的操作数)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存2)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (目的操作数)
                A等于A加1 ()
                RAM等于A ()


                A等于_RAM (目的操作数)
                R1等于_RAM (#RAM缓存3)
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 10)
                _RAM等于A (目的操作数)

                A等于_RAM (#RAM缓存4)
                A等于A减1 ()
                RAM等于A ()

                JNZ (ROM_缓存使用字节 － 61)




                A等于_RAM (#RAM缓存5)
                A等于A加1 ()
                JNC (ROM_缓存使用字节 ＋ 13)
                A等于_RAM (目的操作数)
                A取反 ()
                A等于A加1 ()
                RAM等于A ()


            .默认
                A等于立即数 (0)
                _RAM等于A (#RAM缓存1)
                _RAM等于A (#RAM缓存5)

                A等于立即数 (8)
                _RAM等于A (#RAM缓存4)


                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A加R1 ()

                JNC (ROM_缓存使用字节 ＋ 25)
                A等于A减R1 ()
                A取反 ()
                A等于A加1 ()
                _RAM等于A (#RAM缓存2)
                A等于_RAM (#RAM缓存5)
                A取反 ()
                RAM等于A ()
                JMP (ROM_缓存使用字节 ＋ 11)
                A等于A减R1 ()
                _RAM等于A (#RAM缓存2)

                A等于_RAM (#RAM缓存6)
                R1等于RAM ()
                A等于A加R1 ()

                JNC (ROM_缓存使用字节 ＋ 18)
                A等于A减R1 ()
                A取反 ()
                A等于A加1 ()
                _RAM等于A (#RAM缓存3)
                JMP (ROM_缓存使用字节 ＋ 11)
                A等于A减R1 ()
                _RAM等于A (#RAM缓存3)




                A等于_RAM (#RAM缓存1)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存2)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (#RAM缓存1)
                A等于A加1 ()
                RAM等于A ()


                A等于_RAM (#RAM缓存1)
                R1等于_RAM (#RAM缓存3)
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 10)
                _RAM等于A (#RAM缓存1)

                A等于_RAM (#RAM缓存4)
                A等于A减1 ()
                RAM等于A ()

                JNZ (ROM_缓存使用字节 － 61)




                A等于_RAM (#RAM缓存5)
                A等于A加1 ()
                A等于_RAM (#RAM缓存1)
                JNC (ROM_缓存使用字节 ＋ 7)
                A取反 ()
                A等于A加1 ()

            .判断结束


        .判断结束



        状态 ＝ “完成”




    .判断 ((右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char 或 右移 (目的操作数, 16) ＝ #无符号ACC 或 右移 (目的操作数, 16) ＝ #有符号ACC 或 右移 (目的操作数, 16) ＝ #ACC) 且 (右移 (左操作数, 16) ＝ #无符号ACC 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 右移 (右操作数, 16) ＝ #无符号ACC 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)))


        .判断开始 (右移 (左操作数, 16) ＝ #无符号ACC)

            .判断开始 (右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char)

                _RAM等于A (#RAM缓存2)
                A等于立即数 (立即数2)
                _RAM等于A (#RAM缓存3)

                A等于立即数 (0)
                _RAM等于A (目的操作数)
                A等于立即数 (8)
                _RAM等于A (#RAM缓存4)


                A等于_RAM (目的操作数)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存2)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (目的操作数)
                A等于A加1 ()
                RAM等于A ()


                A等于_RAM (目的操作数)
                R1等于_RAM (#RAM缓存3)
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 10)
                _RAM等于A (目的操作数)

                A等于_RAM (#RAM缓存4)
                A等于A减1 ()
                RAM等于A ()

                JNZ (ROM_缓存使用字节 － 61)


            .默认
                _RAM等于A (#RAM缓存2)
                A等于立即数 (立即数2)
                _RAM等于A (#RAM缓存3)

                A等于立即数 (0)
                _RAM等于A (#RAM缓存1)
                A等于立即数 (8)
                _RAM等于A (#RAM缓存4)


                A等于_RAM (#RAM缓存1)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存2)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (#RAM缓存1)
                A等于A加1 ()
                RAM等于A ()


                A等于_RAM (#RAM缓存1)
                R1等于_RAM (#RAM缓存3)
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 10)
                _RAM等于A (#RAM缓存1)

                A等于_RAM (#RAM缓存4)
                A等于A减1 ()
                RAM等于A ()

                JNZ (ROM_缓存使用字节 － 61)

                A等于_RAM (#RAM缓存1)

            .判断结束



        .默认

            .判断开始 (右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char)

                _RAM等于A (#RAM缓存3)
                A等于立即数 (立即数1)
                _RAM等于A (#RAM缓存2)

                A等于立即数 (0)
                _RAM等于A (目的操作数)
                A等于立即数 (8)
                _RAM等于A (#RAM缓存4)


                A等于_RAM (目的操作数)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存2)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (目的操作数)
                A等于A加1 ()
                RAM等于A ()


                A等于_RAM (目的操作数)
                R1等于_RAM (#RAM缓存3)
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 10)
                _RAM等于A (目的操作数)

                A等于_RAM (#RAM缓存4)
                A等于A减1 ()
                RAM等于A ()

                JNZ (ROM_缓存使用字节 － 61)


            .默认
                _RAM等于A (#RAM缓存3)
                A等于立即数 (立即数1)
                _RAM等于A (#RAM缓存2)

                A等于立即数 (0)
                _RAM等于A (#RAM缓存1)
                A等于立即数 (8)
                _RAM等于A (#RAM缓存4)


                A等于_RAM (#RAM缓存1)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存2)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (#RAM缓存1)
                A等于A加1 ()
                RAM等于A ()


                A等于_RAM (#RAM缓存1)
                R1等于_RAM (#RAM缓存3)
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 10)
                _RAM等于A (#RAM缓存1)

                A等于_RAM (#RAM缓存4)
                A等于A减1 ()
                RAM等于A ()

                JNZ (ROM_缓存使用字节 － 61)

                A等于_RAM (#RAM缓存1)

            .判断结束


        .判断结束



        状态 ＝ “完成”




    .判断 ((右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char 或 右移 (目的操作数, 16) ＝ #无符号ACC 或 右移 (目的操作数, 16) ＝ #有符号ACC 或 右移 (目的操作数, 16) ＝ #ACC) 且 (右移 (左操作数, 16) ＝ #无符号char 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 右移 (右操作数, 16) ＝ #无符号char 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)))


        .判断开始 (右移 (左操作数, 16) ＝ #无符号char)

            .判断开始 (右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char)

                A等于_RAM (左操作数)
                _RAM等于A (#RAM缓存2)
                A等于立即数 (立即数2)
                _RAM等于A (#RAM缓存3)

                A等于立即数 (0)
                _RAM等于A (目的操作数)
                A等于立即数 (8)
                _RAM等于A (#RAM缓存4)


                A等于_RAM (目的操作数)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存2)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (目的操作数)
                A等于A加1 ()
                RAM等于A ()


                A等于_RAM (目的操作数)
                R1等于_RAM (#RAM缓存3)
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 10)
                _RAM等于A (目的操作数)

                A等于_RAM (#RAM缓存4)
                A等于A减1 ()
                RAM等于A ()

                JNZ (ROM_缓存使用字节 － 61)


            .默认
                A等于_RAM (左操作数)
                _RAM等于A (#RAM缓存2)
                A等于立即数 (立即数2)
                _RAM等于A (#RAM缓存3)

                A等于立即数 (0)
                _RAM等于A (#RAM缓存1)
                A等于立即数 (8)
                _RAM等于A (#RAM缓存4)


                A等于_RAM (#RAM缓存1)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存2)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (#RAM缓存1)
                A等于A加1 ()
                RAM等于A ()


                A等于_RAM (#RAM缓存1)
                R1等于_RAM (#RAM缓存3)
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 10)
                _RAM等于A (#RAM缓存1)

                A等于_RAM (#RAM缓存4)
                A等于A减1 ()
                RAM等于A ()

                JNZ (ROM_缓存使用字节 － 61)

                A等于_RAM (#RAM缓存1)

            .判断结束



        .默认

            .判断开始 (右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char)

                A等于_RAM (右操作数)
                _RAM等于A (#RAM缓存3)
                A等于立即数 (立即数1)
                _RAM等于A (#RAM缓存2)

                A等于立即数 (0)
                _RAM等于A (目的操作数)
                A等于立即数 (8)
                _RAM等于A (#RAM缓存4)


                A等于_RAM (目的操作数)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存2)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (目的操作数)
                A等于A加1 ()
                RAM等于A ()


                A等于_RAM (目的操作数)
                R1等于_RAM (#RAM缓存3)
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 10)
                _RAM等于A (目的操作数)

                A等于_RAM (#RAM缓存4)
                A等于A减1 ()
                RAM等于A ()

                JNZ (ROM_缓存使用字节 － 61)


            .默认
                A等于_RAM (右操作数)
                _RAM等于A (#RAM缓存3)
                A等于立即数 (立即数1)
                _RAM等于A (#RAM缓存2)

                A等于立即数 (0)
                _RAM等于A (#RAM缓存1)
                A等于立即数 (8)
                _RAM等于A (#RAM缓存4)


                A等于_RAM (#RAM缓存1)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存2)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (#RAM缓存1)
                A等于A加1 ()
                RAM等于A ()


                A等于_RAM (#RAM缓存1)
                R1等于_RAM (#RAM缓存3)
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 10)
                _RAM等于A (#RAM缓存1)

                A等于_RAM (#RAM缓存4)
                A等于A减1 ()
                RAM等于A ()

                JNZ (ROM_缓存使用字节 － 61)

                A等于_RAM (#RAM缓存1)

            .判断结束


        .判断结束



        状态 ＝ “完成”




    .判断 ((右移 (目的操作数, 16) ＝ #无符号int 或 右移 (目的操作数, 16) ＝ #有符号int) 且 (右移 (左操作数, 16) ＝ #无符号int 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 右移 (右操作数, 16) ＝ #无符号int 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)))

        .判断开始 (右移 (左操作数, 16) ＝ #无符号int)

            A等于_RAM (左操作数 ＋ 1)
            _RAM等于A (#RAM缓存3)
            A等于_RAM (左操作数)
            _RAM等于A (#RAM缓存4)

            A等于立即数 (右移 (立即数2, 8))
            _RAM等于A (#RAM缓存5)
            A等于立即数 (立即数2)
            _RAM等于A (#RAM缓存6)


        .默认
            A等于立即数 (右移 (立即数1, 8))
            _RAM等于A (#RAM缓存3)
            A等于立即数 (立即数1)
            _RAM等于A (#RAM缓存4)

            A等于_RAM (右操作数 ＋ 1)
            _RAM等于A (#RAM缓存5)
            A等于_RAM (右操作数)
            _RAM等于A (#RAM缓存6)

        .判断结束


        A等于立即数 (0)
        _RAM等于A (目的操作数 ＋ 1)
        _RAM等于A (目的操作数)

        A等于立即数 (16)
        _RAM等于A (#RAM缓存9)




        A等于_RAM (目的操作数 ＋ 1)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        A等于_RAM (目的操作数)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数 ＋ 1)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存3)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存4)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (#RAM缓存3)
        A等于A加1 ()
        RAM等于A ()



        A等于_RAM (目的操作数 ＋ 1)
        R1等于_RAM (#RAM缓存5)
        A等于A减R1 ()
        JNC (ROM_缓存使用字节 ＋ 10)
        JMP (ROM_缓存使用字节 ＋ 68)
        _RAM等于A (#RAM缓存7)

        A等于_RAM (目的操作数)
        R1等于_RAM (#RAM缓存6)
        A等于A减R1 ()
        _RAM等于A (#RAM缓存8)
        JNC (ROM_缓存使用字节 ＋ 22)
        A等于_RAM (#RAM缓存7)
        A等于A减1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 10)
        JMP (ROM_缓存使用字节 ＋ 25)

        A等于_RAM (#RAM缓存7)
        _RAM等于A (目的操作数 ＋ 1)
        A等于_RAM (#RAM缓存8)
        _RAM等于A (目的操作数)


        A等于_RAM (#RAM缓存9)
        A等于A减1 ()
        RAM等于A ()

        JNZ (ROM_缓存使用字节 － 159)








    .判断 ((右移 (目的操作数, 16) ＝ #无符号长int 或 右移 (目的操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #无符号长int 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 右移 (右操作数, 16) ＝ #无符号长int 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)))

        .判断开始 (右移 (左操作数, 16) ＝ #无符号int)

            A等于_RAM (左操作数 ＋ 3)
            _RAM等于A (#RAM缓存5)
            A等于_RAM (左操作数 ＋ 2)
            _RAM等于A (#RAM缓存6)
            A等于_RAM (左操作数 ＋ 1)
            _RAM等于A (#RAM缓存7)
            A等于_RAM (左操作数)
            _RAM等于A (#RAM缓存8)

            A等于立即数 (右移 (立即数2, 24))
            _RAM等于A (#RAM缓存9)
            A等于立即数 (右移 (立即数2, 16))
            _RAM等于A (#RAM缓存10)
            A等于立即数 (右移 (立即数2, 8))
            _RAM等于A (#RAM缓存11)
            A等于立即数 (立即数2)
            _RAM等于A (#RAM缓存12)

        .默认
            A等于立即数 (右移 (立即数1, 24))
            _RAM等于A (#RAM缓存5)
            A等于立即数 (右移 (立即数1, 16))
            _RAM等于A (#RAM缓存6)
            A等于立即数 (右移 (立即数1, 8))
            _RAM等于A (#RAM缓存7)
            A等于立即数 (立即数1)
            _RAM等于A (#RAM缓存8)

            A等于_RAM (右操作数 ＋ 3)
            _RAM等于A (#RAM缓存9)
            A等于_RAM (右操作数 ＋ 2)
            _RAM等于A (#RAM缓存10)
            A等于_RAM (右操作数 ＋ 1)
            _RAM等于A (#RAM缓存11)
            A等于_RAM (右操作数)
            _RAM等于A (#RAM缓存12)

        .判断结束


        A等于立即数 (0)
        _RAM等于A (目的操作数 ＋ 3)
        _RAM等于A (目的操作数 ＋ 2)
        _RAM等于A (目的操作数 ＋ 1)
        _RAM等于A (目的操作数)

        A等于立即数 (32)
        _RAM等于A (#RAM缓存17)




        A等于_RAM (目的操作数 ＋ 3)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        A等于_RAM (目的操作数 ＋ 2)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数 ＋ 3)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (目的操作数 ＋ 1)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数 ＋ 2)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (目的操作数)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数 ＋ 1)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存5)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (目的操作数)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存6)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (#RAM缓存5)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存7)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (#RAM缓存6)
        A等于A加1 ()
        RAM等于A ()

        A等于_RAM (#RAM缓存8)
        R1等于RAM ()
        A等于A加R1 ()
        RAM等于A ()

        JNC (ROM_缓存使用字节 ＋ 12)
        A等于_RAM (#RAM缓存7)
        A等于A加1 ()
        RAM等于A ()



        A等于_RAM (目的操作数 ＋ 3)
        R1等于_RAM (#RAM缓存9)
        A等于A减R1 ()
        JNC (ROM_缓存使用字节 ＋ 10)
        JMP (ROM_缓存使用字节 ＋ 200)
        _RAM等于A (#RAM缓存13)

        A等于_RAM (目的操作数 ＋ 2)
        R1等于_RAM (#RAM缓存10)
        A等于A减R1 ()
        _RAM等于A (#RAM缓存14)
        JNC (ROM_缓存使用字节 ＋ 22)
        A等于_RAM (#RAM缓存13)
        A等于A减1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 10)
        JMP (ROM_缓存使用字节 ＋ 157)

        A等于_RAM (目的操作数 ＋ 1)
        R1等于_RAM (#RAM缓存11)
        A等于A减R1 ()
        _RAM等于A (#RAM缓存15)
        JNC (ROM_缓存使用字节 ＋ 34)
        A等于_RAM (#RAM缓存14)
        A等于A减1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 22)
        A等于_RAM (#RAM缓存13)
        A等于A减1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 10)
        JMP (ROM_缓存使用字节 ＋ 107)

        A等于_RAM (目的操作数)
        R1等于_RAM (#RAM缓存12)
        A等于A减R1 ()
        _RAM等于A (#RAM缓存16)
        JNC (ROM_缓存使用字节 ＋ 46)
        A等于_RAM (#RAM缓存15)
        A等于A减1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 34)
        A等于_RAM (#RAM缓存14)
        A等于A减1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 22)
        A等于_RAM (#RAM缓存13)
        A等于A减1 ()
        RAM等于A ()
        JNC (ROM_缓存使用字节 ＋ 10)
        JMP (ROM_缓存使用字节 ＋ 45)


        A等于_RAM (#RAM缓存13)
        _RAM等于A (目的操作数 ＋ 3)
        A等于_RAM (#RAM缓存14)
        _RAM等于A (目的操作数 ＋ 2)
        A等于_RAM (#RAM缓存15)
        _RAM等于A (目的操作数 ＋ 1)
        A等于_RAM (#RAM缓存16)
        _RAM等于A (目的操作数)


        A等于_RAM (#RAM缓存17)
        A等于A减1 ()
        RAM等于A ()

        JNZ (ROM_缓存使用字节 － 371)




        状态 ＝ “完成”




    .判断 ((右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char 或 右移 (目的操作数, 16) ＝ #无符号ACC 或 右移 (目的操作数, 16) ＝ #有符号ACC 或 右移 (目的操作数, 16) ＝ #ACC) 且 (右移 (左操作数, 16) ＝ #有符号ACC 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 右移 (右操作数, 16) ＝ #有符号ACC 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)))

        _RAM等于A (#RAM缓存6)

        .判断开始 (右移 (左操作数, 16) ＝ #有符号ACC)

            .判断开始 (右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char)

                A等于立即数 (0)
                _RAM等于A (目的操作数)
                .如果真 (位与 (立即数2, 128) ＝ 1)
                    A等于立即数 (255)
                    立即数2 ＝ 位取反 (立即数2) ＋ 1
                .如果真结束
                _RAM等于A (#RAM缓存5)

                A等于立即数 (立即数2)
                _RAM等于A (#RAM缓存3)

                A等于立即数 (8)
                _RAM等于A (#RAM缓存4)


                A等于_RAM (#RAM缓存6)
                R1等于RAM ()
                A等于A加R1 ()

                JNC (ROM_缓存使用字节 ＋ 25)
                A等于A减R1 ()
                A取反 ()
                A等于A加1 ()
                _RAM等于A (#RAM缓存2)
                A等于_RAM (#RAM缓存5)
                A取反 ()
                RAM等于A ()
                JMP (ROM_缓存使用字节 ＋ 11)
                A等于A减R1 ()
                _RAM等于A (#RAM缓存2)




                A等于_RAM (目的操作数)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存2)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (目的操作数)
                A等于A加1 ()
                RAM等于A ()


                A等于_RAM (目的操作数)
                R1等于_RAM (#RAM缓存3)
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 10)
                _RAM等于A (目的操作数)

                A等于_RAM (#RAM缓存4)
                A等于A减1 ()
                RAM等于A ()

                JNZ (ROM_缓存使用字节 － 61)




                A等于_RAM (#RAM缓存5)
                A等于A加1 ()
                JNC (ROM_缓存使用字节 ＋ 13)
                A等于_RAM (目的操作数)
                A取反 ()
                A等于A加1 ()
                RAM等于A ()


            .默认
                A等于立即数 (0)
                _RAM等于A (#RAM缓存1)
                .如果真 (位与 (立即数2, 128) ＝ 1)
                    A等于立即数 (255)
                    立即数2 ＝ 位取反 (立即数2) ＋ 1
                .如果真结束
                _RAM等于A (#RAM缓存5)

                A等于立即数 (立即数2)
                _RAM等于A (#RAM缓存3)

                A等于立即数 (8)
                _RAM等于A (#RAM缓存4)


                A等于_RAM (#RAM缓存6)
                R1等于RAM ()
                A等于A加R1 ()

                JNC (ROM_缓存使用字节 ＋ 25)
                A等于A减R1 ()
                A取反 ()
                A等于A加1 ()
                _RAM等于A (#RAM缓存2)
                A等于_RAM (#RAM缓存5)
                A取反 ()
                RAM等于A ()
                JMP (ROM_缓存使用字节 ＋ 11)
                A等于A减R1 ()
                _RAM等于A (#RAM缓存2)




                A等于_RAM (#RAM缓存1)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存2)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (#RAM缓存1)
                A等于A加1 ()
                RAM等于A ()


                A等于_RAM (#RAM缓存1)
                R1等于_RAM (#RAM缓存3)
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 10)
                _RAM等于A (#RAM缓存1)

                A等于_RAM (#RAM缓存4)
                A等于A减1 ()
                RAM等于A ()

                JNZ (ROM_缓存使用字节 － 61)




                A等于_RAM (#RAM缓存5)
                A等于A加1 ()
                A等于_RAM (#RAM缓存1)
                JNC (ROM_缓存使用字节 ＋ 7)
                A取反 ()
                A等于A加1 ()

            .判断结束


        .默认

            .判断开始 (右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char)

                A等于立即数 (0)
                _RAM等于A (目的操作数)
                .如果真 (位与 (立即数1, 128) ＝ 1)
                    A等于立即数 (255)
                    立即数1 ＝ 位取反 (立即数1) ＋ 1
                .如果真结束
                _RAM等于A (#RAM缓存5)

                A等于立即数 (立即数1)
                _RAM等于A (#RAM缓存2)

                A等于立即数 (8)
                _RAM等于A (#RAM缓存4)


                A等于_RAM (#RAM缓存6)
                R1等于RAM ()
                A等于A加R1 ()

                JNC (ROM_缓存使用字节 ＋ 18)
                A等于A减R1 ()
                A取反 ()
                A等于A加1 ()
                _RAM等于A (#RAM缓存3)
                JMP (ROM_缓存使用字节 ＋ 11)
                A等于A减R1 ()
                _RAM等于A (#RAM缓存3)




                A等于_RAM (目的操作数)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存2)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (目的操作数)
                A等于A加1 ()
                RAM等于A ()


                A等于_RAM (目的操作数)
                R1等于_RAM (#RAM缓存3)
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 10)
                _RAM等于A (目的操作数)

                A等于_RAM (#RAM缓存4)
                A等于A减1 ()
                RAM等于A ()

                JNZ (ROM_缓存使用字节 － 61)




                A等于_RAM (#RAM缓存5)
                A等于A加1 ()
                JNC (ROM_缓存使用字节 ＋ 13)
                A等于_RAM (目的操作数)
                A取反 ()
                A等于A加1 ()
                RAM等于A ()


            .默认
                A等于立即数 (0)
                _RAM等于A (#RAM缓存1)
                .如果真 (位与 (立即数1, 128) ＝ 1)
                    A等于立即数 (255)
                    立即数1 ＝ 位取反 (立即数1) ＋ 1
                .如果真结束
                _RAM等于A (#RAM缓存5)

                A等于立即数 (立即数1)
                _RAM等于A (#RAM缓存2)

                A等于立即数 (8)
                _RAM等于A (#RAM缓存4)


                A等于_RAM (#RAM缓存6)
                R1等于RAM ()
                A等于A加R1 ()

                JNC (ROM_缓存使用字节 ＋ 18)
                A等于A减R1 ()
                A取反 ()
                A等于A加1 ()
                _RAM等于A (#RAM缓存3)
                JMP (ROM_缓存使用字节 ＋ 11)
                A等于A减R1 ()
                _RAM等于A (#RAM缓存3)




                A等于_RAM (#RAM缓存1)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存2)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (#RAM缓存1)
                A等于A加1 ()
                RAM等于A ()


                A等于_RAM (#RAM缓存1)
                R1等于_RAM (#RAM缓存3)
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 10)
                _RAM等于A (#RAM缓存1)

                A等于_RAM (#RAM缓存4)
                A等于A减1 ()
                RAM等于A ()

                JNZ (ROM_缓存使用字节 － 61)




                A等于_RAM (#RAM缓存5)
                A等于A加1 ()
                A等于_RAM (#RAM缓存1)
                JNC (ROM_缓存使用字节 ＋ 7)
                A取反 ()
                A等于A加1 ()

            .判断结束


        .判断结束



        状态 ＝ “完成”




    .判断 ((右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char 或 右移 (目的操作数, 16) ＝ #无符号ACC 或 右移 (目的操作数, 16) ＝ #有符号ACC 或 右移 (目的操作数, 16) ＝ #ACC) 且 (右移 (左操作数, 16) ＝ #有符号char 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 右移 (右操作数, 16) ＝ #有符号char 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)))

        .判断开始 (右移 (左操作数, 16) ＝ #有符号char)

            .判断开始 (右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char)

                A等于立即数 (0)
                _RAM等于A (目的操作数)
                .如果真 (位与 (立即数2, 128) ＝ 1)
                    A等于立即数 (255)
                    立即数2 ＝ 位取反 (立即数2) ＋ 1
                .如果真结束
                _RAM等于A (#RAM缓存5)

                A等于立即数 (立即数2)
                _RAM等于A (#RAM缓存3)

                A等于立即数 (8)
                _RAM等于A (#RAM缓存4)


                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A加R1 ()

                JNC (ROM_缓存使用字节 ＋ 25)
                A等于A减R1 ()
                A取反 ()
                A等于A加1 ()
                _RAM等于A (#RAM缓存2)
                A等于_RAM (#RAM缓存5)
                A取反 ()
                RAM等于A ()
                JMP (ROM_缓存使用字节 ＋ 11)
                A等于A减R1 ()
                _RAM等于A (#RAM缓存2)




                A等于_RAM (目的操作数)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存2)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (目的操作数)
                A等于A加1 ()
                RAM等于A ()


                A等于_RAM (目的操作数)
                R1等于_RAM (#RAM缓存3)
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 10)
                _RAM等于A (目的操作数)

                A等于_RAM (#RAM缓存4)
                A等于A减1 ()
                RAM等于A ()

                JNZ (ROM_缓存使用字节 － 61)




                A等于_RAM (#RAM缓存5)
                A等于A加1 ()
                JNC (ROM_缓存使用字节 ＋ 13)
                A等于_RAM (目的操作数)
                A取反 ()
                A等于A加1 ()
                RAM等于A ()


            .默认
                A等于立即数 (0)
                _RAM等于A (#RAM缓存1)
                .如果真 (位与 (立即数2, 128) ＝ 1)
                    A等于立即数 (255)
                    立即数2 ＝ 位取反 (立即数2) ＋ 1
                .如果真结束
                _RAM等于A (#RAM缓存5)

                A等于立即数 (立即数2)
                _RAM等于A (#RAM缓存3)

                A等于立即数 (8)
                _RAM等于A (#RAM缓存4)


                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A加R1 ()

                JNC (ROM_缓存使用字节 ＋ 25)
                A等于A减R1 ()
                A取反 ()
                A等于A加1 ()
                _RAM等于A (#RAM缓存2)
                A等于_RAM (#RAM缓存5)
                A取反 ()
                RAM等于A ()
                JMP (ROM_缓存使用字节 ＋ 11)
                A等于A减R1 ()
                _RAM等于A (#RAM缓存2)




                A等于_RAM (#RAM缓存1)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存2)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (#RAM缓存1)
                A等于A加1 ()
                RAM等于A ()


                A等于_RAM (#RAM缓存1)
                R1等于_RAM (#RAM缓存3)
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 10)
                _RAM等于A (#RAM缓存1)

                A等于_RAM (#RAM缓存4)
                A等于A减1 ()
                RAM等于A ()

                JNZ (ROM_缓存使用字节 － 61)




                A等于_RAM (#RAM缓存5)
                A等于A加1 ()
                A等于_RAM (#RAM缓存1)
                JNC (ROM_缓存使用字节 ＋ 7)
                A取反 ()
                A等于A加1 ()

            .判断结束


        .默认

            .判断开始 (右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char)

                A等于立即数 (0)
                _RAM等于A (目的操作数)
                .如果真 (位与 (立即数1, 128) ＝ 1)
                    A等于立即数 (255)
                    立即数1 ＝ 位取反 (立即数1) ＋ 1
                .如果真结束
                _RAM等于A (#RAM缓存5)

                A等于立即数 (立即数1)
                _RAM等于A (#RAM缓存2)

                A等于立即数 (8)
                _RAM等于A (#RAM缓存4)


                A等于_RAM (右操作数)
                R1等于RAM ()
                A等于A加R1 ()

                JNC (ROM_缓存使用字节 ＋ 18)
                A等于A减R1 ()
                A取反 ()
                A等于A加1 ()
                _RAM等于A (#RAM缓存3)
                JMP (ROM_缓存使用字节 ＋ 11)
                A等于A减R1 ()
                _RAM等于A (#RAM缓存3)




                A等于_RAM (目的操作数)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存2)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (目的操作数)
                A等于A加1 ()
                RAM等于A ()


                A等于_RAM (目的操作数)
                R1等于_RAM (#RAM缓存3)
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 10)
                _RAM等于A (目的操作数)

                A等于_RAM (#RAM缓存4)
                A等于A减1 ()
                RAM等于A ()

                JNZ (ROM_缓存使用字节 － 61)




                A等于_RAM (#RAM缓存5)
                A等于A加1 ()
                JNC (ROM_缓存使用字节 ＋ 13)
                A等于_RAM (目的操作数)
                A取反 ()
                A等于A加1 ()
                RAM等于A ()


            .默认
                A等于立即数 (0)
                _RAM等于A (#RAM缓存1)
                .如果真 (位与 (立即数1, 128) ＝ 1)
                    A等于立即数 (255)
                    立即数1 ＝ 位取反 (立即数1) ＋ 1
                .如果真结束
                _RAM等于A (#RAM缓存5)

                A等于立即数 (立即数1)
                _RAM等于A (#RAM缓存2)

                A等于立即数 (8)
                _RAM等于A (#RAM缓存4)


                A等于_RAM (右操作数)
                R1等于RAM ()
                A等于A加R1 ()

                JNC (ROM_缓存使用字节 ＋ 18)
                A等于A减R1 ()
                A取反 ()
                A等于A加1 ()
                _RAM等于A (#RAM缓存3)
                JMP (ROM_缓存使用字节 ＋ 11)
                A等于A减R1 ()
                _RAM等于A (#RAM缓存3)




                A等于_RAM (#RAM缓存1)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (#RAM缓存2)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (#RAM缓存1)
                A等于A加1 ()
                RAM等于A ()


                A等于_RAM (#RAM缓存1)
                R1等于_RAM (#RAM缓存3)
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 10)
                _RAM等于A (#RAM缓存1)

                A等于_RAM (#RAM缓存4)
                A等于A减1 ()
                RAM等于A ()

                JNZ (ROM_缓存使用字节 － 61)




                A等于_RAM (#RAM缓存5)
                A等于A加1 ()
                A等于_RAM (#RAM缓存1)
                JNC (ROM_缓存使用字节 ＋ 7)
                A取反 ()
                A等于A加1 ()

            .判断结束


        .判断结束



        状态 ＝ “完成”




    .判断 ((右移 (目的操作数, 16) ＝ #无符号int 或 右移 (目的操作数, 16) ＝ #有符号int) 且 (右移 (左操作数, 16) ＝ #有符号int 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 右移 (右操作数, 16) ＝ #有符号int 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)))

        .判断开始 (右移 (左操作数, 16) ＝ #有符号int)

            A等于立即数 (0)
            _RAM等于A (目的操作数 ＋ 1)
            _RAM等于A (目的操作数)
            .如果真 (位与 (立即数2, 32768) ＝ 1)
                A等于立即数 (255)
                立即数2 ＝ 位取反 (立即数2) ＋ 1
            .如果真结束
            _RAM等于A (#RAM缓存10)

            A等于立即数 (右移 (立即数2, 8))
            _RAM等于A (#RAM缓存5)
            A等于立即数 (立即数2)
            _RAM等于A (#RAM缓存6)

            A等于立即数 (16)
            _RAM等于A (#RAM缓存9)




            A等于_RAM (左操作数 ＋ 1)
            R1等于RAM ()
            A等于A加R1 ()
            JNC (ROM_缓存使用字节 ＋ 46)
            A等于_RAM (左操作数)
            A取反 ()
            A等于A加1 ()
            _RAM等于A (#RAM缓存4)
            A等于_RAM (左操作数 ＋ 1)
            A取反 ()
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            _RAM等于A (#RAM缓存3)
            A等于_RAM (#RAM缓存10)
            A取反 ()
            RAM等于A ()
            JMP (ROM_缓存使用字节 ＋ 21)
            A等于A减R1 ()
            _RAM等于A (#RAM缓存3)
            A等于_RAM (左操作数)
            _RAM等于A (#RAM缓存4)





            A等于_RAM (目的操作数 ＋ 1)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (目的操作数)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 1)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存3)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存4)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存3)
            A等于A加1 ()
            RAM等于A ()



            A等于_RAM (目的操作数 ＋ 1)
            R1等于_RAM (#RAM缓存5)
            A等于A减R1 ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 68)
            _RAM等于A (#RAM缓存7)

            A等于_RAM (目的操作数)
            R1等于_RAM (#RAM缓存6)
            A等于A减R1 ()
            _RAM等于A (#RAM缓存8)
            JNC (ROM_缓存使用字节 ＋ 22)
            A等于_RAM (#RAM缓存7)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 25)

            A等于_RAM (#RAM缓存7)
            _RAM等于A (目的操作数 ＋ 1)
            A等于_RAM (#RAM缓存8)
            _RAM等于A (目的操作数)


            A等于_RAM (#RAM缓存9)
            A等于A减1 ()
            RAM等于A ()

            JNZ (ROM_缓存使用字节 － 159)





            A等于_RAM (#RAM缓存10)
            A等于A加1 ()

            JNC (ROM_缓存使用字节 ＋ 30)

            A等于_RAM (目的操作数)
            A取反 ()
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (目的操作数 ＋ 1)
            A取反 ()
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            _RAM等于A (目的操作数 ＋ 1)


        .默认
            A等于立即数 (0)
            _RAM等于A (目的操作数 ＋ 1)
            _RAM等于A (目的操作数)
            .如果真 (位与 (立即数1, 32768) ＝ 1)
                A等于立即数 (255)
                立即数1 ＝ 位取反 (立即数1) ＋ 1
            .如果真结束
            _RAM等于A (#RAM缓存10)

            A等于立即数 (右移 (立即数1, 8))
            _RAM等于A (#RAM缓存3)
            A等于立即数 (立即数1)
            _RAM等于A (#RAM缓存4)

            A等于立即数 (16)
            _RAM等于A (#RAM缓存9)




            A等于_RAM (右操作数 ＋ 1)
            R1等于RAM ()
            A等于A加R1 ()
            JNC (ROM_缓存使用字节 ＋ 39)
            A等于_RAM (右操作数)
            A取反 ()
            A等于A加1 ()
            _RAM等于A (#RAM缓存6)
            A等于_RAM (右操作数 ＋ 1)
            A取反 ()
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            _RAM等于A (#RAM缓存5)
            JMP (ROM_缓存使用字节 ＋ 21)
            A等于A减R1 ()
            _RAM等于A (#RAM缓存5)
            A等于_RAM (右操作数)
            _RAM等于A (#RAM缓存6)




            A等于_RAM (目的操作数 ＋ 1)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (目的操作数)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 1)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存3)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存4)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存3)
            A等于A加1 ()
            RAM等于A ()



            A等于_RAM (目的操作数 ＋ 1)
            R1等于_RAM (#RAM缓存5)
            A等于A减R1 ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 68)
            _RAM等于A (#RAM缓存7)

            A等于_RAM (目的操作数)
            R1等于_RAM (#RAM缓存6)
            A等于A减R1 ()
            _RAM等于A (#RAM缓存8)
            JNC (ROM_缓存使用字节 ＋ 22)
            A等于_RAM (#RAM缓存7)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 25)

            A等于_RAM (#RAM缓存7)
            _RAM等于A (目的操作数 ＋ 1)
            A等于_RAM (#RAM缓存8)
            _RAM等于A (目的操作数)


            A等于_RAM (#RAM缓存9)
            A等于A减1 ()
            RAM等于A ()

            JNZ (ROM_缓存使用字节 － 159)





            A等于_RAM (#RAM缓存10)
            A等于A加1 ()

            JNC (ROM_缓存使用字节 ＋ 30)

            A等于_RAM (目的操作数)
            A取反 ()
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (目的操作数 ＋ 1)
            A取反 ()
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            _RAM等于A (目的操作数 ＋ 1)

        .判断结束




        状态 ＝ “完成”



    .判断 ((右移 (目的操作数, 16) ＝ #无符号长int 或 右移 (目的操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #有符号长int 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 右移 (右操作数, 16) ＝ #有符号长int 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)))

        .判断开始 (右移 (左操作数, 16) ＝ #有符号长int)

            A等于立即数 (0)
            _RAM等于A (目的操作数 ＋ 3)
            _RAM等于A (目的操作数 ＋ 2)
            _RAM等于A (目的操作数 ＋ 1)
            _RAM等于A (目的操作数)
            .如果真 (位与 (立即数2, 2147483648) ＝ 1)
                A等于立即数 (255)
                立即数2 ＝ 位取反 (立即数2) ＋ 1
            .如果真结束
            _RAM等于A (#RAM缓存18)

            A等于立即数 (右移 (立即数2, 24))
            _RAM等于A (#RAM缓存9)
            A等于立即数 (右移 (立即数2, 16))
            _RAM等于A (#RAM缓存10)
            A等于立即数 (右移 (立即数2, 8))
            _RAM等于A (#RAM缓存11)
            A等于立即数 (立即数2)
            _RAM等于A (#RAM缓存12)

            A等于立即数 (32)
            _RAM等于A (#RAM缓存17)



            A等于_RAM (左操作数 ＋ 3)
            R1等于RAM ()
            A等于A加R1 ()
            JNC (ROM_缓存使用字节 ＋ 80)
            A等于_RAM (左操作数)
            A取反 ()
            A等于A加1 ()
            _RAM等于A (#RAM缓存8)
            A等于_RAM (左操作数 ＋ 1)
            A取反 ()
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            _RAM等于A (#RAM缓存7)
            A等于_RAM (左操作数 ＋ 2)
            A取反 ()
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            _RAM等于A (#RAM缓存6)
            A等于_RAM (左操作数 ＋ 3)
            A取反 ()
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            _RAM等于A (#RAM缓存5)
            A等于_RAM (#RAM缓存18)
            A取反 ()
            RAM等于A ()
            JMP (ROM_缓存使用字节 ＋ 41)
            A等于A减R1 ()
            _RAM等于A (#RAM缓存5)
            A等于_RAM (左操作数 ＋ 2)
            _RAM等于A (#RAM缓存6)
            A等于_RAM (左操作数 ＋ 1)
            _RAM等于A (#RAM缓存7)
            A等于_RAM (左操作数)
            _RAM等于A (#RAM缓存8)






            A等于_RAM (目的操作数 ＋ 3)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (目的操作数 ＋ 2)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 3)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (目的操作数 ＋ 1)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 2)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (目的操作数)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 1)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存5)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存6)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存5)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存7)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存6)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存8)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存7)
            A等于A加1 ()
            RAM等于A ()



            A等于_RAM (目的操作数 ＋ 3)
            R1等于_RAM (#RAM缓存9)
            A等于A减R1 ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 200)
            _RAM等于A (#RAM缓存13)

            A等于_RAM (目的操作数 ＋ 2)
            R1等于_RAM (#RAM缓存10)
            A等于A减R1 ()
            _RAM等于A (#RAM缓存14)
            JNC (ROM_缓存使用字节 ＋ 22)
            A等于_RAM (#RAM缓存13)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 157)

            A等于_RAM (目的操作数 ＋ 1)
            R1等于_RAM (#RAM缓存11)
            A等于A减R1 ()
            _RAM等于A (#RAM缓存15)
            JNC (ROM_缓存使用字节 ＋ 34)
            A等于_RAM (#RAM缓存14)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 22)
            A等于_RAM (#RAM缓存13)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 107)

            A等于_RAM (目的操作数)
            R1等于_RAM (#RAM缓存12)
            A等于A减R1 ()
            _RAM等于A (#RAM缓存16)
            JNC (ROM_缓存使用字节 ＋ 46)
            A等于_RAM (#RAM缓存15)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 34)
            A等于_RAM (#RAM缓存14)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 22)
            A等于_RAM (#RAM缓存13)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 45)


            A等于_RAM (#RAM缓存13)
            _RAM等于A (目的操作数 ＋ 3)
            A等于_RAM (#RAM缓存14)
            _RAM等于A (目的操作数 ＋ 2)
            A等于_RAM (#RAM缓存15)
            _RAM等于A (目的操作数 ＋ 1)
            A等于_RAM (#RAM缓存16)
            _RAM等于A (目的操作数)


            A等于_RAM (#RAM缓存17)
            A等于A减1 ()
            RAM等于A ()

            JNZ (ROM_缓存使用字节 － 371)







            A等于_RAM (#RAM缓存18)
            A等于A加1 ()

            JNC (ROM_缓存使用字节 ＋ 64)

            A等于_RAM (目的操作数)
            A取反 ()
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (目的操作数 ＋ 1)
            A取反 ()
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            _RAM等于A (目的操作数 ＋ 1)

            A等于_RAM (目的操作数 ＋ 2)
            A取反 ()
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            _RAM等于A (目的操作数 ＋ 2)

            A等于_RAM (目的操作数 ＋ 3)
            A取反 ()
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            _RAM等于A (目的操作数 ＋ 3)



        .默认
            A等于立即数 (0)
            _RAM等于A (目的操作数 ＋ 3)
            _RAM等于A (目的操作数 ＋ 2)
            _RAM等于A (目的操作数 ＋ 1)
            _RAM等于A (目的操作数)
            .如果真 (位与 (立即数1, 2147483648) ＝ 1)
                A等于立即数 (255)
                立即数1 ＝ 位取反 (立即数1) ＋ 1
            .如果真结束
            _RAM等于A (#RAM缓存18)

            A等于立即数 (右移 (立即数1, 24))
            _RAM等于A (#RAM缓存5)
            A等于立即数 (右移 (立即数1, 16))
            _RAM等于A (#RAM缓存6)
            A等于立即数 (右移 (立即数1, 8))
            _RAM等于A (#RAM缓存7)
            A等于立即数 (立即数1)
            _RAM等于A (#RAM缓存8)

            A等于立即数 (32)
            _RAM等于A (#RAM缓存17)



            A等于_RAM (右操作数 ＋ 3)
            R1等于RAM ()
            A等于A加R1 ()
            JNC (ROM_缓存使用字节 ＋ 73)
            A等于_RAM (右操作数)
            A取反 ()
            A等于A加1 ()
            _RAM等于A (#RAM缓存12)
            A等于_RAM (右操作数 ＋ 1)
            A取反 ()
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            _RAM等于A (#RAM缓存11)
            A等于_RAM (右操作数 ＋ 2)
            A取反 ()
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            _RAM等于A (#RAM缓存10)
            A等于_RAM (右操作数 ＋ 3)
            A取反 ()
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            _RAM等于A (#RAM缓存9)
            JMP (ROM_缓存使用字节 ＋ 41)
            A等于A减R1 ()
            _RAM等于A (#RAM缓存9)
            A等于_RAM (右操作数 ＋ 2)
            _RAM等于A (#RAM缓存10)
            A等于_RAM (右操作数 ＋ 1)
            _RAM等于A (#RAM缓存11)
            A等于_RAM (右操作数)
            _RAM等于A (#RAM缓存12)





            A等于_RAM (目的操作数 ＋ 3)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (目的操作数 ＋ 2)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 3)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (目的操作数 ＋ 1)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 2)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (目的操作数)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 1)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存5)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存6)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存5)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存7)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存6)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (#RAM缓存8)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (#RAM缓存7)
            A等于A加1 ()
            RAM等于A ()



            A等于_RAM (目的操作数 ＋ 3)
            R1等于_RAM (#RAM缓存9)
            A等于A减R1 ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 200)
            _RAM等于A (#RAM缓存13)

            A等于_RAM (目的操作数 ＋ 2)
            R1等于_RAM (#RAM缓存10)
            A等于A减R1 ()
            _RAM等于A (#RAM缓存14)
            JNC (ROM_缓存使用字节 ＋ 22)
            A等于_RAM (#RAM缓存13)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 157)

            A等于_RAM (目的操作数 ＋ 1)
            R1等于_RAM (#RAM缓存11)
            A等于A减R1 ()
            _RAM等于A (#RAM缓存15)
            JNC (ROM_缓存使用字节 ＋ 34)
            A等于_RAM (#RAM缓存14)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 22)
            A等于_RAM (#RAM缓存13)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 107)

            A等于_RAM (目的操作数)
            R1等于_RAM (#RAM缓存12)
            A等于A减R1 ()
            _RAM等于A (#RAM缓存16)
            JNC (ROM_缓存使用字节 ＋ 46)
            A等于_RAM (#RAM缓存15)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 34)
            A等于_RAM (#RAM缓存14)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 22)
            A等于_RAM (#RAM缓存13)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 45)


            A等于_RAM (#RAM缓存13)
            _RAM等于A (目的操作数 ＋ 3)
            A等于_RAM (#RAM缓存14)
            _RAM等于A (目的操作数 ＋ 2)
            A等于_RAM (#RAM缓存15)
            _RAM等于A (目的操作数 ＋ 1)
            A等于_RAM (#RAM缓存16)
            _RAM等于A (目的操作数)


            A等于_RAM (#RAM缓存17)
            A等于A减1 ()
            RAM等于A ()

            JNZ (ROM_缓存使用字节 － 371)







            A等于_RAM (#RAM缓存18)
            A等于A加1 ()

            JNC (ROM_缓存使用字节 ＋ 64)

            A等于_RAM (目的操作数)
            A取反 ()
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (目的操作数 ＋ 1)
            A取反 ()
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            _RAM等于A (目的操作数 ＋ 1)

            A等于_RAM (目的操作数 ＋ 2)
            A取反 ()
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            _RAM等于A (目的操作数 ＋ 2)

            A等于_RAM (目的操作数 ＋ 3)
            A取反 ()
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            _RAM等于A (目的操作数 ＋ 3)

        .判断结束


        状态 ＝ “完成”




    .默认
        状态 ＝ “二元式机器码生成_%_运算类型错误或不存在...~!- -”
    .判断结束






.判断 (运算符 ＝ “&” 或 运算符 ＝ “|” 或 运算符 ＝ “^”)

    .判断开始 (右移 (左操作数, 16) ＝ #立即数)
        立即数1 ＝ 立即数值 [位与 (左操作数, 65535) ＋ 1]
    .判断 (右移 (左操作数, 16) ＝ #常量)
        立即数1 ＝ 常量值 [位与 (左操作数, 65535) ＋ 1]
    .判断 (右移 (左操作数, 16) ＝ #无符号char数组 或 右移 (左操作数, 16) ＝ #有符号char数组 或 右移 (左操作数, 16) ＝ #无符号int数组 或 右移 (左操作数, 16) ＝ #有符号int数组 或 右移 (左操作数, 16) ＝ #无符号长int数组 或 右移 (左操作数, 16) ＝ #有符号长int数组)
        立即数1 ＝ 位与 (左操作数, 65535)
    .判断 (右移 (左操作数, 16) ＝ 0)
        立即数1 ＝ 位与 (左操作数, 65535)
        左操作数 ＝ #立即数 × 65536
    .默认

    .判断结束


    .判断开始 (右移 (右操作数, 16) ＝ #立即数)
        立即数2 ＝ 立即数值 [位与 (右操作数, 65535) ＋ 1]
    .判断 (右移 (右操作数, 16) ＝ #常量)
        立即数2 ＝ 常量值 [位与 (右操作数, 65535) ＋ 1]
    .判断 (右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组)
        立即数2 ＝ 位与 (右操作数, 65535)
    .判断 (右移 (右操作数, 16) ＝ 0)
        立即数2 ＝ 位与 (右操作数, 65535)
        右操作数 ＝ #立即数 × 65536
    .默认

    .判断结束





    .判断开始 ((右移 (目的操作数, 16) ＝ #ACC 或 右移 (目的操作数, 16) ＝ #无符号ACC 或 右移 (目的操作数, 16) ＝ #有符号ACC) 且 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char))

        .判断开始 (位与 (左操作数, 65535) ＝ 位与 (右操作数, 65535))
            A等于_RAM (左操作数)
            R1等于RAM ()

        .默认
            A等于_RAM (左操作数)
            R1等于_RAM (右操作数)
        .判断结束

        .判断开始 (运算符 ＝ “&”)
            A等于A与R1 ()
        .判断 (运算符 ＝ “|”)
            A等于A或R1 ()
        .默认
            A等于A异或R1 ()
        .判断结束


        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #无符号int 或 右移 (目的操作数, 16) ＝ #有符号int) 且 (右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int 或 右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int))

        .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535) 且 位与 (目的操作数, 65535) ＝ 位与 (右操作数, 65535))

            .判断开始 (运算符 ＝ “&”)

                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A与R1 ()
                RAM等于A ()
                A等于_RAM (左操作数 ＋ 1)
                R1等于RAM ()
                A等于A与R1 ()
                RAM等于A ()

            .判断 (运算符 ＝ “|”)

                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A或R1 ()
                RAM等于A ()
                A等于_RAM (左操作数 ＋ 1)
                R1等于RAM ()
                A等于A或R1 ()
                RAM等于A ()

            .默认
                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A异或R1 ()
                RAM等于A ()
                A等于_RAM (左操作数 ＋ 1)
                R1等于RAM ()
                A等于A异或R1 ()
                RAM等于A ()

            .判断结束


        .判断 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535))

            .判断开始 (运算符 ＝ “&”)

                R1等于_RAM (右操作数)
                A等于_RAM (左操作数)
                A等于A与R1 ()
                RAM等于A ()
                R1等于_RAM (右操作数 ＋ 1)
                A等于_RAM (左操作数 ＋ 1)
                A等于A与R1 ()
                RAM等于A ()

            .判断 (运算符 ＝ “|”)

                R1等于_RAM (右操作数)
                A等于_RAM (左操作数)
                A等于A或R1 ()
                RAM等于A ()
                R1等于_RAM (右操作数 ＋ 1)
                A等于_RAM (左操作数 ＋ 1)
                A等于A或R1 ()
                RAM等于A ()

            .默认
                R1等于_RAM (右操作数)
                A等于_RAM (左操作数)
                A等于A异或R1 ()
                RAM等于A ()
                R1等于_RAM (右操作数 ＋ 1)
                A等于_RAM (左操作数 ＋ 1)
                A等于A异或R1 ()
                RAM等于A ()

            .判断结束


        .判断 (位与 (目的操作数, 65535) ＝ 位与 (右操作数, 65535))

            .判断开始 (运算符 ＝ “&”)

                A等于_RAM (左操作数)
                R1等于_RAM (右操作数)
                A等于A与R1 ()
                RAM等于A ()
                A等于_RAM (左操作数 ＋ 1)
                R1等于_RAM (右操作数 ＋ 1)
                A等于A与R1 ()
                RAM等于A ()

            .判断 (运算符 ＝ “|”)

                A等于_RAM (左操作数)
                R1等于_RAM (右操作数)
                A等于A或R1 ()
                RAM等于A ()
                A等于_RAM (左操作数 ＋ 1)
                R1等于_RAM (右操作数 ＋ 1)
                A等于A或R1 ()
                RAM等于A ()

            .默认
                A等于_RAM (左操作数)
                R1等于_RAM (右操作数)
                A等于A异或R1 ()
                RAM等于A ()
                A等于_RAM (左操作数 ＋ 1)
                R1等于_RAM (右操作数 ＋ 1)
                A等于A异或R1 ()
                RAM等于A ()

            .判断结束



        .判断 (位与 (左操作数, 65535) ＝ 位与 (右操作数, 65535))

            .判断开始 (运算符 ＝ “&”)

                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A与R1 ()
                _RAM等于A (目的操作数)
                A等于_RAM (左操作数 ＋ 1)
                R1等于RAM ()
                A等于A与R1 ()
                _RAM等于A (目的操作数 ＋ 1)

            .判断 (运算符 ＝ “|”)

                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A或R1 ()
                _RAM等于A (目的操作数)
                A等于_RAM (左操作数 ＋ 1)
                R1等于RAM ()
                A等于A或R1 ()
                _RAM等于A (目的操作数 ＋ 1)

            .默认
                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A异或R1 ()
                _RAM等于A (目的操作数)
                A等于_RAM (左操作数 ＋ 1)
                R1等于RAM ()
                A等于A异或R1 ()
                _RAM等于A (目的操作数 ＋ 1)

            .判断结束



        .默认


            .判断开始 (运算符 ＝ “&”)

                A等于_RAM (左操作数)
                R1等于_RAM (右操作数)
                A等于A与R1 ()
                _RAM等于A (目的操作数)
                A等于_RAM (左操作数 ＋ 1)
                R1等于_RAM (右操作数 ＋ 1)
                A等于A与R1 ()
                _RAM等于A (目的操作数 ＋ 1)

            .判断 (运算符 ＝ “|”)

                A等于_RAM (左操作数)
                R1等于_RAM (右操作数)
                A等于A或R1 ()
                _RAM等于A (目的操作数)
                A等于_RAM (左操作数 ＋ 1)
                R1等于_RAM (右操作数 ＋ 1)
                A等于A或R1 ()
                _RAM等于A (目的操作数 ＋ 1)

            .默认
                A等于_RAM (左操作数)
                R1等于_RAM (右操作数)
                A等于A异或R1 ()
                _RAM等于A (目的操作数)
                A等于_RAM (左操作数 ＋ 1)
                R1等于_RAM (右操作数 ＋ 1)
                A等于A异或R1 ()
                _RAM等于A (目的操作数 ＋ 1)

            .判断结束


        .判断结束


        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #无符号长int 或 右移 (目的操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int))

        .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535) 且 位与 (目的操作数, 65535) ＝ 位与 (右操作数, 65535))

            .判断开始 (运算符 ＝ “&”)

                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A与R1 ()
                RAM等于A ()
                A等于_RAM (左操作数 ＋ 1)
                R1等于RAM ()
                A等于A与R1 ()
                RAM等于A ()
                A等于_RAM (左操作数 ＋ 2)
                R1等于RAM ()
                A等于A与R1 ()
                RAM等于A ()
                A等于_RAM (左操作数 ＋ 3)
                R1等于RAM ()
                A等于A与R1 ()
                RAM等于A ()

            .判断 (运算符 ＝ “|”)

                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A或R1 ()
                RAM等于A ()
                A等于_RAM (左操作数 ＋ 1)
                R1等于RAM ()
                A等于A或R1 ()
                RAM等于A ()
                A等于_RAM (左操作数 ＋ 2)
                R1等于RAM ()
                A等于A或R1 ()
                RAM等于A ()
                A等于_RAM (左操作数 ＋ 3)
                R1等于RAM ()
                A等于A或R1 ()
                RAM等于A ()

            .默认
                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A异或R1 ()
                RAM等于A ()
                A等于_RAM (左操作数 ＋ 1)
                R1等于RAM ()
                A等于A异或R1 ()
                RAM等于A ()
                A等于_RAM (左操作数 ＋ 2)
                R1等于RAM ()
                A等于A异或R1 ()
                RAM等于A ()
                A等于_RAM (左操作数 ＋ 3)
                R1等于RAM ()
                A等于A异或R1 ()
                RAM等于A ()

            .判断结束



        .判断 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535))

            .判断开始 (运算符 ＝ “&”)

                R1等于_RAM (右操作数)
                A等于_RAM (左操作数)
                A等于A与R1 ()
                RAM等于A ()
                R1等于_RAM (右操作数 ＋ 1)
                A等于_RAM (左操作数 ＋ 1)
                A等于A与R1 ()
                RAM等于A ()
                R1等于_RAM (右操作数 ＋ 2)
                A等于_RAM (左操作数 ＋ 2)
                A等于A与R1 ()
                RAM等于A ()
                R1等于_RAM (右操作数 ＋ 3)
                A等于_RAM (左操作数 ＋ 3)
                A等于A与R1 ()
                RAM等于A ()



            .判断 (运算符 ＝ “|”)

                R1等于_RAM (右操作数)
                A等于_RAM (左操作数)
                A等于A或R1 ()
                RAM等于A ()
                R1等于_RAM (右操作数 ＋ 1)
                A等于_RAM (左操作数 ＋ 1)
                A等于A或R1 ()
                RAM等于A ()
                R1等于_RAM (右操作数 ＋ 2)
                A等于_RAM (左操作数 ＋ 2)
                A等于A或R1 ()
                RAM等于A ()
                R1等于_RAM (右操作数 ＋ 3)
                A等于_RAM (左操作数 ＋ 3)
                A等于A或R1 ()
                RAM等于A ()

            .默认
                R1等于_RAM (右操作数)
                A等于_RAM (左操作数)
                A等于A异或R1 ()
                RAM等于A ()
                R1等于_RAM (右操作数 ＋ 1)
                A等于_RAM (左操作数 ＋ 1)
                A等于A异或R1 ()
                RAM等于A ()
                R1等于_RAM (右操作数 ＋ 2)
                A等于_RAM (左操作数 ＋ 2)
                A等于A异或R1 ()
                RAM等于A ()
                R1等于_RAM (右操作数 ＋ 3)
                A等于_RAM (左操作数 ＋ 3)
                A等于A异或R1 ()
                RAM等于A ()

            .判断结束


        .判断 (位与 (目的操作数, 65535) ＝ 位与 (右操作数, 65535))

            .判断开始 (运算符 ＝ “&”)

                A等于_RAM (左操作数)
                R1等于_RAM (右操作数)
                A等于A与R1 ()
                RAM等于A ()
                A等于_RAM (左操作数 ＋ 1)
                R1等于_RAM (右操作数 ＋ 1)
                A等于A与R1 ()
                RAM等于A ()
                A等于_RAM (左操作数 ＋ 2)
                R1等于_RAM (右操作数 ＋ 2)
                A等于A与R1 ()
                RAM等于A ()
                A等于_RAM (左操作数 ＋ 3)
                R1等于_RAM (右操作数 ＋ 3)
                A等于A与R1 ()
                RAM等于A ()


            .判断 (运算符 ＝ “|”)

                A等于_RAM (左操作数)
                R1等于_RAM (右操作数)
                A等于A或R1 ()
                RAM等于A ()
                A等于_RAM (左操作数 ＋ 1)
                R1等于_RAM (右操作数 ＋ 1)
                A等于A或R1 ()
                RAM等于A ()
                A等于_RAM (左操作数 ＋ 2)
                R1等于_RAM (右操作数 ＋ 2)
                A等于A或R1 ()
                RAM等于A ()
                A等于_RAM (左操作数 ＋ 3)
                R1等于_RAM (右操作数 ＋ 3)
                A等于A或R1 ()
                RAM等于A ()

            .默认
                A等于_RAM (左操作数)
                R1等于_RAM (右操作数)
                A等于A异或R1 ()
                RAM等于A ()
                A等于_RAM (左操作数 ＋ 1)
                R1等于_RAM (右操作数 ＋ 1)
                A等于A异或R1 ()
                RAM等于A ()
                A等于_RAM (左操作数 ＋ 2)
                R1等于_RAM (右操作数 ＋ 2)
                A等于A异或R1 ()
                RAM等于A ()
                A等于_RAM (左操作数 ＋ 3)
                R1等于_RAM (右操作数 ＋ 3)
                A等于A异或R1 ()
                RAM等于A ()

            .判断结束



        .判断 (位与 (左操作数, 65535) ＝ 位与 (右操作数, 65535))

            .判断开始 (运算符 ＝ “&”)

                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A与R1 ()
                _RAM等于A (目的操作数)
                A等于_RAM (左操作数 ＋ 1)
                R1等于RAM ()
                A等于A与R1 ()
                _RAM等于A (目的操作数 ＋ 1)
                A等于_RAM (左操作数 ＋ 2)
                R1等于RAM ()
                A等于A与R1 ()
                _RAM等于A (目的操作数 ＋ 2)
                A等于_RAM (左操作数 ＋ 3)
                R1等于RAM ()
                A等于A与R1 ()
                _RAM等于A (目的操作数 ＋ 3)

            .判断 (运算符 ＝ “|”)

                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A或R1 ()
                _RAM等于A (目的操作数)
                A等于_RAM (左操作数 ＋ 1)
                R1等于RAM ()
                A等于A或R1 ()
                _RAM等于A (目的操作数 ＋ 1)
                A等于_RAM (左操作数 ＋ 2)
                R1等于RAM ()
                A等于A或R1 ()
                _RAM等于A (目的操作数 ＋ 2)
                A等于_RAM (左操作数 ＋ 3)
                R1等于RAM ()
                A等于A或R1 ()
                _RAM等于A (目的操作数 ＋ 3)

            .默认
                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A异或R1 ()
                _RAM等于A (目的操作数)
                A等于_RAM (左操作数 ＋ 1)
                R1等于RAM ()
                A等于A异或R1 ()
                _RAM等于A (目的操作数 ＋ 1)
                A等于_RAM (左操作数 ＋ 2)
                R1等于RAM ()
                A等于A异或R1 ()
                _RAM等于A (目的操作数 ＋ 2)
                A等于_RAM (左操作数 ＋ 3)
                R1等于RAM ()
                A等于A异或R1 ()
                _RAM等于A (目的操作数 ＋ 3)

            .判断结束



        .默认


            .判断开始 (运算符 ＝ “&”)

                A等于_RAM (左操作数)
                R1等于_RAM (右操作数)
                A等于A与R1 ()
                _RAM等于A (目的操作数)
                A等于_RAM (左操作数 ＋ 1)
                R1等于_RAM (右操作数 ＋ 1)
                A等于A与R1 ()
                _RAM等于A (目的操作数 ＋ 1)
                A等于_RAM (左操作数 ＋ 2)
                R1等于_RAM (右操作数 ＋ 2)
                A等于A与R1 ()
                _RAM等于A (目的操作数 ＋ 2)
                A等于_RAM (左操作数 ＋ 3)
                R1等于_RAM (右操作数 ＋ 3)
                A等于A与R1 ()
                _RAM等于A (目的操作数 ＋ 3)

            .判断 (运算符 ＝ “|”)

                A等于_RAM (左操作数)
                R1等于_RAM (右操作数)
                A等于A或R1 ()
                _RAM等于A (目的操作数)
                A等于_RAM (左操作数 ＋ 1)
                R1等于_RAM (右操作数 ＋ 1)
                A等于A或R1 ()
                _RAM等于A (目的操作数 ＋ 1)
                A等于_RAM (左操作数 ＋ 2)
                R1等于_RAM (右操作数 ＋ 2)
                A等于A或R1 ()
                _RAM等于A (目的操作数 ＋ 2)
                A等于_RAM (左操作数 ＋ 3)
                R1等于_RAM (右操作数 ＋ 3)
                A等于A或R1 ()
                _RAM等于A (目的操作数 ＋ 3)

            .默认
                A等于_RAM (左操作数)
                R1等于_RAM (右操作数)
                A等于A异或R1 ()
                _RAM等于A (目的操作数)
                A等于_RAM (左操作数 ＋ 1)
                R1等于_RAM (右操作数 ＋ 1)
                A等于A异或R1 ()
                _RAM等于A (目的操作数 ＋ 1)
                A等于_RAM (左操作数 ＋ 2)
                R1等于_RAM (右操作数 ＋ 2)
                A等于A异或R1 ()
                _RAM等于A (目的操作数 ＋ 2)
                A等于_RAM (左操作数 ＋ 3)
                R1等于_RAM (右操作数 ＋ 3)
                A等于A异或R1 ()
                _RAM等于A (目的操作数 ＋ 3)

            .判断结束


        .判断结束



        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #ACC 或 右移 (目的操作数, 16) ＝ #无符号ACC 或 右移 (目的操作数, 16) ＝ #有符号ACC) 且 ((右移 (左操作数, 16) ＝ #ACC 或 右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC) 且 右移 (右操作数, 16) ＝ #R1 或 (右移 (右操作数, 16) ＝ #ACC 或 右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC) 且 右移 (左操作数, 16) ＝ #R1))

        .判断开始 (运算符 ＝ “&”)
            A等于A与R1 ()
        .判断 (运算符 ＝ “|”)
            A等于A或R1 ()
        .默认
            A等于A异或R1 ()
        .判断结束


        状态 ＝ “完成”



    .判断 ((右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char) 且 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char 或 右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int 或 右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int))

        .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535) 且 位与 (目的操作数, 65535) ＝ 位与 (右操作数, 65535))

            .判断开始 (运算符 ＝ “&”)

                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A与R1 ()
                RAM等于A ()

            .判断 (运算符 ＝ “|”)

                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A或R1 ()
                RAM等于A ()

            .默认
                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A异或R1 ()
                RAM等于A ()

            .判断结束


        .判断 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535))

            .判断开始 (运算符 ＝ “&”)

                R1等于_RAM (右操作数)
                A等于_RAM (左操作数)
                A等于A与R1 ()
                RAM等于A ()

            .判断 (运算符 ＝ “|”)

                R1等于_RAM (右操作数)
                A等于_RAM (左操作数)
                A等于A或R1 ()
                RAM等于A ()

            .默认
                R1等于_RAM (右操作数)
                A等于_RAM (左操作数)
                A等于A异或R1 ()
                RAM等于A ()

            .判断结束


        .判断 (位与 (目的操作数, 65535) ＝ 位与 (右操作数, 65535))

            .判断开始 (运算符 ＝ “&”)

                A等于_RAM (左操作数)
                R1等于_RAM (右操作数)
                A等于A与R1 ()
                RAM等于A ()

            .判断 (运算符 ＝ “|”)

                A等于_RAM (左操作数)
                R1等于_RAM (右操作数)
                A等于A或R1 ()
                RAM等于A ()

            .默认
                A等于_RAM (左操作数)
                R1等于_RAM (右操作数)
                A等于A异或R1 ()
                RAM等于A ()

            .判断结束



        .判断 (位与 (左操作数, 65535) ＝ 位与 (右操作数, 65535))

            .判断开始 (运算符 ＝ “&”)

                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A与R1 ()
                _RAM等于A (目的操作数)

            .判断 (运算符 ＝ “|”)

                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A或R1 ()
                _RAM等于A (目的操作数)

            .默认
                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A异或R1 ()
                _RAM等于A (目的操作数)

            .判断结束



        .默认


            .判断开始 (运算符 ＝ “&”)

                A等于_RAM (左操作数)
                R1等于_RAM (右操作数)
                A等于A与R1 ()
                _RAM等于A (目的操作数)

            .判断 (运算符 ＝ “|”)

                A等于_RAM (左操作数)
                R1等于_RAM (右操作数)
                A等于A或R1 ()
                _RAM等于A (目的操作数)

            .默认
                A等于_RAM (左操作数)
                R1等于_RAM (右操作数)
                A等于A异或R1 ()
                _RAM等于A (目的操作数)

            .判断结束


        .判断结束


        状态 ＝ “完成”



    .判断 ((右移 (目的操作数, 16) ＝ #无符号ACC 或 右移 (目的操作数, 16) ＝ #有符号ACC 或 右移 (目的操作数, 16) ＝ #ACC) 且 ((右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC 或 右移 (左操作数, 16) ＝ #ACC) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char) 或 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC 或 右移 (右操作数, 16) ＝ #ACC) 且 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char)))

        .如果真 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC 或 右移 (右操作数, 16) ＝ #ACC)
            计数1 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 计数1
        .如果真结束


        .判断开始 (运算符 ＝ “&”)

            R1等于_RAM (右操作数)
            A等于A与R1 ()

        .判断 (运算符 ＝ “|”)

            R1等于_RAM (右操作数)
            A等于A或R1 ()

        .默认
            R1等于_RAM (右操作数)
            A等于A异或R1 ()
        .判断结束


        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char) 且 ((右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC 或 右移 (左操作数, 16) ＝ #ACC) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char) 或 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC 或 右移 (右操作数, 16) ＝ #ACC) 且 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char)))

        .如果真 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC 或 右移 (右操作数, 16) ＝ #ACC)
            计数1 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 计数1
        .如果真结束


        .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (右操作数, 65535))

            .判断开始 (运算符 ＝ “&”)

                R1等于_RAM (右操作数)
                A等于A与R1 ()

            .判断 (运算符 ＝ “|”)

                R1等于_RAM (右操作数)
                A等于A或R1 ()

            .默认
                R1等于_RAM (右操作数)
                A等于A异或R1 ()
            .判断结束

            RAM等于A ()


        .默认

            .判断开始 (运算符 ＝ “&”)

                R1等于_RAM (右操作数)
                A等于A与R1 ()

            .判断 (运算符 ＝ “|”)

                R1等于_RAM (右操作数)
                A等于A或R1 ()

            .默认
                R1等于_RAM (右操作数)
                A等于A异或R1 ()
            .判断结束

            _RAM等于A (目的操作数)

        .判断结束


        状态 ＝ “完成”



    .判断 ((右移 (目的操作数, 16) ＝ #无符号ACC 或 右移 (目的操作数, 16) ＝ #有符号ACC 或 右移 (目的操作数, 16) ＝ #ACC) 且 ((右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC 或 右移 (左操作数, 16) ＝ #ACC) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC 或 右移 (右操作数, 16) ＝ #ACC) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)))

        .如果真 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC 或 右移 (右操作数, 16) ＝ #ACC)
            计数1 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 计数1
            立即数2 ＝ 立即数1
        .如果真结束


        .判断开始 (运算符 ＝ “&”)

            R1等于立即数 (立即数2)
            A等于A与R1 ()

        .判断 (运算符 ＝ “|”)

            R1等于立即数 (立即数2)
            A等于A或R1 ()

        .默认
            R1等于立即数 (立即数2)
            A等于A异或R1 ()
        .判断结束


        状态 ＝ “完成”



    .判断 ((右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char) 且 ((右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC 或 右移 (左操作数, 16) ＝ #ACC) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC 或 右移 (右操作数, 16) ＝ #ACC) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)))

        .如果真 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC 或 右移 (右操作数, 16) ＝ #ACC)
            计数1 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 计数1
            立即数2 ＝ 立即数1
        .如果真结束


        .判断开始 (运算符 ＝ “&”)

            R1等于立即数 (立即数2)
            A等于A与R1 ()

        .判断 (运算符 ＝ “|”)

            R1等于立即数 (立即数2)
            A等于A或R1 ()

        .默认
            R1等于立即数 (立即数2)
            A等于A异或R1 ()
        .判断结束

        _RAM等于A (目的操作数)


        状态 ＝ “完成”



    .判断 ((右移 (目的操作数, 16) ＝ #无符号ACC 或 右移 (目的操作数, 16) ＝ #有符号ACC 或 右移 (目的操作数, 16) ＝ #ACC) 且 ((右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)))

        .如果真 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)
            计数1 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 计数1
            立即数2 ＝ 立即数1
        .如果真结束


        .判断开始 (运算符 ＝ “&”)

            A等于_RAM (左操作数)
            R1等于立即数 (立即数2)
            A等于A与R1 ()

        .判断 (运算符 ＝ “|”)

            A等于_RAM (左操作数)
            R1等于立即数 (立即数2)
            A等于A或R1 ()

        .默认
            A等于_RAM (左操作数)
            R1等于立即数 (立即数2)
            A等于A异或R1 ()
        .判断结束


        状态 ＝ “完成”



    .判断 ((右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char) 且 ((右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char 或 右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int 或 右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)))

        .如果真 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)
            计数1 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 计数1
            立即数2 ＝ 立即数1
        .如果真结束


        .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535))

            .判断开始 (运算符 ＝ “&”)

                A等于_RAM (左操作数)
                R1等于立即数 (立即数2)
                A等于A与R1 ()

            .判断 (运算符 ＝ “|”)

                A等于_RAM (左操作数)
                R1等于立即数 (立即数2)
                A等于A或R1 ()

            .默认
                A等于_RAM (左操作数)
                R1等于立即数 (立即数2)
                A等于A异或R1 ()
            .判断结束

            RAM等于A ()

        .默认

            .判断开始 (运算符 ＝ “&”)

                A等于_RAM (左操作数)
                R1等于立即数 (立即数2)
                A等于A与R1 ()

            .判断 (运算符 ＝ “|”)

                A等于_RAM (左操作数)
                R1等于立即数 (立即数2)
                A等于A或R1 ()

            .默认
                A等于_RAM (左操作数)
                R1等于立即数 (立即数2)
                A等于A异或R1 ()
            .判断结束

            _RAM等于A (目的操作数)
        .判断结束



        状态 ＝ “完成”



    .判断 ((右移 (目的操作数, 16) ＝ #无符号int 或 右移 (目的操作数, 16) ＝ #有符号int) 且 ((右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int 或 右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)))

        .如果真 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)
            计数1 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 计数1
            立即数2 ＝ 立即数1
        .如果真结束


        .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535))

            .判断开始 (运算符 ＝ “&”)

                A等于_RAM (左操作数)
                R1等于立即数 (立即数2)
                A等于A与R1 ()
                RAM等于A ()
                A等于_RAM (左操作数 ＋ 1)
                R1等于立即数 (右移 (立即数2, 8))
                A等于A与R1 ()
                RAM等于A ()


            .判断 (运算符 ＝ “|”)

                A等于_RAM (左操作数)
                R1等于立即数 (立即数2)
                A等于A或R1 ()
                RAM等于A ()
                A等于_RAM (左操作数 ＋ 1)
                R1等于立即数 (右移 (立即数2, 8))
                A等于A或R1 ()
                RAM等于A ()


            .默认
                A等于_RAM (左操作数)
                R1等于立即数 (立即数2)
                A等于A异或R1 ()
                RAM等于A ()
                A等于_RAM (左操作数 ＋ 1)
                R1等于立即数 (右移 (立即数2, 8))
                A等于A异或R1 ()
                RAM等于A ()

            .判断结束



        .默认

            .判断开始 (运算符 ＝ “&”)

                A等于_RAM (左操作数)
                R1等于立即数 (立即数2)
                A等于A与R1 ()
                _RAM等于A (目的操作数)
                A等于_RAM (左操作数 ＋ 1)
                R1等于立即数 (右移 (立即数2, 8))
                A等于A与R1 ()
                _RAM等于A (目的操作数 ＋ 1)


            .判断 (运算符 ＝ “|”)

                A等于_RAM (左操作数)
                R1等于立即数 (立即数2)
                A等于A或R1 ()
                _RAM等于A (目的操作数)
                A等于_RAM (左操作数 ＋ 1)
                R1等于立即数 (右移 (立即数2, 8))
                A等于A或R1 ()
                _RAM等于A (目的操作数 ＋ 1)


            .默认
                A等于_RAM (左操作数)
                R1等于立即数 (立即数2)
                A等于A异或R1 ()
                _RAM等于A (目的操作数)
                A等于_RAM (左操作数 ＋ 1)
                R1等于立即数 (右移 (立即数2, 8))
                A等于A异或R1 ()
                _RAM等于A (目的操作数 ＋ 1)

            .判断结束


        .判断结束



        状态 ＝ “完成”



    .判断 ((右移 (目的操作数, 16) ＝ #无符号长int 或 右移 (目的操作数, 16) ＝ #有符号长int) 且 ((右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 (右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)))

        .如果真 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)
            计数1 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 计数1
            立即数2 ＝ 立即数1
        .如果真结束


        .判断开始 (位与 (目的操作数, 65535) ＝ 位与 (左操作数, 65535))

            .判断开始 (运算符 ＝ “&”)

                A等于_RAM (左操作数)
                R1等于立即数 (立即数2)
                A等于A与R1 ()
                RAM等于A ()
                A等于_RAM (左操作数 ＋ 1)
                R1等于立即数 (右移 (立即数2, 8))
                A等于A与R1 ()
                RAM等于A ()
                A等于_RAM (左操作数 ＋ 2)
                R1等于立即数 (右移 (立即数2, 16))
                A等于A与R1 ()
                RAM等于A ()
                A等于_RAM (左操作数 ＋ 3)
                R1等于立即数 (右移 (立即数2, 24))
                A等于A与R1 ()
                RAM等于A ()


            .判断 (运算符 ＝ “|”)

                A等于_RAM (左操作数)
                R1等于立即数 (立即数2)
                A等于A或R1 ()
                RAM等于A ()
                A等于_RAM (左操作数 ＋ 1)
                R1等于立即数 (右移 (立即数2, 8))
                A等于A或R1 ()
                RAM等于A ()
                A等于_RAM (左操作数 ＋ 2)
                R1等于立即数 (右移 (立即数2, 16))
                A等于A或R1 ()
                RAM等于A ()
                A等于_RAM (左操作数 ＋ 3)
                R1等于立即数 (右移 (立即数2, 24))
                A等于A或R1 ()
                RAM等于A ()


            .默认
                A等于_RAM (左操作数)
                R1等于立即数 (立即数2)
                A等于A异或R1 ()
                RAM等于A ()
                A等于_RAM (左操作数 ＋ 1)
                R1等于立即数 (右移 (立即数2, 8))
                A等于A异或R1 ()
                RAM等于A ()
                A等于_RAM (左操作数 ＋ 2)
                R1等于立即数 (右移 (立即数2, 16))
                A等于A异或R1 ()
                RAM等于A ()
                A等于_RAM (左操作数 ＋ 3)
                R1等于立即数 (右移 (立即数2, 24))
                A等于A异或R1 ()
                RAM等于A ()

            .判断结束



        .默认

            .判断开始 (运算符 ＝ “&”)

                A等于_RAM (左操作数)
                R1等于立即数 (立即数2)
                A等于A与R1 ()
                _RAM等于A (目的操作数)
                A等于_RAM (左操作数 ＋ 1)
                R1等于立即数 (右移 (立即数2, 8))
                A等于A与R1 ()
                _RAM等于A (目的操作数 ＋ 1)
                A等于_RAM (左操作数 ＋ 2)
                R1等于立即数 (右移 (立即数2, 16))
                A等于A与R1 ()
                _RAM等于A (目的操作数 ＋ 2)
                A等于_RAM (左操作数 ＋ 3)
                R1等于立即数 (右移 (立即数2, 24))
                A等于A与R1 ()
                _RAM等于A (目的操作数 ＋ 3)


            .判断 (运算符 ＝ “|”)

                A等于_RAM (左操作数)
                R1等于立即数 (立即数2)
                A等于A或R1 ()
                _RAM等于A (目的操作数)
                A等于_RAM (左操作数 ＋ 1)
                R1等于立即数 (右移 (立即数2, 8))
                A等于A或R1 ()
                _RAM等于A (目的操作数 ＋ 1)
                A等于_RAM (左操作数 ＋ 2)
                R1等于立即数 (右移 (立即数2, 16))
                A等于A或R1 ()
                _RAM等于A (目的操作数 ＋ 2)
                A等于_RAM (左操作数 ＋ 3)
                R1等于立即数 (右移 (立即数2, 24))
                A等于A或R1 ()
                _RAM等于A (目的操作数 ＋ 3)


            .默认
                A等于_RAM (左操作数)
                R1等于立即数 (立即数2)
                A等于A异或R1 ()
                _RAM等于A (目的操作数)
                A等于_RAM (左操作数 ＋ 1)
                R1等于立即数 (右移 (立即数2, 8))
                A等于A异或R1 ()
                _RAM等于A (目的操作数 ＋ 1)
                A等于_RAM (左操作数 ＋ 2)
                R1等于立即数 (右移 (立即数2, 16))
                A等于A异或R1 ()
                _RAM等于A (目的操作数 ＋ 2)
                A等于_RAM (左操作数 ＋ 3)
                R1等于立即数 (右移 (立即数2, 24))
                A等于A异或R1 ()
                _RAM等于A (目的操作数 ＋ 3)

            .判断结束


        .判断结束



        状态 ＝ “完成”


    .默认
        状态 ＝ “二元式机器码生成_&_运算类型错误或不存在...~!- -”
    .判断结束






.判断 (运算符 ＝ “~”)

    .判断开始 ((右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char) 且 右移 (左操作数, 16) ＝ 0 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int))

        .判断开始 (位与 (目的操作数, 65535) ≠ 位与 (右操作数, 65535))

            A等于_RAM (右操作数)
            A取反 ()
            _RAM等于A (目的操作数)

        .默认

            A等于_RAM (右操作数)
            A取反 ()
            RAM等于A ()

        .判断结束


        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #无符号int 或 右移 (目的操作数, 16) ＝ #有符号int 或 右移 (目的操作数, 16) ＝ #无符号char指针 或 右移 (目的操作数, 16) ＝ #有符号char指针 或 右移 (目的操作数, 16) ＝ #无符号int指针 或 右移 (目的操作数, 16) ＝ #有符号int指针 或 右移 (目的操作数, 16) ＝ #无符号长int指针 或 右移 (目的操作数, 16) ＝ #有符号长int指针) 且 右移 (左操作数, 16) ＝ 0 且 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int))

        .判断开始 (位与 (目的操作数, 65535) ≠ 位与 (右操作数, 65535))

            A等于_RAM (右操作数)
            A取反 ()
            _RAM等于A (目的操作数)
            A等于_RAM (右操作数 ＋ 1)
            A取反 ()
            _RAM等于A (目的操作数 ＋ 1)

        .默认

            A等于_RAM (右操作数)
            A取反 ()
            RAM等于A ()
            A等于_RAM (右操作数 ＋ 1)
            A取反 ()
            RAM等于A ()

        .判断结束


        状态 ＝ “完成”



    .判断 ((右移 (目的操作数, 16) ＝ #无符号长int 或 右移 (目的操作数, 16) ＝ #有符号长int) 且 右移 (左操作数, 16) ＝ 0 且 (右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int))

        .判断开始 (位与 (目的操作数, 65535) ≠ 位与 (右操作数, 65535))

            A等于_RAM (右操作数)
            A取反 ()
            _RAM等于A (目的操作数)
            A等于_RAM (右操作数 ＋ 1)
            A取反 ()
            _RAM等于A (目的操作数 ＋ 1)
            A等于_RAM (右操作数 ＋ 2)
            A取反 ()
            _RAM等于A (目的操作数 ＋ 2)
            A等于_RAM (右操作数 ＋ 3)
            A取反 ()
            _RAM等于A (目的操作数 ＋ 3)

        .默认

            A等于_RAM (右操作数)
            A取反 ()
            RAM等于A ()
            A等于_RAM (右操作数 ＋ 1)
            A取反 ()
            RAM等于A ()
            A等于_RAM (右操作数 ＋ 2)
            A取反 ()
            RAM等于A ()
            A等于_RAM (右操作数 ＋ 3)
            A取反 ()
            RAM等于A ()

        .判断结束


        状态 ＝ “完成”



    .默认
        状态 ＝ “二元式机器码生成_~_运算类型错误或不存在...~!- -”
    .判断结束




.判断 (运算符 ＝ “<<”)

    .判断开始 (右移 (左操作数, 16) ＝ #立即数)
        立即数1 ＝ 立即数值 [位与 (左操作数, 65535) ＋ 1]
    .判断 (右移 (左操作数, 16) ＝ #常量)
        立即数1 ＝ 常量值 [位与 (左操作数, 65535) ＋ 1]
    .判断 (右移 (左操作数, 16) ＝ #无符号char数组 或 右移 (左操作数, 16) ＝ #有符号char数组 或 右移 (左操作数, 16) ＝ #无符号int数组 或 右移 (左操作数, 16) ＝ #有符号int数组 或 右移 (左操作数, 16) ＝ #无符号长int数组 或 右移 (左操作数, 16) ＝ #有符号长int数组)
        立即数1 ＝ 位与 (左操作数, 65535)
    .判断 (右移 (左操作数, 16) ＝ 0)
        立即数1 ＝ 位与 (左操作数, 65535)
        左操作数 ＝ #立即数 × 65536
    .默认

    .判断结束


    .判断开始 (右移 (右操作数, 16) ＝ #立即数)
        立即数2 ＝ 立即数值 [位与 (右操作数, 65535) ＋ 1]
    .判断 (右移 (右操作数, 16) ＝ #常量)
        立即数2 ＝ 常量值 [位与 (右操作数, 65535) ＋ 1]
    .判断 (右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组)
        立即数2 ＝ 位与 (右操作数, 65535)
    .判断 (右移 (右操作数, 16) ＝ 0)
        立即数2 ＝ 位与 (右操作数, 65535)
        右操作数 ＝ #立即数 × 65536
    .默认

    .判断结束





    .判断开始 ((右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char) 且 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int 或 右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC))

        .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC)
            _RAM等于A (#RAM缓存1)
        .默认
            A等于_RAM (右操作数)
            _RAM等于A (#RAM缓存1)
        .判断结束


        .判断开始 (位与 (目的操作数, 65535) ≠ 位与 (左操作数, 65535))

            A等于_RAM (左操作数)
            _RAM等于A (目的操作数)


            A等于_RAM (#RAM缓存1)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 18)

            A等于_RAM (目的操作数)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JMP (ROM_缓存使用字节 － 25)


        .默认
            A等于_RAM (#RAM缓存1)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 18)

            A等于_RAM (目的操作数)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JMP (ROM_缓存使用字节 － 25)

        .判断结束



        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #无符号int 或 右移 (目的操作数, 16) ＝ #有符号int) 且 (右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int 或 右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC))

        .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC)
            _RAM等于A (#RAM缓存1)
        .默认
            A等于_RAM (右操作数)
            _RAM等于A (#RAM缓存1)
        .判断结束


        .判断开始 (位与 (目的操作数, 65535) ≠ 位与 (左操作数, 65535))

            A等于_RAM (左操作数)
            _RAM等于A (目的操作数)
            A等于_RAM (左操作数 ＋ 1)
            _RAM等于A (目的操作数 ＋ 1)


            A等于_RAM (#RAM缓存1)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 36)

            A等于_RAM (目的操作数)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (目的操作数 ＋ 1)
            R1等于RAM ()
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            A等于A加R1 ()
            _RAM等于A (目的操作数 ＋ 1)


            JMP (ROM_缓存使用字节 － 43)


        .默认
            A等于_RAM (#RAM缓存1)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 36)

            A等于_RAM (目的操作数)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (目的操作数 ＋ 1)
            R1等于RAM ()
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            A等于A加R1 ()
            _RAM等于A (目的操作数 ＋ 1)


            JMP (ROM_缓存使用字节 － 43)

        .判断结束



        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #无符号长int 或 右移 (目的操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int 或 右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC))

        .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC)
            _RAM等于A (#RAM缓存1)
        .默认
            A等于_RAM (右操作数)
            _RAM等于A (#RAM缓存1)
        .判断结束


        .判断开始 (位与 (目的操作数, 65535) ≠ 位与 (左操作数, 65535))

            A等于_RAM (左操作数)
            _RAM等于A (目的操作数)
            A等于_RAM (左操作数 ＋ 1)
            _RAM等于A (目的操作数 ＋ 1)
            A等于_RAM (左操作数 ＋ 2)
            _RAM等于A (目的操作数 ＋ 2)
            A等于_RAM (左操作数 ＋ 3)
            _RAM等于A (目的操作数 ＋ 3)


            A等于_RAM (#RAM缓存1)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 78)

            A等于_RAM (目的操作数 ＋ 3)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (目的操作数 ＋ 2)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 3)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (目的操作数 ＋ 1)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 2)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (目的操作数)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 1)
            A等于A加1 ()
            RAM等于A ()


            JMP (ROM_缓存使用字节 － 85)


        .默认
            A等于_RAM (#RAM缓存1)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 78)

            A等于_RAM (目的操作数 ＋ 3)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (目的操作数 ＋ 2)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 3)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (目的操作数 ＋ 1)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 2)
            A等于A加1 ()
            RAM等于A ()

            A等于_RAM (目的操作数)
            R1等于RAM ()
            A等于A加R1 ()
            RAM等于A ()

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于_RAM (目的操作数 ＋ 1)
            A等于A加1 ()
            RAM等于A ()


            JMP (ROM_缓存使用字节 － 85)

        .判断结束




        状态 ＝ “完成”




    .判断 ((右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char) 且 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数))

        .判断开始 (立即数2 ＝ 0)

            .如果真 (位与 (目的操作数, 65535) ≠ 位与 (左操作数, 65535))
                A等于_RAM (左操作数)
                _RAM等于A (目的操作数)
            .如果真结束


        .判断 (立即数2 ＝ 1)

            .判断开始 (位与 (目的操作数, 65535) ≠ 位与 (左操作数, 65535))

                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A加R1 ()
                _RAM等于A (目的操作数)

            .默认
                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

            .判断结束

        .判断 (立即数2 ＝ 2)

            .判断开始 (位与 (目的操作数, 65535) ≠ 位与 (左操作数, 65535))

                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A加R1 ()
                R1等于A ()
                A等于A加R1 ()
                _RAM等于A (目的操作数)

            .默认
                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A加R1 ()
                R1等于A ()
                A等于A加R1 ()
                RAM等于A ()

            .判断结束


        .判断 (立即数2 ＝ 3)

            .判断开始 (位与 (目的操作数, 65535) ≠ 位与 (左操作数, 65535))

                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A加R1 ()
                R1等于A ()
                A等于A加R1 ()
                R1等于A ()
                A等于A加R1 ()
                _RAM等于A (目的操作数)

            .默认
                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A加R1 ()
                R1等于A ()
                A等于A加R1 ()
                R1等于A ()
                A等于A加R1 ()
                RAM等于A ()

            .判断结束


        .判断 (立即数2 ＝ 4)

            .判断开始 (位与 (目的操作数, 65535) ≠ 位与 (左操作数, 65535))

                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A加R1 ()
                R1等于A ()
                A等于A加R1 ()
                R1等于A ()
                A等于A加R1 ()
                R1等于A ()
                A等于A加R1 ()
                _RAM等于A (目的操作数)

            .默认
                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A加R1 ()
                R1等于A ()
                A等于A加R1 ()
                R1等于A ()
                A等于A加R1 ()
                R1等于A ()
                A等于A加R1 ()
                RAM等于A ()

            .判断结束


        .判断 (立即数2 ＝ 5)

            .判断开始 (位与 (目的操作数, 65535) ≠ 位与 (左操作数, 65535))

                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A加R1 ()
                R1等于A ()
                A等于A加R1 ()
                R1等于A ()
                A等于A加R1 ()
                R1等于A ()
                A等于A加R1 ()
                R1等于A ()
                A等于A加R1 ()
                _RAM等于A (目的操作数)

            .默认
                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A加R1 ()
                R1等于A ()
                A等于A加R1 ()
                R1等于A ()
                A等于A加R1 ()
                R1等于A ()
                A等于A加R1 ()
                R1等于A ()
                A等于A加R1 ()
                RAM等于A ()

            .判断结束


        .判断 (立即数2 ＝ 6)

            .判断开始 (位与 (目的操作数, 65535) ≠ 位与 (左操作数, 65535))

                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A加R1 ()
                R1等于A ()
                A等于A加R1 ()
                R1等于A ()
                A等于A加R1 ()
                R1等于A ()
                A等于A加R1 ()
                R1等于A ()
                A等于A加R1 ()
                R1等于A ()
                A等于A加R1 ()
                _RAM等于A (目的操作数)

            .默认
                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A加R1 ()
                R1等于A ()
                A等于A加R1 ()
                R1等于A ()
                A等于A加R1 ()
                R1等于A ()
                A等于A加R1 ()
                R1等于A ()
                A等于A加R1 ()
                R1等于A ()
                A等于A加R1 ()
                RAM等于A ()

            .判断结束


        .判断 (立即数2 ＝ 7)

            .判断开始 (位与 (目的操作数, 65535) ≠ 位与 (左操作数, 65535))

                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A加R1 ()
                R1等于A ()
                A等于A加R1 ()
                R1等于A ()
                A等于A加R1 ()
                R1等于A ()
                A等于A加R1 ()
                R1等于A ()
                A等于A加R1 ()
                R1等于A ()
                A等于A加R1 ()
                R1等于A ()
                A等于A加R1 ()
                _RAM等于A (目的操作数)

            .默认
                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A加R1 ()
                R1等于A ()
                A等于A加R1 ()
                R1等于A ()
                A等于A加R1 ()
                R1等于A ()
                A等于A加R1 ()
                R1等于A ()
                A等于A加R1 ()
                R1等于A ()
                A等于A加R1 ()
                R1等于A ()
                A等于A加R1 ()
                RAM等于A ()

            .判断结束



        .默认
            A等于立即数 (0)
            _RAM等于A (目的操作数)
        .判断结束



        状态 ＝ “完成”




    .判断 ((右移 (目的操作数, 16) ＝ #无符号int 或 右移 (目的操作数, 16) ＝ #有符号int) 且 (右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数))

        .判断开始 (立即数2 ＝ 0)

            .如果真 (位与 (目的操作数, 65535) ≠ 位与 (左操作数, 65535))
                A等于_RAM (左操作数)
                _RAM等于A (目的操作数)
                A等于_RAM (左操作数 ＋ 1)
                _RAM等于A (目的操作数 ＋ 1)
            .如果真结束


        .判断 (立即数2 ＝ 1)

            .判断开始 (位与 (目的操作数, 65535) ≠ 位与 (左操作数, 65535))

                A等于_RAM (左操作数 ＋ 1)
                R1等于RAM ()
                A等于A加R1 ()
                _RAM等于A (目的操作数 ＋ 1)

                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A加R1 ()
                _RAM等于A (目的操作数)

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (目的操作数 ＋ 1)
                A等于A加1 ()
                RAM等于A ()


            .默认
                A等于_RAM (左操作数 ＋ 1)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (左操作数 ＋ 1)
                A等于A加1 ()
                RAM等于A ()

            .判断结束


        .判断 (立即数2 ＝ 8)

            A等于_RAM (左操作数)
            _RAM等于A (目的操作数 ＋ 1)
            A等于立即数 (0)
            _RAM等于A (目的操作数)


        .默认
            A等于立即数 (立即数2)
            _RAM等于A (#RAM缓存1)


            .判断开始 (位与 (目的操作数, 65535) ≠ 位与 (左操作数, 65535))

                A等于_RAM (左操作数)
                _RAM等于A (目的操作数)
                A等于_RAM (左操作数 ＋ 1)
                _RAM等于A (目的操作数 ＋ 1)


                A等于_RAM (#RAM缓存1)
                A等于A减1 ()
                RAM等于A ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 36)

                A等于_RAM (目的操作数)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (目的操作数 ＋ 1)
                R1等于RAM ()
                JNC (ROM_缓存使用字节 ＋ 6)
                A等于A加1 ()
                A等于A加R1 ()
                _RAM等于A (目的操作数 ＋ 1)


                JMP (ROM_缓存使用字节 － 43)


            .默认
                A等于_RAM (#RAM缓存1)
                A等于A减1 ()
                RAM等于A ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 36)

                A等于_RAM (目的操作数)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (目的操作数 ＋ 1)
                R1等于RAM ()
                JNC (ROM_缓存使用字节 ＋ 6)
                A等于A加1 ()
                A等于A加R1 ()
                _RAM等于A (目的操作数 ＋ 1)


                JMP (ROM_缓存使用字节 － 43)

            .判断结束



        .判断结束



        状态 ＝ “完成”




    .判断 ((右移 (目的操作数, 16) ＝ #无符号长int 或 右移 (目的操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数))

        .判断开始 (立即数2 ＝ 0)

            .如果真 (位与 (目的操作数, 65535) ≠ 位与 (左操作数, 65535))
                A等于_RAM (左操作数)
                _RAM等于A (目的操作数)
                A等于_RAM (左操作数 ＋ 1)
                _RAM等于A (目的操作数 ＋ 1)
                A等于_RAM (左操作数 ＋ 2)
                _RAM等于A (目的操作数 ＋ 2)
                A等于_RAM (左操作数 ＋ 3)
                _RAM等于A (目的操作数 ＋ 3)
            .如果真结束


        .判断 (立即数2 ＝ 1)

            .判断开始 (位与 (目的操作数, 65535) ≠ 位与 (左操作数, 65535))

                A等于_RAM (左操作数 ＋ 3)
                R1等于RAM ()
                A等于A加R1 ()
                _RAM等于A (目的操作数 ＋ 3)

                A等于_RAM (左操作数 ＋ 2)
                R1等于RAM ()
                A等于A加R1 ()
                _RAM等于A (目的操作数 ＋ 2)

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (目的操作数 ＋ 3)
                A等于A加1 ()
                RAM等于A ()

                A等于_RAM (左操作数 ＋ 1)
                R1等于RAM ()
                A等于A加R1 ()
                _RAM等于A (目的操作数 ＋ 1)

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (目的操作数 ＋ 2)
                A等于A加1 ()
                RAM等于A ()

                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A加R1 ()
                _RAM等于A (目的操作数)

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (目的操作数 ＋ 1)
                A等于A加1 ()
                RAM等于A ()


            .默认
                A等于_RAM (左操作数 ＋ 3)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (左操作数 ＋ 2)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (左操作数 ＋ 3)
                A等于A加1 ()
                RAM等于A ()

                A等于_RAM (左操作数 ＋ 1)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (左操作数 ＋ 2)
                A等于A加1 ()
                RAM等于A ()

                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (左操作数 ＋ 1)
                A等于A加1 ()
                RAM等于A ()

            .判断结束


        .判断 (立即数2 ＝ 8)

            A等于_RAM (左操作数 ＋ 2)
            _RAM等于A (目的操作数 ＋ 3)
            A等于_RAM (左操作数 ＋ 1)
            _RAM等于A (目的操作数 ＋ 2)
            A等于_RAM (左操作数)
            _RAM等于A (目的操作数 ＋ 1)
            A等于立即数 (0)
            _RAM等于A (目的操作数)

        .判断 (立即数2 ＝ 16)

            A等于_RAM (左操作数 ＋ 1)
            _RAM等于A (目的操作数 ＋ 3)
            A等于_RAM (左操作数)
            _RAM等于A (目的操作数 ＋ 2)
            A等于立即数 (0)
            _RAM等于A (目的操作数)
            _RAM等于A (目的操作数 ＋ 1)

        .判断 (立即数2 ＝ 24)

            A等于_RAM (左操作数)
            _RAM等于A (目的操作数 ＋ 3)
            A等于立即数 (0)
            _RAM等于A (目的操作数)
            _RAM等于A (目的操作数 ＋ 1)
            _RAM等于A (目的操作数 ＋ 2)

        .默认


            A等于立即数 (立即数2)
            _RAM等于A (#RAM缓存1)

            .判断开始 (位与 (目的操作数, 65535) ≠ 位与 (左操作数, 65535))

                A等于_RAM (左操作数)
                _RAM等于A (目的操作数)
                A等于_RAM (左操作数 ＋ 1)
                _RAM等于A (目的操作数 ＋ 1)
                A等于_RAM (左操作数 ＋ 2)
                _RAM等于A (目的操作数 ＋ 2)
                A等于_RAM (左操作数 ＋ 3)
                _RAM等于A (目的操作数 ＋ 3)


                A等于_RAM (#RAM缓存1)
                A等于A减1 ()
                RAM等于A ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 78)

                A等于_RAM (目的操作数 ＋ 3)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (目的操作数 ＋ 2)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (目的操作数 ＋ 3)
                A等于A加1 ()
                RAM等于A ()

                A等于_RAM (目的操作数 ＋ 1)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (目的操作数 ＋ 2)
                A等于A加1 ()
                RAM等于A ()

                A等于_RAM (目的操作数)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (目的操作数 ＋ 1)
                A等于A加1 ()
                RAM等于A ()


                JMP (ROM_缓存使用字节 － 85)


            .默认
                A等于_RAM (#RAM缓存1)
                A等于A减1 ()
                RAM等于A ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 78)

                A等于_RAM (目的操作数 ＋ 3)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                A等于_RAM (目的操作数 ＋ 2)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (目的操作数 ＋ 3)
                A等于A加1 ()
                RAM等于A ()

                A等于_RAM (目的操作数 ＋ 1)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (目的操作数 ＋ 2)
                A等于A加1 ()
                RAM等于A ()

                A等于_RAM (目的操作数)
                R1等于RAM ()
                A等于A加R1 ()
                RAM等于A ()

                JNC (ROM_缓存使用字节 ＋ 12)
                A等于_RAM (目的操作数 ＋ 1)
                A等于A加1 ()
                RAM等于A ()


                JMP (ROM_缓存使用字节 － 85)

            .判断结束


        .判断结束



        状态 ＝ “完成”



    .默认
        状态 ＝ “二元式机器码生成_<<_运算类型错误或不存在...~!- -”
    .判断结束



.判断 (运算符 ＝ “>>”)

    .判断开始 (右移 (左操作数, 16) ＝ #立即数)
        立即数1 ＝ 立即数值 [位与 (左操作数, 65535) ＋ 1]
    .判断 (右移 (左操作数, 16) ＝ #常量)
        立即数1 ＝ 常量值 [位与 (左操作数, 65535) ＋ 1]
    .判断 (右移 (左操作数, 16) ＝ #无符号char数组 或 右移 (左操作数, 16) ＝ #有符号char数组 或 右移 (左操作数, 16) ＝ #无符号int数组 或 右移 (左操作数, 16) ＝ #有符号int数组 或 右移 (左操作数, 16) ＝ #无符号长int数组 或 右移 (左操作数, 16) ＝ #有符号长int数组)
        立即数1 ＝ 位与 (左操作数, 65535)
    .判断 (右移 (左操作数, 16) ＝ 0)
        立即数1 ＝ 位与 (左操作数, 65535)
        左操作数 ＝ #立即数 × 65536
    .默认

    .判断结束


    .判断开始 (右移 (右操作数, 16) ＝ #立即数)
        立即数2 ＝ 立即数值 [位与 (右操作数, 65535) ＋ 1]
    .判断 (右移 (右操作数, 16) ＝ #常量)
        立即数2 ＝ 常量值 [位与 (右操作数, 65535) ＋ 1]
    .判断 (右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组)
        立即数2 ＝ 位与 (右操作数, 65535)
    .判断 (右移 (右操作数, 16) ＝ 0)
        立即数2 ＝ 位与 (右操作数, 65535)
        右操作数 ＝ #立即数 × 65536
    .默认

    .判断结束




    .判断开始 ((右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char) 且 右移 (左操作数, 16) ＝ #无符号char 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int 或 右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC))

        .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC)
            _RAM等于A (#RAM缓存1)
        .默认
            A等于_RAM (右操作数)
            _RAM等于A (#RAM缓存1)
        .判断结束


        .判断开始 (位与 (目的操作数, 65535) ≠ 位与 (左操作数, 65535))

            A等于_RAM (左操作数)
            _RAM等于A (目的操作数)
            A等于立即数 (128)
            _RAM等于A (#乘法器_L)


            A等于_RAM (#RAM缓存1)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 26)

            A等于_RAM (目的操作数)
            _RAM等于A (#乘法器_H)
            A等于RAM ()
            _RAM等于A (目的操作数)

            JMP (ROM_缓存使用字节 － 33)


        .默认
            A等于立即数 (128)
            _RAM等于A (#乘法器_L)


            A等于_RAM (#RAM缓存1)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 26)

            A等于_RAM (目的操作数)
            _RAM等于A (#乘法器_H)
            A等于RAM ()
            _RAM等于A (目的操作数)

            JMP (ROM_缓存使用字节 － 33)

        .判断结束




        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #无符号int 或 右移 (目的操作数, 16) ＝ #有符号int) 且 右移 (左操作数, 16) ＝ #无符号int 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int 或 右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC))

        .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC)
            _RAM等于A (#RAM缓存1)
        .默认
            A等于_RAM (右操作数)
            _RAM等于A (#RAM缓存1)
        .判断结束


        .判断开始 (位与 (目的操作数, 65535) ≠ 位与 (左操作数, 65535))

            A等于_RAM (左操作数)
            _RAM等于A (目的操作数)
            A等于_RAM (左操作数 ＋ 1)
            _RAM等于A (目的操作数 ＋ 1)
            A等于立即数 (128)
            _RAM等于A (#乘法器_L)


            A等于_RAM (#RAM缓存1)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 48)

            A等于_RAM (目的操作数 ＋ 1)
            _RAM等于A (#乘法器_H)
            A等于RAM ()
            _RAM等于A (目的操作数 ＋ 1)

            R1等于_RAM (#乘法器_L)

            A等于_RAM (目的操作数)
            _RAM等于A (#乘法器_H)
            A等于RAM ()
            A等于A或R1 ()
            _RAM等于A (目的操作数)

            JMP (ROM_缓存使用字节 － 55)


        .默认
            A等于立即数 (128)
            _RAM等于A (#乘法器_L)


            A等于_RAM (#RAM缓存1)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 48)

            A等于_RAM (目的操作数 ＋ 1)
            _RAM等于A (#乘法器_H)
            A等于RAM ()
            _RAM等于A (目的操作数 ＋ 1)

            R1等于_RAM (#乘法器_L)

            A等于_RAM (目的操作数)
            _RAM等于A (#乘法器_H)
            A等于RAM ()
            A等于A或R1 ()
            _RAM等于A (目的操作数)

            JMP (ROM_缓存使用字节 － 55)

        .判断结束




        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #无符号长int 或 右移 (目的操作数, 16) ＝ #有符号长int) 且 右移 (左操作数, 16) ＝ #无符号长int 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int 或 右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC))

        .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC)
            _RAM等于A (#RAM缓存1)
        .默认
            A等于_RAM (右操作数)
            _RAM等于A (#RAM缓存1)
        .判断结束


        .判断开始 (位与 (目的操作数, 65535) ≠ 位与 (左操作数, 65535))

            A等于_RAM (左操作数)
            _RAM等于A (目的操作数)
            A等于_RAM (左操作数 ＋ 1)
            _RAM等于A (目的操作数 ＋ 1)
            A等于_RAM (左操作数 ＋ 2)
            _RAM等于A (目的操作数 ＋ 2)
            A等于_RAM (左操作数 ＋ 3)
            _RAM等于A (目的操作数 ＋ 3)
            A等于立即数 (128)
            _RAM等于A (#乘法器_L)


            A等于_RAM (#RAM缓存1)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 92)

            A等于_RAM (目的操作数 ＋ 3)
            _RAM等于A (#乘法器_H)
            A等于RAM ()
            _RAM等于A (目的操作数 ＋ 3)

            R1等于_RAM (#乘法器_L)

            A等于_RAM (目的操作数 ＋ 2)
            _RAM等于A (#乘法器_H)
            A等于RAM ()
            A等于A或R1 ()
            _RAM等于A (目的操作数 ＋ 2)

            R1等于_RAM (#乘法器_L)

            A等于_RAM (目的操作数 ＋ 1)
            _RAM等于A (#乘法器_H)
            A等于RAM ()
            A等于A或R1 ()
            _RAM等于A (目的操作数 ＋ 1)

            R1等于_RAM (#乘法器_L)

            A等于_RAM (目的操作数)
            _RAM等于A (#乘法器_H)
            A等于RAM ()
            A等于A或R1 ()
            _RAM等于A (目的操作数)


            JMP (ROM_缓存使用字节 － 99)


        .默认
            A等于立即数 (128)
            _RAM等于A (#乘法器_L)


            A等于_RAM (#RAM缓存1)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 92)

            A等于_RAM (目的操作数 ＋ 3)
            _RAM等于A (#乘法器_H)
            A等于RAM ()
            _RAM等于A (目的操作数 ＋ 3)

            R1等于_RAM (#乘法器_L)

            A等于_RAM (目的操作数 ＋ 2)
            _RAM等于A (#乘法器_H)
            A等于RAM ()
            A等于A或R1 ()
            _RAM等于A (目的操作数 ＋ 2)

            R1等于_RAM (#乘法器_L)

            A等于_RAM (目的操作数 ＋ 1)
            _RAM等于A (#乘法器_H)
            A等于RAM ()
            A等于A或R1 ()
            _RAM等于A (目的操作数 ＋ 1)

            R1等于_RAM (#乘法器_L)

            A等于_RAM (目的操作数)
            _RAM等于A (#乘法器_H)
            A等于RAM ()
            A等于A或R1 ()
            _RAM等于A (目的操作数)


            JMP (ROM_缓存使用字节 － 99)

        .判断结束




        状态 ＝ “完成”




    .判断 ((右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char) 且 右移 (左操作数, 16) ＝ #有符号char 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int 或 右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC))

        .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC)
            _RAM等于A (#RAM缓存1)
        .默认
            A等于_RAM (右操作数)
            _RAM等于A (#RAM缓存1)
        .判断结束


        .判断开始 (位与 (目的操作数, 65535) ≠ 位与 (左操作数, 65535))

            A等于_RAM (左操作数)
            _RAM等于A (目的操作数)
            A等于立即数 (128)
            _RAM等于A (#乘法器_L)


            A等于_RAM (#RAM缓存1)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 37)

            A等于_RAM (目的操作数)
            R1等于RAM ()
            A等于A加R1 ()
            A等于RAM ()
            _RAM等于A (#乘法器_H)
            A等于RAM ()
            JNC (ROM_缓存使用字节 ＋ 8)
            R1等于立即数 (128)
            A等于A或R1 ()
            _RAM等于A (目的操作数)

            JMP (ROM_缓存使用字节 － 44)


        .默认
            A等于立即数 (128)
            _RAM等于A (#乘法器_L)


            A等于_RAM (#RAM缓存1)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 37)

            A等于_RAM (目的操作数)
            R1等于RAM ()
            A等于A加R1 ()
            A等于RAM ()
            _RAM等于A (#乘法器_H)
            A等于RAM ()
            JNC (ROM_缓存使用字节 ＋ 8)
            R1等于立即数 (128)
            A等于A或R1 ()
            _RAM等于A (目的操作数)

            JMP (ROM_缓存使用字节 － 44)

        .判断结束




        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #无符号int 或 右移 (目的操作数, 16) ＝ #有符号int) 且 右移 (左操作数, 16) ＝ #有符号int 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int 或 右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC))

        .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC)
            _RAM等于A (#RAM缓存1)
        .默认
            A等于_RAM (右操作数)
            _RAM等于A (#RAM缓存1)
        .判断结束


        .判断开始 (位与 (目的操作数, 65535) ≠ 位与 (左操作数, 65535))

            A等于_RAM (左操作数)
            _RAM等于A (目的操作数)
            A等于_RAM (左操作数 ＋ 1)
            _RAM等于A (目的操作数 ＋ 1)
            A等于立即数 (128)
            _RAM等于A (#乘法器_L)


            A等于_RAM (#RAM缓存1)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 59)

            A等于_RAM (目的操作数 ＋ 1)
            R1等于RAM ()
            A等于A加R1 ()
            A等于RAM ()
            _RAM等于A (#乘法器_H)
            A等于RAM ()
            JNC (ROM_缓存使用字节 ＋ 8)
            R1等于立即数 (128)
            A等于A或R1 ()
            _RAM等于A (目的操作数 ＋ 1)

            R1等于_RAM (#乘法器_L)

            A等于_RAM (目的操作数)
            _RAM等于A (#乘法器_H)
            A等于RAM ()
            A等于A或R1 ()
            _RAM等于A (目的操作数)

            JMP (ROM_缓存使用字节 － 66)


        .默认
            A等于立即数 (128)
            _RAM等于A (#乘法器_L)


            A等于_RAM (#RAM缓存1)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 59)

            A等于_RAM (目的操作数 ＋ 1)
            R1等于RAM ()
            A等于A加R1 ()
            A等于RAM ()
            _RAM等于A (#乘法器_H)
            A等于RAM ()
            JNC (ROM_缓存使用字节 ＋ 8)
            R1等于立即数 (128)
            A等于A或R1 ()
            _RAM等于A (目的操作数 ＋ 1)

            R1等于_RAM (#乘法器_L)

            A等于_RAM (目的操作数)
            _RAM等于A (#乘法器_H)
            A等于RAM ()
            A等于A或R1 ()
            _RAM等于A (目的操作数)

            JMP (ROM_缓存使用字节 － 66)

        .判断结束




        状态 ＝ “完成”


    .判断 ((右移 (目的操作数, 16) ＝ #无符号长int 或 右移 (目的操作数, 16) ＝ #有符号长int) 且 右移 (左操作数, 16) ＝ #有符号长int 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int 或 右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC))

        .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC)
            _RAM等于A (#RAM缓存1)
        .默认
            A等于_RAM (右操作数)
            _RAM等于A (#RAM缓存1)
        .判断结束


        .判断开始 (位与 (目的操作数, 65535) ≠ 位与 (左操作数, 65535))

            A等于_RAM (左操作数)
            _RAM等于A (目的操作数)
            A等于_RAM (左操作数 ＋ 1)
            _RAM等于A (目的操作数 ＋ 1)
            A等于_RAM (左操作数 ＋ 2)
            _RAM等于A (目的操作数 ＋ 2)
            A等于_RAM (左操作数 ＋ 3)
            _RAM等于A (目的操作数 ＋ 3)
            A等于立即数 (128)
            _RAM等于A (#乘法器_L)


            A等于_RAM (#RAM缓存1)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 103)

            A等于_RAM (目的操作数 ＋ 3)
            R1等于RAM ()
            A等于A加R1 ()
            A等于RAM ()
            _RAM等于A (#乘法器_H)
            A等于RAM ()
            JNC (ROM_缓存使用字节 ＋ 8)
            R1等于立即数 (128)
            A等于A或R1 ()
            _RAM等于A (目的操作数 ＋ 3)

            R1等于_RAM (#乘法器_L)

            A等于_RAM (目的操作数 ＋ 2)
            _RAM等于A (#乘法器_H)
            A等于RAM ()
            A等于A或R1 ()
            _RAM等于A (目的操作数 ＋ 2)

            R1等于_RAM (#乘法器_L)

            A等于_RAM (目的操作数 ＋ 1)
            _RAM等于A (#乘法器_H)
            A等于RAM ()
            A等于A或R1 ()
            _RAM等于A (目的操作数 ＋ 1)

            R1等于_RAM (#乘法器_L)

            A等于_RAM (目的操作数)
            _RAM等于A (#乘法器_H)
            A等于RAM ()
            A等于A或R1 ()
            _RAM等于A (目的操作数)


            JMP (ROM_缓存使用字节 － 110)


        .默认
            A等于立即数 (128)
            _RAM等于A (#乘法器_L)


            A等于_RAM (#RAM缓存1)
            A等于A减1 ()
            RAM等于A ()
            JNC (ROM_缓存使用字节 ＋ 10)
            JMP (ROM_缓存使用字节 ＋ 103)

            A等于_RAM (目的操作数 ＋ 3)
            R1等于RAM ()
            A等于A加R1 ()
            A等于RAM ()
            _RAM等于A (#乘法器_H)
            A等于RAM ()
            JNC (ROM_缓存使用字节 ＋ 8)
            R1等于立即数 (128)
            A等于A或R1 ()
            _RAM等于A (目的操作数 ＋ 3)

            R1等于_RAM (#乘法器_L)

            A等于_RAM (目的操作数 ＋ 2)
            _RAM等于A (#乘法器_H)
            A等于RAM ()
            A等于A或R1 ()
            _RAM等于A (目的操作数 ＋ 2)

            R1等于_RAM (#乘法器_L)

            A等于_RAM (目的操作数 ＋ 1)
            _RAM等于A (#乘法器_H)
            A等于RAM ()
            A等于A或R1 ()
            _RAM等于A (目的操作数 ＋ 1)

            R1等于_RAM (#乘法器_L)

            A等于_RAM (目的操作数)
            _RAM等于A (#乘法器_H)
            A等于RAM ()
            A等于A或R1 ()
            _RAM等于A (目的操作数)


            JMP (ROM_缓存使用字节 － 110)

        .判断结束



        状态 ＝ “完成”



    .判断 ((右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char) 且 右移 (左操作数, 16) ＝ #无符号char 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数))

        .判断开始 (立即数2 ＝ 0)

            .如果真 (位与 (目的操作数, 65535) ≠ 位与 (左操作数, 65535))
                A等于_RAM (左操作数)
                _RAM等于A (目的操作数)
            .如果真结束


        .默认

            .判断开始 (立即数2 ＝ 1)
                A等于立即数 (128)
                _RAM等于A (#乘法器_L)
            .判断 (立即数2 ＝ 2)
                A等于立即数 (64)
                _RAM等于A (#乘法器_L)
            .判断 (立即数2 ＝ 3)
                A等于立即数 (32)
                _RAM等于A (#乘法器_L)
            .判断 (立即数2 ＝ 4)
                A等于立即数 (16)
                _RAM等于A (#乘法器_L)
            .判断 (立即数2 ＝ 5)
                A等于立即数 (8)
                _RAM等于A (#乘法器_L)
            .判断 (立即数2 ＝ 6)
                A等于立即数 (4)
                _RAM等于A (#乘法器_L)
            .判断 (立即数2 ＝ 7)
                A等于立即数 (2)
                _RAM等于A (#乘法器_L)
            .默认
                A等于立即数 (0)
                _RAM等于A (#乘法器_L)
            .判断结束


            A等于_RAM (左操作数)
            _RAM等于A (#乘法器_H)
            A等于RAM ()
            _RAM等于A (目的操作数)

        .判断结束



        状态 ＝ “完成”




    .判断 ((右移 (目的操作数, 16) ＝ #无符号char 或 右移 (目的操作数, 16) ＝ #有符号char) 且 右移 (左操作数, 16) ＝ #有符号char 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数))

        .判断开始 (立即数2 ＝ 0)

            .如果真 (位与 (目的操作数, 65535) ≠ 位与 (左操作数, 65535))
                A等于_RAM (左操作数)
                _RAM等于A (目的操作数)
            .如果真结束


        .默认

            .判断开始 (立即数2 ＝ 1)

                A等于立即数 (128)
                _RAM等于A (#乘法器_L)

                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A加R1 ()
                A等于RAM ()
                _RAM等于A (#乘法器_H)
                A等于RAM ()
                JNC (ROM_缓存使用字节 ＋ 8)
                R1等于立即数 (128)
                A等于A或R1 ()
                _RAM等于A (目的操作数)

            .判断 (立即数2 ＝ 2)

                A等于立即数 (64)
                _RAM等于A (#乘法器_L)

                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A加R1 ()
                A等于RAM ()
                _RAM等于A (#乘法器_H)
                A等于RAM ()
                JNC (ROM_缓存使用字节 ＋ 8)
                R1等于立即数 (192)
                A等于A或R1 ()
                _RAM等于A (目的操作数)

            .判断 (立即数2 ＝ 3)

                A等于立即数 (32)
                _RAM等于A (#乘法器_L)

                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A加R1 ()
                A等于RAM ()
                _RAM等于A (#乘法器_H)
                A等于RAM ()
                JNC (ROM_缓存使用字节 ＋ 8)
                R1等于立即数 (224)
                A等于A或R1 ()
                _RAM等于A (目的操作数)

            .判断 (立即数2 ＝ 4)

                A等于立即数 (16)
                _RAM等于A (#乘法器_L)

                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A加R1 ()
                A等于RAM ()
                _RAM等于A (#乘法器_H)
                A等于RAM ()
                JNC (ROM_缓存使用字节 ＋ 8)
                R1等于立即数 (240)
                A等于A或R1 ()
                _RAM等于A (目的操作数)

            .判断 (立即数2 ＝ 5)

                A等于立即数 (8)
                _RAM等于A (#乘法器_L)

                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A加R1 ()
                A等于RAM ()
                _RAM等于A (#乘法器_H)
                A等于RAM ()
                JNC (ROM_缓存使用字节 ＋ 8)
                R1等于立即数 (248)
                A等于A或R1 ()
                _RAM等于A (目的操作数)

            .判断 (立即数2 ＝ 6)

                A等于立即数 (4)
                _RAM等于A (#乘法器_L)

                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A加R1 ()
                A等于RAM ()
                _RAM等于A (#乘法器_H)
                A等于RAM ()
                JNC (ROM_缓存使用字节 ＋ 8)
                R1等于立即数 (252)
                A等于A或R1 ()
                _RAM等于A (目的操作数)

            .判断 (立即数2 ＝ 7)

                A等于立即数 (2)
                _RAM等于A (#乘法器_L)

                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A加R1 ()
                A等于RAM ()
                _RAM等于A (#乘法器_H)
                A等于RAM ()
                JNC (ROM_缓存使用字节 ＋ 8)
                R1等于立即数 (254)
                A等于A或R1 ()
                _RAM等于A (目的操作数)

            .默认
                A等于立即数 (1)
                _RAM等于A (#乘法器_L)

                A等于_RAM (左操作数)
                R1等于RAM ()
                A等于A加R1 ()
                A等于RAM ()
                _RAM等于A (#乘法器_H)
                A等于RAM ()
                JNC (ROM_缓存使用字节 ＋ 8)
                R1等于立即数 (255)
                A等于A或R1 ()
                _RAM等于A (目的操作数)
            .判断结束



        .判断结束


        状态 ＝ “完成”



    .判断 ((右移 (目的操作数, 16) ＝ #无符号int 或 右移 (目的操作数, 16) ＝ #有符号int) 且 右移 (左操作数, 16) ＝ #无符号int 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数))

        .判断开始 (立即数2 ＝ 0)

            .如果真 (位与 (目的操作数, 65535) ≠ 位与 (左操作数, 65535))
                A等于_RAM (左操作数)
                _RAM等于A (目的操作数)
                A等于_RAM (左操作数 ＋ 1)
                _RAM等于A (目的操作数 ＋ 1)
            .如果真结束


        .判断 (立即数2 ＝ 8)

            A等于_RAM (左操作数 ＋ 1)
            _RAM等于A (目的操作数)
            A等于立即数 (0)
            _RAM等于A (目的操作数 ＋ 1)


        .判断 (立即数2 ＝ 1)

            A等于立即数 (128)
            _RAM等于A (#乘法器_L)

            A等于_RAM (左操作数 ＋ 1)
            _RAM等于A (#乘法器_H)
            A等于RAM ()
            _RAM等于A (目的操作数 ＋ 1)

            R1等于_RAM (#乘法器_L)

            A等于_RAM (左操作数)
            _RAM等于A (#乘法器_H)
            A等于RAM ()
            A等于A或R1 ()
            _RAM等于A (目的操作数)


        .默认
            A等于立即数 (立即数2)
            _RAM等于A (#RAM缓存1)

            .判断开始 (位与 (目的操作数, 65535) ≠ 位与 (左操作数, 65535))

                A等于_RAM (左操作数)
                _RAM等于A (目的操作数)
                A等于_RAM (左操作数 ＋ 1)
                _RAM等于A (目的操作数 ＋ 1)
                A等于立即数 (128)
                _RAM等于A (#乘法器_L)


                A等于_RAM (#RAM缓存1)
                A等于A减1 ()
                RAM等于A ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 48)

                A等于_RAM (目的操作数 ＋ 1)
                _RAM等于A (#乘法器_H)
                A等于RAM ()
                _RAM等于A (目的操作数 ＋ 1)

                R1等于_RAM (#乘法器_L)

                A等于_RAM (目的操作数)
                _RAM等于A (#乘法器_H)
                A等于RAM ()
                A等于A或R1 ()
                _RAM等于A (目的操作数)

                JMP (ROM_缓存使用字节 － 55)


            .默认
                A等于立即数 (128)
                _RAM等于A (#乘法器_L)


                A等于_RAM (#RAM缓存1)
                A等于A减1 ()
                RAM等于A ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 48)

                A等于_RAM (目的操作数 ＋ 1)
                _RAM等于A (#乘法器_H)
                A等于RAM ()
                _RAM等于A (目的操作数 ＋ 1)

                R1等于_RAM (#乘法器_L)

                A等于_RAM (目的操作数)
                _RAM等于A (#乘法器_H)
                A等于RAM ()
                A等于A或R1 ()
                _RAM等于A (目的操作数)

                JMP (ROM_缓存使用字节 － 55)

            .判断结束



        .判断结束


        状态 ＝ “完成”




    .判断 ((右移 (目的操作数, 16) ＝ #无符号int 或 右移 (目的操作数, 16) ＝ #有符号int) 且 右移 (左操作数, 16) ＝ #有符号int 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数))

        .判断开始 (立即数2 ＝ 0)

            .如果真 (位与 (目的操作数, 65535) ≠ 位与 (左操作数, 65535))
                A等于_RAM (左操作数)
                _RAM等于A (目的操作数)
                A等于_RAM (左操作数 ＋ 1)
                _RAM等于A (目的操作数 ＋ 1)
            .如果真结束


        .判断 (立即数2 ＝ 8)

            A等于_RAM (左操作数 ＋ 1)
            R1等于RAM ()
            A等于A加R1 ()
            A等于RAM ()
            _RAM等于A (目的操作数)

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于立即数 (255)
            JMP (ROM_缓存使用字节 ＋ 7)
            A等于立即数 (0)

            _RAM等于A (目的操作数 ＋ 1)


        .判断 (立即数2 ＝ 1)

            A等于立即数 (128)
            _RAM等于A (#乘法器_L)

            A等于_RAM (左操作数 ＋ 1)
            R1等于RAM ()
            A等于A加R1 ()
            A等于RAM ()
            _RAM等于A (#乘法器_H)
            A等于RAM ()
            JNC (ROM_缓存使用字节 ＋ 8)
            R1等于立即数 (128)
            A等于A或R1 ()
            _RAM等于A (目的操作数 ＋ 1)

            R1等于_RAM (#乘法器_L)

            A等于_RAM (左操作数)
            _RAM等于A (#乘法器_H)
            A等于RAM ()
            A等于A或R1 ()
            _RAM等于A (目的操作数)


        .默认
            A等于立即数 (立即数2)
            _RAM等于A (#RAM缓存1)

            .判断开始 (位与 (目的操作数, 65535) ≠ 位与 (左操作数, 65535))

                A等于_RAM (左操作数)
                _RAM等于A (目的操作数)
                A等于_RAM (左操作数 ＋ 1)
                _RAM等于A (目的操作数 ＋ 1)
                A等于立即数 (128)
                _RAM等于A (#乘法器_L)


                A等于_RAM (#RAM缓存1)
                A等于A减1 ()
                RAM等于A ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 59)

                A等于_RAM (目的操作数 ＋ 1)
                R1等于RAM ()
                A等于A加R1 ()
                A等于RAM ()
                _RAM等于A (#乘法器_H)
                A等于RAM ()
                JNC (ROM_缓存使用字节 ＋ 8)
                R1等于立即数 (128)
                A等于A或R1 ()
                _RAM等于A (目的操作数 ＋ 1)

                R1等于_RAM (#乘法器_L)

                A等于_RAM (目的操作数)
                _RAM等于A (#乘法器_H)
                A等于RAM ()
                A等于A或R1 ()
                _RAM等于A (目的操作数)

                JMP (ROM_缓存使用字节 － 66)


            .默认
                A等于立即数 (128)
                _RAM等于A (#乘法器_L)


                A等于_RAM (#RAM缓存1)
                A等于A减1 ()
                RAM等于A ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 59)

                A等于_RAM (目的操作数 ＋ 1)
                R1等于RAM ()
                A等于A加R1 ()
                A等于RAM ()
                _RAM等于A (#乘法器_H)
                A等于RAM ()
                JNC (ROM_缓存使用字节 ＋ 8)
                R1等于立即数 (128)
                A等于A或R1 ()
                _RAM等于A (目的操作数 ＋ 1)

                R1等于_RAM (#乘法器_L)

                A等于_RAM (目的操作数)
                _RAM等于A (#乘法器_H)
                A等于RAM ()
                A等于A或R1 ()
                _RAM等于A (目的操作数)

                JMP (ROM_缓存使用字节 － 66)

            .判断结束


        .判断结束


        状态 ＝ “完成”




    .判断 ((右移 (目的操作数, 16) ＝ #无符号长int 或 右移 (目的操作数, 16) ＝ #有符号长int) 且 右移 (左操作数, 16) ＝ #无符号长int 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数))

        .判断开始 (立即数2 ＝ 0)

            .如果真 (位与 (目的操作数, 65535) ≠ 位与 (左操作数, 65535))
                A等于_RAM (左操作数)
                _RAM等于A (目的操作数)
                A等于_RAM (左操作数 ＋ 1)
                _RAM等于A (目的操作数 ＋ 1)
                A等于_RAM (左操作数 ＋ 2)
                _RAM等于A (目的操作数 ＋ 2)
                A等于_RAM (左操作数 ＋ 3)
                _RAM等于A (目的操作数 ＋ 3)
            .如果真结束


        .判断 (立即数2 ＝ 8)

            A等于_RAM (左操作数 ＋ 1)
            _RAM等于A (目的操作数)
            A等于_RAM (左操作数 ＋ 2)
            _RAM等于A (目的操作数 ＋ 1)
            A等于_RAM (左操作数 ＋ 3)
            _RAM等于A (目的操作数 ＋ 2)
            A等于立即数 (0)
            _RAM等于A (目的操作数 ＋ 3)

        .判断 (立即数2 ＝ 16)

            A等于_RAM (左操作数 ＋ 2)
            _RAM等于A (目的操作数)
            A等于_RAM (左操作数 ＋ 3)
            _RAM等于A (目的操作数 ＋ 1)
            A等于立即数 (0)
            _RAM等于A (目的操作数 ＋ 3)
            _RAM等于A (目的操作数 ＋ 2)

        .判断 (立即数2 ＝ 24)

            A等于_RAM (左操作数 ＋ 3)
            _RAM等于A (目的操作数)
            A等于立即数 (0)
            _RAM等于A (目的操作数 ＋ 3)
            _RAM等于A (目的操作数 ＋ 2)
            _RAM等于A (目的操作数 ＋ 1)

        .判断 (立即数2 ＝ 1)

            A等于立即数 (128)
            _RAM等于A (#乘法器_L)

            A等于_RAM (左操作数 ＋ 3)
            _RAM等于A (#乘法器_H)
            A等于RAM ()
            _RAM等于A (目的操作数 ＋ 3)

            R1等于_RAM (#乘法器_L)

            A等于_RAM (左操作数 ＋ 2)
            _RAM等于A (#乘法器_H)
            A等于RAM ()
            A等于A或R1 ()
            _RAM等于A (目的操作数 ＋ 2)

            R1等于_RAM (#乘法器_L)

            A等于_RAM (左操作数 ＋ 1)
            _RAM等于A (#乘法器_H)
            A等于RAM ()
            A等于A或R1 ()
            _RAM等于A (目的操作数 ＋ 1)

            R1等于_RAM (#乘法器_L)

            A等于_RAM (左操作数)
            _RAM等于A (#乘法器_H)
            A等于RAM ()
            A等于A或R1 ()
            _RAM等于A (目的操作数)


        .默认
            A等于立即数 (立即数2)
            _RAM等于A (#RAM缓存1)

            .判断开始 (位与 (目的操作数, 65535) ≠ 位与 (左操作数, 65535))

                A等于_RAM (左操作数)
                _RAM等于A (目的操作数)
                A等于_RAM (左操作数 ＋ 1)
                _RAM等于A (目的操作数 ＋ 1)
                A等于_RAM (左操作数 ＋ 2)
                _RAM等于A (目的操作数 ＋ 2)
                A等于_RAM (左操作数 ＋ 3)
                _RAM等于A (目的操作数 ＋ 3)
                A等于立即数 (128)
                _RAM等于A (#乘法器_L)


                A等于_RAM (#RAM缓存1)
                A等于A减1 ()
                RAM等于A ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 92)

                A等于_RAM (目的操作数 ＋ 3)
                _RAM等于A (#乘法器_H)
                A等于RAM ()
                _RAM等于A (目的操作数 ＋ 3)

                R1等于_RAM (#乘法器_L)

                A等于_RAM (目的操作数 ＋ 2)
                _RAM等于A (#乘法器_H)
                A等于RAM ()
                A等于A或R1 ()
                _RAM等于A (目的操作数 ＋ 2)

                R1等于_RAM (#乘法器_L)

                A等于_RAM (目的操作数 ＋ 1)
                _RAM等于A (#乘法器_H)
                A等于RAM ()
                A等于A或R1 ()
                _RAM等于A (目的操作数 ＋ 1)

                R1等于_RAM (#乘法器_L)

                A等于_RAM (目的操作数)
                _RAM等于A (#乘法器_H)
                A等于RAM ()
                A等于A或R1 ()
                _RAM等于A (目的操作数)


                JMP (ROM_缓存使用字节 － 99)


            .默认
                A等于立即数 (128)
                _RAM等于A (#乘法器_L)


                A等于_RAM (#RAM缓存1)
                A等于A减1 ()
                RAM等于A ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 92)

                A等于_RAM (目的操作数 ＋ 3)
                _RAM等于A (#乘法器_H)
                A等于RAM ()
                _RAM等于A (目的操作数 ＋ 3)

                R1等于_RAM (#乘法器_L)

                A等于_RAM (目的操作数 ＋ 2)
                _RAM等于A (#乘法器_H)
                A等于RAM ()
                A等于A或R1 ()
                _RAM等于A (目的操作数 ＋ 2)

                R1等于_RAM (#乘法器_L)

                A等于_RAM (目的操作数 ＋ 1)
                _RAM等于A (#乘法器_H)
                A等于RAM ()
                A等于A或R1 ()
                _RAM等于A (目的操作数 ＋ 1)

                R1等于_RAM (#乘法器_L)

                A等于_RAM (目的操作数)
                _RAM等于A (#乘法器_H)
                A等于RAM ()
                A等于A或R1 ()
                _RAM等于A (目的操作数)


                JMP (ROM_缓存使用字节 － 99)

            .判断结束


        .判断结束


        状态 ＝ “完成”




    .判断 ((右移 (目的操作数, 16) ＝ #无符号长int 或 右移 (目的操作数, 16) ＝ #有符号长int) 且 右移 (左操作数, 16) ＝ #有符号长int 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数))

        .判断开始 (立即数2 ＝ 0)

            .如果真 (位与 (目的操作数, 65535) ≠ 位与 (左操作数, 65535))
                A等于_RAM (左操作数)
                _RAM等于A (目的操作数)
                A等于_RAM (左操作数 ＋ 1)
                _RAM等于A (目的操作数 ＋ 1)
                A等于_RAM (左操作数 ＋ 2)
                _RAM等于A (目的操作数 ＋ 2)
                A等于_RAM (左操作数 ＋ 3)
                _RAM等于A (目的操作数 ＋ 3)
            .如果真结束


        .判断 (立即数2 ＝ 8)

            A等于_RAM (左操作数 ＋ 1)
            _RAM等于A (目的操作数)
            A等于_RAM (左操作数 ＋ 2)
            _RAM等于A (目的操作数 ＋ 1)
            A等于_RAM (左操作数 ＋ 3)
            R1等于RAM ()
            A等于A加R1 ()
            A等于RAM ()
            _RAM等于A (目的操作数 ＋ 2)

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于立即数 (255)
            JMP (ROM_缓存使用字节 ＋ 7)
            A等于立即数 (0)

            _RAM等于A (目的操作数 ＋ 3)

        .判断 (立即数2 ＝ 16)

            A等于_RAM (左操作数 ＋ 2)
            _RAM等于A (目的操作数)
            A等于_RAM (左操作数 ＋ 3)
            R1等于RAM ()
            A等于A加R1 ()
            A等于RAM ()
            _RAM等于A (目的操作数 ＋ 1)

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于立即数 (255)
            JMP (ROM_缓存使用字节 ＋ 7)
            A等于立即数 (0)

            _RAM等于A (目的操作数 ＋ 3)
            _RAM等于A (目的操作数 ＋ 2)

        .判断 (立即数2 ＝ 24)

            A等于_RAM (左操作数 ＋ 3)
            R1等于RAM ()
            A等于A加R1 ()
            A等于RAM ()
            _RAM等于A (目的操作数)

            JNC (ROM_缓存使用字节 ＋ 12)
            A等于立即数 (255)
            JMP (ROM_缓存使用字节 ＋ 7)
            A等于立即数 (0)

            _RAM等于A (目的操作数 ＋ 3)
            _RAM等于A (目的操作数 ＋ 2)
            _RAM等于A (目的操作数 ＋ 1)

        .判断 (立即数2 ＝ 1)

            A等于立即数 (128)
            _RAM等于A (#乘法器_L)

            A等于_RAM (左操作数 ＋ 3)
            R1等于RAM ()
            A等于A加R1 ()
            A等于RAM ()
            _RAM等于A (#乘法器_H)
            A等于RAM ()
            JNC (ROM_缓存使用字节 ＋ 8)
            R1等于立即数 (128)
            A等于A或R1 ()
            _RAM等于A (目的操作数 ＋ 3)

            R1等于_RAM (#乘法器_L)

            A等于_RAM (左操作数 ＋ 2)
            _RAM等于A (#乘法器_H)
            A等于RAM ()
            A等于A或R1 ()
            _RAM等于A (目的操作数 ＋ 2)

            R1等于_RAM (#乘法器_L)

            A等于_RAM (左操作数 ＋ 1)
            _RAM等于A (#乘法器_H)
            A等于RAM ()
            A等于A或R1 ()
            _RAM等于A (目的操作数 ＋ 1)

            R1等于_RAM (#乘法器_L)

            A等于_RAM (左操作数)
            _RAM等于A (#乘法器_H)
            A等于RAM ()
            A等于A或R1 ()
            _RAM等于A (目的操作数)



        .默认
            A等于立即数 (立即数2)
            _RAM等于A (#RAM缓存1)

            .判断开始 (位与 (目的操作数, 65535) ≠ 位与 (左操作数, 65535))

                A等于_RAM (左操作数)
                _RAM等于A (目的操作数)
                A等于_RAM (左操作数 ＋ 1)
                _RAM等于A (目的操作数 ＋ 1)
                A等于_RAM (左操作数 ＋ 2)
                _RAM等于A (目的操作数 ＋ 2)
                A等于_RAM (左操作数 ＋ 3)
                _RAM等于A (目的操作数 ＋ 3)
                A等于立即数 (128)
                _RAM等于A (#乘法器_L)


                A等于_RAM (#RAM缓存1)
                A等于A减1 ()
                RAM等于A ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 103)

                A等于_RAM (目的操作数 ＋ 3)
                R1等于RAM ()
                A等于A加R1 ()
                A等于RAM ()
                _RAM等于A (#乘法器_H)
                A等于RAM ()
                JNC (ROM_缓存使用字节 ＋ 8)
                R1等于立即数 (128)
                A等于A或R1 ()
                _RAM等于A (目的操作数 ＋ 3)

                R1等于_RAM (#乘法器_L)

                A等于_RAM (目的操作数 ＋ 2)
                _RAM等于A (#乘法器_H)
                A等于RAM ()
                A等于A或R1 ()
                _RAM等于A (目的操作数 ＋ 2)

                R1等于_RAM (#乘法器_L)

                A等于_RAM (目的操作数 ＋ 1)
                _RAM等于A (#乘法器_H)
                A等于RAM ()
                A等于A或R1 ()
                _RAM等于A (目的操作数 ＋ 1)

                R1等于_RAM (#乘法器_L)

                A等于_RAM (目的操作数)
                _RAM等于A (#乘法器_H)
                A等于RAM ()
                A等于A或R1 ()
                _RAM等于A (目的操作数)


                JMP (ROM_缓存使用字节 － 110)


            .默认
                A等于立即数 (128)
                _RAM等于A (#乘法器_L)


                A等于_RAM (#RAM缓存1)
                A等于A减1 ()
                RAM等于A ()
                JNC (ROM_缓存使用字节 ＋ 10)
                JMP (ROM_缓存使用字节 ＋ 103)

                A等于_RAM (目的操作数 ＋ 3)
                R1等于RAM ()
                A等于A加R1 ()
                A等于RAM ()
                _RAM等于A (#乘法器_H)
                A等于RAM ()
                JNC (ROM_缓存使用字节 ＋ 8)
                R1等于立即数 (128)
                A等于A或R1 ()
                _RAM等于A (目的操作数 ＋ 3)

                R1等于_RAM (#乘法器_L)

                A等于_RAM (目的操作数 ＋ 2)
                _RAM等于A (#乘法器_H)
                A等于RAM ()
                A等于A或R1 ()
                _RAM等于A (目的操作数 ＋ 2)

                R1等于_RAM (#乘法器_L)

                A等于_RAM (目的操作数 ＋ 1)
                _RAM等于A (#乘法器_H)
                A等于RAM ()
                A等于A或R1 ()
                _RAM等于A (目的操作数 ＋ 1)

                R1等于_RAM (#乘法器_L)

                A等于_RAM (目的操作数)
                _RAM等于A (#乘法器_H)
                A等于RAM ()
                A等于A或R1 ()
                _RAM等于A (目的操作数)


                JMP (ROM_缓存使用字节 － 110)

            .判断结束


        .判断结束


        状态 ＝ “完成”



    .默认
        状态 ＝ “二元式机器码生成_>>_运算类型错误或不存在...~!- -”
    .判断结束






.判断 (运算符 ＝ “>” 或 运算符 ＝ “<”)

    .判断开始 (右移 (左操作数, 16) ＝ #立即数)
        立即数1 ＝ 立即数值 [位与 (左操作数, 65535) ＋ 1]
    .判断 (右移 (左操作数, 16) ＝ #常量)
        立即数1 ＝ 常量值 [位与 (左操作数, 65535) ＋ 1]
    .判断 (右移 (左操作数, 16) ＝ #无符号char数组 或 右移 (左操作数, 16) ＝ #有符号char数组 或 右移 (左操作数, 16) ＝ #无符号int数组 或 右移 (左操作数, 16) ＝ #有符号int数组 或 右移 (左操作数, 16) ＝ #无符号长int数组 或 右移 (左操作数, 16) ＝ #有符号长int数组)
        立即数1 ＝ 位与 (左操作数, 65535)
    .判断 (右移 (左操作数, 16) ＝ 0)
        立即数1 ＝ 位与 (左操作数, 65535)
        左操作数 ＝ #立即数 × 65536
    .默认

    .判断结束


    .判断开始 (右移 (右操作数, 16) ＝ #立即数)
        立即数2 ＝ 立即数值 [位与 (右操作数, 65535) ＋ 1]
    .判断 (右移 (右操作数, 16) ＝ #常量)
        立即数2 ＝ 常量值 [位与 (右操作数, 65535) ＋ 1]
    .判断 (右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组)
        立即数2 ＝ 位与 (右操作数, 65535)
    .判断 (右移 (右操作数, 16) ＝ 0)
        立即数2 ＝ 位与 (右操作数, 65535)
        右操作数 ＝ #立即数 × 65536
    .默认

    .判断结束






    .判断开始 (右移 (目的操作数, 16) ＝ #待修改跳转地址 且 (右移 (左操作数, 16) ＝ #无符号char 且 右移 (右操作数, 16) ＝ #有符号char 或 右移 (左操作数, 16) ＝ #有符号char 且 右移 (右操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #无符号char 且 右移 (右操作数, 16) ＝ #无符号char))

        待修改条件真跳转地址 ＝ 到字节集 (“”)


        A等于_RAM (左操作数)
        R1等于_RAM (右操作数)
        A等于A减R1 ()

        待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))

        .判断开始 (运算符 ＝ “>”)
            JNA (0)
        .默认
            JNC (0)
        .判断结束



        待修改条件跳转出口状态 ＝ “真”

        状态 ＝ “完成”


    .判断 (右移 (目的操作数, 16) ＝ #待修改跳转地址 且 (右移 (左操作数, 16) ＝ #无符号int 且 右移 (右操作数, 16) ＝ #有符号int 或 右移 (左操作数, 16) ＝ #有符号int 且 右移 (右操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #无符号int 且 右移 (右操作数, 16) ＝ #无符号int))

        .如果真 (运算符 ＝ “<”)
            目的操作数 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 目的操作数
        .如果真结束



        A等于_RAM (左操作数 ＋ 1)
        R1等于_RAM (右操作数 ＋ 1)
        A等于A减R1 ()
        JNA (ROM_缓存使用字节 ＋ 10)
        待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JMP (0)
        待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JNZ (0)
        A等于_RAM (左操作数)
        R1等于_RAM (右操作数)
        A等于A减R1 ()
        待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JNA (0)



        待修改条件跳转出口状态 ＝ “真”

        状态 ＝ “完成”


    .判断 (右移 (目的操作数, 16) ＝ #待修改跳转地址 且 (右移 (左操作数, 16) ＝ #无符号长int 且 右移 (右操作数, 16) ＝ #有符号长int 或 右移 (左操作数, 16) ＝ #有符号长int 且 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #无符号长int 且 右移 (右操作数, 16) ＝ #无符号长int))


        .如果真 (运算符 ＝ “<”)
            目的操作数 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 目的操作数
        .如果真结束



        A等于_RAM (左操作数 ＋ 3)
        R1等于_RAM (右操作数 ＋ 3)
        A等于A减R1 ()
        JNA (ROM_缓存使用字节 ＋ 10)
        待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JMP (0)
        待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JNZ (0)
        A等于_RAM (左操作数 ＋ 2)
        R1等于_RAM (右操作数 ＋ 2)
        A等于A减R1 ()
        JNA (ROM_缓存使用字节 ＋ 10)
        待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JMP (0)
        待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JNZ (0)
        A等于_RAM (左操作数 ＋ 1)
        R1等于_RAM (右操作数 ＋ 1)
        A等于A减R1 ()
        JNA (ROM_缓存使用字节 ＋ 10)
        待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JMP (0)
        待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JNZ (0)
        A等于_RAM (左操作数)
        R1等于_RAM (右操作数)
        A等于A减R1 ()
        待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JNA (0)





        待修改条件跳转出口状态 ＝ “真”

        状态 ＝ “完成”





    .判断 (右移 (目的操作数, 16) ＝ #待修改跳转地址 且 右移 (左操作数, 16) ＝ #有符号char 且 右移 (右操作数, 16) ＝ #有符号char)

        .如果真 (运算符 ＝ “<”)
            目的操作数 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 目的操作数
        .如果真结束



        A等于_RAM (左操作数)
        R1等于RAM ()
        A等于A加R1 ()
        JNC (ROM_缓存使用字节 ＋ 22)
        A等于_RAM (右操作数)
        R1等于RAM ()
        A等于A加R1 ()
        待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JNC (0)
        JMP (ROM_缓存使用字节 ＋ 22)

        A等于_RAM (右操作数)
        R1等于RAM ()
        A等于A加R1 ()
        JNC (ROM_缓存使用字节 ＋ 10)
        待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JMP (0)


        A等于_RAM (左操作数)
        R1等于_RAM (右操作数)
        A等于A减R1 ()
        待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JNA (0)



        待修改条件跳转出口状态 ＝ “真”

        状态 ＝ “完成”



    .判断 (右移 (目的操作数, 16) ＝ #待修改跳转地址 且 右移 (左操作数, 16) ＝ #有符号int 且 右移 (右操作数, 16) ＝ #有符号int)

        .如果真 (运算符 ＝ “<”)
            目的操作数 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 目的操作数
        .如果真结束



        A等于_RAM (左操作数 ＋ 1)
        R1等于RAM ()
        A等于A加R1 ()
        JNC (ROM_缓存使用字节 ＋ 22)
        A等于_RAM (右操作数 ＋ 1)
        R1等于RAM ()
        A等于A加R1 ()
        待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JNC (0)
        JMP (ROM_缓存使用字节 ＋ 22)

        A等于_RAM (右操作数 ＋ 1)
        R1等于RAM ()
        A等于A加R1 ()
        JNC (ROM_缓存使用字节 ＋ 10)
        待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JMP (0)


        A等于_RAM (左操作数 ＋ 1)
        R1等于_RAM (右操作数 ＋ 1)
        A等于A减R1 ()
        JNA (ROM_缓存使用字节 ＋ 10)
        待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JMP (0)
        待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JNZ (0)
        A等于_RAM (左操作数)
        R1等于_RAM (右操作数)
        A等于A减R1 ()
        待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JNA (0)



        待修改条件跳转出口状态 ＝ “真”

        状态 ＝ “完成”




    .判断 (右移 (目的操作数, 16) ＝ #待修改跳转地址 且 右移 (左操作数, 16) ＝ #有符号长int 且 右移 (右操作数, 16) ＝ #有符号长int)

        .如果真 (运算符 ＝ “<”)
            目的操作数 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 目的操作数
        .如果真结束



        A等于_RAM (左操作数 ＋ 3)
        R1等于RAM ()
        A等于A加R1 ()
        JNC (ROM_缓存使用字节 ＋ 22)
        A等于_RAM (右操作数 ＋ 3)
        R1等于RAM ()
        A等于A加R1 ()
        待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JNC (0)
        JMP (ROM_缓存使用字节 ＋ 22)

        A等于_RAM (右操作数 ＋ 3)
        R1等于RAM ()
        A等于A加R1 ()
        JNC (ROM_缓存使用字节 ＋ 10)
        待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JMP (0)


        A等于_RAM (左操作数 ＋ 3)
        R1等于_RAM (右操作数 ＋ 3)
        A等于A减R1 ()
        JNA (ROM_缓存使用字节 ＋ 10)
        待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JMP (0)
        待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JNZ (0)
        A等于_RAM (左操作数 ＋ 2)
        R1等于_RAM (右操作数 ＋ 2)
        A等于A减R1 ()
        JNA (ROM_缓存使用字节 ＋ 10)
        待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JMP (0)
        待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JNZ (0)
        A等于_RAM (左操作数 ＋ 1)
        R1等于_RAM (右操作数 ＋ 1)
        A等于A减R1 ()
        JNA (ROM_缓存使用字节 ＋ 10)
        待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JMP (0)
        待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JNZ (0)
        A等于_RAM (左操作数)
        R1等于_RAM (右操作数)
        A等于A减R1 ()
        待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JNA (0)




        待修改条件跳转出口状态 ＝ “真”

        状态 ＝ “完成”




    .判断 (右移 (目的操作数, 16) ＝ #待修改跳转地址 且 (右移 (左操作数, 16) ＝ #无符号ACC 且 右移 (右操作数, 16) ＝ #有符号char 或 右移 (左操作数, 16) ＝ #有符号ACC 且 右移 (右操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #无符号ACC 且 右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #无符号ACC 且 右移 (左操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #有符号ACC 且 右移 (左操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #无符号ACC 且 右移 (左操作数, 16) ＝ #无符号char))

        .如果真 ((右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char) 且 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC))
            目的操作数 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 目的操作数
            .判断开始 (运算符 ＝ “>”)
                运算符 ＝ “<”
            .默认
                运算符 ＝ “>”
            .判断结束

        .如果真结束


        待修改条件真跳转地址 ＝ 到字节集 (“”)


        R1等于_RAM (右操作数)
        A等于A减R1 ()

        待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))

        .判断开始 (运算符 ＝ “>”)
            JNA (0)
        .默认
            JNC (0)
        .判断结束


        待修改条件跳转出口状态 ＝ “真”

        状态 ＝ “完成”





    .判断 (右移 (目的操作数, 16) ＝ #待修改跳转地址 且 (右移 (左操作数, 16) ＝ #有符号ACC 且 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #有符号ACC 且 右移 (左操作数, 16) ＝ #有符号char))

        .如果真 (右移 (左操作数, 16) ＝ #有符号char 且 右移 (右操作数, 16) ＝ #有符号ACC)
            目的操作数 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 目的操作数
            .判断开始 (运算符 ＝ “>”)
                运算符 ＝ “<”
            .默认
                运算符 ＝ “>”
            .判断结束

        .如果真结束


        .判断开始 (运算符 ＝ “>”)

            _RAM等于A (#RAM缓存1)
            R1等于A ()
            A等于A加R1 ()
            JNC (ROM_缓存使用字节 ＋ 22)
            A等于_RAM (右操作数)
            R1等于RAM ()
            A等于A加R1 ()
            待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
            JNC (0)
            JMP (ROM_缓存使用字节 ＋ 22)

            A等于_RAM (右操作数)
            R1等于RAM ()
            A等于A加R1 ()
            JNC (ROM_缓存使用字节 ＋ 10)
            待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
            JMP (0)


            A等于_RAM (#RAM缓存1)
            R1等于_RAM (右操作数)
            A等于A减R1 ()

            待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
            JNA (0)

            待修改条件跳转出口状态 ＝ “真”


        .默认
            _RAM等于A (#RAM缓存1)
            R1等于A ()
            A等于A加R1 ()
            JNC (ROM_缓存使用字节 ＋ 22)
            A等于_RAM (右操作数)
            R1等于RAM ()
            A等于A加R1 ()
            待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
            JNC (0)
            JMP (ROM_缓存使用字节 ＋ 22)

            A等于_RAM (右操作数)
            R1等于RAM ()
            A等于A加R1 ()
            JNC (ROM_缓存使用字节 ＋ 10)
            待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
            JMP (0)


            A等于_RAM (#RAM缓存1)
            R1等于_RAM (右操作数)
            A等于A减R1 ()

            待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
            JNC (0)

            待修改条件跳转出口状态 ＝ “真”

        .判断结束


        状态 ＝ “完成”




    .判断 (右移 (目的操作数, 16) ＝ #待修改跳转地址 且 ((右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数 或 右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组) 或 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数 或 右移 (左操作数, 16) ＝ #无符号char数组 或 右移 (左操作数, 16) ＝ #有符号char数组 或 右移 (左操作数, 16) ＝ #无符号int数组 或 右移 (左操作数, 16) ＝ #有符号int数组 或 右移 (左操作数, 16) ＝ #无符号长int数组 或 右移 (左操作数, 16) ＝ #有符号长int数组)))

        .如果真 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC)
            目的操作数 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 目的操作数
            立即数2 ＝ 立即数1
            .判断开始 (运算符 ＝ “>”)
                运算符 ＝ “<”
            .默认
                运算符 ＝ “>”
            .判断结束

        .如果真结束


        .判断开始 (右移 (左操作数, 16) ＝ #有符号ACC 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数))

            .判断开始 (位与 (立即数2, 128) ＝ 0)

                .判断开始 (运算符 ＝ “>”)

                    R1等于A ()
                    A等于A加R1 ()
                    JNC (ROM_缓存使用字节 ＋ 10)
                    待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)

                    A等于A减R1 ()
                    R1等于立即数 (立即数2)
                    A等于A减R1 ()

                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNA (0)

                    待修改条件真跳转地址 ＝ 到字节集 (“”)
                    待修改条件跳转出口状态 ＝ “真”

                .默认
                    R1等于A ()
                    A等于A加R1 ()
                    JNC (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)

                    A等于A减R1 ()
                    R1等于立即数 (立即数2)
                    A等于A减R1 ()

                    待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNC (0)

                    待修改条件跳转出口状态 ＝ “真”

                .判断结束


            .默认

                .判断开始 (运算符 ＝ “>”)

                    R1等于A ()
                    A等于A加R1 ()
                    待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNC (0)

                    A等于A减R1 ()
                    R1等于立即数 (立即数2)
                    A等于A减R1 ()

                    待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNA (0)

                    待修改条件跳转出口状态 ＝ “真”


                .默认
                    R1等于A ()
                    A等于A加R1 ()
                    待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNC (0)

                    A等于A减R1 ()
                    R1等于立即数 (立即数2)
                    A等于A减R1 ()

                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNC (0)

                    待修改条件真跳转地址 ＝ 到字节集 (“”)
                    待修改条件跳转出口状态 ＝ “真”

                .判断结束

            .判断结束


        .默认

            待修改条件真跳转地址 ＝ 到字节集 (“”)

            R1等于立即数 (立即数2)
            A等于A减R1 ()

            待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))

            .判断开始 (运算符 ＝ “>”)
                JNA (0)
            .默认
                JNC (0)
            .判断结束


            待修改条件跳转出口状态 ＝ “真”

        .判断结束


        状态 ＝ “完成”




    .判断 (右移 (目的操作数, 16) ＝ #待修改跳转地址 且 ((右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数 或 右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组) 或 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数 或 右移 (左操作数, 16) ＝ #无符号char数组 或 右移 (左操作数, 16) ＝ #有符号char数组 或 右移 (左操作数, 16) ＝ #无符号int数组 或 右移 (左操作数, 16) ＝ #有符号int数组 或 右移 (左操作数, 16) ＝ #无符号长int数组 或 右移 (左操作数, 16) ＝ #有符号长int数组)))

        .如果真 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char)
            目的操作数 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 目的操作数
            立即数2 ＝ 立即数1
            .判断开始 (运算符 ＝ “>”)
                运算符 ＝ “<”
            .默认
                运算符 ＝ “>”
            .判断结束

        .如果真结束

        A等于_RAM (左操作数)

        .判断开始 (右移 (左操作数, 16) ＝ #有符号char 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数))

            .判断开始 (位与 (立即数2, 128) ＝ 0)

                .判断开始 (运算符 ＝ “>”)

                    R1等于A ()
                    A等于A加R1 ()
                    JNC (ROM_缓存使用字节 ＋ 10)
                    待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)

                    A等于A减R1 ()
                    R1等于立即数 (立即数2)
                    A等于A减R1 ()

                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNA (0)

                    待修改条件真跳转地址 ＝ 到字节集 (“”)
                    待修改条件跳转出口状态 ＝ “真”

                .默认
                    R1等于A ()
                    A等于A加R1 ()
                    JNC (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)

                    A等于A减R1 ()
                    R1等于立即数 (立即数2)
                    A等于A减R1 ()

                    待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNC (0)

                    待修改条件跳转出口状态 ＝ “真”

                .判断结束


            .默认

                .判断开始 (运算符 ＝ “>”)

                    R1等于A ()
                    A等于A加R1 ()
                    待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNC (0)

                    A等于A减R1 ()
                    R1等于立即数 (立即数2)
                    A等于A减R1 ()

                    待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNA (0)

                    待修改条件跳转出口状态 ＝ “真”


                .默认
                    R1等于A ()
                    A等于A加R1 ()
                    待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNC (0)

                    A等于A减R1 ()
                    R1等于立即数 (立即数2)
                    A等于A减R1 ()

                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNC (0)

                    待修改条件真跳转地址 ＝ 到字节集 (“”)
                    待修改条件跳转出口状态 ＝ “真”

                .判断结束

            .判断结束


        .默认

            待修改条件真跳转地址 ＝ 到字节集 (“”)

            R1等于立即数 (立即数2)
            A等于A减R1 ()

            待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))

            .判断开始 (运算符 ＝ “>”)
                JNA (0)
            .默认
                JNC (0)
            .判断结束


            待修改条件跳转出口状态 ＝ “真”

        .判断结束


        状态 ＝ “完成”




    .判断 (右移 (目的操作数, 16) ＝ #待修改跳转地址 且 ((右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数 或 右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组) 或 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数 或 右移 (左操作数, 16) ＝ #无符号char数组 或 右移 (左操作数, 16) ＝ #有符号char数组 或 右移 (左操作数, 16) ＝ #无符号int数组 或 右移 (左操作数, 16) ＝ #有符号int数组 或 右移 (左操作数, 16) ＝ #无符号长int数组 或 右移 (左操作数, 16) ＝ #有符号长int数组)))

        .如果真 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int)
            目的操作数 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 目的操作数
            立即数2 ＝ 立即数1
            .判断开始 (运算符 ＝ “>”)
                运算符 ＝ “<”
            .默认
                运算符 ＝ “>”
            .判断结束

        .如果真结束


        .判断开始 (右移 (左操作数, 16) ＝ #有符号int 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数))

            .判断开始 (位与 (立即数2, 32768) ＝ 0)

                .判断开始 (运算符 ＝ “>”)

                    A等于_RAM (左操作数 ＋ 1)
                    R1等于RAM ()
                    A等于A加R1 ()
                    JNC (ROM_缓存使用字节 ＋ 10)
                    待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)

                    A等于A减R1 ()
                    R1等于立即数 (右移 (立即数2, 8))
                    A等于A减R1 ()
                    JNA (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNZ (0)
                    A等于_RAM (左操作数)
                    R1等于立即数 (立即数2)
                    A等于A减R1 ()
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNA (0)

                    待修改条件跳转出口状态 ＝ “真”



                .默认
                    A等于_RAM (左操作数 ＋ 1)
                    R1等于RAM ()
                    A等于A加R1 ()
                    JNC (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)

                    A等于A减R1 ()
                    R1等于立即数 (右移 (立即数2, 8))
                    A等于A减R1 ()
                    JNC (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)
                    待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNZ (0)
                    A等于_RAM (左操作数)
                    R1等于立即数 (立即数2)
                    A等于A减R1 ()
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNC (0)

                    待修改条件跳转出口状态 ＝ “真”

                .判断结束


            .默认

                .判断开始 (运算符 ＝ “>”)

                    A等于_RAM (左操作数 ＋ 1)
                    R1等于RAM ()
                    A等于A加R1 ()
                    待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNC (0)

                    A等于A减R1 ()
                    R1等于立即数 (右移 (立即数2, 8))
                    A等于A减R1 ()
                    JNA (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)
                    待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNZ (0)
                    A等于_RAM (左操作数)
                    R1等于立即数 (立即数2)
                    A等于A减R1 ()
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNA (0)

                    待修改条件跳转出口状态 ＝ “真”


                .默认
                    A等于_RAM (左操作数 ＋ 1)
                    R1等于RAM ()
                    A等于A加R1 ()
                    待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNC (0)

                    A等于A减R1 ()
                    R1等于立即数 (右移 (立即数2, 8))
                    A等于A减R1 ()
                    JNC (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNZ (0)
                    A等于_RAM (左操作数)
                    R1等于立即数 (立即数2)
                    A等于A减R1 ()
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNC (0)

                    待修改条件跳转出口状态 ＝ “真”

                .判断结束

            .判断结束


        .默认

            .判断开始 (运算符 ＝ “>”)

                A等于_RAM (左操作数 ＋ 1)
                R1等于立即数 (右移 (立即数2, 8))
                A等于A减R1 ()
                JNA (ROM_缓存使用字节 ＋ 10)
                待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JMP (0)
                待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JNZ (0)
                A等于_RAM (左操作数)
                R1等于立即数 (立即数2)
                A等于A减R1 ()
                待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JNA (0)

                待修改条件跳转出口状态 ＝ “真”


            .默认
                A等于_RAM (左操作数 ＋ 1)
                R1等于立即数 (右移 (立即数2, 8))
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JMP (0)
                待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JNZ (0)
                A等于_RAM (左操作数)
                R1等于立即数 (立即数2)
                A等于A减R1 ()
                待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JNC (0)

                待修改条件跳转出口状态 ＝ “真”

            .判断结束


        .判断结束



        状态 ＝ “完成”




    .判断 (右移 (目的操作数, 16) ＝ #待修改跳转地址 且 ((右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数 或 右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组) 或 (右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数 或 右移 (左操作数, 16) ＝ #无符号char数组 或 右移 (左操作数, 16) ＝ #有符号char数组 或 右移 (左操作数, 16) ＝ #无符号int数组 或 右移 (左操作数, 16) ＝ #有符号int数组 或 右移 (左操作数, 16) ＝ #无符号长int数组 或 右移 (左操作数, 16) ＝ #有符号长int数组)))

        .如果真 (右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int)
            目的操作数 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 目的操作数
            立即数2 ＝ 立即数1
            .判断开始 (运算符 ＝ “>”)
                运算符 ＝ “<”
            .默认
                运算符 ＝ “>”
            .判断结束

        .如果真结束


        .判断开始 (右移 (左操作数, 16) ＝ #有符号长int 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数))

            .判断开始 (位与 (立即数2, 2147483648) ＝ 0)

                .判断开始 (运算符 ＝ “>”)

                    A等于_RAM (左操作数 ＋ 3)
                    R1等于RAM ()
                    A等于A加R1 ()
                    JNC (ROM_缓存使用字节 ＋ 10)
                    待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)

                    A等于A减R1 ()
                    R1等于立即数 (右移 (立即数2, 24))
                    A等于A减R1 ()
                    JNA (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNZ (0)
                    A等于_RAM (左操作数 ＋ 2)
                    R1等于立即数 (右移 (立即数2, 16))
                    A等于A减R1 ()
                    JNA (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNZ (0)
                    A等于_RAM (左操作数 ＋ 1)
                    R1等于立即数 (右移 (立即数2, 8))
                    A等于A减R1 ()
                    JNA (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNZ (0)
                    A等于_RAM (左操作数)
                    R1等于立即数 (立即数2)
                    A等于A减R1 ()
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNA (0)

                    待修改条件跳转出口状态 ＝ “真”



                .默认
                    A等于_RAM (左操作数 ＋ 3)
                    R1等于RAM ()
                    A等于A加R1 ()
                    JNC (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)

                    A等于A减R1 ()
                    R1等于立即数 (右移 (立即数2, 24))
                    A等于A减R1 ()
                    JNC (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)
                    待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNZ (0)
                    A等于_RAM (左操作数 ＋ 2)
                    R1等于立即数 (右移 (立即数2, 16))
                    A等于A减R1 ()
                    JNC (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNZ (0)
                    A等于_RAM (左操作数 ＋ 1)
                    R1等于立即数 (右移 (立即数2, 8))
                    A等于A减R1 ()
                    JNC (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNZ (0)
                    A等于_RAM (左操作数)
                    R1等于立即数 (立即数2)
                    A等于A减R1 ()
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNC (0)

                    待修改条件跳转出口状态 ＝ “真”

                .判断结束


            .默认

                .判断开始 (运算符 ＝ “>”)

                    A等于_RAM (左操作数 ＋ 3)
                    R1等于RAM ()
                    A等于A加R1 ()
                    待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNC (0)

                    A等于A减R1 ()
                    R1等于立即数 (右移 (立即数2, 24))
                    A等于A减R1 ()
                    JNA (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)
                    待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNZ (0)
                    A等于_RAM (左操作数 ＋ 2)
                    R1等于立即数 (右移 (立即数2, 16))
                    A等于A减R1 ()
                    JNA (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNZ (0)
                    A等于_RAM (左操作数 ＋ 1)
                    R1等于立即数 (右移 (立即数2, 8))
                    A等于A减R1 ()
                    JNA (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNZ (0)
                    A等于_RAM (左操作数)
                    R1等于立即数 (立即数2)
                    A等于A减R1 ()
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNA (0)

                    待修改条件跳转出口状态 ＝ “真”


                .默认
                    A等于_RAM (左操作数 ＋ 3)
                    R1等于RAM ()
                    A等于A加R1 ()
                    待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNC (0)

                    A等于A减R1 ()
                    R1等于立即数 (右移 (立即数2, 24))
                    A等于A减R1 ()
                    JNC (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNZ (0)
                    A等于_RAM (左操作数 ＋ 2)
                    R1等于立即数 (右移 (立即数2, 16))
                    A等于A减R1 ()
                    JNC (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNZ (0)
                    A等于_RAM (左操作数 ＋ 1)
                    R1等于立即数 (右移 (立即数2, 8))
                    A等于A减R1 ()
                    JNC (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNZ (0)
                    A等于_RAM (左操作数)
                    R1等于立即数 (立即数2)
                    A等于A减R1 ()
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNC (0)

                    待修改条件跳转出口状态 ＝ “真”

                .判断结束

            .判断结束


        .默认

            .判断开始 (运算符 ＝ “>”)

                A等于_RAM (左操作数 ＋ 3)
                R1等于立即数 (右移 (立即数2, 24))
                A等于A减R1 ()
                JNA (ROM_缓存使用字节 ＋ 10)
                待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JMP (0)
                待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JNZ (0)
                A等于_RAM (左操作数 ＋ 2)
                R1等于立即数 (右移 (立即数2, 16))
                A等于A减R1 ()
                JNA (ROM_缓存使用字节 ＋ 10)
                待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JMP (0)
                待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JNZ (0)
                A等于_RAM (左操作数 ＋ 1)
                R1等于立即数 (右移 (立即数2, 8))
                A等于A减R1 ()
                JNA (ROM_缓存使用字节 ＋ 10)
                待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JMP (0)
                待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JNZ (0)
                A等于_RAM (左操作数)
                R1等于立即数 (立即数2)
                A等于A减R1 ()
                待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JNA (0)

                待修改条件跳转出口状态 ＝ “真”


            .默认
                A等于_RAM (左操作数 ＋ 3)
                R1等于立即数 (右移 (立即数2, 24))
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JMP (0)
                待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JNZ (0)
                A等于_RAM (左操作数 ＋ 2)
                R1等于立即数 (右移 (立即数2, 16))
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JMP (0)
                待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JNZ (0)
                A等于_RAM (左操作数 ＋ 1)
                R1等于立即数 (右移 (立即数2, 8))
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JMP (0)
                待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JNZ (0)
                A等于_RAM (左操作数)
                R1等于立即数 (立即数2)
                A等于A减R1 ()
                待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JNC (0)

                待修改条件跳转出口状态 ＝ “真”

            .判断结束


        .判断结束



        状态 ＝ “完成”




    .默认


        状态 ＝ “二元式机器码生成_>或<_运算类型错误或不存在...~!- -”
    .判断结束








.判断 (运算符 ＝ “>=” 或 运算符 ＝ “<=”)

    .判断开始 (右移 (左操作数, 16) ＝ #立即数)
        立即数1 ＝ 立即数值 [位与 (左操作数, 65535) ＋ 1]
    .判断 (右移 (左操作数, 16) ＝ #常量)
        立即数1 ＝ 常量值 [位与 (左操作数, 65535) ＋ 1]
    .判断 (右移 (左操作数, 16) ＝ #无符号char数组 或 右移 (左操作数, 16) ＝ #有符号char数组 或 右移 (左操作数, 16) ＝ #无符号int数组 或 右移 (左操作数, 16) ＝ #有符号int数组 或 右移 (左操作数, 16) ＝ #无符号长int数组 或 右移 (左操作数, 16) ＝ #有符号长int数组)
        立即数1 ＝ 位与 (左操作数, 65535)
    .判断 (右移 (左操作数, 16) ＝ 0)
        立即数1 ＝ 位与 (左操作数, 65535)
        左操作数 ＝ #立即数 × 65536
    .默认

    .判断结束


    .判断开始 (右移 (右操作数, 16) ＝ #立即数)
        立即数2 ＝ 立即数值 [位与 (右操作数, 65535) ＋ 1]
    .判断 (右移 (右操作数, 16) ＝ #常量)
        立即数2 ＝ 常量值 [位与 (右操作数, 65535) ＋ 1]
    .判断 (右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组)
        立即数2 ＝ 位与 (右操作数, 65535)
    .判断 (右移 (右操作数, 16) ＝ 0)
        立即数2 ＝ 位与 (右操作数, 65535)
        右操作数 ＝ #立即数 × 65536
    .默认

    .判断结束






    .判断开始 (右移 (目的操作数, 16) ＝ #待修改跳转地址 且 (右移 (左操作数, 16) ＝ #无符号char 且 右移 (右操作数, 16) ＝ #有符号char 或 右移 (左操作数, 16) ＝ #有符号char 且 右移 (右操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #无符号char 且 右移 (右操作数, 16) ＝ #无符号char))

        .如果真 (运算符 ＝ “<=”)
            目的操作数 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 目的操作数
        .如果真结束


        待修改条件假跳转地址 ＝ 到字节集 (“”)


        A等于_RAM (左操作数)
        R1等于_RAM (右操作数)
        A等于A减R1 ()
        待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JNC (0)


        待修改条件跳转出口状态 ＝ “假”

        状态 ＝ “完成”



    .判断 (右移 (目的操作数, 16) ＝ #待修改跳转地址 且 (右移 (左操作数, 16) ＝ #无符号int 且 右移 (右操作数, 16) ＝ #有符号int 或 右移 (左操作数, 16) ＝ #有符号int 且 右移 (右操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #无符号int 且 右移 (右操作数, 16) ＝ #无符号int))

        .如果真 (运算符 ＝ “<=”)
            目的操作数 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 目的操作数
        .如果真结束


        A等于_RAM (左操作数 ＋ 1)
        R1等于_RAM (右操作数 ＋ 1)
        A等于A减R1 ()
        JNA (ROM_缓存使用字节 ＋ 10)
        待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JMP (0)
        待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JNZ (0)
        A等于_RAM (左操作数)
        R1等于_RAM (右操作数)
        A等于A减R1 ()
        JNA (ROM_缓存使用字节 ＋ 10)
        待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JMP (0)
        待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JNZ (0)


        待修改条件跳转出口状态 ＝ “真”

        状态 ＝ “完成”




    .判断 (右移 (目的操作数, 16) ＝ #待修改跳转地址 且 (右移 (左操作数, 16) ＝ #无符号长int 且 右移 (右操作数, 16) ＝ #有符号长int 或 右移 (左操作数, 16) ＝ #有符号长int 且 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #无符号长int 且 右移 (右操作数, 16) ＝ #无符号长int))

        .如果真 (运算符 ＝ “<=”)
            目的操作数 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 目的操作数
        .如果真结束


        A等于_RAM (左操作数 ＋ 3)
        R1等于_RAM (右操作数 ＋ 3)
        A等于A减R1 ()
        JNA (ROM_缓存使用字节 ＋ 10)
        待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JMP (0)
        待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JNZ (0)
        A等于_RAM (左操作数 ＋ 2)
        R1等于_RAM (右操作数 ＋ 2)
        A等于A减R1 ()
        JNA (ROM_缓存使用字节 ＋ 10)
        待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JMP (0)
        待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JNZ (0)
        A等于_RAM (左操作数 ＋ 1)
        R1等于_RAM (右操作数 ＋ 1)
        A等于A减R1 ()
        JNA (ROM_缓存使用字节 ＋ 10)
        待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JMP (0)
        待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JNZ (0)
        A等于_RAM (左操作数)
        R1等于_RAM (右操作数)
        A等于A减R1 ()
        JNA (ROM_缓存使用字节 ＋ 10)
        待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JMP (0)
        待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JNZ (0)





        待修改条件跳转出口状态 ＝ “真”

        状态 ＝ “完成”



    .判断 (右移 (目的操作数, 16) ＝ #待修改跳转地址 且 右移 (左操作数, 16) ＝ #有符号char 且 右移 (右操作数, 16) ＝ #有符号char)

        .如果真 (运算符 ＝ “<=”)
            目的操作数 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 目的操作数
        .如果真结束



        A等于_RAM (左操作数)
        R1等于RAM ()
        A等于A加R1 ()
        JNC (ROM_缓存使用字节 ＋ 22)
        A等于_RAM (右操作数)
        R1等于RAM ()
        A等于A加R1 ()
        待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JNC (0)
        JMP (ROM_缓存使用字节 ＋ 22)

        A等于_RAM (右操作数)
        R1等于RAM ()
        A等于A加R1 ()
        JNC (ROM_缓存使用字节 ＋ 10)
        待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JMP (0)


        A等于_RAM (左操作数)
        R1等于_RAM (右操作数)
        A等于A减R1 ()
        待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JNC (0)



        待修改条件跳转出口状态 ＝ “假”

        状态 ＝ “完成”



    .判断 (右移 (目的操作数, 16) ＝ #待修改跳转地址 且 右移 (左操作数, 16) ＝ #有符号int 且 右移 (右操作数, 16) ＝ #有符号int)

        .如果真 (运算符 ＝ “<=”)
            目的操作数 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 目的操作数
        .如果真结束



        A等于_RAM (左操作数 ＋ 1)
        R1等于RAM ()
        A等于A加R1 ()
        JNC (ROM_缓存使用字节 ＋ 22)
        A等于_RAM (右操作数 ＋ 1)
        R1等于RAM ()
        A等于A加R1 ()
        待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JNC (0)
        JMP (ROM_缓存使用字节 ＋ 22)

        A等于_RAM (右操作数 ＋ 1)
        R1等于RAM ()
        A等于A加R1 ()
        JNC (ROM_缓存使用字节 ＋ 10)
        待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JMP (0)


        A等于_RAM (左操作数 ＋ 1)
        R1等于_RAM (右操作数 ＋ 1)
        A等于A减R1 ()
        JNA (ROM_缓存使用字节 ＋ 10)
        待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JMP (0)
        待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JNZ (0)
        A等于_RAM (左操作数)
        R1等于_RAM (右操作数)
        A等于A减R1 ()
        JNA (ROM_缓存使用字节 ＋ 10)
        待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JMP (0)
        待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JNZ (0)



        待修改条件跳转出口状态 ＝ “真”

        状态 ＝ “完成”



    .判断 (右移 (目的操作数, 16) ＝ #待修改跳转地址 且 右移 (左操作数, 16) ＝ #有符号长int 且 右移 (右操作数, 16) ＝ #有符号长int)

        .如果真 (运算符 ＝ “<=”)
            目的操作数 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 目的操作数
        .如果真结束



        A等于_RAM (左操作数 ＋ 3)
        R1等于RAM ()
        A等于A加R1 ()
        JNC (ROM_缓存使用字节 ＋ 22)
        A等于_RAM (右操作数 ＋ 3)
        R1等于RAM ()
        A等于A加R1 ()
        待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JNC (0)
        JMP (ROM_缓存使用字节 ＋ 22)

        A等于_RAM (右操作数 ＋ 3)
        R1等于RAM ()
        A等于A加R1 ()
        JNC (ROM_缓存使用字节 ＋ 10)
        待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JMP (0)


        A等于_RAM (左操作数 ＋ 3)
        R1等于_RAM (右操作数 ＋ 3)
        A等于A减R1 ()
        JNA (ROM_缓存使用字节 ＋ 10)
        待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JMP (0)
        待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JNZ (0)
        A等于_RAM (左操作数 ＋ 2)
        R1等于_RAM (右操作数 ＋ 2)
        A等于A减R1 ()
        JNA (ROM_缓存使用字节 ＋ 10)
        待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JMP (0)
        待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JNZ (0)
        A等于_RAM (左操作数 ＋ 1)
        R1等于_RAM (右操作数 ＋ 1)
        A等于A减R1 ()
        JNA (ROM_缓存使用字节 ＋ 10)
        待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JMP (0)
        待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JNZ (0)
        A等于_RAM (左操作数)
        R1等于_RAM (右操作数)
        A等于A减R1 ()
        JNA (ROM_缓存使用字节 ＋ 10)
        待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JMP (0)
        待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JNZ (0)



        待修改条件跳转出口状态 ＝ “真”

        状态 ＝ “完成”




    .判断 (右移 (目的操作数, 16) ＝ #待修改跳转地址 且 (右移 (左操作数, 16) ＝ #无符号ACC 且 右移 (右操作数, 16) ＝ #有符号char 或 右移 (左操作数, 16) ＝ #有符号ACC 且 右移 (右操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #无符号ACC 且 右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #无符号ACC 且 右移 (左操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #有符号ACC 且 右移 (左操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #无符号ACC 且 右移 (左操作数, 16) ＝ #无符号char))

        .如果真 ((右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char) 且 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC))
            目的操作数 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 目的操作数
            .判断开始 (运算符 ＝ “>=”)
                运算符 ＝ “<=”
            .默认
                运算符 ＝ “>=”
            .判断结束

        .如果真结束


        待修改条件假跳转地址 ＝ 到字节集 (“”)


        R1等于_RAM (右操作数)
        A等于A减R1 ()
        待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))

        .判断开始 (运算符 ＝ “>=”)
            JNC (0)
        .默认
            JNA (0)
        .判断结束


        待修改条件跳转出口状态 ＝ “假”

        状态 ＝ “完成”




    .判断 (右移 (目的操作数, 16) ＝ #待修改跳转地址 且 (右移 (左操作数, 16) ＝ #有符号ACC 且 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #有符号ACC 且 右移 (左操作数, 16) ＝ #有符号char))

        .如果真 (右移 (左操作数, 16) ＝ #有符号char 且 右移 (右操作数, 16) ＝ #有符号ACC)
            目的操作数 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 目的操作数
            .判断开始 (运算符 ＝ “>=”)
                运算符 ＝ “<=”
            .默认
                运算符 ＝ “>=”
            .判断结束

        .如果真结束


        .判断开始 (运算符 ＝ “>=”)

            _RAM等于A (#RAM缓存1)
            R1等于A ()
            A等于A加R1 ()
            JNC (ROM_缓存使用字节 ＋ 22)
            A等于_RAM (右操作数)
            R1等于RAM ()
            A等于A加R1 ()
            待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
            JNC (0)
            JMP (ROM_缓存使用字节 ＋ 22)

            A等于_RAM (右操作数)
            R1等于RAM ()
            A等于A加R1 ()
            JNC (ROM_缓存使用字节 ＋ 10)
            待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
            JMP (0)


            A等于_RAM (#RAM缓存1)
            R1等于_RAM (右操作数)
            A等于A减R1 ()
            待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
            JNC (0)

            待修改条件跳转出口状态 ＝ “假”


        .默认
            _RAM等于A (#RAM缓存1)
            R1等于A ()
            A等于A加R1 ()
            JNC (ROM_缓存使用字节 ＋ 22)
            A等于_RAM (右操作数)
            R1等于RAM ()
            A等于A加R1 ()
            待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
            JNC (0)
            JMP (ROM_缓存使用字节 ＋ 22)

            A等于_RAM (右操作数)
            R1等于RAM ()
            A等于A加R1 ()
            JNC (ROM_缓存使用字节 ＋ 10)
            待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
            JMP (0)


            A等于_RAM (#RAM缓存1)
            R1等于_RAM (右操作数)
            A等于A减R1 ()
            待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
            JNA (0)

            待修改条件跳转出口状态 ＝ “假”

        .判断结束


        状态 ＝ “完成”






    .判断 (右移 (目的操作数, 16) ＝ #待修改跳转地址 且 ((右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数 或 右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组) 或 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数 或 右移 (左操作数, 16) ＝ #无符号char数组 或 右移 (左操作数, 16) ＝ #有符号char数组 或 右移 (左操作数, 16) ＝ #无符号int数组 或 右移 (左操作数, 16) ＝ #有符号int数组 或 右移 (左操作数, 16) ＝ #无符号长int数组 或 右移 (左操作数, 16) ＝ #有符号长int数组)))

        .如果真 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC)
            目的操作数 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 目的操作数
            立即数2 ＝ 立即数1
            .判断开始 (运算符 ＝ “>=”)
                运算符 ＝ “<=”
            .默认
                运算符 ＝ “>=”
            .判断结束

        .如果真结束


        .判断开始 (右移 (左操作数, 16) ＝ #有符号ACC 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数))

            .判断开始 (位与 (立即数2, 128) ＝ 0)

                .判断开始 (运算符 ＝ “>=”)

                    R1等于A ()
                    A等于A加R1 ()
                    JNC (ROM_缓存使用字节 ＋ 10)
                    待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)

                    A等于A减R1 ()
                    R1等于立即数 (立即数2)
                    A等于A减R1 ()

                    待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNC (0)

                    待修改条件跳转出口状态 ＝ “假”

                .默认
                    R1等于A ()
                    A等于A加R1 ()
                    JNC (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)

                    A等于A减R1 ()
                    R1等于立即数 (立即数2)
                    A等于A减R1 ()

                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNA (0)

                    待修改条件假跳转地址 ＝ 到字节集 (“”)
                    待修改条件跳转出口状态 ＝ “假”

                .判断结束


            .默认

                .判断开始 (运算符 ＝ “>=”)

                    R1等于A ()
                    A等于A加R1 ()
                    待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNC (0)

                    A等于A减R1 ()
                    R1等于立即数 (立即数2)
                    A等于A减R1 ()

                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNC (0)

                    待修改条件假跳转地址 ＝ 到字节集 (“”)
                    待修改条件跳转出口状态 ＝ “假”


                .默认
                    R1等于A ()
                    A等于A加R1 ()
                    待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNC (0)

                    A等于A减R1 ()
                    R1等于立即数 (立即数2)
                    A等于A减R1 ()

                    待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNA (0)

                    待修改条件跳转出口状态 ＝ “假”

                .判断结束

            .判断结束


        .默认

            待修改条件假跳转地址 ＝ 到字节集 (“”)

            R1等于立即数 (立即数2)
            A等于A减R1 ()

            待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))

            .判断开始 (运算符 ＝ “>=”)
                JNC (0)
            .默认
                JNA (0)
            .判断结束


            待修改条件跳转出口状态 ＝ “假”

        .判断结束


        状态 ＝ “完成”



    .判断 (右移 (目的操作数, 16) ＝ #待修改跳转地址 且 ((右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数 或 右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组) 或 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数 或 右移 (左操作数, 16) ＝ #无符号char数组 或 右移 (左操作数, 16) ＝ #有符号char数组 或 右移 (左操作数, 16) ＝ #无符号int数组 或 右移 (左操作数, 16) ＝ #有符号int数组 或 右移 (左操作数, 16) ＝ #无符号长int数组 或 右移 (左操作数, 16) ＝ #有符号长int数组)))

        .如果真 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char)
            目的操作数 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 目的操作数
            立即数2 ＝ 立即数1
            .判断开始 (运算符 ＝ “>=”)
                运算符 ＝ “<=”
            .默认
                运算符 ＝ “>=”
            .判断结束

        .如果真结束

        A等于_RAM (左操作数)

        .判断开始 (右移 (左操作数, 16) ＝ #有符号char 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数))

            .判断开始 (位与 (立即数2, 128) ＝ 0)

                .判断开始 (运算符 ＝ “>=”)

                    R1等于A ()
                    A等于A加R1 ()
                    JNC (ROM_缓存使用字节 ＋ 10)
                    待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)

                    A等于A减R1 ()
                    R1等于立即数 (立即数2)
                    A等于A减R1 ()

                    待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNC (0)

                    待修改条件跳转出口状态 ＝ “假”

                .默认
                    R1等于A ()
                    A等于A加R1 ()
                    JNC (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)

                    A等于A减R1 ()
                    R1等于立即数 (立即数2)
                    A等于A减R1 ()

                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNA (0)

                    待修改条件假跳转地址 ＝ 到字节集 (“”)
                    待修改条件跳转出口状态 ＝ “假”

                .判断结束


            .默认

                .判断开始 (运算符 ＝ “>=”)

                    R1等于A ()
                    A等于A加R1 ()
                    待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNC (0)

                    A等于A减R1 ()
                    R1等于立即数 (立即数2)
                    A等于A减R1 ()

                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNC (0)

                    待修改条件假跳转地址 ＝ 到字节集 (“”)
                    待修改条件跳转出口状态 ＝ “假”


                .默认
                    R1等于A ()
                    A等于A加R1 ()
                    待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNC (0)

                    A等于A减R1 ()
                    R1等于立即数 (立即数2)
                    A等于A减R1 ()

                    待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNA (0)

                    待修改条件跳转出口状态 ＝ “假”

                .判断结束

            .判断结束


        .默认

            待修改条件假跳转地址 ＝ 到字节集 (“”)

            R1等于立即数 (立即数2)
            A等于A减R1 ()

            待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))

            .判断开始 (运算符 ＝ “>=”)
                JNC (0)
            .默认
                JNA (0)
            .判断结束


            待修改条件跳转出口状态 ＝ “假”

        .判断结束


        状态 ＝ “完成”




    .判断 (右移 (目的操作数, 16) ＝ #待修改跳转地址 且 ((右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数 或 右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组) 或 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数 或 右移 (左操作数, 16) ＝ #无符号char数组 或 右移 (左操作数, 16) ＝ #有符号char数组 或 右移 (左操作数, 16) ＝ #无符号int数组 或 右移 (左操作数, 16) ＝ #有符号int数组 或 右移 (左操作数, 16) ＝ #无符号长int数组 或 右移 (左操作数, 16) ＝ #有符号长int数组)))

        .如果真 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int)
            目的操作数 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 目的操作数
            立即数2 ＝ 立即数1
            .判断开始 (运算符 ＝ “>=”)
                运算符 ＝ “<=”
            .默认
                运算符 ＝ “>=”
            .判断结束

        .如果真结束


        .判断开始 (右移 (左操作数, 16) ＝ #有符号int 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数))

            .判断开始 (位与 (立即数2, 32768) ＝ 0)

                .判断开始 (运算符 ＝ “>=”)

                    A等于_RAM (左操作数 ＋ 1)
                    R1等于RAM ()
                    A等于A加R1 ()
                    JNC (ROM_缓存使用字节 ＋ 10)
                    待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)

                    A等于A减R1 ()
                    R1等于立即数 (右移 (立即数2, 8))
                    A等于A减R1 ()
                    JNA (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNZ (0)
                    A等于_RAM (左操作数)
                    R1等于立即数 (立即数2)
                    A等于A减R1 ()
                    JNA (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNZ (0)

                    待修改条件跳转出口状态 ＝ “真”



                .默认
                    A等于_RAM (左操作数 ＋ 1)
                    R1等于RAM ()
                    A等于A加R1 ()
                    JNC (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)

                    A等于A减R1 ()
                    R1等于立即数 (右移 (立即数2, 8))
                    A等于A减R1 ()
                    JNC (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)
                    待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNZ (0)
                    A等于_RAM (左操作数)
                    R1等于立即数 (立即数2)
                    A等于A减R1 ()
                    JNC (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNZ (0)

                    待修改条件跳转出口状态 ＝ “真”


                .判断结束


            .默认

                .判断开始 (运算符 ＝ “>=”)

                    A等于_RAM (左操作数 ＋ 1)
                    R1等于RAM ()
                    A等于A加R1 ()
                    待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNC (0)

                    A等于A减R1 ()
                    R1等于立即数 (右移 (立即数2, 8))
                    A等于A减R1 ()
                    JNA (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)
                    待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNZ (0)
                    A等于_RAM (左操作数)
                    R1等于立即数 (立即数2)
                    A等于A减R1 ()
                    JNA (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNZ (0)

                    待修改条件跳转出口状态 ＝ “真”


                .默认
                    A等于_RAM (左操作数 ＋ 1)
                    R1等于RAM ()
                    A等于A加R1 ()
                    待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNC (0)

                    A等于A减R1 ()
                    R1等于立即数 (右移 (立即数2, 8))
                    A等于A减R1 ()
                    JNC (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNZ (0)
                    A等于_RAM (左操作数)
                    R1等于立即数 (立即数2)
                    A等于A减R1 ()
                    JNC (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNZ (0)

                    待修改条件跳转出口状态 ＝ “真”

                .判断结束

            .判断结束


        .默认

            .判断开始 (运算符 ＝ “>=”)

                A等于_RAM (左操作数 ＋ 1)
                R1等于立即数 (右移 (立即数2, 8))
                A等于A减R1 ()
                JNA (ROM_缓存使用字节 ＋ 10)
                待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JMP (0)
                待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JNZ (0)
                A等于_RAM (左操作数)
                R1等于立即数 (立即数2)
                A等于A减R1 ()
                JNA (ROM_缓存使用字节 ＋ 10)
                待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JMP (0)
                待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JNZ (0)

                待修改条件跳转出口状态 ＝ “真”


            .默认
                A等于_RAM (左操作数 ＋ 1)
                R1等于立即数 (右移 (立即数2, 8))
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JMP (0)
                待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JNZ (0)
                A等于_RAM (左操作数)
                R1等于立即数 (立即数2)
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JMP (0)
                待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JNZ (0)

                待修改条件跳转出口状态 ＝ “真”

            .判断结束


        .判断结束



        状态 ＝ “完成”




    .判断 (右移 (目的操作数, 16) ＝ #待修改跳转地址 且 ((右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数 或 右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组) 或 (右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数 或 右移 (左操作数, 16) ＝ #无符号char数组 或 右移 (左操作数, 16) ＝ #有符号char数组 或 右移 (左操作数, 16) ＝ #无符号int数组 或 右移 (左操作数, 16) ＝ #有符号int数组 或 右移 (左操作数, 16) ＝ #无符号长int数组 或 右移 (左操作数, 16) ＝ #有符号长int数组)))

        .如果真 (右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int)
            目的操作数 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 目的操作数
            立即数2 ＝ 立即数1
            .判断开始 (运算符 ＝ “>=”)
                运算符 ＝ “<=”
            .默认
                运算符 ＝ “>=”
            .判断结束

        .如果真结束


        .判断开始 (右移 (左操作数, 16) ＝ #有符号长int 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数))

            .判断开始 (位与 (立即数2, 2147483648) ＝ 0)

                .判断开始 (运算符 ＝ “>=”)

                    A等于_RAM (左操作数 ＋ 3)
                    R1等于RAM ()
                    A等于A加R1 ()
                    JNC (ROM_缓存使用字节 ＋ 10)
                    待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)

                    A等于A减R1 ()
                    R1等于立即数 (右移 (立即数2, 24))
                    A等于A减R1 ()
                    JNA (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNZ (0)
                    A等于_RAM (左操作数 ＋ 2)
                    R1等于立即数 (右移 (立即数2, 16))
                    A等于A减R1 ()
                    JNA (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNZ (0)
                    A等于_RAM (左操作数 ＋ 1)
                    R1等于立即数 (右移 (立即数2, 8))
                    A等于A减R1 ()
                    JNA (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNZ (0)
                    A等于_RAM (左操作数)
                    R1等于立即数 (立即数2)
                    A等于A减R1 ()
                    JNA (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNZ (0)

                    待修改条件跳转出口状态 ＝ “真”



                .默认
                    A等于_RAM (左操作数 ＋ 3)
                    R1等于RAM ()
                    A等于A加R1 ()
                    JNC (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)

                    A等于A减R1 ()
                    R1等于立即数 (右移 (立即数2, 24))
                    A等于A减R1 ()
                    JNC (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)
                    待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNZ (0)
                    A等于_RAM (左操作数 ＋ 2)
                    R1等于立即数 (右移 (立即数2, 16))
                    A等于A减R1 ()
                    JNC (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNZ (0)
                    A等于_RAM (左操作数 ＋ 1)
                    R1等于立即数 (右移 (立即数2, 8))
                    A等于A减R1 ()
                    JNC (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNZ (0)
                    A等于_RAM (左操作数)
                    R1等于立即数 (立即数2)
                    A等于A减R1 ()
                    JNC (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNZ (0)

                    待修改条件跳转出口状态 ＝ “真”

                .判断结束


            .默认

                .判断开始 (运算符 ＝ “>=”)

                    A等于_RAM (左操作数 ＋ 3)
                    R1等于RAM ()
                    A等于A加R1 ()
                    待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNC (0)

                    A等于A减R1 ()
                    R1等于立即数 (右移 (立即数2, 24))
                    A等于A减R1 ()
                    JNA (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)
                    待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNZ (0)
                    A等于_RAM (左操作数 ＋ 2)
                    R1等于立即数 (右移 (立即数2, 16))
                    A等于A减R1 ()
                    JNA (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNZ (0)
                    A等于_RAM (左操作数 ＋ 1)
                    R1等于立即数 (右移 (立即数2, 8))
                    A等于A减R1 ()
                    JNA (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNZ (0)
                    A等于_RAM (左操作数)
                    R1等于立即数 (立即数2)
                    A等于A减R1 ()
                    JNA (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNZ (0)

                    待修改条件跳转出口状态 ＝ “真”


                .默认
                    A等于_RAM (左操作数 ＋ 3)
                    R1等于RAM ()
                    A等于A加R1 ()
                    待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNC (0)

                    A等于A减R1 ()
                    R1等于立即数 (右移 (立即数2, 24))
                    A等于A减R1 ()
                    JNC (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNZ (0)
                    A等于_RAM (左操作数 ＋ 2)
                    R1等于立即数 (右移 (立即数2, 16))
                    A等于A减R1 ()
                    JNC (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNZ (0)
                    A等于_RAM (左操作数 ＋ 1)
                    R1等于立即数 (右移 (立即数2, 8))
                    A等于A减R1 ()
                    JNC (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNZ (0)
                    A等于_RAM (左操作数)
                    R1等于立即数 (立即数2)
                    A等于A减R1 ()
                    JNC (ROM_缓存使用字节 ＋ 10)
                    待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JMP (0)
                    待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                    JNZ (0)

                    待修改条件跳转出口状态 ＝ “真”

                .判断结束

            .判断结束



        .默认

            .判断开始 (运算符 ＝ “>=”)

                A等于_RAM (左操作数 ＋ 3)
                R1等于立即数 (右移 (立即数2, 24))
                A等于A减R1 ()
                JNA (ROM_缓存使用字节 ＋ 10)
                待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JMP (0)
                待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JNZ (0)
                A等于_RAM (左操作数 ＋ 2)
                R1等于立即数 (右移 (立即数2, 16))
                A等于A减R1 ()
                JNA (ROM_缓存使用字节 ＋ 10)
                待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JMP (0)
                待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JNZ (0)
                A等于_RAM (左操作数 ＋ 1)
                R1等于立即数 (右移 (立即数2, 8))
                A等于A减R1 ()
                JNA (ROM_缓存使用字节 ＋ 10)
                待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JMP (0)
                待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JNZ (0)
                A等于_RAM (左操作数)
                R1等于立即数 (立即数2)
                A等于A减R1 ()
                JNA (ROM_缓存使用字节 ＋ 10)
                待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JMP (0)
                待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JNZ (0)

                待修改条件跳转出口状态 ＝ “真”


            .默认
                A等于_RAM (左操作数 ＋ 3)
                R1等于立即数 (右移 (立即数2, 24))
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JMP (0)
                待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JNZ (0)
                A等于_RAM (左操作数 ＋ 2)
                R1等于立即数 (右移 (立即数2, 16))
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JMP (0)
                待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JNZ (0)
                A等于_RAM (左操作数 ＋ 1)
                R1等于立即数 (右移 (立即数2, 8))
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JMP (0)
                待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JNZ (0)
                A等于_RAM (左操作数)
                R1等于立即数 (立即数2)
                A等于A减R1 ()
                JNC (ROM_缓存使用字节 ＋ 10)
                待修改条件真跳转地址 ＝ 待修改条件真跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JMP (0)
                待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
                JNZ (0)

                待修改条件跳转出口状态 ＝ “真”

            .判断结束


        .判断结束



        状态 ＝ “完成”




    .默认



        状态 ＝ “二元式机器码生成_>=或<=_运算类型错误或不存在...~!- -”
    .判断结束





.判断 (运算符 ＝ “==” 或 运算符 ＝ “!=”)

    .判断开始 (右移 (左操作数, 16) ＝ #立即数)
        立即数1 ＝ 立即数值 [位与 (左操作数, 65535) ＋ 1]
    .判断 (右移 (左操作数, 16) ＝ #常量)
        立即数1 ＝ 常量值 [位与 (左操作数, 65535) ＋ 1]
    .判断 (右移 (左操作数, 16) ＝ #无符号char数组 或 右移 (左操作数, 16) ＝ #有符号char数组 或 右移 (左操作数, 16) ＝ #无符号int数组 或 右移 (左操作数, 16) ＝ #有符号int数组 或 右移 (左操作数, 16) ＝ #无符号长int数组 或 右移 (左操作数, 16) ＝ #有符号长int数组)
        立即数1 ＝ 位与 (左操作数, 65535)
    .判断 (右移 (左操作数, 16) ＝ 0)
        立即数1 ＝ 位与 (左操作数, 65535)
        左操作数 ＝ #立即数 × 65536
    .默认

    .判断结束


    .判断开始 (右移 (右操作数, 16) ＝ #立即数)
        立即数2 ＝ 立即数值 [位与 (右操作数, 65535) ＋ 1]
    .判断 (右移 (右操作数, 16) ＝ #常量)
        立即数2 ＝ 常量值 [位与 (右操作数, 65535) ＋ 1]
    .判断 (右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组)
        立即数2 ＝ 位与 (右操作数, 65535)
    .判断 (右移 (右操作数, 16) ＝ 0)
        立即数2 ＝ 位与 (右操作数, 65535)
        右操作数 ＝ #立即数 × 65536
    .默认

    .判断结束






    .判断开始 (右移 (目的操作数, 16) ＝ #待修改跳转地址 且 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char))

        待修改条件真跳转地址 ＝ 到字节集 (“”)

        A等于_RAM (左操作数)
        R1等于_RAM (右操作数)
        A等于A减R1 ()
        待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JNZ (0)


        .判断开始 (运算符 ＝ “==”)
            待修改条件跳转出口状态 ＝ “真”
        .默认
            待修改条件跳转出口状态 ＝ “假”
            待修改条件真跳转地址 ＝ 待修改条件假跳转地址
            待修改条件假跳转地址 ＝ 到字节集 (“”)
        .判断结束


        状态 ＝ “完成”



    .判断 (右移 (目的操作数, 16) ＝ #待修改跳转地址 且 (右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int) 且 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int))

        待修改条件真跳转地址 ＝ 到字节集 (“”)

        A等于_RAM (左操作数 ＋ 1)
        R1等于_RAM (右操作数 ＋ 1)
        A等于A减R1 ()
        待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JNZ (0)
        A等于_RAM (左操作数)
        R1等于_RAM (右操作数)
        A等于A减R1 ()
        待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JNZ (0)



        .判断开始 (运算符 ＝ “==”)
            待修改条件跳转出口状态 ＝ “真”
        .默认
            待修改条件跳转出口状态 ＝ “假”
            待修改条件真跳转地址 ＝ 待修改条件假跳转地址
            待修改条件假跳转地址 ＝ 到字节集 (“”)
        .判断结束


        状态 ＝ “完成”



    .判断 (右移 (目的操作数, 16) ＝ #待修改跳转地址 且 (右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int))

        待修改条件真跳转地址 ＝ 到字节集 (“”)

        A等于_RAM (左操作数 ＋ 3)
        R1等于_RAM (右操作数 ＋ 3)
        A等于A减R1 ()
        待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JNZ (0)
        A等于_RAM (左操作数 ＋ 2)
        R1等于_RAM (右操作数 ＋ 2)
        A等于A减R1 ()
        待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JNZ (0)
        A等于_RAM (左操作数 ＋ 1)
        R1等于_RAM (右操作数 ＋ 1)
        A等于A减R1 ()
        待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JNZ (0)
        A等于_RAM (左操作数)
        R1等于_RAM (右操作数)
        A等于A减R1 ()
        待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JNZ (0)



        .判断开始 (运算符 ＝ “==”)
            待修改条件跳转出口状态 ＝ “真”
        .默认
            待修改条件跳转出口状态 ＝ “假”
            待修改条件真跳转地址 ＝ 待修改条件假跳转地址
            待修改条件假跳转地址 ＝ 到字节集 (“”)
        .判断结束


        状态 ＝ “完成”




    .判断 (右移 (目的操作数, 16) ＝ #待修改跳转地址 且 (右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC 或 右移 (左操作数, 16) ＝ #ACC) 且 右移 (右操作数, 16) ＝ #R1 或 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC 或 右移 (右操作数, 16) ＝ #ACC) 且 右移 (左操作数, 16) ＝ #R1)

        待修改条件真跳转地址 ＝ 到字节集 (“”)

        A等于A减R1 ()
        待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JNZ (0)


        .判断开始 (运算符 ＝ “==”)
            待修改条件跳转出口状态 ＝ “真”
        .默认
            待修改条件跳转出口状态 ＝ “假”
            待修改条件真跳转地址 ＝ 待修改条件假跳转地址
            待修改条件假跳转地址 ＝ 到字节集 (“”)
        .判断结束


        状态 ＝ “完成”


    .判断 (右移 (目的操作数, 16) ＝ #待修改跳转地址 且 ((右移 (左操作数, 16) ＝ #C 或 右移 (左操作数, 16) ＝ #Z 或 右移 (左操作数, 16) ＝ #A) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数) 或 (右移 (右操作数, 16) ＝ #C 或 右移 (右操作数, 16) ＝ #Z 或 右移 (右操作数, 16) ＝ #A) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数)))

        .判断开始 ((右移 (左操作数, 16) ＝ #C 或 右移 (左操作数, 16) ＝ #Z 或 右移 (左操作数, 16) ＝ #A) 且 位与 (立即数2, 1) ＝ 1 或 (右移 (右操作数, 16) ＝ #C 或 右移 (右操作数, 16) ＝ #Z 或 右移 (右操作数, 16) ＝ #A) 且 位与 (立即数1, 1) ＝ 1)

            待修改条件真跳转地址 ＝ 到字节集 (“”)
            待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
            .判断开始 (右移 (左操作数, 16) ＝ #C 或 右移 (右操作数, 16) ＝ #C)
                JNC (0)
            .判断 (右移 (左操作数, 16) ＝ #Z 或 右移 (右操作数, 16) ＝ #Z)
                JNZ (0)
            .默认
                JNA (0)
            .判断结束

            待修改条件跳转出口状态 ＝ “真”

        .默认

            待修改条件假跳转地址 ＝ 到字节集 (“”)
            待修改条件真跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
            .判断开始 (右移 (左操作数, 16) ＝ #C 或 右移 (右操作数, 16) ＝ #C)
                JNC (0)
            .判断 (右移 (左操作数, 16) ＝ #Z 或 右移 (右操作数, 16) ＝ #Z)
                JNZ (0)
            .默认
                JNA (0)
            .判断结束

            待修改条件跳转出口状态 ＝ “假”

        .判断结束


        .如果真 (运算符 ＝ “!=”)

            .判断开始 (待修改条件跳转出口状态 ＝ “真”)
                待修改条件真跳转地址 ＝ 待修改条件假跳转地址
                待修改条件假跳转地址 ＝ 到字节集 (“”)
                待修改条件跳转出口状态 ＝ “假”
            .默认
                待修改条件假跳转地址 ＝ 待修改条件真跳转地址
                待修改条件真跳转地址 ＝ 到字节集 (“”)
                待修改条件跳转出口状态 ＝ “真”
            .判断结束


        .如果真结束


        状态 ＝ “完成”




    .判断 (右移 (目的操作数, 16) ＝ #待修改跳转地址 且 ((右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC) 且 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char) 或 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC) 且 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char)))

        .如果真 ((右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char) 且 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC))
            目的操作数 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 目的操作数
        .如果真结束


        待修改条件真跳转地址 ＝ 到字节集 (“”)

        R1等于_RAM (右操作数)
        A等于A减R1 ()
        待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
        JNZ (0)


        .判断开始 (运算符 ＝ “==”)
            待修改条件跳转出口状态 ＝ “真”
        .默认
            待修改条件跳转出口状态 ＝ “假”
            待修改条件真跳转地址 ＝ 待修改条件假跳转地址
            待修改条件假跳转地址 ＝ 到字节集 (“”)
        .判断结束


        状态 ＝ “完成”



    .判断 (右移 (目的操作数, 16) ＝ #待修改跳转地址 且 ((右移 (左操作数, 16) ＝ #无符号ACC 或 右移 (左操作数, 16) ＝ #有符号ACC) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数 或 右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组) 或 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数 或 右移 (左操作数, 16) ＝ #无符号char数组 或 右移 (左操作数, 16) ＝ #有符号char数组 或 右移 (左操作数, 16) ＝ #无符号int数组 或 右移 (左操作数, 16) ＝ #有符号int数组 或 右移 (左操作数, 16) ＝ #无符号长int数组 或 右移 (左操作数, 16) ＝ #有符号长int数组)))

        .如果真 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC)
            目的操作数 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 目的操作数
            立即数2 ＝ 立即数1
        .如果真结束


        待修改条件真跳转地址 ＝ 到字节集 (“”)

        .判断开始 (立即数2 ＝ 1)

            A等于A减1 ()
            待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
            JNZ (0)

        .判断 (立即数2 ＝ 0)

            A等于A减1 ()
            待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
            JNC (0)

        .默认
            R1等于立即数 (立即数2)
            A等于A减R1 ()
            待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
            JNZ (0)
        .判断结束

        .判断开始 (运算符 ＝ “==”)
            待修改条件跳转出口状态 ＝ “真”
        .默认
            待修改条件跳转出口状态 ＝ “假”
            待修改条件真跳转地址 ＝ 待修改条件假跳转地址
            待修改条件假跳转地址 ＝ 到字节集 (“”)
        .判断结束


        状态 ＝ “完成”




    .判断 (右移 (目的操作数, 16) ＝ #待修改跳转地址 且 ((右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数 或 右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组) 或 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数 或 右移 (左操作数, 16) ＝ #无符号char数组 或 右移 (左操作数, 16) ＝ #有符号char数组 或 右移 (左操作数, 16) ＝ #无符号int数组 或 右移 (左操作数, 16) ＝ #有符号int数组 或 右移 (左操作数, 16) ＝ #无符号长int数组 或 右移 (左操作数, 16) ＝ #有符号长int数组)))

        .如果真 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char)
            目的操作数 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 目的操作数
            立即数2 ＝ 立即数1
        .如果真结束


        待修改条件真跳转地址 ＝ 到字节集 (“”)

        A等于_RAM (左操作数)

        .判断开始 (立即数2 ＝ 1)

            A等于A减1 ()
            待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
            JNZ (0)

        .判断 (立即数2 ＝ 0)

            A等于A减1 ()
            待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
            JNC (0)

        .默认
            R1等于立即数 (立即数2)
            A等于A减R1 ()
            待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
            JNZ (0)
        .判断结束

        .判断开始 (运算符 ＝ “==”)
            待修改条件跳转出口状态 ＝ “真”
        .默认
            待修改条件跳转出口状态 ＝ “假”
            待修改条件真跳转地址 ＝ 待修改条件假跳转地址
            待修改条件假跳转地址 ＝ 到字节集 (“”)
        .判断结束


        状态 ＝ “完成”




    .判断 (右移 (目的操作数, 16) ＝ #待修改跳转地址 且 ((右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数 或 右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组) 或 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数 或 右移 (左操作数, 16) ＝ #无符号char数组 或 右移 (左操作数, 16) ＝ #有符号char数组 或 右移 (左操作数, 16) ＝ #无符号int数组 或 右移 (左操作数, 16) ＝ #有符号int数组 或 右移 (左操作数, 16) ＝ #无符号长int数组 或 右移 (左操作数, 16) ＝ #有符号长int数组)))

        .如果真 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int)
            目的操作数 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 目的操作数
            立即数2 ＝ 立即数1
        .如果真结束


        待修改条件真跳转地址 ＝ 到字节集 (“”)

        .判断开始 (立即数2 ＝ 1)

            A等于_RAM (左操作数 ＋ 1)
            A等于A减1 ()
            待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
            JNC (0)
            A等于_RAM (左操作数)
            A等于A减1 ()
            待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
            JNZ (0)

        .判断 (立即数2 ＝ 0)

            A等于_RAM (左操作数 ＋ 1)
            A等于A减1 ()
            待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
            JNC (0)
            A等于_RAM (左操作数)
            A等于A减1 ()
            待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
            JNC (0)

        .默认
            A等于_RAM (左操作数 ＋ 1)
            R1等于立即数 (右移 (立即数2, 8))
            A等于A减R1 ()
            待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
            JNZ (0)
            A等于_RAM (左操作数)
            R1等于立即数 (立即数2)
            A等于A减R1 ()
            待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
            JNZ (0)
        .判断结束


        .判断开始 (运算符 ＝ “==”)
            待修改条件跳转出口状态 ＝ “真”
        .默认
            待修改条件跳转出口状态 ＝ “假”
            待修改条件真跳转地址 ＝ 待修改条件假跳转地址
            待修改条件假跳转地址 ＝ 到字节集 (“”)
        .判断结束



        状态 ＝ “完成”





    .判断 (右移 (目的操作数, 16) ＝ #待修改跳转地址 且 ((右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int) 且 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数 或 右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组) 或 (右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int) 且 (右移 (左操作数, 16) ＝ #常量 或 右移 (左操作数, 16) ＝ #立即数 或 右移 (左操作数, 16) ＝ #无符号char数组 或 右移 (左操作数, 16) ＝ #有符号char数组 或 右移 (左操作数, 16) ＝ #无符号int数组 或 右移 (左操作数, 16) ＝ #有符号int数组 或 右移 (左操作数, 16) ＝ #无符号长int数组 或 右移 (左操作数, 16) ＝ #有符号长int数组)))

        .如果真 (右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int)
            目的操作数 ＝ 左操作数
            左操作数 ＝ 右操作数
            右操作数 ＝ 目的操作数
            立即数2 ＝ 立即数1
        .如果真结束


        待修改条件真跳转地址 ＝ 到字节集 (“”)

        .判断开始 (立即数2 ＝ 1)

            A等于_RAM (左操作数 ＋ 3)
            A等于A减1 ()
            待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
            JNC (0)
            A等于_RAM (左操作数 ＋ 2)
            A等于A减1 ()
            待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
            JNC (0)
            A等于_RAM (左操作数 ＋ 1)
            A等于A减1 ()
            待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
            JNC (0)
            A等于_RAM (左操作数)
            A等于A减1 ()
            待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
            JNZ (0)

        .判断 (立即数2 ＝ 0)

            A等于_RAM (左操作数 ＋ 3)
            A等于A减1 ()
            待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
            JNC (0)
            A等于_RAM (左操作数 ＋ 2)
            A等于A减1 ()
            待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
            JNC (0)
            A等于_RAM (左操作数 ＋ 1)
            A等于A减1 ()
            待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
            JNC (0)
            A等于_RAM (左操作数)
            A等于A减1 ()
            待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
            JNC (0)


        .默认
            A等于_RAM (左操作数 ＋ 3)
            R1等于立即数 (右移 (立即数2, 24))
            A等于A减R1 ()
            待修改条件假跳转地址 ＝ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
            JNZ (0)
            A等于_RAM (左操作数 ＋ 2)
            R1等于立即数 (右移 (立即数2, 16))
            A等于A减R1 ()
            待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
            JNZ (0)
            A等于_RAM (左操作数 ＋ 1)
            R1等于立即数 (右移 (立即数2, 8))
            A等于A减R1 ()
            待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
            JNZ (0)
            A等于_RAM (左操作数)
            R1等于立即数 (立即数2)
            A等于A减R1 ()
            待修改条件假跳转地址 ＝ 待修改条件假跳转地址 ＋ 到字节集 (到字节 (ROM_缓存使用字节)) ＋ 到字节集 (到字节 (右移 (ROM_缓存使用字节, 8)))
            JNZ (0)
        .判断结束


        .判断开始 (运算符 ＝ “==”)
            待修改条件跳转出口状态 ＝ “真”
        .默认
            待修改条件跳转出口状态 ＝ “假”
            待修改条件真跳转地址 ＝ 待修改条件假跳转地址
            待修改条件假跳转地址 ＝ 到字节集 (“”)
        .判断结束


        状态 ＝ “完成”




    .默认
        状态 ＝ “二元式机器码生成_== !=_运算类型错误或不存在...~!- -”
    .判断结束





.判断 (运算符 ＝ “=”)

    .判断开始 (右移 (右操作数, 16) ＝ #立即数)
        立即数1 ＝ 立即数值 [位与 (右操作数, 65535) ＋ 1]
    .判断 (右移 (右操作数, 16) ＝ #常量)
        立即数1 ＝ 常量值 [位与 (右操作数, 65535) ＋ 1]
    .判断 (右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组)
        立即数1 ＝ 位与 (右操作数, 65535)
    .判断 (右移 (右操作数, 16) ＝ 0)
        立即数1 ＝ 位与 (右操作数, 65535)
        右操作数 ＝ #立即数 × 65536
    .默认

    .判断结束


    .判断开始 (右移 (左操作数, 16) ＝ #无符号char 或 右移 (左操作数, 16) ＝ #有符号char)

        .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC 或 右移 (右操作数, 16) ＝ #ACC)

            _RAM等于A (左操作数)

            状态 ＝ “完成”


        .判断 (右移 (右操作数, 16) ＝ #立即数 或 右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组)

            A等于立即数 (立即数1)
            _RAM等于A (左操作数)

            状态 ＝ “完成”


        .默认
            状态 ＝ “二元式机器码生成_char_=_?_运算类型错误或不存在...~!- -”
        .判断结束



    .判断 (右移 (左操作数, 16) ＝ #无符号int 或 右移 (左操作数, 16) ＝ #有符号int)

        .判断开始 (右移 (右操作数, 16) ＝ #立即数 或 右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组)

            A等于立即数 (立即数1)
            _RAM等于A (左操作数)
            A等于立即数 (右移 (立即数1, 8))
            _RAM等于A (左操作数 ＋ 1)

            状态 ＝ “完成”

        .判断 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #ACC)

            _RAM等于A (左操作数)
            A等于立即数 (0)
            _RAM等于A (左操作数 ＋ 1)

            状态 ＝ “完成”


        .判断 (右移 (右操作数, 16) ＝ #有符号ACC)

            _RAM等于A (左操作数)
            R1等于A ()
            A等于A加R1 ()
            JNC (ROM_缓存使用字节 ＋ 12)
            A等于立即数 (255)
            JMP (ROM_缓存使用字节 ＋ 7)
            A等于立即数 (0)
            _RAM等于A (左操作数 ＋ 1)

            状态 ＝ “完成”


        .判断 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int)

            A等于_RAM (右操作数)
            _RAM等于A (左操作数)
            A等于_RAM (右操作数 ＋ 1)
            _RAM等于A (左操作数 ＋ 1)

            状态 ＝ “完成”


        .判断 (右移 (右操作数, 16) ＝ #无符号int指针指向内容 或 右移 (右操作数, 16) ＝ #有符号int指针指向内容)

            A等于_RAM (右操作数)
            R2等于_RAM (右操作数 ＋ 1)
            R3等于A ()
            A等于RAM ()
            _RAM等于A (左操作数)

            A等于_RAM (右操作数)
            A等于A加1 ()
            R1等于A ()
            A等于_RAM (右操作数 ＋ 1)
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            R2等于A ()
            A等于立即数 (0)
            A等于A加R1 ()
            R3等于A ()
            A等于RAM ()
            _RAM等于A (左操作数 ＋ 1)

            状态 ＝ “完成”


        .判断 (右移 (右操作数, 16) ＝ #无符号char)

            A等于_RAM (右操作数)
            _RAM等于A (左操作数)
            A等于立即数 (0)
            _RAM等于A (左操作数 ＋ 1)

            状态 ＝ “完成”


        .判断 (右移 (右操作数, 16) ＝ #有符号char)

            A等于_RAM (右操作数)
            _RAM等于A (左操作数)
            R1等于A ()
            A等于A加R1 ()
            JNC (ROM_缓存使用字节 ＋ 12)
            A等于立即数 (255)
            JMP (ROM_缓存使用字节 ＋ 7)
            A等于立即数 (0)
            _RAM等于A (左操作数 ＋ 1)

            状态 ＝ “完成”


        .默认
            状态 ＝ “二元式机器码生成_int16_=_?_运算类型错误或不存在...~!- -”
        .判断结束






    .判断 (右移 (左操作数, 16) ＝ #无符号长int 或 右移 (左操作数, 16) ＝ #有符号长int)

        .判断开始 (右移 (右操作数, 16) ＝ #立即数 或 右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组)

            A等于立即数 (立即数1)
            _RAM等于A (左操作数)
            A等于立即数 (右移 (立即数1, 8))
            _RAM等于A (左操作数 ＋ 1)
            A等于立即数 (右移 (立即数1, 16))
            _RAM等于A (左操作数 ＋ 2)
            A等于立即数 (右移 (立即数1, 24))
            _RAM等于A (左操作数 ＋ 3)

            状态 ＝ “完成”


        .判断 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #ACC)

            _RAM等于A (左操作数)
            A等于立即数 (0)
            _RAM等于A (左操作数 ＋ 1)
            _RAM等于A (左操作数 ＋ 2)
            _RAM等于A (左操作数 ＋ 3)

            状态 ＝ “完成”


        .判断 (右移 (右操作数, 16) ＝ #有符号ACC)

            _RAM等于A (左操作数)
            R1等于A ()
            A等于A加R1 ()
            JNC (ROM_缓存使用字节 ＋ 12)
            A等于立即数 (255)
            JMP (ROM_缓存使用字节 ＋ 7)
            A等于立即数 (0)
            _RAM等于A (左操作数 ＋ 1)
            _RAM等于A (左操作数 ＋ 2)
            _RAM等于A (左操作数 ＋ 3)

            状态 ＝ “完成”


        .判断 (右移 (右操作数, 16) ＝ #无符号int)

            A等于_RAM (右操作数)
            _RAM等于A (左操作数)
            A等于_RAM (右操作数 ＋ 1)
            _RAM等于A (左操作数 ＋ 1)
            A等于立即数 (0)
            _RAM等于A (左操作数 ＋ 2)
            _RAM等于A (左操作数 ＋ 3)

            状态 ＝ “完成”


        .判断 (右移 (右操作数, 16) ＝ #有符号int)

            A等于_RAM (右操作数)
            _RAM等于A (左操作数)
            A等于_RAM (右操作数 ＋ 1)
            _RAM等于A (左操作数 ＋ 1)

            R1等于A ()
            A等于A加R1 ()
            JNC (ROM_缓存使用字节 ＋ 12)
            A等于立即数 (255)
            JMP (ROM_缓存使用字节 ＋ 7)
            A等于立即数 (0)
            _RAM等于A (左操作数 ＋ 2)
            _RAM等于A (左操作数 ＋ 3)


            状态 ＝ “完成”


        .判断 (右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int)

            A等于_RAM (右操作数)
            _RAM等于A (左操作数)
            A等于_RAM (右操作数 ＋ 1)
            _RAM等于A (左操作数 ＋ 1)
            A等于_RAM (右操作数 ＋ 2)
            _RAM等于A (左操作数 ＋ 2)
            A等于_RAM (右操作数 ＋ 3)
            _RAM等于A (左操作数 ＋ 3)


            状态 ＝ “完成”


        .判断 (右移 (右操作数, 16) ＝ #无符号长int指针指向内容 或 右移 (右操作数, 16) ＝ #有符号长int指针指向内容)

            A等于_RAM (右操作数)
            R2等于_RAM (右操作数 ＋ 1)
            R3等于A ()
            A等于RAM ()
            _RAM等于A (左操作数)

            A等于_RAM (右操作数)
            A等于A加1 ()
            R1等于A ()
            A等于_RAM (右操作数 ＋ 1)
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            R2等于A ()
            A等于立即数 (0)
            A等于A加R1 ()
            R3等于A ()
            A等于RAM ()
            _RAM等于A (左操作数 ＋ 1)

            A等于_RAM (右操作数)
            R1等于立即数 (2)
            A等于A加R1 ()
            R1等于A ()
            A等于_RAM (右操作数 ＋ 1)
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            R2等于A ()
            A等于立即数 (0)
            A等于A加R1 ()
            R3等于A ()
            A等于RAM ()
            _RAM等于A (左操作数 ＋ 2)

            A等于_RAM (右操作数)
            R1等于立即数 (3)
            A等于A加R1 ()
            R1等于A ()
            A等于_RAM (右操作数 ＋ 1)
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            R2等于A ()
            A等于立即数 (0)
            A等于A加R1 ()
            R3等于A ()
            A等于RAM ()
            _RAM等于A (左操作数 ＋ 3)


            状态 ＝ “完成”


        .判断 (右移 (右操作数, 16) ＝ #无符号char)

            A等于_RAM (右操作数)
            _RAM等于A (左操作数)
            A等于立即数 (0)
            _RAM等于A (左操作数 ＋ 1)
            _RAM等于A (左操作数 ＋ 2)
            _RAM等于A (左操作数 ＋ 3)

            状态 ＝ “完成”


        .判断 (右移 (右操作数, 16) ＝ #有符号char)

            A等于_RAM (右操作数)
            _RAM等于A (左操作数)
            R1等于A ()
            A等于A加R1 ()
            JNC (ROM_缓存使用字节 ＋ 12)
            A等于立即数 (255)
            JMP (ROM_缓存使用字节 ＋ 7)
            A等于立即数 (0)
            _RAM等于A (左操作数 ＋ 1)
            _RAM等于A (左操作数 ＋ 2)
            _RAM等于A (左操作数 ＋ 3)

            状态 ＝ “完成”


        .默认
            状态 ＝ “二元式机器码生成_int32_=_?_运算类型错误或不存在...~!- -”
        .判断结束





    .判断 (右移 (左操作数, 16) ＝ #无符号char指针指向内容 或 右移 (左操作数, 16) ＝ #有符号char指针指向内容)

        .判断开始 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC 或 右移 (右操作数, 16) ＝ #ACC)

            R1等于A ()
            A等于_RAM (左操作数)
            R2等于_RAM (左操作数 ＋ 1)
            R3等于A ()
            A等于立即数 (0)
            A等于A加R1 ()
            RAM等于A ()


            状态 ＝ “完成”


        .默认
            状态 ＝ “二元式机器码生成_char指针指向内容_=_?_运算类型错误或不存在...~!- -”
        .判断结束


    .判断 (右移 (左操作数, 16) ＝ #无符号int指针指向内容 或 右移 (左操作数, 16) ＝ #有符号int指针指向内容)

        .判断开始 (右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int)

            R1等于_RAM (右操作数)
            A等于_RAM (左操作数)
            R2等于_RAM (左操作数 ＋ 1)
            R3等于A ()
            A等于立即数 (0)
            A等于A加R1 ()
            RAM等于A ()

            R1等于_RAM (右操作数 ＋ 1)
            A等于_RAM (左操作数)
            A等于A加1 ()
            _RAM等于A (#RAM缓存1)
            A等于_RAM (左操作数 ＋ 1)
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            R3等于_RAM (#RAM缓存1)
            R2等于A ()
            A等于立即数 (0)
            A等于A加R1 ()
            RAM等于A ()


            状态 ＝ “完成”


        .判断 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数 或 右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组)

            A等于_RAM (左操作数)
            R2等于_RAM (左操作数 ＋ 1)
            R3等于A ()
            A等于立即数 (立即数1)
            RAM等于A ()

            A等于_RAM (左操作数)
            A等于A加1 ()
            R1等于A ()
            A等于_RAM (左操作数 ＋ 1)
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            R2等于A ()
            A等于立即数 (0)
            A等于A加R1 ()
            R3等于A ()
            A等于立即数 (右移 (立即数1, 8))
            RAM等于A ()


            状态 ＝ “完成”




        .默认
            状态 ＝ “二元式机器码生成_int指针指向内容_=_?_运算类型错误或不存在...~!- -”
        .判断结束



    .判断 (右移 (左操作数, 16) ＝ #无符号长int指针指向内容 或 右移 (左操作数, 16) ＝ #有符号长int指针指向内容)

        .判断开始 (右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int)

            R1等于_RAM (右操作数)
            A等于_RAM (左操作数)
            R2等于_RAM (左操作数 ＋ 1)
            R3等于A ()
            A等于立即数 (0)
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (左操作数)
            A等于A加1 ()
            _RAM等于A (#RAM缓存1)
            R1等于_RAM (右操作数 ＋ 1)
            A等于_RAM (左操作数 ＋ 1)
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            R3等于_RAM (#RAM缓存1)
            R2等于A ()
            A等于立即数 (0)
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (左操作数)
            R1等于立即数 (2)
            A等于A加R1 ()
            _RAM等于A (#RAM缓存1)
            R1等于_RAM (右操作数 ＋ 2)
            A等于_RAM (左操作数 ＋ 1)
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            R3等于_RAM (#RAM缓存1)
            R2等于A ()
            A等于立即数 (0)
            A等于A加R1 ()
            RAM等于A ()

            A等于_RAM (左操作数)
            R1等于立即数 (3)
            A等于A加R1 ()
            _RAM等于A (#RAM缓存1)
            R1等于_RAM (右操作数 ＋ 3)
            A等于_RAM (左操作数 ＋ 1)
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            R3等于_RAM (#RAM缓存1)
            R2等于A ()
            A等于立即数 (0)
            A等于A加R1 ()
            RAM等于A ()


            状态 ＝ “完成”


        .判断 (右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #立即数 或 右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组)

            A等于_RAM (左操作数)
            R2等于_RAM (左操作数 ＋ 1)
            R3等于A ()
            A等于立即数 (立即数1)
            RAM等于A ()

            A等于_RAM (左操作数)
            A等于A加1 ()
            R1等于A ()
            A等于_RAM (左操作数 ＋ 1)
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            R2等于A ()
            A等于立即数 (0)
            A等于A加R1 ()
            R3等于A ()
            A等于立即数 (右移 (立即数1, 8))
            RAM等于A ()

            A等于_RAM (左操作数)
            R1等于立即数 (2)
            A等于A加R1 ()
            R1等于A ()
            A等于_RAM (左操作数 ＋ 1)
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            R2等于A ()
            A等于立即数 (0)
            A等于A加R1 ()
            R3等于A ()
            A等于立即数 (右移 (立即数1, 16))
            RAM等于A ()

            A等于_RAM (左操作数)
            R1等于立即数 (3)
            A等于A加R1 ()
            R1等于A ()
            A等于_RAM (左操作数 ＋ 1)
            JNC (ROM_缓存使用字节 ＋ 6)
            A等于A加1 ()
            R2等于A ()
            A等于立即数 (0)
            A等于A加R1 ()
            R3等于A ()
            A等于立即数 (右移 (立即数1, 24))
            RAM等于A ()


            状态 ＝ “完成”


        .默认
            状态 ＝ “二元式机器码生成_int指针指向内容_=_?_运算类型错误或不存在...~!- -”
        .判断结束


    .判断 (右移 (左操作数, 16) ＝ #ACC 或 右移 (左操作数, 16) ＝ #有符号ACC 或 右移 (左操作数, 16) ＝ #无符号ACC)

        .判断开始 (右移 (右操作数, 16) ＝ #立即数 或 右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组)

            A等于立即数 (立即数1)
            状态 ＝ “完成”


        .判断 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC 或 右移 (右操作数, 16) ＝ #ACC)

            状态 ＝ “完成”

        .判断 (右移 (右操作数, 16) ＝ #RAM)

            A等于RAM ()
            状态 ＝ “完成”


        .判断 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int)

            A等于_RAM (右操作数)
            状态 ＝ “完成”


        .判断 (右移 (右操作数, 16) ＝ #无符号char指针指向内容 或 右移 (右操作数, 16) ＝ #有符号char指针指向内容)

            A等于_RAM (右操作数)
            R2等于_RAM (右操作数 ＋ 1)
            R3等于A ()
            A等于RAM ()

            状态 ＝ “完成”


        .判断 (右移 (右操作数, 16) ＝ #待修改跳转地址)

            .判断开始 (待修改条件跳转出口状态 ＝ “真”)

                计数1 ＝ 1
                .判断循环首 (计数1 ＜ 取字节集长度 (待修改条件真跳转地址))
                    修改R2R3 (待修改条件真跳转地址 [计数1 ＋ 1] × 256 ＋ 待修改条件真跳转地址 [计数1], ROM_缓存使用字节)
                    计数1 ＝ 计数1 ＋ 2
                .判断循环尾 ()

                A等于立即数 (1)
                JMP (ROM_缓存使用字节 ＋ 7)

                计数1 ＝ 1
                .判断循环首 (计数1 ＜ 取字节集长度 (待修改条件假跳转地址))
                    修改R2R3 (待修改条件假跳转地址 [计数1 ＋ 1] × 256 ＋ 待修改条件假跳转地址 [计数1], ROM_缓存使用字节)
                    计数1 ＝ 计数1 ＋ 2
                .判断循环尾 ()

                A等于立即数 (0)


                待修改条件真跳转地址 ＝ 到字节集 (“”)
                待修改条件假跳转地址 ＝ 到字节集 (“”)


            .判断 (待修改条件跳转出口状态 ＝ “假”)

                计数1 ＝ 1
                .判断循环首 (计数1 ＜ 取字节集长度 (待修改条件假跳转地址))
                    修改R2R3 (待修改条件假跳转地址 [计数1 ＋ 1] × 256 ＋ 待修改条件假跳转地址 [计数1], ROM_缓存使用字节)
                    计数1 ＝ 计数1 ＋ 2
                .判断循环尾 ()

                A等于立即数 (0)
                JMP (ROM_缓存使用字节 ＋ 7)

                计数1 ＝ 1
                .判断循环首 (计数1 ＜ 取字节集长度 (待修改条件真跳转地址))
                    修改R2R3 (待修改条件真跳转地址 [计数1 ＋ 1] × 256 ＋ 待修改条件真跳转地址 [计数1], ROM_缓存使用字节)
                    计数1 ＝ 计数1 ＋ 2
                .判断循环尾 ()

                A等于立即数 (1)


                待修改条件真跳转地址 ＝ 到字节集 (“”)
                待修改条件假跳转地址 ＝ 到字节集 (“”)


            .默认

            .判断结束


            状态 ＝ “完成”



        .默认
            状态 ＝ “二元式机器码生成_ACC_=_?_运算类型错误或不存在...~!- -”
        .判断结束


    .判断 (右移 (左操作数, 16) ＝ #R1)

        .判断开始 (右移 (右操作数, 16) ＝ #立即数 或 右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组)

            R1等于立即数 (立即数1)
            状态 ＝ “完成”


        .判断 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC 或 右移 (右操作数, 16) ＝ #ACC)

            R1等于A ()
            状态 ＝ “完成”


        .判断 (右移 (右操作数, 16) ＝ #RAM)

            R1等于RAM ()
            状态 ＝ “完成”


        .判断 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int)

            R1等于_RAM (右操作数)
            状态 ＝ “完成”


        .判断 (右移 (右操作数, 16) ＝ #无符号char指针指向内容 或 右移 (右操作数, 16) ＝ #有符号char指针指向内容)

            A等于_RAM (右操作数)
            R2等于_RAM (右操作数 ＋ 1)
            R3等于A ()
            R1等于RAM ()

            状态 ＝ “完成”


        .默认
            状态 ＝ “二元式机器码生成_R1_=_?_运算类型错误或不存在...~!- -”
        .判断结束




    .判断 (右移 (左操作数, 16) ＝ #R2)

        .判断开始 (右移 (右操作数, 16) ＝ #立即数 或 右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组)

            R2等于立即数 (立即数1)
            状态 ＝ “完成”


        .判断 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC 或 右移 (右操作数, 16) ＝ #ACC)

            R2等于A ()
            状态 ＝ “完成”


        .判断 (右移 (右操作数, 16) ＝ #RAM)

            R2等于RAM ()
            状态 ＝ “完成”


        .判断 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int)

            R2等于_RAM (右操作数)
            状态 ＝ “完成”


        .判断 (右移 (右操作数, 16) ＝ #无符号char指针指向内容 或 右移 (右操作数, 16) ＝ #有符号char指针指向内容)

            A等于_RAM (右操作数)
            R2等于_RAM (右操作数 ＋ 1)
            R3等于A ()
            R2等于RAM ()

            状态 ＝ “完成”


        .默认
            状态 ＝ “二元式机器码生成_R2_=_?_运算类型错误或不存在...~!- -”
        .判断结束





    .判断 (右移 (左操作数, 16) ＝ #R3)

        .判断开始 (右移 (右操作数, 16) ＝ #立即数 或 右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组)

            R3等于立即数 (立即数1)
            状态 ＝ “完成”


        .判断 (右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC 或 右移 (右操作数, 16) ＝ #ACC)

            R3等于A ()
            状态 ＝ “完成”


        .判断 (右移 (右操作数, 16) ＝ #RAM)

            R3等于RAM ()
            状态 ＝ “完成”


        .判断 (右移 (右操作数, 16) ＝ #无符号char 或 右移 (右操作数, 16) ＝ #有符号char 或 右移 (右操作数, 16) ＝ #无符号int 或 右移 (右操作数, 16) ＝ #有符号int 或 右移 (右操作数, 16) ＝ #无符号长int 或 右移 (右操作数, 16) ＝ #有符号长int)

            R3等于_RAM (右操作数)
            状态 ＝ “完成”


        .判断 (右移 (右操作数, 16) ＝ #无符号char指针指向内容 或 右移 (右操作数, 16) ＝ #有符号char指针指向内容)

            A等于_RAM (右操作数)
            R2等于_RAM (右操作数 ＋ 1)
            R3等于A ()
            R3等于RAM ()

            状态 ＝ “完成”


        .默认
            状态 ＝ “二元式机器码生成_R2_=_?_运算类型错误或不存在...~!- -”
        .判断结束





    .判断 (右移 (左操作数, 16) ＝ #BIT0)

        .判断开始 (右移 (右操作数, 16) ＝ #立即数 或 右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组)

            .判断开始 (位与 (立即数1, 1) ＝ 1)
                BIT0等于1 ()
            .默认
                BIT0等于0 ()
            .判断结束

            状态 ＝ “完成”


        .默认
            状态 ＝ “二元式机器码生成_BIT0_=_?_运算类型错误或不存在...~!- -”
        .判断结束


    .判断 (右移 (左操作数, 16) ＝ #BIT1)

        .判断开始 (右移 (右操作数, 16) ＝ #立即数 或 右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组)

            .判断开始 (位与 (立即数1, 1) ＝ 1)
                BIT1等于1 ()
            .默认
                BIT1等于0 ()
            .判断结束

            状态 ＝ “完成”


        .默认
            状态 ＝ “二元式机器码生成_BIT1_=_?_运算类型错误或不存在...~!- -”
        .判断结束


    .判断 (右移 (左操作数, 16) ＝ #BIT2)

        .判断开始 (右移 (右操作数, 16) ＝ #立即数 或 右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组)

            .判断开始 (位与 (立即数1, 1) ＝ 1)
                BIT2等于1 ()
            .默认
                BIT2等于0 ()
            .判断结束

            状态 ＝ “完成”


        .默认
            状态 ＝ “二元式机器码生成_BIT2_=_?_运算类型错误或不存在...~!- -”
        .判断结束


    .判断 (右移 (左操作数, 16) ＝ #BIT3)

        .判断开始 (右移 (右操作数, 16) ＝ #立即数 或 右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组)

            .判断开始 (位与 (立即数1, 1) ＝ 1)
                BIT3等于1 ()
            .默认
                BIT3等于0 ()
            .判断结束

            状态 ＝ “完成”


        .默认
            状态 ＝ “二元式机器码生成_BIT3_=_?_运算类型错误或不存在...~!- -”
        .判断结束


    .判断 (右移 (左操作数, 16) ＝ #BIT4)

        .判断开始 (右移 (右操作数, 16) ＝ #立即数 或 右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组)

            .判断开始 (位与 (立即数1, 1) ＝ 1)
                BIT4等于1 ()
            .默认
                BIT4等于0 ()
            .判断结束

            状态 ＝ “完成”


        .默认
            状态 ＝ “二元式机器码生成_BIT4_=_?_运算类型错误或不存在...~!- -”
        .判断结束


    .判断 (右移 (左操作数, 16) ＝ #BIT5)

        .判断开始 (右移 (右操作数, 16) ＝ #立即数 或 右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组)

            .判断开始 (位与 (立即数1, 1) ＝ 1)
                BIT5等于1 ()
            .默认
                BIT5等于0 ()
            .判断结束

            状态 ＝ “完成”


        .默认
            状态 ＝ “二元式机器码生成_BIT5_=_?_运算类型错误或不存在...~!- -”
        .判断结束


    .判断 (右移 (左操作数, 16) ＝ #C)

        .判断开始 (右移 (右操作数, 16) ＝ #立即数 或 右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组)

            .判断开始 (位与 (立即数1, 1) ＝ 1)
                C等于1 ()
            .默认
                C等于0 ()
            .判断结束

            状态 ＝ “完成”


        .默认
            状态 ＝ “二元式机器码生成_C_=_?_运算类型错误或不存在...~!- -”
        .判断结束


    .判断 (右移 (左操作数, 16) ＝ #Z)

        .判断开始 (右移 (右操作数, 16) ＝ #立即数 或 右移 (右操作数, 16) ＝ #常量 或 右移 (右操作数, 16) ＝ #无符号char数组 或 右移 (右操作数, 16) ＝ #有符号char数组 或 右移 (右操作数, 16) ＝ #无符号int数组 或 右移 (右操作数, 16) ＝ #有符号int数组 或 右移 (右操作数, 16) ＝ #无符号长int数组 或 右移 (右操作数, 16) ＝ #有符号长int数组)

            .判断开始 (位与 (立即数1, 1) ＝ 1)
                Z等于1 ()
            .默认
                Z等于0 ()
            .判断结束

            状态 ＝ “完成”


        .默认
            状态 ＝ “二元式机器码生成_Z_=_?_运算类型错误或不存在...~!- -”
        .判断结束




    .判断 (右移 (左操作数, 16) ＝ #RAM 且 (右移 (右操作数, 16) ＝ #ACC 或 右移 (右操作数, 16) ＝ #无符号ACC 或 右移 (右操作数, 16) ＝ #有符号ACC))

        RAM等于A ()
        状态 ＝ “完成”


    .默认
        状态 ＝ “二元式机器码生成_?_=_?_运算类型错误或不存在...~!- -”
    .判断结束




.默认
    状态 ＝ “二元式机器码生成_运算符错误...~!- -”
.判断结束


返回 (状态)
